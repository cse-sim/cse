// Copyright (c) 1997-2019 The CSE Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license
// that can be found in the LICENSE file.

/* cndtypes.def: Data type definitions for CSE

	This file is an input file for the record definer RCDEF.EXE,
	named on the command line, argument 1.

	Information in this file is used to produce:
	        ??? UPDATE FOR CSE some done.
		dtypes.h   #included in cnglob.h
		dttab.cpp  data types table C source code
		rcdef.exe  some values derived from here (incl DTANAME, DTTI
			   1-91) are compiled into rcdef: if changed,
			   run rcdef to produce dtypes.h, recompile
			   & link same, run AGAIN for other files.

	This file is preprocessed for each product but ONLY (possibly) 
	C source code MAY VARY AMOUNG PRODUCTS because the same 
	dtypes.h is used for all products.
	
	Uses of preprocessing of dtypes.def:
	   individual data type choicas may be hidden in selected products 
	      (e.g. C_BUILDTYP2_MOBILE, 8-12-89)
	   presumably, data types could be omitted from products where not
	      needed, provided that all data types compile if PROD==ALPROD. 
	   constants for array dimensions taken from cndefns.h 1-94 */


#include <CNDEFNS.H>	// defines shared between data definitions and CSE code.


/* Data types */

/* The handles are user-assigned values to permit tables for program to
     change minimally when types are added, changed, or deleted.
   Data type handles must be in the range 0x001 to about 0x1b0 and unique.
   A choice (choicb or choicn) data type uses 2-94 nchoices+1 values; others use 1.
   Data type handles are Dttab[] indeces (see dttab.c, written by rcdef.exe).
   Upon changing a handle, recompile code using the type's DTname define. */

/* 'Improved/Simplified' choice data types (choicb) are for CSE and 
   related new products.  They use values 1,2,3 rather than choice handles; 
   source C code is generated. 1-91. */

/* Numeric/Choice values (choicn) hold a choice (as a NAN) or a float, 2-92 */

/* Do we want a form of choice that is stored in 32 bits for CSE runtime variability, without accepting numbers? 3-92 */

/* the Max column is the largest absolute value a data type can
   have (ie if -32,768 to 32,767 is the range, use 32767).
   If checking will not be required for a particular data type,
   use 'none' for Max, and no max will be defined. */

/*****************************************************************************************************************************
* === NON-CHOICE TYPES (intermingling works; separation is aesthetic only)
******************************************************************************************************************************
Type     Extern	   
Name     Name	Decl			Size	Max
-------  -----	---------------------	------	------- */
INT      XINT   "int"           4       none
INTP     XINTP   "int*"         4       none
// UI       --     "unsigned int"         2/4      none
// sizes that differ between versions probably CAN work 2-94 as replacing size with sizeof(decl) in Dttab.cpp.
SI       XSI	"short"			2	32767
// BOOL  --     "short"		  2/4      none		// added 2-92, deleted 2-94 cuz 32 bits in 32 bit windows.
BOO      --     "short"			2       none		// unambiguous 16-bit Boolean 2-94.
USI      XUSI	"unsigned short"	2	65535
LI       XLI	"long"    		4	none
ULI      XULI	"unsigned long"   	4	none
FLOAT    XF		"float"			4	none
FLOATP   --		"float *"  		4	none     
VOIDP    --		"void *"		4	none
DOW      --		"short"  		2	none		// day of week, sun=0 in tdpak (1 less than DOWCH)
MONTH    --		"short"  		2	none		// month, jan=1 in tdpak
CH       XCH	"char"			1	none
CHP      --		"char *"		4	none
UCH      --		"unsigned char"		1	none
TI      --		"SI"			2	none		// (rat) table index (subscript); 0 means unset.

ANAME   -- 		"char[64]"		64	63		// name string for use in RATs:
IDATE    --		"struct {SI year;SI month;SI mday;SI wday;}"
								8	none
ITIME    --     "struct {SI hour;SI min;SI sec;}"
								6	none
DOY      --     "short"    		2	none
SHOY     --     "unsigned"		2	none		// subhour of year: (jday*24 + ihr)*4 + subhr
												//  using jDay 1..365, ihr 0..23, subhr 0..3. 
												//  value 0 thus reserved for unset. Rob 11-93.
// CAUTION: code in tdpak.cpp (at least) assumes IDATETIME is same as an IDATE followed by an ITIME. 9-89.
IDATETIME  -- 	"struct {SI year;SI month;SI mday;SI wday;SI hour;SI min;SI sec;}"
				14	none
LDATETIME  --   "time_t"		4	none
DBL        --   "double"   		8	none		// (was DOUBLE 5-92)
DBLP      --    "double*"       4   none
// PERCENT  --  "float"    		4	none		// restoring PERCENT restores code in cvpak.cpp 12-91
SGTARGP  --	"struct SGTARG *"	4	none		// pointer to SGTARG for SGRAT.targ
MASSLAYERP --	"struct MASSLAYER *"	4	none 
MASSMODELP --	"class MASSMODEL *"		4	none
IZXRATP --		"class IZXRAT *"		4	none
				
VALNDT    --	"struct { void *val; USI ty; }"	6	none	/* value and data type, for user-defined reports 11-91
                        					  	   !!! code in cul.cpp,exman.cpp assumes .val is 1st member.*/

// change ids to be like ZHXTY (bits already match)?
// TCCM      -- 	// terminal capability control method

// for TU.cmLh,cmAr.
TCCM      --   "enum { cmNONE=0,cmSo=1,cmStH=2,cmStC=4,cmStBOTH=6 }"	2      none

// ZHX (zone hvac xfer) type, for ZHX.zhxTy.
//  bit use: control method: 1 = set output, 2 = set temp heat, 4 = set temp cool, 6 = set temp (heat or cool).
//           capability:     8 = terminal local heat, 16 = terminal air heat/cool (Ar), 32 = vent (future).
//  types have bit(s) from each group; 1-bit members are masks for bit testing.  
//  expect AirStBOTH to not be used 3-92; expect nv to need elaboration 3-92.
ZHXTY     -- 
    "enum { So=1,StH=2,StC=4,St=6,Lh=8,LhSo=9,LhStH=10,Ar=16,ArSo=17,ArStH=18,ArStC=20,ArStBOTH=22,nv=32 }"  2	none

// How Terminal Capability or ZHX is being used this subhour.  
//   uNONE includes absent capability, lh off cuz no flow, ah off.  
//   uStH and uStC are for active ZHX only.  uSt=uStH|uStC  and  uPegged=uMn|uMxH|uMxC  are groups for testing only.
//   for TU.useLh,useAr, AH.uUseAr.
TCUSE   --  "enum { uNONE=0, uSo=1, uStH=2, uStC=4, /*uSt=6,*/ uMn=8, uMxH=16, uMxC=32/*,uPegged=56*/}"	2	none

// AH coil in use   12-3-92
COILUSED   --   "enum { cuNONE, cuHEAT, cuCOOL }"	2	none

// what air handler is doing; usually ON, or OFF.
//  Values to set:
//     ahOFF:     central fan off, or floating between zone setpoints under ahTsSp=ZN
//     ahFAN:     central fan on, coils disabled: ahTsSp=ZN2 and zone is floating between setpoints
//     ahHEATING: heating under ZN or ZN2 ts sp control (eg single zone system or PTAC being modelled). fan on, heat coil enabled.
//     ahCOOLING: cooling ditto
//     ahON:      on, other than under ZN or ZN2 control (basic VAV case): may use either heat or cool coil, if present.
//  Bits to test: ahHEATBIT, ahCOOLBIT, (ahFAN).  Code assumes fan on (flow available) if not ahOFF.
AHMODE    --  "enum { ahOFF=0,ahFAN=1,ahHEATBIT=2,ahHEATING=3,ahCOOLBIT=4,ahCOOLING=5,ahON=7 }"	2	none

// TOWERPLANT load case: tldMIN: all fans off; tpTs <= setpoint
//			 tldSP:  tpTs is at setpoint, must determine power
//			 tldMAX: full power, tpTs >= setpoint
TOWLOADCASE  --  "enum { tldMIN, tldSP, tldMAX }"	2	none

// pointer to XFILE structure (xiopak.h), added 1-94 for use in WFILE.
XFILEP  --     "XFILE *"                  4       none
//
// arrays used in WFILE record, 1-94
WFLOC   --     "char[32]"                32       none		// weather file location string (+ \0 + fill byte)
WFLID   --     "char[18]"                18       none		// weather file location id string ( + \0 + fill byte)

WFileFormat -- "enum WFileFormat { UNK=-1,BSGS=1,BSGSdemo,ET1,ET2,CSW,T24DLL,EPW }" 
								2	none	// open wthr file type (comments: wfpak.h)
WFLOC2  --      "char[22]"				22	none	// "location 2" field in ET1 weather files
YACAMP  --	   "class YACAM *"	         4	none
WDYEARP  --	   "class WDYEAR *"	         4	none


// for radiant internal gains 11-95
//  Radiant internal gains distribution table entry
//    struct
//    {  RIGTARGTY targTy;  TI targTi;	// entry type; record subscript in target basAnc: for debugging / poss future repoint.
//       float targFr;			// fraction of zone's radiant internal gain to direct to this target
//       RIGTARG * targP;   		// pointer to member to receive gain rate: MASSBC.rIg, ZNR.qrIgXxx.
//    };
// 	    .targTy  .targTi is for   target member    description
//	   znTot          ZNR          .qrIgTot       zone total rIg, for ebal check
//	   znTotO         --           .qrIgTotO      loss thru light surf to outdoors, for conduction in ebal check
//	   znTotIz        ZNR          .qrIgTotIz     to adjacent zone thru light surf (entries for both zones, + and -)
//	   znCAir         ZNR          .qrIgCAir      to zone CAir (light surface)
//	   massI          MSRAT        .inside.qIg    to mass inside in this zone
//	   massO          MSRAT        .outside.qIg   to mass outside in this zone
//
RIGTARGTY --  "enum { nul,znTot,znTotO,znTotIz,znCAir,massI,massO }"	2	none	// RIGDIST target type
RIGTARG   --  "float"							4	none	// rad int gain target (accum mbr)
RIGDIST   --  "struct { RIGTARGTY targTy; TI targTi; float targFr; RIGTARG * targP; }"	// comments above
								12   	none	// rIg distrib info table entry
RIGDISTP  --  "RIGDIST *"		 4	    none	// (array) ptr, for ZNR.rIgDist

ZNRP		--	"class ZNR *"	 4		none
XSURFP	--	"struct XSURF *"	 4		none
DUCTSEGP -- "class DUCTSEG*"	 4	    none
PIPESEGP -- "class PIPESEG*"	 4	    none


///////////////////////////////////////////////////////////////////////////////
// Choices: text <-> constant mapping
///////////////////////////////////////////////////////////////////////////////
// choice TEXT may specify aliases ("MAIN|ALIAS1|ALIAS2")
// choices may have TEXT beginning a prefix
//    * = hidden (output only, not recognized on input)
//    ! = alias (alternative wording for prior "real" choice
//    ~ = deprecated alias (same as ! but info msg on input)
//    else "normal"
// NOTE: only MAIN yields #define C_XXX_xxx
///////////////////////////////////////////////////////////////////////////////

/****************************************************************************************
* === CHOICB choices: choices that must be made at input/setup time, stored in 2 bytes.
*****************************************************************************************
        type    {  choice choice
        name       name   text    			naming convention: end in -CH.
        -------     ----   ------ */
*choicb NOYESCH  {  NO     "No"				// #define C_NOYESCH_NO 1   <--- rcdef.exe generates these
			  YES    "Yes"				// #define C_NOYESCH_YES 2	 .. in dtypes.h.
		       }
*choicb DGCH {  ZEROFLUX   "ZeroFlux"
			    WATERTABLE "WaterTable"
		       }
*choicb TSCH {  H   "Hourly"
			    SH "Subhourly"
		       }
*choicb SKYMODCH {  ISO   "Isotropic"
			  ANISO "Anisotropic"
		       }
*choicb SKYMODLWCH { 
			  DEFAULT "Default"
			  BERDAHLMARTIN "BerdahlMartin"
			  DRYBULB "DryBulb"
			  BLAST "Blast"
			  }
*choicb EXSHMODELCH {
			  NONE "None"
			  PENUMBRA "Penumbra"
			  }
*choicb SLRINTERPMETH {
			  CSE "CSE"
			  TRNSYS "TRNSYS"
			  }
// day of week choice, sun=1: subtract 1 for DOW for use with tdpak.
*choicb DOWCH    {  SUN "Sun"
			  MON "Mon"
			  TUE "Tue"
			  WED "Wed"
			  THU "Thu"
			  FRI "Fri"
			  SAT "Sat"
		       }
*choicb MONCH     { JAN		"Jan"		// 3-6-92, moved here 2-94
			  FEB		"Feb"		// 
			  MAR		"Mar"		// 
			  APR		"Apr"		// 
			  MAY		"May"		// 
			  JUN		"Jun"		// 
			  JUL		"Jul"		// 
			  AUG		"Aug"		// 
			  SEP		"Sep"		// 
			  OCT		"Oct"		// 
			  NOV		"Nov"		// 
			  DEC		"Dec"		// 
			}                       
*choicb OSTYCH   { WALL	 "Wall"
			 CEIL	 "Ceiling"
			 FLR	 "Floor"
			/* next 3 hidden: output only */
			 DOOR	 "*Door"
			 PERIM	 "*Slab_Perimeter"
			 GLZ	 "*Window"
		       }
*choicb ZNMODELCH   {	// NOTE: code depends on order, change with care
			 CNE "CNE"		// traditional CNE (combined coefficient) model
			 CZM "CZM"		// conditioned convective / radiant
 			 UZM "UZM|!UZX"	// unconditioned convective / radiant
 							//   UZX development alias s/b deprecated someday?
		       }        
*choicb IZNVTYCH {  NONE	  "None"
			  ONEWAY  "OneWay"
			  TWOWAY  "TwoWay"
			  ANEXT "AirNetExt"
			  ANIZ "AirNetIZ"
			  ANHORIZ "AirNetHoriz"
			  ANEXTFAN "AirNetExtFan"
			  ANIZFAN "AirNetIZFan"
			  ANEXTFLOW "AirNetExtFlow"
			  ANIZFLOW "AirNetIZFlow"
			  ANDOAS "AirNetDOAS"
			  ANHERV "AirNetHERV"
			  ANDUCTLK "AirNetDuctLk"
			  ANSYSAIR "AirNetSysAir"
			  ANOAVRLF "AirNetOAVRelief"
			   }
// exterior condition for surface -- SF?.sfExCnd
*choicb EXCNDCH  {  ADIABATIC	"Adiabatic"
			  AMBIENT	"Ambient"
			  SPECT 	"SpecifiedT"
			  ADJZN  	"AdjZn"
			  GROUND	"Ground"
		       }
// surface model -- xs_model (for opaque)
*choicb SFMODELCH { QUICK 	"Quick"			// non-massive
			  DELAYED 	"Delayed"		// program converts to delayed_hour or _subhour per tc
			  AUTO		"Auto"			// program chooses quick, delayed_hour, or _subhour per tc
			  DELAYED_HOUR		"Delayed_hour"		// hourly simulated mass
			  DELAYED_SUBHOUR  	"Delayed_subhour"	// subhourly simulated mass
  			  FD	"FD|!Forward_difference"		// subhourly forward difference
			  KIVA	"Kiva"				// Kiva ground finite difference
		        }
*choicb GROUNDMODELCH {
			  D2INP "DOE2_InputCoeffs"
			  D2COR "DOE2_CorrelationCoeffs"
			  }

*choicb FBXREFCH {
			  SYMMETRY "Symmetry"
			  WALLINT "WallInt"
			  WALLC "WallCenter"
			  WALLEXT "WallExt"
			  FARFIELD "FarField"
			  }

*choicb FBZREFCH {
			  WALLTOP "WallTop"
			  GRADE "Grade"
			  SLABTOP "SlabTop"
			  SLABBOTTOM "SlabBottom"
			  WALLBOTTOM "WallBottom"
			  DEEPGROUND "DeepGround"
			  }

*choicb CONVMODELCH {
			  INPUT "Input"
			  ASHRAE "ASHRAE"
			  AKBARI "Akbari"
			  WINKELMANN "Winkelmann"
			  WALTON "Walton"
			  MILLS "Mills"
			  TARP "TARP"
			  DOE2 "DOE2"
			  UNIFIED "Unified"
			  }
*choicb RSYSMODECTRLCH {
		    OFF "Off"
			HEAT "Heat"
			COOL "Cool"
			AUTO "Auto"
			}
*choicb RSYSTY {
			ACFURN "ACFurnace"
			ACRES  "ACResistance"
			ACPKGRM "ACPkgRoom"
			ACPKGRMFURN "ACPkgRoomFurnace"
			ACPKGRMRES "ACPkgRoomResistance"
			ASHP   "ASHP"
			ASHPHYD "ASHPHydronic"
			ASHPPKGRM "ASHPPkgRoom"
			ASHPVC  "VCHP2"
			WSHP "WSHP"
			AC	   "AC"
			FURN   "Furnace"
			RES	   "Resistance"
			FANCOIL "FanCoil"
		  }
*choicb RSYSOAVTYCH {
			NONE "None"
			FIXEDFLOW "FixedFlow"
			VARFLOW   "VarFlow"
		  }
*choicb RSYSDEFROSTMODELCH {
            NONE        "None"
			REVCYCLE    "RevCycle"
			REVCYCLEAUX "RevCycleAux"
		  }
*choicb AUXHEATTY {
		NONE  "None"
		RES   "Resistance"
		FURN  "Furnace"
		}
*choicb AUXHEATCTRL {
        LO  "Lockout"
		CYCLE "Cycle"
		ALT  "Alternate"
	    }

// DHW choices

*choicb WSCALCMODECH {
			PRERUN "PreRun"
			SIM "Simulate"
		}
*choicb WHHEATSRCCH {
			ELRES "Resistance"
			FUEL "Fuel"
			ASHP "ASHP"
			ASHPX "ASHPX"
			ELRESX "ResistanceX"
         }
*choicb WHTYPECH {
			STRGSML "SmallStorage"
			STRGLRG "LargeStorage"
			INSTSML "SmallInstantaneous"
			INSTLRG "LargeInstantaneous"
			INSTUEF "InstantaneousUEF"
			BUILTUP "BuiltUp"
          }
*choicb WHASHPTYCH {					// comments from Ecotope, see hphw.hh
			RESTANKNOUA "ResTankNoUA"		// a simple resistance tank, but with no tank losses
			RESTANK "ResTank"				// a more-or-less realistic resistance tank
			BASICINT "BasicIntegrated"		// basic integrated HPWH
			AOSMITHPHPT60 "AOSmithPHPT60"	// 60 gallon Voltex
			AOSMITHPHPT80 "AOSmithPHPT80"	// 80 gallon Voltex
		    AOSMITHHPTU50 "AOSmithHPTU50"	// 50 gallon AOSmith HPTU
			AOSMITHHPTU66 "AOSmithHPTU66"	// 66 gallon AOSmith HPTU
			AOSMITHHPTU80 "AOSmithHPTU80"	// 80 gallon AOSmith HPTU
			AOSMITHHPTU80DR "AOSmithHPTU80DR"	// 80 gallon AOSmith HPTU (demand reduction variant)
			AOSMITHCAHP120 "AOSmithCAHP120"	// 120 gallon AOSmith
			SANDEN40 "Sanden40"				// Sanden 40 gallon CO2 external heat pump
			SANDEN80 "Sanden80"				// Sanden 80 gallon CO2 external heat pump
			SANDEN120 "Sanden120"			// Sanden 120 gallon CO2 external heat pump
			SANDENGS3 "SandenGS3"			// Sanden GS3 compressor CO2 external
			GE2012 "GE2012"					// 2012 era GeoSpring
			GE2014 "GE2014"					// 2014 50 gal GE run in the efficiency mode
			GE2014_80 "GE2014_80"			// 2014 80 gal GE model run in the efficiency mode
			GE2014_80DR "GE2014_80DR"		// 2014 80 gal GE model run in the efficiency mode (demand reduction variant)
			GE2014STDMODE "GE2014StdMode"	// 2014 50 gal GE run in standard mode
			GE2014STDMODE_80 "GE2014StdMode80"	// 2014 80 gal GE run in standard mode
			BWC202065  "BWC202065"			//  2020 Bradford White 65 gallon unit
			RHEEMHB50 "RheemHB50"			// newish Rheem (2014 model?)
			RHEEMHBDR2250 "RheemHBDR2250"	// 50 gallon, 2250 W resistance Rheem HB Duct Ready
			RHEEMHBDR4550 "RheemHBDR4550"	// 50 gallon, 4500 W resistance Rheem HB Duct Ready
			RHEEMHBDR2265 "RheemHBDR2265"	// 65 gallon, 2250 W resistance Rheem HB Duct Ready
			RHEEMHBDR4565 "RheemHBDR4565"	// 65 gallon, 4500 W resistance Rheem HB Duct Ready
			RHEEMHBDR2280 "RheemHBDR2280"	// 80 gallon, 2250 W resistance Rheem HB Duct Ready
			RHEEMHBDR4580 "RheemHBDR4580"	// 80 gallon, 4500 W resistance Rheem HB Duct Ready

			RHEEM2020PREM40 "Rheem2020Prem40"      // 40 gallon, Rheem 2020 Premium
			RHEEM2020PREM50 "Rheem2020Prem50"	   // 50 gallon, Rheem 2020 Premium
			RHEEM2020PREM65 "Rheem2020Prem65"	   // 65 gallon, Rheem 2020 Premium
			RHEEM2020PREM80 "Rheem2020Prem80"	   // 80 gallon, Rheem 2020 Premium
			RHEEM2020BUILD40  "Rheem2020Build40"   // 40 gallon, Rheem 2020 Builder
			RHEEM2020BUILD50  "Rheem2020Build50"   // 50 gallon, Rheem 2020 Builder
			RHEEM2020BUILD65  "Rheem2020Build65"   // 65 gallon, Rheem 2020 Builder
			RHEEMHBDRBUILD80  "Rheem2020Build80"   // 80 gallon, Rheem 2020 Builder

			STIEBEL220E "Stiebel220E"				// Stiebel Eltron (2014 model?)

			AOSMITHSHPT50 "AOSmithSHPT50"			// AOSmith add'l models (added 3-24-2017)
			AOSMITHSHPT66 "AOSmithSHPT66"
			AOSMITHSHPT80 "AOSmithSHPT80"

			GENERIC1 "GenericTier1"			// Generic Tier 1
			GENERIC2 "GenericTier2"			// Generic Tier 2
			GENERIC3 "GenericTier3"			// Generic Tier 3
			GENERIC "Generic"				// general generic (parameterized by EF and vol)
			UEF2GENERIC "UEF2Generic"			// experimental UEF=2
			WORSTCASEMEDIUM "WorstCaseMedium"	// UEF2Generic alias (supports pre-existing test cases)
			AWHSTIER3GENERIC40 "AWHSTier3Generic40"		// 40 gal tier 3 generic (6-2021)
			AWHSTIER3GENERIC50 "AWHSTier3Generic50"		// 50 gal tier 3 generic (6-2021)
			AWHSTIER3GENERIC65 "AWHSTier3Generic65"		// 65 gal tier 3 generic (6-2021)
			AWHSTIER3GENERIC80 "AWHSTier3Generic80"		// 80 gal tier 3 generic (6-2021)

			COLMACCXV5_SP  "ColmacCxV5_SP"	// Colmac CxA-xx modular external HPWHs (single pass mode)
			COLMACCXA10_SP "ColmacCxA10_SP"
			COLMACCXA15_SP "ColmacCxA15_SP"
			COLMACCXA20_SP "ColmacCxA20_SP"
			COLMACCXA25_SP "ColmacCxA25_SP"
			COLMACCXA30_SP "ColmacCxA30_SP"

			COLMACCXV5_MP  "ColmacCxV5_MP"	// Colmac CxA-xx modular external HPWHs (multi-pass mode)
			COLMACCXA10_MP "ColmacCxA10_MP"
			COLMACCXA15_MP "ColmacCxA15_MP"
			COLMACCXA20_MP "ColmacCxA20_MP"
			COLMACCXA25_MP "ColmacCxA25_MP"
			COLMACCXA30_MP "ColmacCxA30_MP"
								   
			NYLEC25A_SP  "NyleC25A_SP"		// Nyle Cxx external HPWHs (SP = single pass mode)
			NYLEC60A_SP  "NyleC60A_SP"
			NYLEC90A_SP  "NyleC90A_SP"
			NYLEC125A_SP "NyleC125A_SP"
			NYLEC185A_SP "NyleC185A_SP"
			NYLEC250A_SP "NyleC250A_SP"

			NYLEC60AC_SP  "NyleC60A_CWP_SP"	// Nyle Cxx external SP HPWHs with cold weather package
			NYLEC90AC_SP  "NyleC90A_CWP_SP"
			NYLEC125AC_SP "NyleC125A_CWP_SP"
			NYLEC185AC_SP "NyleC185A_CWP_SP"
			NYLEC250AC_SP "NyleC250A_CWP_SP"

			MITSU_QAHVN136TAUHPB_SP "Mitsubishi_QAHV_N136TAU_HPB_SP"

			// NYLEC25A_MP  "NyleC25A_MP"		// Nyle Cxx external HPWHs (MP = multi-pass mode)
			NYLEC60A_MP  "NyleC60A_MP"
			NYLEC90A_MP  "NyleC90A_MP"
			NYLEC125A_MP "NyleC125A_MP"
			NYLEC185A_MP "NyleC185A_MP"
			NYLEC250A_MP "NyleC250A_MP"

			NYLEC60AC_MP  "NyleC60A_CWP_MP"		// Nyle Cxx external MP HPWHs w/ cold weather package
			NYLEC90AC_MP  "NyleC90A_CWP_MP"
			NYLEC125AC_MP "NyleC125A_CWP_MP"
			NYLEC185AC_MP "NyleC185A_CWP_MP"
			NYLEC250AC_MP "NyleC250A_CWP_MP"

			RHEEM_HPHD60HNU_201_MP "Rheem_HPHD60HNU_MP"
			RHEEM_HPHD60VNU_201_MP "Rheem_HPHD60VNU_MP"
			RHEEM_HPHD135HNU_483_MP "Rheem_HPHD135HNU_MP"
			RHEEM_HPHD135VNU_483_MP "Rheem_HPHD135VNU_MP"

			SCALABLE_SP "Scalable_SP"		// single pass scalable type for autosized standard design
			SCALABLE_MP "Scalable_MP"		// multipass scalable type for autosized standard design
		}

*choicb WHRESTYCH {			// resistance heater types
       TYPICAL "Typical"
	   SWINGTANK "SwingTank"
}

*choicb DHWEUCH {			// hot end uses
			FAUCET "Faucet"
			SHOWER "Shower"
			BATH "Bath"
			CWASHR "CWashr"
			DWASHR "DWashr"
			COUNT "*Count"	// hidden, must be last
							//   used for checking array dim
		  }
*choicb DHWEUXCH {			// extended hot water end uses
							// same as Total + Unknown + DHWEUCH
			TOTAL "Total"
			UNKNOWN "Unknown"
			FAUCET "Faucet"
			SHOWER "Shower"
			BATH "Bath"
			CWASHR "CWashr"
			DWASHR "DWashr"
			COUNT "*Count"
		  }

*choicb DHWBRANCHMODELCH {
			T24DHW "T24DHW"
			DRAWWASTE "DRAWWASTE"
			DAYWASTE "DAYWASTE"
		  }
*choicb DHWLSEGTYCH { RET "return" SUP "supply"  }
*choicb DWHRTYCH { HORIZ "horizontal" VERT "vertical" SETEF "SetEF" }
*choicb DHWDRMETH { NONE "none" SCHED "schedule" /* TDV */ }

// PV choices
*choicb PVMODCH {
			STD "Standard"
			PRM "Premium"
			THF "ThinFilm"
			CST "Custom"
		  }
*choicb PVARRCH {
			FXDOR "FixedOpenRack"
			FXDRF "FixedRoofMount"
			1AXT "OneAxisTracking"
			2AXT "TwoAxisTracking"
		  }

// shade / PVARRAY attachment
*choicb MOUNTCH {
		BLDG "Building"
		SITE "Site"
		}

// fenestration model -- gtModel
*choicb FENMODELCH { SHGC "SHGC"		// Solar Heat Gain Coefficient model (pre-existing CSE)
			ASHWAT "ASHWAT"					// ASHWAT complex fenestration model (added 11-8-2010)
			}

// side of surface receiving solar gain, for SDI.sdSide
*choicb SIDECH    { INTERIOR	"Interior"
			  EXTERIOR	"Exterior"
			}

// file status for report/export files
*choicb FILESTATCH { OVERWRITE	"Overwrite"	// default
                          NEW		"New"		// error if exists
                          APPEND	"Append"
                        }
// interval ending/starting type for cnguts.cpp, report frequency for cncult.cpp/cgresult.cpp, etc
//   CAUTION: code assumes order of values increasing from 1=YEAR toward shorter time intervals, with HS between H and S.
*choicb IVLCH     { Y	"Year"
                    M	"Month"
                    D	"Day"
                    H	"Hour"
                    S	"Subhour"
                    HS	"HourAndSub"		// report frequency only
			}
// report/export type
*choicb RPTYCH    { ERR     "ERR" 		// "Error Messages"
                    LOG		"LOG"		// "Log" (runtime remarks)
                    INP		"INP"		// "Inp" (input echo)
                    SUM		"SUM"		// "Summary"
                    ZDD		"ZDD"		// "Zone Data Dump"
                    ZST		"ZST"		// "Zone Statistics"
                    ZEB		"ZEB"		// "Zone Energy Balance"
                    MTR		"MTR"		// "Meter"
                    UDT		"UDT"		// "User-defined Table"
                    AH		"AH"  		// "Air Handler"
                    AHSIZE	"AHSIZE"	// "Air Handler Size"
                    AHLOAD	"AHLOAD"	// "Air Handler Load"
                    TUSIZE	"TUSIZE"	// "Terminal Size"
                    TULOAD	"TULOAD"	// "Terminal Load"
					DHWMTR  "DHWMTR"	// "DHW Meter (hot water use, gal)"
					AFMTR   "AFMTR"		// "Airflow Meter"
                   }

*choicb RPTHDCH  { NO     "No"
                   YES    "Yes"
				   YESIF  "YesIfNew"
                   COL    "ColumnsOnly"
                   COLIF  "ColumnsOnlyIfNew"
                  }


// justification for column in user-defined reports
*choicb JUSTCH    { L             "Left"		// 
                    R             "Right"		// 
                  }

// Energy end use
// CAUTION: MTR_IVL_SUB record (cnrecs.def) member ordering MATCHES order of choices.
*choicb ENDUSECH	{
			  CLG		"Clg"	// space cooling.
								// CAUTION: code (cnguts,cgresult.cpp) assumes CLG is 1st.
			  HTG		"Htg"	// space heating incl heat pump compressor
			  HPHTG		"HPBU"	// heat pump resistance heating (backup and defrost)
			  DHW		"DHW"	// domestic (service) hot water heating
			  DHWBU		"DHWBU"	// domestic (service) hot water heating backup
			  DHWMFL	"DHWMFL"// domestic (service) hot water DHWLOOP energy
			  FANC		"FanC"	// fan energy for AC and cooling ventilation
			  FANH		"FanH"	// fan energy for heating
			  FANV		"FanV"	// fan energy for IAQ venting
			  FAN		"Fan"	// fan energy for other purposes
			  AUX		"Aux"	// HVAC auxiliary, not including fans
			  PROC		"Proc"	// process energy
			  LIT		"Lit"	// lighting
			  RCP		"Rcp"	// receptacles
              EXT       "Ext"	// outdoor lights, etc
              REFR		"Refr"	// refrigerator, freezer, etc
              DISH		"Dish"	// dishwashing
              DRY		"Dry"	// clothes drying
              WASH		"Wash"	// clothes washing
              COOK		"Cook"	// cooking
              USR1      "User1"	// User-defined catagories 1 and 2 for user-defined breakdown of GAINs
              USR2      "User2" //
			  BT		"BT"	// battery energy
              PV        "PV"	// CAUTION: code (cnguts,cgresult.cpp) assumes C_ENDUSECH_PV is largest.
			}

// air flow categories
// CAUTION: AFMTR_IVL record (cnrecs.def) member ordering MATCHES order of choices.
*choicb AFCAT	{
    // UNKNOWN = 0
    INFEX   "InfilEx"
	VNTEX   "VentEx"
	FANEX   "FanEx"
	INFUZ   "InfilUz"
	VNTUZ   "VentUz"
	FANUZ   "FanUz"
	INFCZ   "InfilCz"
	VNTCZ   "VentCz"
	FANCZ   "FanCz"
	DUCTLK  "DuctLk"
	HVAC    "HVAC"
	NONE    "None"
	COUNT   "*Count"
	}

// holiday case -- nth <weekday> of <month> (tdpak:tdHoliDate)
*choicb HDAYCASECH { 
			  FIRST 	"first" 	// 
			  SECOND	"second"	// 
			  THIRD 	"third"  	// 
			  FOURTH	"fourth"	// 
			  LAST  	"last"  	// 
			}

*choicb FANAPPCH 	{ 
			  SFAN  	"ah_supply"			// fan application 3-92
			  RFAN		"ah_return_relief"
			  TFAN		"terminal"
			  XFAN		"exhaust"
			  ZFAN		"interzone"
			  DSFAN		"DOAS_Supply"
			  DEFAN		"DOAS_Exhaust"
			}
			
*choicb FANTYCH   { NONE		"none"				// fan type/position 3-92
			  DRAWTHRU	"drawthru"	
			  BLOWTHRU	"blowthru"	
			  RETURN	"return"	
			  RELIEF	"relief"	
			  SERIES	"series"	
			  PARALLEL	"parallel"	
			  EXHAUST	"exhaust"		//
			}
			
*choicB MOTTYCH		// (fan) motor type
			{ PSC "PSC"		// permanent split capacitor
			  BPM "BPM"		// brushless permanent magnet (aka ECM)
			}

*choicb MOTPOSCH { INFLO		"in_flow"			// (fan) motor position choice 3-92
			INRETURN	"in_return"
			EXTERNAL	"external"		//
		      }
*choicb FANPLCH { VARSPEED		"varspeed"		// fan part-load control method 3-92		
			CYCLE		"cycle"		
			AF_VANES		"af_vanes"		
			AF_DAMPERS		"af_dampers"		
			FC_VANES		"fc_vanes"		
			FC_DAMPERS		"fc_dampers"		
			VARPITCH_AXIAL	"varpitch_axial"	//
		      }
*choicb COILAPPCH { AHCC		"ahhc"			// coil application: air handler heat coil
			  AHHC		"ahhc"			// ah cool coil
			  TUHC		"tuhc"			// terminal heat coil  d2
			}
*choicb COILTYCH  { NONE		"none"			// coil type
			  ELEC  	"electric"	
			  DX		"dx"		
			  CHW		"chw"		
			  HW		"hw"		
			  GAS		"gas"
			  OIL       "oil"
              AHP       "ahp"			// air source heat pump
			}
*choicb ECOTYCH   { NONE		"none"  		// economizer type
			  NONINTEGRATED	"nonintegrated"	
			  TWO_STAGE	"two_stage"	
			  INTEGRATED "integrated"		//
			}
*choicb DUCTTYCH { RET "return"
				   SUP "supply"
				  }
*choicb OAMNCH    { VOL    	"volume"  		// minimum outside air control method
			  FRAC  	"fraction"		// 
			}
*choicb EXSHDCH { NONE "none"
			  INSCRN "inscrn"
			}
*choicb INSHDCH { NONE "none"
			  DRAPEMED "DrapeMed"
			}
*choicb HUMTHCH   { ROB           "rob"  			// humidity calc method, rob's or Niles', 6-92
                    PHIL          "phil"			//
                        }
*choicb OFFONCH   { OFF           "off"				// off-on non-variable, eg for HEATPLANT.hpMode, 9-92
                    ON            "on"			// 	see also OFFONVC, below
                        }
*choicb TPSTGCH   { TOGETHER      "together"  		// towerplant staging
                    LEAD          "lead"      		//
                  }                          
*choicb CTTYCH    { ONESPEED      "onespeed"    		// cooling tower (fan control) type 
                    TWOSPEED      "twospeed"  
                    VARIABLE      "variable"  		//
                  }
*choicb CCHCM  { NONE          "none"			// crankcase heater presence & control method
			  CONSTANT      "constant"		//   always on
			  CONSTANT_CLO  "constant_clo"		//             + compressor lock out
			  PTC           "ptc"			//   proportional temperature control
			  PTC_CLO       "ptc_clo"
			  TSTAT         "tstat"			// 1b4  outdoor temp  
			  //TSTAT_CLO omitted cuz wd be same as TSTAT
                        }
*choicb DIFFSAMECH { DIFF   	"different"		// same or different 6-95
			   SAME   	"same"
			 }

/**********************************************************************************************************************
* === runtime variable choices, suffix -VC: do as CHOICN's here, but use TYCH in cncult.cpp tables to prevent number input.
***********************************************************************************************************************
         type    {  choice 	choice
         name       name   	text   			naming convention: end in -NC.
         -------     ----   	------ */
*choicn AHSCHVC	{ OFF 		"off"		// air handler schedule 3-92
			  ON		"on"		// perhaps later also WARMUP and/or OPTIMUM_START
			}
// 2 spares
*choicn OFFAVAILVC { OFF		"off"		// coil schedules 3-92
			   AVAIL	"avail"
			 }
*choicn TFANSCHVC {	OFF 	"off"		// terminal fan schedule 3-92
				ON 	"on"
				HEATING	"heating"
				VAV	"vav"		//
			}
*choicn OFFONVC	{ OFF		"off"		// zone exhast fan schedule; general use
			  ON		"on"		// 	see also non-variable OFFONCH, above
			}
*choicn NOYESVC   { NO     "No"			// ahFanCyCoil 6-92; general use
			  YES    "Yes"				
		        }
*choicn OFFAVAILONVC { OFF        "off"		// eg for HEATPLANT.hpSched, 9-92.
                       AVAIL      "avail"
                       ON         "on"		// 
                     }
                     
*choicn VENTAVAILVC {			// vent availability
			NONE "None"
			WHOLEBLDG "WholeBuilding"
			ZONAL "Zonal"
			RSYSOAV   "RSYSOAV"
		  }

*choicn BATCTRLALGVC {
		    DEFAULT "Default"
			TDVPEAKSAVE "TDVPeakSave"
			}

*choicn DHWDRSIG {
	ON "On"
	TOO "TOO"
	TOOLOR "TOOLOR"
	TOOLOC "TOOLOC"
	TOT "TOT"
	TOTLOR "TOTLOR"
	TOTLOC "TOTLOC"
	LOC "LOC"
	LOR "LOR"
	LOCLOR "LOCLOR"
	COUNT "*Count"	// hidden
  }

/**********************************************************************************************************************
** === CHOICN types: can hold these choices (as NAN), or float number 
***********************************************************************************************************************
         type    {  choice	choice			naming convention: end in -NC.
         name       name   	text    		or (mainly field names): numeric type (units used) _ choice type
         -------     ----   	------ */

*choicn TSCMNC     		// ah supply temp setpoint temperature or control method (field TEMP_TSCM) 3-92
		  {	RA	"ra"			// return air.     rcdef.exe generates "#define C_TSCMNC_RA 0x7f81" ..
			WZ	"wz"			// warmest zone     .. "#define C_TSCMNC_WZ 0x7f82" in dtypes.h.
			CZ	"cz"			// coolest zone
			ZN  "zn"			// zone ctrl of ah & ts sp, ah off when no heat/cool demand
            ZN2	"zn2"			// zone ctrl of ah & ts sp, ah fan runs when no heat/cool demand, 8-92
		  }
*choicn RANC				// economizer outside air temp (field TEMP_RA) or enthalpy (ENTH_RA) hi limit 3-92
		  { RA	"ra"			// return air
		  }

*END

// end of cndtypes.def
