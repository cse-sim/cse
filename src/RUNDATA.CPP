// Copyright (c) 1997-2019 The CSE Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license
// that can be found in the LICENSE file.

// rundata.cpp  runtime (as opposed to input time) data objects for CSE


//-------------------------------- INCLUDES ---------------------------------
#include <cnglob.h>

#include <ancrec.h>	// record: base class for rccn.h classes
#include <rccn.h>	// WSHADRATstr ZNRstr

#include <vrpak.h>	// VROUTINFO5

#include <cnguts.h>	// decls for this file

/*------------------ HOURLY SIMULATOR GLOBAL VARIABLES -------------------*/

/*---- OBSOLETE Record Array Table base comments -----*/

/* These tables contain a checked and processed representation of some
   aspects of the building.  They are set by caller cncult.

   Each Rat is a DM array of records pointed to by a small static "base"
   structure.

   Each RATBASE includes .p, properly typed ptr to record array table,
               and .n, count of entries for easy access for loops,
               and     info necessary for ratpak fcns to allocate rat.

   In each RAT there are n+1 entries: data in 1..n,
                                      entry 0 is 0's for "grounding".

   XXRATBASEs are generated with makXXRATBASE macros which are defined
   (for crdbt.h Rats) in rcld.h, which is generated by rcdef.exe
   from info in records.def. */

/* RAT naming conventions:
   XxRat = documentary name (for comments) of Rat of type XXRAT.
   XxR = name of XXRATBASE for XxRat (crdbt.h/cpp)
   xxe = name for local pointers to an entry in XxRat, ie &XxR.p[ ]
   record types (records.def) end in RAT.  From this rcdef.exe generates:
      XXRAT:    typedef for an entry (record) in XxRAT (dtypes.h)
      XXRATstr:  structure for ditto (rcyy.h)
      XXRATBASE:  typedef for the static "BASE" for XxRat (dtypes.h)
      XXRATBASEstr: structure for ditto (rcyy.h)
      makXXRATBASE(name): macro to declare a XXRATBASE (rcyy.h), init'd
                          with the info needed to allocate the Rat. */

///////////////////////////////////////////////////////////////////////////////
// Record Array base/anchors (basAncs)
// see members and comments in cnrecs.def.
///////////////////////////////////////////////////////////////////////////////
// order of construction may control order of display by -p.  Input record basAncs are in cncult.cpp.
// "Top" record basAnc. Top record contains top-level / once-only stuff.  Access as Top.mbr or TopR.p->mbr.
// Set (and used): cncult.cpp (from TopiR).  Used: cnguts (and frees .wfname), cgwthr. 2-91. probably now many more uses 1-92.
makAncTOPRAT( TopR);   		// "Top" info record's basAnc. rccn.h macro, ancrec.h template class, ancrec.cpp constructor.
TOPRAT Top( (anc<TOPRAT> *)&TopR, 0);  	// Top's one static record (entry).  statSetup call is in cgPreInit, below.
// pending >>> make constructor for rec 0 conditionally init top, so statSetup not needed. 2-92.
// weather. 1-record static basAncs for probe-ability
makAncWFILE( WfileR);						// basAnc for...
WFILE Wfile( (anc<WFILE>  *)&WfileR, 0);	// record containing info on file and buffer for day's data (c'tor call).
makAncWFDATA( WthrR);						// basAnc for...
WFDATA Wthr( (anc<WFDATA>  *)&WthrR, 0);	// record containing current hour's weather data, extracted and adjusted.
makAncWFDATA2( WthrNxHrR,"weatherNextHour");	// basAnc for...
WFDATA WthrNxHr( (anc<WFDATA>  *)&WthrNxHrR, 0);	// record containing current next hour's weather data,
													// extracted and adjusted, for cgWthr.cpp read-ahead
makAncDESCOND( DcR);						// design conditions

// zones, transfers, gains, meters
makAncZNR( ZrB);			// Zones runtime info: input set in cncult.
makAncZNRES( ZnresB);		// Month and year simulation results for zones
makAncIZXRAT( IzxR);		// interZone transfers -- conductions / ventilations between zones
makAncGAIN( GnB);			// (zone) gains run records basAnc
makAncMTR( MtrB);			// meters (energy use) run records basAnc
makAncAFMTR(AfMtrR);		// air flow meters run basAnc

// hvac: residential system model
makAncEQUIPDATA(EdR);		// ASHRAE 205 equipment data
makAncRSYS( RsR);			// compliance-oriented simple residential system model
makAncRSYSRES( RsResR);		// RSYS results
makAncDUCTSEG( DsR);		// duct segments
makAncDUCTSEGRES( DsResR);	// DUCTSEG results

// DHW: California compliance-oriented water heating
makAncDHWMTR( WMtrR);		// DHW meters
makAncDHWSYS( WsR);			// DHW system
makAncDHWSYSRES(WsResR);	// DHWSYS results
makAncDHWHEATER( WhR);		// DHW heater
makAncDHWHEATREC( WrR);		// DHW heat recovery
makAncDHWTANK( WtR);		// DHW tank
makAncDHWPUMP( WpR);		// DHW pump
makAncDHWLOOP( WlR);		// DHW loop
makAncDHWLOOPSEG( WgR);		// DHW loop segment
makAncDHWLOOPBRANCH( WbR);	// DHW loop branch
makAncDHWLOOPPUMP( WlpR);	// DHW loop pump
makAncDHWHEATER2( WlhR, "DHWLoopHeater");		// DHW loop heater (aka "swing tank")
makAncDHWDAYUSE( WduR);		// DHW day use
makAncDHWUSE( WuR);			// DHW use

makAncDHWSOLARSYS(SwhR);	// DHW solar system
makAncDHWSOLARCOLLECTOR(ScR);	// DHW solar collector

makAncPVARRAY(PvR);			// PV array
makAncBATTERY(BtR);			// Battery

makAncSHADEX( SxR);			// Shading

// hvac: terminals, air handlers, plant
makAncTU( TuB);  			// terminals
makAncAH( AhB); 			// air handlers
makAncZHX( ZhxB);			// Zone HVAC transfers: these relate to terminals & air handlers.
makAncAHRES( AhresB);		// air handler results
makAncHEATPLANT( HpB);		// HEATPLANT run info
makAncBOILER( BlrB);     	// BOILER run info
makAncCOOLPLANT( CpB);		// COOLPLANTs run info
makAncCHILLER( ChB);		// CHILLERs run info
makAncTOWERPLANT( TpB);    	// TOWERPLANTs run info

// surfaces and constructions
makAncXSRAT( XsB);		// runtime XSURFs: radiant/conductive coupling-to-ambient info for (light) os, doors,
						//  glz, & perims, and solar gains of mass outsides ("mass walls").
makAncWSHADRAT( WshadR);// Window shading info: entry for each window that has fin and/or overhang(s).
						//    Accessed via subscript in XSURF.iwshad.
makAncMSRAT( MsR);		// Masses
makAncKIVA(KvR);		// Kiva Instances
makAncSGRAT( SgR);		// Solar gains for current month/season, calculated when month or season
						//   [or other input] changes.
// construction: CON/LR/MAT have input rats only.
makAncGT( GtB);  		// glazeTypes runtime records, 12-94.
// reports &c run rats. these persist thru autosize & main simulation.
// note: runtime info for RE/EXPORTFILEs: all there is in UnspoolInfo, below.
// note: runtime info for RE/EXPORTs is in DvriB and RcolB/XcolB, various globals and Top and ZnR members, and UnspoolInfo.p
makAncDVRI( DvriB);		// Date-dependent Virtual Reports/exports Info
makAncCOL( RcolB);		// reportCols info for user-defined reports
makAncCOL2( XcolB,"exportCol");	// exportCols info for user-defined exports
// imports
makAncIMPF( ImpfB);		// IMPORTFILEs runtime info 2-94
makAncIFFNM( IffnmB);		// Import File Field Names compile support & runtime info 2-94
// holidays
makAncHDAY( HdayB);		// holidays. default records supplied
// when adding a basAnc, add it to basAnc::free list in cgDone, below.

// ---- Input Globals: set externally in cse.cpp

const char* cmdLineArgs = NULL;			// command line arguments (argv[ 1 ..]) (in dm)
										//   suitable for display (wrapped if long)
const char* exePath = NULL;				// path(s) to .exe file or dll;exe in dm
const char* InputFileName = NULL;		// input file name as entered by user: no added path nor defaulted ext.
										//   = pts into cne3
const char* InputFilePath = NULL;		// input file full path. ptr into cse.cpp:cne3() stack.
const char* InputFilePathNoExt = NULL;	// input file full pathName with any .ext removed, in dm.
const char* InputDirPath = NULL;		// drive/dir path to input file, in dm.
VROUTINFO5 PriRep = { { 0 } };	// information about primary output file, for appending final end-session info in cse.cpp
								// (after report file input records have been deleted).
								// out file members set from cncult (at input) and vrpak (at close)
								// has room for 5 vrh's (set where used, in cse.cpp).

// run serial number in lieu of future status file, 7-92.
SI cnRunSerial = 0;		// incremented in cgInit; copied to Topi.runSerial in cncult2\TopStarPrf2.

// virtual report unspooling specifications for this run
VROUTINFO* UnspoolInfo = NULL;	// dm block of info re unspooling virtual reports into actual report files.
								// set up in cncult.cpp; passed to vrUnspool then dmfree'd in cse.cpp;
								// vrpak.h struct.  Note: vrUnspool dmfree's .fNames in info as it closes files.

///////////////////////////////////////////////////////////////////////////////
// utility functions
///////////////////////////////////////////////////////////////////////////////


// end of rundata.cpp
