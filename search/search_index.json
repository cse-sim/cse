{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>CSE is a general purpose building simulation model developed primarily to perform the required calculations for the California Building Energy Code Compliance for Residential buildings (CBECC-Res) software.</p>"},{"location":"#cse-user-manual","title":"CSE User Manual","text":"<p>Work-in-progress</p>"},{"location":"#cse-source-code","title":"CSE Source Code","text":"<p>The CSE source code is hosted on GitHub.</p>"},{"location":"input-structure/","title":"Input Structure","text":"<p>DRAFT: In the following, any text annotated with ?? indicates areas of uncertainty or probable change. As the program and input language develop, these matters will be resolved.</p>"},{"location":"input-structure/#introduction","title":"Introduction","text":"<p>The CSE Input Language is the fundamental interface to the CSE program. The language has been designed with three objectives in mind:</p> <ol> <li> <p>Providing direct access to all program features (including ones included for self-testing), to assist in program development.</p> </li> <li> <p>Providing a set of parametric and expression evaluation capabilities useful for standards development and program testing.</p> </li> <li> <p>Providing a means for other programs, such as an interactive user interface, to transmit input data and control data to the program.</p> </li> </ol> <p>Thus, the language is not intended to be used by the average compliance or simulation user. Instead, it will be used during program development for testing purposes and subsequently for highly technical parametric studies, such as those conducted for research and standards development. In all of these situations, power, reproducibility, and thorough input documentation take precedence over user-friendliness.</p> <p>CSE reads its input from a file. The file may be prepared by the user with a text editor, or generated by some other program.</p>"},{"location":"input-structure/#form-of-the-cse-data","title":"Form of the CSE Data","text":"<p>The data used by CSE consists of objects. Each object is of a class, which determines what the object represents. For example, objects of class ZONE represent thermally distinct regions of the building; each thermally distinct region has its own ZONE object. An object's class determines what data items or members it contains. For instance, a ZONE object contains the zone's area and volume. In addition, each object can have a name.</p> <p>The objects are organized in a hierarchy, or tree-like structure. For example, under each ZONE object, there can be SURFACE objects to represent the walls, floors, and ceilings of the ZONE. Under SURFACEs there can be WINDOW objects to represent glazings in the particular wall or roof. SURFACE is said to be a subclass of the class ZONE and WINDOW a subclass of SURFACE; each individual SURFACE is said to be a subobject of its particular ZONE object. Conversely, each individual SURFACE is said to be owned by its zone, and the SURFACE class is said to be owned by the ZONE class.</p> <p>The hierarchy is rooted in the one top-level object (or just Top). The top level object contains information global to the entire simulation, such as the start and end dates, as well as all of the objects that describe the building to be simulated and the reports to be printed.</p> <p>Objects and their required data must be specified by the user, except that Top is predefined. This is done with input language statements. Each statement begins an object (specifying its class and object name) or gives a value for a data member of the object being created. Each object is specified with a group of statements that are usually given together, and the objects must be organized according to the hierarchy. For example, SURFACEs must be specified within ZONEs and WINDOWs within SURFACEs. Each SURFACE belongs to (is a subobject of) the ZONE within which it is specified, and each WINDOW is a subobject of its SURFACE.</p> <p>The entire hierarchy of CSE classes can be represented as follows, using indentation to indicate subclasses:</p> <p>TODO: review hierarchy</p> <pre><code>TOP (Top-level class; object of this class supplied automatically by CSE)\n    HOLIDAY\n    MATERIAL\n    CONSTRUCTION\n        LAYER\n    METER\n    DHWMETER\n    IZXFER\n    DHWDAYUSE\n        DHWUSE\n    DHWSYS\n        DHWHEATER\n        DHWTANK\n        DHWPUMP\n        DHWLOOP\n        DHWLOOPPUMP\n        DHWLOOPSEG\n            DHWLOOPBRANCH\n    DHWSOLARSYS\n        DHWSOLARCOLLECTOR\n    ZONE\n        GAIN\n        SURFACE\n            WINDOW\n                SHADE\n                SGDIST\n            DOOR\n    REPORTFILE\n    REPORT\n    REPORTCOL\n    EXPORTFILE\n    EXPORT\n    EXPORTCOL\n</code></pre>"},{"location":"input-structure/#overview-of-cse-input-language","title":"Overview of CSE Input Language","text":"<p>The CSE Input Language consists of commands, each beginning with a particular word and, preferably, ending with a semicolon. Each command is either an action-command, which specifies some action such as starting a simulation run, or a statement, which creates or modifies an object or specifies a value for a member of an object.</p>"},{"location":"input-structure/#statements-overview","title":"Statements -- Overview","text":"<p>A statement that creates an object consists basically of the class name followed by your name for the object to be created. (The name can be omitted for most classes; optional modifying clauses will be described later.) For example,</p> <pre><code>    ZONE \"north\";\n</code></pre> <p>begins an object of class ZONE; the particular zone will be named \"north\". This zone name will appear in reports and error messages, and will be used in other statements that operate on the zone. As well as creating the ZONE, this statement sets CSE to expect statements specifying ZONE data members or ZONE subobjects to follow.</p> <p>A statement specifying a data member consists of the data member's name, an = sign, an expression specifying the value, and a terminating semicolon. An expression is a valid combination of operands and operators as detailed later; commonly it is just a number, name, or text enclosed in quotes. For example,</p> <pre><code>    znVol = 100000;\n</code></pre> <p>specifies that the zone has a volume of 100000 cubic feet. (If the statement occurs outside of the description of a ZONE, an error message occurs.) All of the member names for each class are described in the input data section; most of them begin with an abbreviation of the class name for clarity.</p> <p>The description of a zone or any object except Top can be terminated with the word \"END\"; but this is not essential; CSE will assume the ZONE ends when you start another ZONE or any object not a subobject of ZONE, or when you specify a member of a higher level class (Top for ZONE), or give an action-command such as RUN.</p> <p>Statements are free-form; several can be put on a line, or a single statement can occupy several lines. Indentation according to class hierarchy will help make your input file readable. Spaces may be used freely except in the middle of a word or number. Tab characters may be used. Each statement should end with a semicolon. If the semicolon is omitted and the statement and the following statement are both correctly formed, CSE will figure out your intent anyway. But when there is an error, CSE gives clearer error messages when the statements are delimited with semicolons.</p> <p>Capitalization generally does not matter in input language statements; we like to capitalize class names to make them stand out. Words that differ only in capitalization are NOT distinct to CSE.</p> <p>Comments (remarks) may be interspersed with commands. Comments are used to make the input file clearer to humans; they are ignored by CSE. A comment introduced with \"//\" ends at the end of the line; a comment introduced with \"/*\" continues past the next \"*/\", whether on the same line, next line, or many lines down. Additional input language may follow the */ on the same line.</p>"},{"location":"input-structure/#nested-objects","title":"Nested Objects","text":"<p>The following is a brief CSE input file, annotated with comments intended to exemplify how the input language processor follows the object hierarchy when decoding input describing objects and their subobjects.</p> <pre><code>    // short example file\n                            // initially, the current object is Top.\n    wfName = \"CZ12RV2.CEC\"; // give weather file name, a Top member\n    begDay = Jan 1;         // start and ...\n    endDay = Dec 31;        // ...end run dates: Top members.\n\n    MATERIAL carpet;        // create object of class MATERIAL\n    matThk = .296;          // specify 'matThk' member of MATERIAL 'carpet'\n    matCond = 1./24;        // give value of 'matCond' for 'carpet'\n\n    CONSTRUCTION slab140C;  /* create object of class CONSTRUCTION, named\n                               slab140C. Terminates MATERIAL, because\n                               CONSTRUCTION is not a subclass of material\n                               in the hierarchy shown in another section** */\n      LAYER                 /* start an unnamed object of class LAYER.\n                               Since LAYER is a subclass of CONSTRUCTION,\n                               this will be a subobject of slab140C. */\n        lrMat = carpet;     /* member of the LAYER. Note use of name of\n                               MATERIAL object. */\n      // (additional layers would be here)\n\n    METER Elec;             /* create METER named Elec;\n                               since METER is a subobject of Top,\n                               this ends slab140C and its LAYER. */\n\n    ZONE North;             // start a ZONE named North.  Ends METER.\n      znArea = 1000;        // specify data members of ZONE North.\n      znVol = 10;           // (you don't have to capitalize these as shown.)\n      GAIN NorthLights      /* create GAIN object named NorthLights.\n                               Creates a subobject of ZONE North. */\n        gnPower = 0.01;     // member of NorthLights -- numeric value\n        gnMeter = Elec;     // member of NorthLights -- object name value\n\n      znCAir = 3.5;         /* processor knows that znCAir is a member of ZONE;\n                               thus this statement terminates the GAIN\n                               subobject &amp; continues ZONE 'North'. */\n\n      /*lrMat = ...            would be an error here, because the current\n                               object is not a LAYER nor a subobject of LAYER */\n\n    RUN;                    /* initiate simulation run with data given.\n                               Terminates ZONE North, since action-commands\n                               terminate all objects being constructed. */\n</code></pre> <p>** See Form of the CSE Data</p>"},{"location":"input-structure/#expressions-overview","title":"Expressions -- Overview","text":"<p>Expressions are the parts of statements that specify values -- numeric values, string values, object name values, and choice values. Expressions are composed of operators and operands, in a manner similar to many programming languages. The available operators and operands will be described in the section on operators.</p> <p>Unlike most programming languages, CSE expressions have Variation. Variation is how often a value changes during the simulation run -- hourly, daily, monthly, yearly (i.e. does not change during run), etc. For instance, the operand <code>$hour</code> represents the hour of the day and has \"hourly\" variation. An expression has the variation of its fastest-varying component.</p> <p>Each data member of each object (and every context in which an expression may be used) has its allowed variability, which is the fastest variation it will accept. Many members allow no variability. For example, <code>begDay</code>, the date on which the run starts, cannot meaningfully change during the run. On the other hand, a thermostat setting can change hourly. Thermostat settings and other scheduled values are specified in CSE with expressions that often make use of variability; there is no explicit SCHEDULE class.</p> <p>For example, a heating setpoint that was 68 during business hours and 55 at night might be expressed as</p> <pre><code>    select( $hour &gt; 8 &amp;&amp; $hour &lt; 18, 68, default 55)\n</code></pre> <p>An example of a complete statement containing the above expression is:</p> <pre><code>    tuTH = select( $hour &gt; 8 &amp;&amp; $hour &lt; 18, 68, default 55);\n</code></pre> <p>The preceding is valid a statement if used in a TERMINAL description. The following:</p> <pre><code>    begDay = select( $hour &gt; 8 &amp;&amp; $hour &lt; 18, 68, default 55);\n</code></pre> <p>would always get an error message, because <code>begDay</code> (the starting day of the run) will not accept hourly variation, and the expression varies hourly, since it contains <code>$hour</code>. The expression's variation is considered \"hourly\" even though it changes only twice a day, since CSE has no variation category between hourly and daily.</p> <p>CSE's expression capability may be used freely to make input clearer. For example,</p> <pre><code>    znVol = 15 * 25 * 8;\n</code></pre> <p>meaning that the zone volume is 15 times 25 times 8 is the same to CSE as</p> <pre><code>    znVol = 3000;\n</code></pre> <p>but might be useful to you to tersely indicate that the volume resulted from a width of 15, a length of 25, and a height of 8. Further, if you wished to change the ceiling height to 9 feet, the edit would be very simple and CSE would perform the volume calculation for you.</p> <p>CSE computes expressions only as often as necessary, for maximum simulation speed. For example,</p> <pre><code>    tuTH = 68;\n</code></pre> <p>causes 68 to be stored in the heating setpoint once at the start of the run only, even though tuTH will accept expressions with variability up to hourly. Furthermore, constant inner portions of variable expressions are pre-evaluated before the run begins.</p> <p>CSE statements and expressions do not (yet) have user-settable variables in the usual programming language sense. They do, however, have user-defined functions to facilitate using the same computation several places, and preprocessor macros, to facilitate using the same text several places, specifying parametric values in a separate file, etc.</p>"},{"location":"input-structure/#the-preprocessor-overview","title":"The Preprocessor -- Overview","text":"<p>The preprocessor scans and processes input file text before the language processor sees the text. The preprocessor can include (embed) additional files in the input, include sections of input conditionally, and define and expand macros.</p> <p>Macros are a mechanism to substitute a specified text for each occurrence of a word (the macro name). For example,</p> <pre><code>    #define ZNWID 20\n    #define ZNLEN 30\n    . . .\n\n    znArea = ZNWID * ZNLEN;\n    znVol  = ZNWID * ZNLEN * 8;\n</code></pre> <p>The first line above says that all following occurrences of \"ZNWID\" are to be replaced with \"20\" (or whatever follows ZNWID on the same line). The effect of the above is that the zone width and length are specified only one place; if the single numbers are editing, both the zone area and zone volume change to match.</p> <p>Macros can be especially powerful when combined with the file inclusion feature; the generic building description could be in one file, and the specific values for multiple runs supplied by another file. By also using conditional compilation, the values-specifying file can select from a range of features available in the building description file.</p> <p>The preprocessor is similar to that of the C programming language, and thus will be familiar to C programmers.</p> <p>The next section describes the preprocessor in detail. The preprocessor description is followed by sections detailing statements, then expressions.</p>"},{"location":"input-structure/#the-preprocessor","title":"The Preprocessor","text":"<p>Note: The organization and wording of this section is based on section A12 of Kernigan and Richie [1988]. The reader is referred to that source for a somewhat more rigorous presentation but with the caution that the CSE input language preprocessor does not completely comply to ANSI C specifications.</p> <p>The preprocessor performs macro definition and expansion, file inclusion, and conditional inclusion/exclusion of text. Lines whose first non-whitespace character is <code>#</code> communicate with the preprocessor and are designated preprocessor directives. Line boundaries are significant to the preprocessor (in contrast to the rest of the input language in which a newline is simply whitespace), although adjacent lines can be spliced with \\, as discussed below. The syntax of preprocessor directives is separate from that of the rest of the language. Preprocessor directives can appear anywhere in an input file and their effects last until the end of the input file. The directives that are supported by the input language preprocessor are the following:</p> <pre><code>    #if\n    #else\n    #elif\n    #endif\n    #ifndef\n\n    #define\n    #redefine\n    #undef\n\n    #include\n</code></pre>"},{"location":"input-structure/#line-splicing","title":"Line splicing","text":"<p>If the last character on a line is the backslash \\, then the next line is spliced to that line by elimination of the backslash and the following newline. Line splicing occurs before the line is divided into tokens.</p> <p>Line splicing finds its main use in defining long macros:</p> <pre><code>    // hourly light gain values:\n    #define LIGHT_GAIN       .024, .022, .021, .021, .021, .026, \\\n                             .038, .059, .056, .060, .059, .046, \\\n                             .045, .5  , .5  , .05 , .057, .064, \\\n                             .064, .052, .050, .055, .044, .027\n</code></pre>"},{"location":"input-structure/#macro-definition-and-expansion","title":"Macro definition and expansion","text":"<p>A directive of the form</p> <pre><code>    #define _identifier_ _token-sequence_\n</code></pre> <p>is a macro definition and causes the preprocessor to replace subsequent instances of the identifier with the given token sequence. Note that the token string can be empty (e.g. <code>#define FLAG</code>).</p> <p>A line of the form</p> <pre><code>    #define _identifier_( _identifier-list_) _token-sequence_\n</code></pre> <p>where there is no space between the identifier and the (, is a macro with parameters given by the identifier list. The expansion of macros with parameters is discussed below.</p> <p>Macros may also be defined on the CSE command line, making it possible to vary a run without changing the input files at all. As described in the command line section, macros are defined on the CSE command line using the <code>-D</code> switch in the forms</p> <pre><code>    -D_identifier_\n\n    -D_identifier_=_token-sequence_\n</code></pre> <p>The first form simply defines the name with no token-sequence; this is convenient for testing with <code>#ifdef</code>, <code>#ifndef</code>, or <code>defined()</code>, as described in the section on conditional inclusion of tex. The second form allows an argument list and token sequence. The entire command line argument must be enclosed in quotes if it contains any spaces.</p> <p>A macro definition is forgotten when an <code>#undef</code> directive is encountered:</p> <pre><code>    #undef _identifier_\n</code></pre> <p>It is not an error to <code>#undef</code> an undefined identifier.</p> <p>A macro may be re-<code>#defined</code> without a prior <code>#undef</code> unless the second definition is identical to the first. A combined <code>#undef</code>/<code>#define</code> directive is available to handle this common case:</p> <pre><code>    #redefine _identifier_ _token-sequence_\n\n    #redefine _identifier_( _identifier-list_) _token-sequence_\n</code></pre> <p>When a macro is <code>#redefined</code>, it need not agree in form with the prior definition (that is, one can have parameters even if the other does not). It is not an error to <code>#redefine</code> an undefined identifier.</p> <p>Macros defined in the second form (with parameters) are expanded whenever the preprocessor encounters the macro identifier followed by optional whitespace and a comma-separated parameter list enclosed in parentheses. First the comma separated token sequences are collected; any commas within quotes or nested parentheses do not separate parameters. Then each unquoted instance of the each parameter identifier in the macro definition is replaced by the collected tokens. The resulting string is then repeatedly re-scanned for more defined identifiers. The macro definition and reference must have the same number of arguments.</p> <p>It is often important to include parentheses within macro definitions to make sure they evaluate properly in all situations. Suppose we define a handy area macro as follows:</p> <pre><code>    #define AREA(w, h) w*h        // WRONG\n</code></pre> <p>Consider what happens when this macro is expanded with arguments 2+3 and 4+1. The preprocessor substitutes the arguments for the parameters, then the input language processor processes the statement containing the macro expansion without regard to the beginning and end of the arguments. The expected result is 25, but as defined, the macro will produce a result of 15. Parentheses fix it:</p> <pre><code>    #define AREA(w, h) ((w)*(h))  // RIGHT\n</code></pre> <p>The outer enclosing set of parentheses are not strictly needed in our example, but are good practice to avoid evaluation errors when the macro expands within a larger expression.</p> <p>Note 1: The CSE preprocessor does not support the ANSI C stringizing (#) or concatenation (##) operators.</p> <p>Note 2: Identifiers are case insensitive (unlike ANSI C). For example, the text \u201cmyHeight\u201d will be replaced by the <code>#defined</code> value of MYHEIGHT (if there is one).</p> <p>The preprocessor examples at the end of this section illustrate macro definition and expansion.</p>"},{"location":"input-structure/#file-inclusion","title":"File inclusion","text":"<p>Directives of the form</p> <p><code>#include \"filename\"</code> and</p> <p><code>#include &lt;filename&gt;</code></p> <p>cause the replacement of the directive line with the entire contents of the referenced file. If the filename does not include an extension, a default extension of .INP is assumed. The filename may include path information; if it does not, the file must be in the current directory.</p> <p><code>#include</code>s may be nested to a depth of 5.</p> <p>For an example of the use <code>#include</code>s, please see the preprocessor examples at the end of this section.</p>"},{"location":"input-structure/#conditional-inclusion-of-text","title":"Conditional inclusion of text","text":"<p>Conditional text inclusion provides a facility for selectively including or excluding groups of input file lines. The lines so included or excluded may be either CSE input language text or other preprocessor directives. The latter capability is very powerful.</p> <p>Several conditional inclusion directive involve integer constant expressions. Constant integer expressions are formed according the rules discussed in the section on expressions with the following changes:</p> <ol> <li> <p>Only constant integer operands are allowed.</p> </li> <li> <p>All values (including intermediate values computed during expression evaluation) must remain in the 16 bit range (-32768 - 32767). The expression processor treats all integers as signed values and requires signed decimal constants -- however, it requires unsigned octal and hexadecimal constants. Thus decimal constants must be in the range -32768 - 32767, octal must be in the range 0 - 0o177777, and hexadecimal in the range 0 - 0xffff. Since all arithmetic comparisons are done assuming signed values, 0xffff &lt; 1 is true (unhappily). Care is required when using the arithmetic comparison operators (&lt;, &lt;=, &gt;=, &gt;).</p> </li> <li> <p>The logical relational operators &amp;&amp; and || are not available. Nearly equivalent function can be obtained with &amp; and |.</p> </li> <li> <p>A special operand defined( ) is provided; it is described below.</p> </li> </ol> <p>Macro expansion is performed on constant expression text, so symbolic expressions can be used (see examples below).</p> <p>The basic conditional format uses the directive</p> <pre><code>    #if _constant-expression_\n</code></pre> <p>If the constant expression has the value 0, all lines following the <code>#if</code> are dropped from the input stream (the preprocessor discards them) until a matching <code>#else</code>, <code>#elif</code>, or <code>#endif</code> directive is encountered.</p> <p>The defined( identifier ) operand returns 1 if the identifier is the name of a defined macro, otherwise 0. Thus</p> <pre><code>    #if defined( _identifier_ )\n</code></pre> <p>can be used to control text inclusion based on macro flags. Two <code>#if</code> variants that test whether a macro is defined are also available. <code>#ifdef</code> identifier is equivalent to <code>#if</code> defined(identifier) and <code>#ifndef</code> identifier is equivalent to <code>#if</code> !defined(identifier).</p> <p>Defined(), <code>#ifdef</code>, and <code>#ifndef</code> consider a macro name \"defined\" even if the body of its definition contains no characters; thus a macro to be tested with one of these can be defined with just</p> <pre><code>    #define _identifier_\n</code></pre> <p>or with just \"-Didentifier\" on the CSE command line.</p> <p>Conditional blocks are most simply terminated with <code>#endif</code>, but <code>#else</code> and <code>#elif</code> constant-expression are also available for selecting one of two or more alternative text blocks.</p> <p>The simplest use of <code>#if</code> is to \"turn off\" sections of an input file without editing them out:</p> <pre><code>    #if 0\n    This text is deleted from the input stream.\n    #endif\n</code></pre> <p>Or, portions of the input file can be conditionally selected:</p> <pre><code>    #define FLRAREA 1000   // other values used in other runs\n    #if FLRAREA &lt;= 800\n        CSE input language for small zones\n    #elif FLRAREA &lt;= 1500\n        CSE input language for medium zones\n    #else\n        CSE input language for large zones\n    #endif\n</code></pre> <p>Note that if a set of <code>#if</code> ... <code>#elif</code> ... <code>#elif</code> conditionals does not contain an <code>#else</code>, it is possible for all lines to be excluded.</p> <p>Finally, it is once again important to note that conditional directives nest, as shown in the following example (indentation is included for clarity only):</p> <pre><code>    #if 0\n        This text is NOT included.\n        #if 1\n            This text is NOT included.\n        #endif\n    #else\n        This text IS included.\n    #endif\n</code></pre>"},{"location":"input-structure/#input-echo-control","title":"Input echo control","text":"<p>By default, CSE echos all input text to the input echo report (see REPORT rpType=INP).  #echooff and #echoon allow disabling and re-enabling text echoing.  This capability is useful reducing report file size by suppressing echo of, for example, large standard include files.</p> <pre><code>    ... some input ...   // text sent to the input echo report\n    #echooff\n       // This text will NOT be sent to the input echo report.\n       // However, it IS read and used by CSE.\n       // Error messages will be echoed even if #echooff\n       ... more input ...\n    #echoon         // restore echo\n</code></pre> <p>Nesting is supported -- each #echoon \"undoes\" the prior #echooff, but echoing does not resume until the topmost (earliest) #echooff is cancelled. * #echoon has no effect when echoing is already active. * Unmatched #echooffs are ignored -- echoing remains disabled through the end of the input stream.</p>"},{"location":"input-structure/#preprocessor-examples","title":"Preprocessor examples","text":"<p>This section shows a few combined examples that demonstrate the preprocessor's capabilities.</p> <p>The simplest use of macros is for run parameterization. For example, a base file is constructed that derives values from a macro named FLRAREA. Then multiple runs can be performed using <code>#include</code>:</p> <pre><code>    // Base file\n    ... various input language statements ...\n\n    ZONE main\n        znArea = FLRAREA\n        znVol  = 8*FLRAREA\n        znCAir = 2*FLRAREA ...\n        ... various other input language statements ...\n\n    RUN\n\n    CLEAR\n</code></pre> <p>The actual input file would look like this:</p> <pre><code>    // Run with zone area = 500, 1000, and 2000 ft2\n    #define FLRAREA 500\n    #include \"base.\"\n    #redefine FLRAREA 1000\n    #include \"base.\"\n    #redefine FLRAREA 2000\n    #include \"base.\"\n</code></pre> <p>Macros are also useful for encapsulating standard calculations. For example, most U-values must be entered without surface conductances, yet many tabulated U-values include the effects of the standard ASHRAE winter surface conductance of 6.00 Btuh/ft<sup>2</sup>-<sup>o</sup>F. A simple macro is very helpful:</p> <pre><code>    #define UWinter(u)  ( 1/(1/(u)-1/6.00) )\n</code></pre> <p>This macro can be used whenever a U-value is required (e.g. SURFACE ... sfU=UWinter(.11) ... ).</p>"},{"location":"input-structure/#cse-input-language-statements","title":"CSE Input Language Statements","text":"<p>This section describes the general form of CSE input language statements that define objects, assign values to the data members of objects, and initiate actions. The concepts of objects and the class hierarchy were introduced in the section on form of CSE data. Information on statements for specific CSE input language classes and their members is the subject of the input data section.</p>"},{"location":"input-structure/#object-statements","title":"Object Statements","text":"<p>As we described in a previous section, the description of an object is introduced by a statement containing at least the class name, and usually your chosen name for the particular object. In addition, this section will describe several optional qualifiers and modifying clauses that permit defining similar objects without repeating all of the member details, and reopening a previously given object description to change or add to it.</p> <p>Examples of the basic object-beginning statement:</p> <pre><code>    ZONE \"North\";\n\n    METER \"Electric - Cooling\";\n\n    LAYER;\n</code></pre> <p>As described in the section on nested objects, such a statement is followed by statements giving the object's member values or describing subobjects of the object. The object description ends when you begin another object that is not of a subclass of the object, or when a member of an embedding (higher level) object previously begun is given, or when END is given.</p>"},{"location":"input-structure/#object-names","title":"Object Names","text":"<p>An object name consists of up to 63 characters. If you always enclose the name in quotation marks, punctuation and spaces may be used freely; if the name starts with a letter or dollar sign and consists only of letters, digits, underscore, and dollar sign, and is different from all of the words already defined in CSE input language (as listed below in this section), you may omit the quotes. Capitalization, and Leading and trailing spaces and tabs, are always disregarded by input language processor. Names of 0 length, and names containing control characters (ASCII codes 0-31) are not allowed.</p> <p>Examples of valid names that do not require quotes:</p> <pre><code>    North\n    gas_meter\n    slab140E\n</code></pre> <p>The following object names are acceptable if always enclosed in quotes:</p> <pre><code>    \"Front Door\"\n    \"M L King Day\"\n    \"123\"\n    \"3.5-inch wall\"\n</code></pre> <p>We suggest always quoting object names so you won't have to worry about disallowed words and characters.</p> <p>Duplicate names result in error messages. Object names must be distinct between objects of the same class which are subobjects of the same object. For example, all ZONE names must be distinct, since all ZONEs are subobjects of Top. It is permissible to have SURFACEs with the same name in different ZONEs -- but it is a good idea to keep all of your object names distinct to minimize the chance of an accidental mismatch or a confusing message regarding some other error.</p> <p>For some classes, such as ZONE, a name is required for each object. This is because several other statements refer to specific ZONEs, and because a name is needed to identify ZONEs in reports. For other classes, the name is optional. The specific statement descriptions in the Input Data Section 5 say which names are required. We suggest always using object names even where not required; one reason is because they allow CSE to issue clearer error messages.</p> <p>The following reserved words will not work as object names unless enclosed in quotes:</p> <p>(this list needs to be assembled and typed in)</p>"},{"location":"input-structure/#alter","title":"ALTER","text":"<p>ALTER is used to reopen a previously defined object when it is not possible or desired to give the entire description contiguously.</p> <p>ALTER could be used if you wish to order the input in a special way. For example, SURFACE objects are subobjects of ZONE and are normally described with the ZONE they are part of. However, if you wanted to put all roofs together, you could use input of the general form:</p> <pre><code>    ZONE \"1\";  . . .  (zone 1 description)\n    ZONE \"2\";  . . .\n    . . .\n    ALTER ZONE \"1\";               // revert to specifying zone 1\n        SURFACE \"Roof1\";  . . .   (describe roof of zone 1)\n    ALTER ZONE \"2\";\n        SURFACE \"Roof2\";  . . .\n</code></pre> <p>ALTER can be used to facilitate making similar runs. For example, to evaluate the effect of a change in the size of a window, you might use:</p> <pre><code>    ZONE \"South\";\n        SURFACE \"SouthWall\";\n        ...\n            WINDOW \"BigWindow\";\n                wnHeight = 6;  wnWidth = 20;\n    . . .\n    RUN;          // perform simulation and generate reports\n    // data from simulation is still present unless CLEAR given\n    ALTER ZONE \"South\";\n        ALTER SURFACE \"SouthWall\";\n            ALTER WINDOW \"BigWindow\";\n                wnHeight = 4;  wnWidth = 12;  // make window smaller\n    RUN;          // perform simulation and print reports again\n</code></pre> <p>ALTER also lets you access the predefined \"Primary\" REPORTFILE and EXPORTFILE objects which will be described in the Input Data Section:</p> <pre><code>    ALTER REPORTFILE \"Primary\";    /* open description of object automatically\n                                      supplied by CSE -- no other way to access */\n        rfPageFmt = NO;            /* Turn off page headers and footers --\n                                      not desired when reports are to be\n                                      reviewed on screen. */\n</code></pre>"},{"location":"input-structure/#delete","title":"DELETE","text":"<p>DELETE followed by a class name and an object name removes the specified object, and any subobjects it has. You might do this after RUN when changing the data for a similar run (but to remove all data, CLEAR is handier), or you might use DELETE after COPYing (below) an object if the intent is to copy all but certain subobjects.</p>"},{"location":"input-structure/#like-clause","title":"LIKE clause","text":"<p>LIKE lets you specify that an object being defined starts with the same member values as another object already defined. You then need give only those members that are different. For Example:</p> <pre><code>    MATERIAL \"SheetRock\";         // half inch gypsum board\n        matCond = .0925;          // conductivity per foot\n        matSpHt = .26;            // specific heat\n        matDens = 50;             // density\n        matThk = 0'0.5;           // thickness 1/2 inch\n    MATERIAL \"5/8 SheetRock\" LIKE \"SheetRock\"; // 5/8\" gypsum board\n        matThk = 0'0.625;         // thickness 5/8 inch\n        // other members same as \"SheetRock\", need not be repeated\n</code></pre> <p>The object named after LIKE must be already defined and must be of the same class as the new object.</p> <p>LIKE copies only the member values; it does not copy any subobjects of the prototype object. For example, LIKEing a ZONE to a previously defined ZONE does not cause the new zone to contain the surfaces of the prototype ZONE. If you want to duplicate the surfaces, use COPY instead of LIKE.</p>"},{"location":"input-structure/#copy-clause","title":"COPY clause","text":"<p>COPY lets you specify that the object being defined is the same as a previously defined object including all of the subobjects of that object. For example,</p> <pre><code>    . . .\n    ZONE \"West\" COPY \"North\";\n        DELETE WALL \"East\";\n        ALTER WALL \"South\";\n            sfExCnd = ambient;\n</code></pre> <p>Specifies a ZONE named \"West\" which is the same as ZONE North except that it does not contain a copy of West's East wall, and the South wall has ambient exposure.</p>"},{"location":"input-structure/#usetype-clause","title":"USETYPE clause","text":"<p>USETYPE followed by the type name is used in creating an object of a type previously defined with DEFTYPE (next section). Example:</p> <pre><code>    SURFACE \"EastWall\" USETYPE \"IntWall\";     // use interior wall TYPE (below)\n        sfAzm = 90;                           // this wall faces to the East\n        sfArea = 8 * 30;                      // area of each wall is different\n        sfAdjZn = \"East\";                     // zone on other side of wall\n</code></pre> <p>Any differences from the type, and any required information not given in the type, must then be specified. Any member specified in the type may be respecified in the object unless FROZEN (see this section) in the type (normally, a duplicate specification for a member results in an error message).</p>"},{"location":"input-structure/#deftype","title":"DEFTYPE","text":"<p>DEFTYPE is used to begin defining a TYPE for a class. When a TYPE is created, no object is created; rather, a partial or complete object description is stored for later use with DEFTYPE. TYPES facilitate creating multiple similar objects, as well as storing commonly used descriptions in a file to be #included in several different files, or to be altered for multiple runs in comparative studies without changing the including files. Example (boldface for emphasis only):</p> <pre><code>    DEFTYPE SURFACE \"BaseWall\"                // common characteristics of all walls\n        sfType = WALL;                        // walls are walls, so say it once\n        sfTilt = 90;                          // all our walls are vertical;\n                                              //  but sfAzm varies, so it is not in TYPE.\n        sfU = .83;                            // surf conductance; override if different\n        sfModel = QUICK;\n\n    DEFTYPE SURFACE \"ExtWall\" USETYPE \"BaseWall\";\n        sfExCnd = AMBIENT;                    // other side of wall is outdoors\n        sfExAbs = 0.5;                        // member only needed for exterior walls\n\n    DEFTYPE SURFACE \"IntWall\" USETYPE \"BaseWall\";   // interior wall\n        sfExCnd = ADJZN;                      // user must give sfAdjZn.\n</code></pre> <p>In a TYPE as much or as little of the description as desired may be given. Omitting normally-required members does not result in an error message in the type definition, though of course an error will occur at use if the member is not given there.</p> <p>At use, member values specified in the TYPE can normally be re specified freely; to prevent this, \"freeze\" the desired member(s) in the type definition with</p> <pre><code>    FREEZE *memberName*;\n</code></pre> <p>Alternately, if you wish to be sure the user of the TYPE enters a particular member even if it is normally optional, use</p> <pre><code>    REQUIRE *memberName*\n</code></pre> <p>Sometimes in the TYPE definition, member(s) that you do not want defined are defined -- for example, if the TYPE definition were itself initiated with a statement containing LIKE, COPY, or USETYPE. In such cases the member specification can be removed with</p> <pre><code>    UNSET *memberName*;\n</code></pre>"},{"location":"input-structure/#end-and-endxxxx","title":"END and ENDxxxx","text":"<p>END, optionally followed by an object name, can be used to unequivocally terminate an object. Further, as of July 1992 there is still available a specific word to terminate each type of object, such as ENDZONE to terminate a ZONE object. If the object name is given after END or ENDxxxx, an additional check is performed: if the name is not that of an object which has been begun and not terminated, an error message occurs. Generally, we have found it is not important to use END or ENDxxxx, especially since the member names in different classes are distinct.</p>"},{"location":"input-structure/#member-statements","title":"Member Statements","text":"<p>As introduced in the section on statements, statements which assign values to members are of the general form:</p> <pre><code>    *memberName* = *expression*;\n</code></pre> <p>The specific member names for each class of objects are given in Section 5; many have already been shown in examples.</p> <p>Depending on the member, the appropriate type for the expression giving the member value may be numeric (integer or floating point), string, object name, or multiple-choice. Expressions of all types will be described in detail in the section on expressions.</p> <p>Each member also has its variability (also given in the input data section), or maximum acceptable variation. This is how often the expression for the value can change during the simulation -- hourly, daily, monthly, no change (constant), etc. The \"variations\" were introduced in the expressions overview section and will be further detailed in a section on variation frequencies.</p> <p>Four special statements, AUTOSIZE, UNSET, REQUIRE, and FREEZE, add flexibility in working with members.</p>"},{"location":"input-structure/#autosize","title":"AUTOSIZE","text":"<p>AUTOSIZE followed by a member name, sets the member to be sized by CSE. The option to AUTOSIZE a member will be shown under its legal range where it is described in the input data section. AUTOSIZE is only applicable to members describing HVAC system airflows and heating/cooling capacities. If AUTOSIZE is used for any member in the input, input describing design day conditions must also be specified (see TOP Autosizing).</p>"},{"location":"input-structure/#unset","title":"UNSET","text":"<p>UNSET followed by a member name is used when it is desired to delete a member value previously given. UNSETing a member resets the object to the same internal state it was in before the member was originally given. This makes it legal to specify a new value for the member (normally, a duplicate specification results in an error message); if the member is required (as specified in the input data section), then an error message will occur if RUN is given without re specifying the member.</p> <p>Situations where you really might want to specify a member, then later remove it, include:</p> <ul> <li> <p>After a RUN command has completed one simulation run, if you wish to specify another simulation run without CLEARing and giving all the data again, you may need to UNSET some members of some objects in order to re specify them or because they need to be omitted from the new run. In this case, use ALTER(s) to reopen the object(s) before UNSETing.</p> </li> <li> <p>In defining a TYPE (see this section), you may wish to make sure certain members are not specified so that the user must give them or omit them if desired. If the origin of the type (possibly a sequence of DEFTYPEs, LIKEs, and/or COPYs) has defined unwanted members, get rid of them with UNSET.</p> </li> </ul> <p>Note that UNSET is only for deleting members (names that would be followed with an = and a a value when being defined). To delete an entire object, use DELETE (see this section).</p>"},{"location":"input-structure/#require","title":"REQUIRE","text":"<p>REQUIRE followed by a member name makes entry of that member mandatory if it was otherwise optional; it is useful in defining a TYPE (see this section) when you desire to make sure the user enters a particular member, for example to be sure the TYPE is applied in the intended manner. REQUIRE by itself does not delete any previously entered value, so if the member already has a value, you will need to UNSET it. ?? verify</p>"},{"location":"input-structure/#freeze","title":"FREEZE","text":"<p>FREEZE followed by a member name makes it illegal to UNSET or redefine that member of the object. Note that FREEZE is unnecessary most of the time since CSE issues an error message for duplicate definitions without an intervening UNSET, unless the original definition came from a TYPE (see this section). Situations where you might want to FREEZE one or more members include:</p> <ul> <li> <p>When defining a TYPE (see this section). Normally, the member values in a type are like defaults; they can be freely overridden by member specifications at each use. If you wish to insure a TYPE is used as intended, you may wish to FREEZE members to prevent accidental misuse.</p> </li> <li> <p>When your are defining objects for later use or for somebody else to use (perhaps in a file to be included) and you wish to guard against misuse, you may wish to FREEZE members. Of course, this is not foolproof, since there is at present no way to allow use of predefined objects or types without allowing access to the statements defining them.</p> </li> </ul>"},{"location":"input-structure/#action-commands","title":"Action Commands","text":"<p>CSE has two action commands, RUN and CLEAR.</p>"},{"location":"input-structure/#run","title":"RUN","text":"<p>RUN tells <code>CSE</code> to do an hourly simulation with the data now in memory, that is, the data given in the preceding part of the input file.</p> <p>Note that CSE does NOT automatically run the simulator; an input file containing no RUN results in no simulation (you might nevertheless wish to submit an incomplete file to CSE to check for errors in the data already entered). The explicit RUN command also makes it possible to do multiple simulation runs in one session using a single input file.</p> <p>When RUN is encountered in the input file, CSE checks the data. Many error messages involving inconsistencies between member values or missing required members occur at this time. If the data is good, CSE starts the simulation. When the simulation is complete and the reports have been output, CSE continues reading the input file. Statements after the first run can add to or change the data in preparation for another RUN. Note that the data for the first run is NOT automatically removed; if you wish to start over with complete specifications, use CLEAR after RUN.</p>"},{"location":"input-structure/#clear","title":"CLEAR","text":"<p>CLEAR removes all input data (objects and all their members) from CSE memory. CLEAR is normally used after RUN, when you wish to perform another simulation run and wish to start clean. If CLEAR is not used, the objects from the prior run's input remain in memory and may be changed or added to produce the input data for the next simulation run.</p>"},{"location":"input-structure/#expressions","title":"Expressions","text":"<p>Probably the CSE input language's most powerful characteristic is its ability to accept expressions anywhere a single number, string, object name, or other value would be accepted. Preceding examples have shown the inputting zone areas and volumes as numbers (some defined via preprocessor macros) with *'s between them to signify multiplication, to facilitate changes and avoid errors that might occur in manual arithmetic. Such expressions, where all operands are constants, are acceptable anywhere a constant of the same type would be allowed.</p> <p>But for many object members, CSE accepts live expressions that vary according to time of day, weather, zone temperatures, etc. (etc., etc., etc.!). Live expressions permit simulation of many relationships without special-purpose features in the language. Live expressions support controlling setpoints, scheduling HVAC system operation, resetting air handler supply temperature according to outdoor temperature, and other necessary and foreseen functions without dedicated language features; they will also support many unforeseen user-generated functionalities that would otherwise be unavailable.</p> <p>Additional expression flexibility is provided by the ability to access all of the input data and much of the internal data as operands in expressions (probes, see this section).</p> <p>As in a programming language, CSE expressions are constructed from operators and operands; unlike most programming languages, CSE determines how often an expression's operands change and automatically compute and store the value as often as necessary.</p> <p>Expressions in which all operands are known when the statement is being decoded (for example, if all values are constants) are always allowed, because the input language processor immediately evaluates them and presents the value to the rest of the program in the same manner as if a single number had been entered. Most members also accept expressions that can be evaluated as soon as the run's input is complete, for example expressions involving a reference to another member that has not been given yet. Expressions that vary during the run, say at hourly or daily intervals, are accepted by many members. The variability or maximum acceptable variation for each member is given in the descriptions in the input data section, and the variation of each non-constant expression component is given in its description in this section.</p> <p>Interaction of expressions and the preprocessor: Generally, they don't interact. The preprocessor is a text processor which completes its work by including specified files, deleting sections under false #if's, remembering define definitions, replacing macro calls with the text of the definition, removing preprocessor directives from the text after interpreting them, etc., then the resulting character stream is analyzed by the input language statement compiler. However, the if statement takes an integer numeric expression argument. This expression is similar to those described here except that it can only use constant operands, since the preprocessor must evaluate it before deciding what text to feed to the input statement statement compiler.</p>"},{"location":"input-structure/#expression-types","title":"Expression Types","text":"<p>The type of value to which an expression must evaluate is specified in each member description (see the input data section) or other context in which an expression can be used. Each expression may be a single constant or may be made up of operators and operands described in the rest of this section, so long as the result is the required type or can be converted to that type by CSE, and its variation is not too great for the context. The possible types are:</p> float A real number (3.0, 5.34, -2., etc.). Approximately 7 digits are carried internally. If an int is given where a real is required , it is automatically converted. int An integer or whole number (-1, 0, 1, 2 etc.). If a real is given, an error may result, but we should change it to convert it (discarding any fractional part). Boolean Same as int; indicates that a 0 value will be interpreted as \"false\" and any non-0 value will be interpreted as \"true\". string A string of characters; for example, some text enclosed in quotes. object name Name of an object of a specified class. Differs from string in that the name need not be enclosed in quotes if it consists only of letters, digits, _, and $, begins with a non-digit, and is different from all reserved words now in or later added to the language (see Object Names).The object may be defined after it is referred to. An expression using conditional operators, functions, etc. may be used provided its value is known when the RUN action command is reached.; no members requiring object names accept values that vary during the simulation. choice One of several choices; a list of the acceptable values is given wherever a choice is required. The choices are usually listed in CAPITALS but may be entered in upper or lower case as desired. As with object names, quotes are allowed but not required.Expressions may be used for choices, subject to the variability of the context. date May be entered as a 3-letter month abbreviation followed by an int for the day of the month, or an int for the Julian day of the year (February is assumed to have 28 days). Expressions may be used subject to variability limitations. Examples: <code>Jan 23   // January 23</code> <code>23       // January 23</code> <code>32       // February 1</code> <p> These words are used in following descriptions of contexts that can accept more than one basic type:</p> numeric float or int; When floats and ints are intermixed with the same operator or function, the result is float. anyType Any type; the result is the same type as the argument. If floats and ints are intermixed, the result is float. If strings and valid choice names are intermixed, the result is choice. Other mixtures of types are generally illegal, except in expressions for a few members that will accept either one of several choices or a numeric value. <p>The next section describes the syntax of constants of the various data types; then, we will describe the available operators, then other operand types such as system variables and built-in functions.</p>"},{"location":"input-structure/#constants","title":"Constants","text":"<p>This section reviews how to enter ordinary non-varying numbers and other values.</p> int optional - sign followed by digits. Don't use a decimal point if your intent is to give an int quantity -- the decimal point indicates a float to CSE. Hexadecimal and Octal values may be given by prefixing the value with <code>0x</code> and <code>0O</code> respectively (yes, that really is a zero followed by an 'O'). float optional - sign, digits, and decimal point. Very large or small values can be entered by following the number with an \"e\" and a power of ten. Examples: <code>1.0  1.  .1  -5534.6  123.e25  4.56e-23</code> The decimal point indicates a float as opposed to an int.Generally it doesn't matter as CSE converts ints to floats as required, but be careful when dividing: CSE interprets \"\u2154\" as integer two divided by integer 3, which will produce an integer 0 before CSE notices any need to convert to float. If you mean .6666667, say 2./3, \u2154., or .6666667. feet and inches Feet and inches may be entered where a float number of feet is required by typing the feet (or a 0 if none), a single quote ', then the inches. (Actually this is an operator meaning \"divide the following value by 12 and add it to the preceding value\", so expressions can work with it.) Examples: <code>3'6  0'.5 (10+20)'(2+3)</code> string \"Text\" -- desired characters enclosed in double quotes.Maximum length 80 characters (make 132??). To put a \" within the \"'s, precede it with a backslash. Certain control codes can be represented with letters preceded with a backslash as follows: <code>\\e    escape</code> <code>\\t    tab</code> <code>\\f    form feed</code> <code>\\r    carriage return</code> <code>\\n    newline or line feed</code> object name Same as string, or without quotes if name consists only of letters, digits, _, and $, begins with a non-digit, and is different from all reserved words now in or later added to the language (see Object Names). Control character codes (ASCII 0-31) are not allowed. choice Same as string; quotes optional on choice words valid for the member. Capitalization does not matter. date Julian day of year (as int constant), or month abbreviation <code>Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec</code> followed by the int day of month. (Actually, the month names are operators implemented to add the starting day of the month to the following int quantity)."},{"location":"input-structure/#operators","title":"Operators","text":"<p>For floats and ints, the CSE input language recognizes a set of operators based closely on those found in the C programming language. The following table describes the available numeric operators. The operators are shown in the order of execution (precedence) when no ()'s are used to control the order of evaluation; thin lines separate operators of equal precedence.</p> Feet-Inches Separator <code>'</code> <p><code>a ' b</code> yields <code>a + b/12</code></p> <p>Example: <code>4'6 = 4.5</code></p> Unary plus <code>+</code> The familiar \"positive\", as in <code>+3</code>. Does nothing; rarely used. Unary minus <code>-</code> <p>The familiar \"minus\", as in <code>-3</code>.</p> <p>Example: <code>-(-3) = +3</code></p> Logical NOT <code>!</code> <p>Changes <code>0</code> to <code>1</code> and any non-<code>0</code> value to <code>0</code>.</p> <p>Examples: <code>!0 = 1</code>, <code>!17 = 0</code></p> One's Complement <code>~</code> Complements each bit in an int value. Multiplication <code>*</code> <p>Multiplication</p> <p>Examples: <code>3*4 = 12</code>, <code>3.24*18.54 = 60.07</code></p> Division <code>/</code> <p>Division</p> <p>Examples: <code>4/2 = 2</code>, <code>3.24/1.42 = 2.28</code></p> <p>CAUTION!</p> <p>Integer division truncates toward 0: <code>3/2 = 1</code>, <code>3/-2 = -1</code>, <code>-3/2 = -1</code>, <code>2/3 = 0</code></p> Modulus <code>%</code> Yields the remainder after division, e.g. <code>7%2 = 1</code>. The result has the same sign as the left operand (e.g.<code>(-7)%2 = -1</code>). <code>%</code> is defined for both integer and floating point operands (unlike ANSI C). Addition <code>+</code> <p>Yields the sum of the operands</p> <p>Example: <code>5+3=8</code></p> Subtraction <code>-</code> <p>Yields the difference of the operands</p> <p>Example: <code>5-3=2</code></p> Right Shift <code>&gt;&gt;</code> <p><code>a &gt;&gt; b</code> yields <code>a</code> shifted right <code>b</code> bit positions</p> <p>Example: <code>8 &gt;&gt; 2 = 2</code></p> Left Shift <code>&lt;&lt;</code> <p><code>a &lt;&lt; b</code> yields <code>a</code> shifted left <code>b</code> bit positions</p> <p>Example: <code>8 &lt;&lt; 2 = 32</code></p> Less than <code>&lt;</code> <code>a &lt; b</code> yields 1 if <code>a</code> is less than <code>b</code>, otherwise 0 Less than or equal <code>&lt;=</code> <code>a &lt;= b</code> yields 1 if <code>a</code> is less than or equal to <code>b</code>, otherwise 0 Greater than or equal <code>&gt;=</code> <code>a &gt;= b</code> yields 1 if <code>a</code> is greater than or equal to <code>b</code>, otherwise 0 Greater than <code>&gt;</code> <code>a &gt; b</code> yields 1 if <code>a</code> is greater than <code>b</code>, otherwise 0 Equal <code>==</code> <code>a == b</code> yields 1 if <code>a</code> is exactly (bit wise) equal to <code>b</code>, otherwise 0 Not equal <code>==</code> <code>a != b</code> yields 1 if <code>a</code> is not equal to <code>b</code>, otherwise 0 Bitwise AND <code>&amp;</code> <p><code>a &amp; b</code> yields the bitwise AND of the operands</p> <p>Example: <code>6 &amp; 2 = 2</code></p> Bitwise EXCLUSIVE OR <code>^</code> <p><code>a ^ b</code> yields the bitwise XOR of the operands</p> <p>Example: <code>6 ^ 2 = 4</code></p> Bitwise INCLUSIVE OR <code>|</code> <p><code>a | b</code> yields the bitwise IOR of the operands</p> <p>Example: <code>6 | 2 = 6</code></p> Logical AND <code>&amp;&amp;</code> <code>a &amp;&amp; b</code> yields 1 if both <code>a</code> and <code>b</code> are non-zero, otherwise 0. <code>&amp;&amp;</code> guarantees left to right evaluation: if the first operand evaluates to 0, the second operand is not evaluated and the result is 0. Logical OR <code>||</code> <code>a || b</code> yields 1 if either <code>a</code> or <code>b</code> is true (non-0), otherwise 0. <code>||</code> guarantees left to right evaluation: if the first operand evaluates to non-zero, the second operand in not evaluated and the result is 1. Conditional <code>?:</code> <code>a ? b : c</code> yields <code>b</code> if <code>a</code> is true (non-0), otherwise <code>c</code>. <p>Dates are stored as ints (the value being the Julian day of the year), so all numeric operators could be used. The month abbreviations are implemented as operators that add the first day of the month to the following int value; CSE does not disallow their use in other numeric contexts.</p> <p>For strings, object names, and choices, the CSE input language currently has no operators except the <code>?:</code> conditional operator and the concat() function. Note, though, that the choose, choose1, select, and hourval functions described below work with strings, object names, and choice values as well as numbers.</p>"},{"location":"input-structure/#system-variables","title":"System Variables","text":"<p>System Variables are built-in operands with useful values. To avoid confusion with other words, they begin with a <code>$</code>. Descriptions of the CSE system variables follow. Capitalization shown need not be matched. Most system variables change during a simulation run, resulting in the variations shown; they cannot be used where the context will not accept variation at least this fast. (The Input Data Section gives the variability, or maximum acceptable variation, for each object member.)</p> $dayOfYear Day of year of simulation, 1 - 365; 1 corresponds to Jan-1. (Note that this is not the day of the simulation unless begDay is Jan-1.)Variation: daily. $month Month of year, 1 - 12.Variation: monthly. $dayOfMonth Day of month, 1 - 31.Variation: daily. $hour Hour of day, 1 - 24, in local time; 1 corresponds to midnight - 1 AM.Variation: hourly. $hourST Hour of day, 1 - 24, in standard time; 1 corresponds to midnight - 1 AM.Variation: hourly. $subhour Subhour of hour, 1 - N (number of subhours).Variation: subhourly. $dayOfWeek Day of week, 1 - 7; 1 corresponds to Sunday, 2 to Monday, etc. Note that $dayOfWeek is 4 (Wed) during autosizing.Variation: daily. $DOWH Day of week 1-7 except 8 on every observed holiday. Note that $DOWH is 4 (Wed) during autosizing.Variation: daily. $isHoliday 1 on days that a holiday is observed (regardless of the true date of the holiday); 0 on other days.Variation: daily. $isHoliTrue 1 on days that are the true date of a holiday, otherwise 0.Variation: daily. $isWeHol 1 on weekend days or days that are observed as holidays.Variation: daily. $isWeekend 1 on Saturday and Sunday, 0 on any day from Monday to Friday.Variation: daily. $isWeekday 1 on Monday through Friday, 0 on Saturday and Sunday.Variation: daily. $isBegWeek 1 for any day immediately following a weekend day or observed holiday that is neither a weekend day or an observed holiday.Variation: daily. $isWorkDay 1 on non-holiday Monday through Friday, 0 on holidays, Saturday and Sunday.Variation: daily. $isNonWorkDay 1 on Saturday, Sunday and observed holidays, 0 on non-holiday Monday through Friday.Variation: daily. $isBegWorkWeek 1 on the first workday after a non-workday, 0 all other days.Variation: daily. $isDT 1 if Daylight Saving time is in effect, 0 otherwise.Variation: hourly. $autoSizing 1 during autosizing calculations, 0 during main simulation.Variation: for each phase. $dsDay Design day type, 0 during main simulation, 1 during heating autosize, 2 during cool autosize.Variation: daily. <p>Weather variables: the following allow access to the current hour's weather conditions in you CSE expressions. Units of measure are shown in parentheses. All have Variation: hourly.</p> $radBeam Solar beam irradiance (on a sun-tracking surface) this hour (Btu/ft2) $radDiff Solar diffuse irradiance (on horizontal surface) this hour (Btu/ft2) $tDbO Outdoor drybulb temperature this hour (degrees F) $tWbO Outdoor wetbulb temperature this hour (degrees F) $wO Outdoor humidity ratio this hour (lb H2O/lb dry air) $windDirDeg Wind direction (compass degrees) $windSpeed Wind speed (mph)"},{"location":"input-structure/#built-in-functions","title":"Built-in Functions","text":"<p>Built-in functions perform a number of useful scheduling and conditional operations in expressions. Built-in functions have the combined variation of their arguments; for hourval, the minimum result variation is hourly. For definitions of numeric and anyType, see Expression Types.</p>"},{"location":"input-structure/#brkt","title":"<code>brkt</code>","text":"Function limits a value to be in a given range Syntax numeric brkt( numeric min, numeric val, numeric max ) Remark If val is less than min, returns min; if val is greater than max, returns max; if val is in between, returns val. Example <p>In an AIRHANDLER object, the following statement would specify a supply temperature equal to 130 minus the outdoor air temperature, but not less than 55 nor greater than 80:</p> <pre><code>ahTsSp = brkt(55, 130 - $tDbO, 80);\n</code></pre> <p>This would produce a 55-degree setpoint in hot weather, an 80-degree setpoint in cold weather, and a transition from 55 to 70 as the outdoor temperature moved from 75 to 50.</p>"},{"location":"input-structure/#fix","title":"<code>fix</code>","text":"Function converts float to int Syntax int fix( float val ) Remark val is converted to int by truncation. Examples <pre><code>fix(1.3)     // 1\nfix(1.99)    // 1\nfix(-4.4)    // -4\n</code></pre>"},{"location":"input-structure/#tofloat","title":"<code>toFloat</code>","text":"Function converts int to float Syntax float toFloat( int val )"},{"location":"input-structure/#min","title":"<code>min</code>","text":"Function returns the lowest quantity from a list of values. Syntax numeric min( numeric value1, numeric value2, ... numeric valuen ) Remark there can be any number of arguments separated by commas;              if floats and ints are intermixed, the result is float."},{"location":"input-structure/#max","title":"<code>max</code>","text":"Function returns the highest quantity from a list of values. Syntax numeric max ( numeric value1, numeric value2, ..., numeric valuen )"},{"location":"input-structure/#choose","title":"<code>choose</code>","text":"Function returns the nth value from a list. If arg0 is 0, value0 is returned; for 1, value1 is returned, etc. Syntax anyType choose ( int arg0, anyType value0, anyType value1, ... anyType valuen ) or anyType choose ( int arg0, anyType value0, ... anyType valuen, default valueDef) Remarks Any number of value arguments may be given. If default and another value is given, this value will be used if arg0 is less than 0 or too large; otherwise, an error will occur."},{"location":"input-structure/#choose1","title":"<code>choose1</code>","text":"Function same as choose except arg0 is 1-based. Choose1 returns the second argument value1 for arg0 = 1, the third argument value2 when arg0 = 2, etc. Syntax anyType choose1 ( int arg0, anyType value1, anyType value2, ... anyType valuen ) or anyType choose1 ( int arg0, anyType value1, ... anyType valuen, default valueDef) Remarks <p>choose1 is a function that is well suited for use with daily system variables. For example, if a user wanted to denote different values for different days of the week, the following use of choose1 could be implemented:</p> <p><code>tuTC = choose1($dayOfWeek, MonTemp, TueTemp, ...)</code></p> <p>Tip</p> <p>For hourly data, the hourval function would be a better choice, because it doesn't require the explicit declaration of the <code>$hour</code> system variable.</p>"},{"location":"input-structure/#select","title":"<code>select</code>","text":"Function contains Boolean-value pairs; returns the value associated with the first Boolean that evaluates to true (non-0). Syntax anyType ( Boolean arg1, anyType value1, Boolean arg2, anyType value2, ... default anyType) (the default part is optional) Remark select is a function that simulates if-then logic during simulation (for people familiar with C, it works much like a series of imbedded conditionals: (a?b:(a?b:c)) ). Example <p><code>select</code> can be used to simulate a dynamic (run-time) if-else statement:</p> <pre><code>gnPower = select( $isHoliday, HD_GAIN,  // if ($isHoliday)\ndefault WD_GAIN)  // else\n</code></pre> <p>This technique can be combined with other functions to schedule items on a hourly and daily basis. For example, an internal gain that has different schedules for holidays, weekdays, and weekends could be defined as follows:</p> <pre><code>// 24-hour lighting power schedules for weekend, weekday, holiday:\n#define WE_LIGHT  hourval( .024, .022, .021, .021, .021, .026, \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.038, .059, .056, .060, .059, .046, \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.045, .005, .005, .005, .057, .064, \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.064, .052, .050, .055, .044, .027 )\n\n#define WD_LIGHT  hourval( .024, .022, .021, .021, .021, .026, \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.038, .059, .056, .060, .059, .046, \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.045, .005, .005, .005, .057, .064, \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.064, .052, .050, .055, .044, .027 )\n\n#define HD_LIGHT  hourval( .024, .022, .021, .021, .021, .026, \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.038, .059, .056, .060, .059, .046, \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.045, .005, .500, .005, .057, .064, \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.064, .052, .050, .055, .044, .027 )\n\n// set power member of zone's GAIN object for lighting\ngnPower = BTU_Elec( ZAREA*0.1 ) *          // .1 kW/ft2 times...\n\n\u00a0\u00a0\u00a0\u00a0select( $isHoliday, HD_LIGHT,   // Holidays\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0     $isWeekend, WE_LIGHT,   // Saturday &amp; Sunday\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0     default     WD_LIGHT ); // Week Days\n</code></pre> <p>In the above, three subexpressions using hourval (next) are first defined as macros, for ease of reading and later change. Then, gnPower (the power member of a GAIN object) is set, using select to choose the appropriate one of the three hourval calls for the type of day. The expression for gnPower is a live expression with hourly variation, that is, CSE will evaluate it an set gnPower to the latest value each hour of the simulation. The variation comes from hourval, which varies hourly (also, <code>$isHoliday</code> and <code>$isWeekend</code> vary daily, but the faster variation determines the variation of the result).</p>"},{"location":"input-structure/#hourval","title":"<code>hourval</code>","text":"Function from a list of 24 values, returns the value corresponding to the hour of day. Syntax <p>anyType hourval ( anyType value1, anyType value2, \u2026, anyType value24 )</p> <p>anyType hourval ( anyType value1, anyType value2, \u2026, default anyType)</p> Remark <p>hourval is evaluated at runtime and uses the hour of the day being simulated to choose the corresponding value from the 24 suppplied values.</p> <p>If less than 24 value arguments are given, default and another value (or expression) should be supplied to be used for hours not explicitly specified.</p> Example see select, just above."},{"location":"input-structure/#abs","title":"<code>abs</code>","text":"Function converts numeric to its absolute value Syntax numeric abs( numeric val)"},{"location":"input-structure/#sqrt","title":"<code>sqrt</code>","text":"Function Calculates and returns the positive square root of val ( val must be \\(\\geq\\) 0). Syntax float sqrt ( float val)"},{"location":"input-structure/#exp","title":"<code>exp</code>","text":"Function Calculates and returns the exponential of val (=e<sup>val</sup>) Syntax float exp( float val)"},{"location":"input-structure/#loge","title":"<code>logE</code>","text":"Function Calculates and returns the base e logarithm of val ( val            must be \\(\\geq\\) 0). Syntax float logE( float val)"},{"location":"input-structure/#log10","title":"<code>log10</code>","text":"Function Calculates and returns the base 10 logarithm of val ( val must be \\(\\geq\\) 0). Syntax float log10( float val)"},{"location":"input-structure/#sin","title":"<code>sin</code>","text":"Function Calculates and returns the sine of val (val in radians) Syntax float sin( float val)"},{"location":"input-structure/#sind","title":"<code>sind</code>","text":"Function Calculates and returns the sine of val (val in degrees) Syntax float sind( float val)"},{"location":"input-structure/#asin","title":"<code>asin</code>","text":"Function Calculates and returns (in radians) the arcsine of val Syntax float asin( float val)"},{"location":"input-structure/#asind","title":"<code>asind</code>","text":"Function Calculates and returns (in degrees) the arcsine of val Syntax float asind( float val)"},{"location":"input-structure/#cos","title":"<code>cos</code>","text":"Function Calculates and returns the cosine of val (val in radians) Syntax float cos( float val)"},{"location":"input-structure/#cosd","title":"<code>cosd</code>","text":"Function Calculates and returns the cosine of val (val in degrees) Syntax float cosd( float val)"},{"location":"input-structure/#acos","title":"<code>acos</code>","text":"Function Calculates and returns (in radians) the arccosine of val Syntax float acos( float val)"},{"location":"input-structure/#acosd","title":"<code>acosd</code>","text":"Function Calculates and returns (in degrees) the arccosine of val Syntax float acosd( float val)"},{"location":"input-structure/#tan","title":"<code>tan</code>","text":"Function Calculates and returns the tangent of val (val in radians) Syntax float tan( float val)"},{"location":"input-structure/#tand","title":"<code>tand</code>","text":"Function Calculates and returns the tangent of val (val in degrees) Syntax float tand( float val)"},{"location":"input-structure/#atan","title":"<code>atan</code>","text":"Function Calculates and returns (in radians) the arctangent of val Syntax float atan( float val)"},{"location":"input-structure/#atand","title":"<code>atand</code>","text":"Function Calculates and returns (in degrees) the arctangent of val Syntax float atand( float val)"},{"location":"input-structure/#atan2","title":"<code>atan2</code>","text":"Function Calculates and returns (in radians) the arctangent of y/x (handling x = 0) Syntax float atan2( float y, float x)"},{"location":"input-structure/#atan2d","title":"<code>atan2d</code>","text":"Function Calculates and returns (in degrees) the arctangent of y/x (handling x = 0) Syntax float atan2d( float y, float x)"},{"location":"input-structure/#pow","title":"<code>pow</code>","text":"Function Calculates and returns val raised to the xth power (=val<sup>x</sup>). val and x cannot both be 0. If val &lt; 0, x must be integral. Syntax float pow( float val, numeric x)"},{"location":"input-structure/#enthalpy","title":"<code>enthalpy</code>","text":"Function Returns enthalpy of moist air (Btu/lb) for dry bulb temperature (F) and humidity ratio (lb/lb) Syntax float enthalpy( float tDb, float w)"},{"location":"input-structure/#wfromdbwb","title":"<code>wFromDbWb</code>","text":"Function Returns humidity ratio (lb/lb) of moist air from dry bulb and wet bulb temperatures (F) Syntax float wFromDbWb( float tDb, float tWb)"},{"location":"input-structure/#wfromdbrh","title":"<code>wFromDbRh</code>","text":"Function Returns humidity ratio (lb/lb) of moist air from dry bulb temperature (F) and relative humidity (0 \u2013 1) Syntax float wFromDbRh( float tDb, float rh)"},{"location":"input-structure/#rhfromdbw","title":"<code>rhFromDbW</code>","text":"Function Returns relative humidity (0 \u2013 1) of moist air from dry bulb temperature (F) and humidity ratio (lb/lb).   Syntax float rhFromDbW( float tDb, float w) Remark The return value is constrained to 0 &lt;= rh &lt;= 1 (that is, physically impossible combinations of tDb and w are silently tolerated)."},{"location":"input-structure/#concat","title":"<code>concat</code>","text":"Function Returns string concatenation of arguments Syntax string concat( string s1, string s2, ... string sn) Example Assuming Jan 1 falls on Thurs and the simulation day is May 3: concat( @Top.dateStr, \" falls on a \", select( $isWeekend, \"weekend\", default \"weekday\")) returns \"Sun 03-May falls on a weekend\""},{"location":"input-structure/#import","title":"<code>import</code>","text":"Function Returns float read from an import file. Syntax float import( string importFile, string colName)\\ float import( string importFile, int colN) Remark <p>Columns can be referenced by name or 1-based index.</p> <p>See IMPORTFILE for details on use of import()</p>"},{"location":"input-structure/#importstr","title":"<code>importStr</code>","text":"Function Returns string read from an import file. Syntax string importStr( string importFile, string colName)\\ string importStr( string importFile, int colN) Remark See IMPORTFILE for details on use of importStr()"},{"location":"input-structure/#contin","title":"<code>contin</code>","text":"Function Returns continuous control value, e.g. for lighting control Syntax float contin( float mpf, float mlf, float sp, float val) Remark contin is evaluated at runtime and returns a value in the range 0 \u2013 1 ???"},{"location":"input-structure/#stepped","title":"<code>stepped</code>","text":"Function Returns stepped reverse-acting control value, e.g. for lighting control Syntax float stepped( int nsteps, float sp, float val) Remark stepped is evaluated at runtime and returns a value in the range 0 \u2013 1. If val &lt;= 0, 1 is returned; if val &gt;= sp, 0 is returned; otherwise, a stepped intermediate value is returned (see example) Example \\[ \\textbf{stepped}(3, 12, \\text{val}) = \\begin{cases} 1       &amp; \\text{if } \\text{val} &lt; 4 \\\\ 0.667   &amp; \\text{if } 4 \\leq \\text{val} &lt; 8 \\\\ 0.333   &amp; \\text{if } 8 \\leq \\text{val} &lt; 12 \\\\ 0       &amp; \\text{if } \\text{val} \\geq 12 \\end{cases} \\]"},{"location":"input-structure/#user-defined-functions","title":"User-defined Functions","text":"<p>User defined functions have the format:</p> <pre><code>    type FUNCTION name ( arg decls ) = expr ;\n</code></pre> <p>Type indicates the type of value the function returns, and can be:</p> <pre><code>    INTEGER\n    FLOAT\n    STRING\n    DOY       (day of year date using month name and day; actually same as integer).\n</code></pre> <p>Arg decls indicates zero or more comma-separated argument declarations, each consisting of a type (as above) and the name used for the argument in expr.</p> <p>Expr is an expression of (or convertible to) type.</p> <p>The tradeoffs between using a user-defined function and a preprocessor macro (<code>#define</code>) include:</p> <ol> <li> <p>Function may be slightly slower, because its code is always kept separate and called, while the macro expansion is inserted directly in the input text, resulting in inline code.</p> </li> <li> <p>Function may use less memory, because only one copy of it is stored no matter how many times it is called.</p> </li> <li> <p>Type checking: the declared types of the function and its arguments allow CSE to perform additional checks.</p> </li> </ol> <p>Note that while macros require line-splicing (\"\\\") to extend over one line, functions do not require it:</p> <pre><code>    // Function returning number of days in ith month of year:\n    DOY FUNCTION MonthLU (integer i) = choose1 ( i , Jan 31, Feb 28, Mar 31,\n                                                     Apr 30, May 31, Jun 30,\n                                                     Jul 31, Aug 31, Sep 30,\n                                                     Oct 31, Nov 30, Dec 31 ) ;\n    // Equivalent preprocessor macro:\n    #define MonthLU (i) = choose1 ( i , Jan 31, Feb 28, Mar 31,  \\\n                                        Apr 30, May 31, Jun 30,  \\\n                                        Jul 31, Aug 31, Sep 30,  \\\n                                        Oct 31, Nov 30, Dec 31 ) ;\n</code></pre>"},{"location":"input-structure/#probes","title":"Probes","text":"<p>Probes provide a universal means of referencing data within the simulator. Probes permit using the inputtable members of each object, as described in the Input Data Section, as operands in expressions. In addition, most internal members can be probed; we will describe how to find their names shortly.</p>"},{"location":"input-structure/#ways-to-use-probes","title":"Ways To Use Probes","text":"<p>The three general ways of using probes are:</p> <ol> <li> <p>During input, to implement things like \"make this window's width equal to 10% of the zone floor area\" by using the zone's floor area in an expression:</p> <pre><code>wnWidth = @zone[1].znArea * 0.1;\n\nHere \"`@zone[1].znArea`\" is the probe.\n</code></pre> </li> <li> <p>During simulation. Probing during simulation, to make inputs be functions of conditions in the building or HVAC systems, is limited because most of the members of interest are updated after CSE has evaluated the user's expressions for the subhour or other time interval -- this is logically necessary since the expressions are inputs. (An exception is the weather data, but this is also available through system variables such as $tDbO.)</p> <p>However, a number of prior subhour values are available for probing, making it possible to implement relationships like \"the local heat output of this terminal is 1000 Btuh if the zone temperature last subhour was below 65, else 500\":</p> <pre><code>tuMnLh = @znres[\"North\"].S.prior.tAir &lt; 65 ? 1000 : 500;\n</code></pre> </li> <li> <p>For output reports, allowing arbitrary data to be reported at subhourly, hourly, daily, monthly, or annual intervals. The REPORT class description describes the user-defined report type (UDT), for which you write the expression for the value to be reported. With probes, you can thus report almost any datum within CSE -- not just those values chosen for reporting when the program was designed. Even values calculated during the current subhour simulation can be probed and reported, because expressions for reports are evaluated after the subhour's calculations are performed.</p> </li> </ol> <p>Example</p> <pre><code>colVal = @airHandler[\"Hot\"].ts;     // report air handler supply temp\ncolVal = @terminal[NorthHot].cz;    // terminal air flow to zone (Btuh/F)\n</code></pre>"},{"location":"input-structure/#general-form","title":"General form","text":"<p>The general form of a probe is</p> <p>@ className [ objName ] . member</p> <code>className</code> is the CLASS being probed <code>objName</code> is the name of the specific object of the class; alternately, a numeric subscript is allowed. Generally, the numbers correspond to the objects in the order created. [ objName ] can be omitted for the TOP class, which has only one member, Top. <code>member</code> is the name of the particular member being probed. This must be exactly correct. For some inputtable members, the probe name is not the same as the input name given in the Input Data Section, and there are many probe-able members not described in the Input Data section. <p>Tip</p> <p>The initial <code>@</code> is always necessary. And don't miss the period after the <code>]</code>.</p>"},{"location":"input-structure/#probestxt","title":"probes.txt","text":"<p>How do you find out what the probe-able member names are? CSE will display the a list of the latest class and member names if invoked with the -p switch. Use the command line</p> <pre><code>    CSE -p &gt; probes.txt\n</code></pre> <p>to put the displayed information into the file PROBES.TXT, then print the file or examine it with a text editor.</p> <p>A portion of the <code>-p</code> output looks like:</p> <pre><code>    @exportCol[1..].        I   R                   owner: export\n                     name   I   R   string            constant\n                  colHead   I   R   string            input time\n                   colGap   I   R   integer number    input time\n                   colWid   I   R   integer number    input time\n                   colDec   I   R   integer number    input time\n                  colJust   I   R   integer number    constant\n                   colVal   I   R   un-probe-able     end of each subhour\n                   nxColi   I   R   integer number    constant\n\n    @holiday[1..].          I\n                     name   I       string            constant\n               hdDateTrue   I       integer number    constant\n                hdDateObs   I       integer number    constant\n               hdOnMonday   I       integer number    constant\n</code></pre> <p>In the above \"exportCol\" and \"holiday\" are class names, and \"name\", \"colHead\", \"colGap\", . . . are member names for class exportCol. Some members have multiple names separated by .'s, or they may contain an additional subscript. To probe one of these, type all of the names and punctuation exactly as shown (except capitalization may differ); if an additional subscript is shown, give a number in the specified range. An \"I\" designates an \"input\" parameter, an R means \"runtime\" parameter. The \"owner\" is the class of which this class is a subclass.</p> <p>The data type and variation of each member is also shown. Note that variation, or how often the member changes, is shown here. (Variability, or how often an expression assigned to the member may change, is given for the input table members in the Input Data Section). Members for which an \"end of\" variation is shown can be probed only for use in reports. A name described as \"un-probe-able\" is a structure or something not convertible to an integer, float, or string.</p> <p>surface[].sgdist[].f[]: f[0] is winter solar coupling fraction; f[1] is summer.</p>"},{"location":"input-structure/#variation-frequencies-revisited","title":"Variation Frequencies Revisited","text":"<p>At risk of beating the topic to death, we're going to review once more the frequencies with which a CSE value can change (variations), with some comments on the corresponding variabilities.</p> subhourly changes in each \"subhour\" used in simulation. Subhours are commonly 15-minute intervals for models using znModel=CNE or 2-minute intervals for CSE znModels. hourly changes every simulated hour. The simulated weather and many other aspects of the simulation change hourly; it is customary to schedule setpoint changes, HVAC system operation, etc. in whole hours. daily changes at each simulated midnite. monthly changes between simulated months. monthly-hourly, or \"hourly on first day of each month\" changes once an hour on the first day of each month; the 24 hourly values from the first day of the month are used for the rest of the month. This variation and variability is used for data dependent on the sun's position, to save calculation time over computing it every hour of every day. run start time value is derived from other inputs before simulation begins, then does not change. Members that cannot change during the simulation but which are not needed to derive other values before the simulation begins have \"run start time\" variability. input time value is known before CSE starts to check data and derive \"run start time\" values.  Expressions with \"input time\" variation may be used in many members that cannot accept any variation during the run. Many members documented in the Input Data Section as having \"constant\" variability may actually accept expressions with \"input time\" variation; to find out, try it: set the member to an expression containing a proposed probe and see if an error message results.  \"Input time\" differs from \"constant\" in that it includes object names (forward references are allowed, and resolved just before other data checks) and probes that are forward references to constant values. constant does not vary. But a \"constant\" member of a class denoted as R (with no I) in the probes report produced by CSE -p is actually not available until run start time. <p>Also there are end-of varieties of all of the above; these are values computed during simulation: end of each hour, end of run, etc. Such values may be reported (using a probe in a UDT report), but will produce an error message if probed in an expression for an input member value.</p>"},{"location":"introduction/","title":"Introduction","text":""},{"location":"introduction/#greetings","title":"Greetings","text":"<p>The purpose of this manual is to document the California Simulation Engine computer program, CSE. CSE is an hourly building and HVAC simulation program which calculates annual energy requirements for building space conditioning and lighting. CSE is specifically tailored for use as internal calculation machinery for compliance with the California building standards.</p> <p>CSE is a batch driven program which reads its input from a text file. It is not intended for direct use by people seeking to demonstrate compliance. Instead, it will be used within a shell program or by technically oriented users. As a result, this manual is aimed at several audiences:</p> <ol> <li> <p>People testing CSE during its development.</p> </li> <li> <p>Developers of the CSE shell program.</p> </li> <li> <p>Researchers and standards developers who will use the program to explore possible conservation opportunities.</p> </li> </ol> <p>Each of these groups is highly sophisticated. Therefore this manual generally uses an exhaustive, one-pass approach: while a given topic is being treated, everything about that topic is presented with the emphasis on completeness and accuracy over ease of learning.</p> <p>Please note that CSE is under development and will be for many more months. Things will change and from time to time this manual may be inconsistent with the program.</p>"},{"location":"introduction/#manual-organization","title":"Manual Organization","text":"<p>This Introduction covers general matters, including program installation.</p> <p>Operation documents the operational aspects of CSE, such as command line switches, file naming conventions, and how CSE finds files it needs.</p> <p>Input Structure documents the CSE input language in general.</p> <p>Input Data describes all of the specific input language statements.</p> <p>Output Reports will describe the output reports.</p> <p>Lastly, Probe Definitions lists all available probes.</p>"},{"location":"introduction/#installation","title":"Installation","text":""},{"location":"introduction/#hardware-and-software-requirements","title":"Hardware and Software Requirements","text":"<p>CSE is a 32-bit Microsoft Windows console application. That is, it runs at the command prompt on Windows Vista, Windows 7, Windows 8, and Windows 10.  Memory and disk space requirements depend on the size of projects being modeled, but are generally modest.</p> <p>To prepare input files, a text editor is required. Notepad will suffice, although a text editor intended for programming is generally more capable. Alternatively, some word processors can be used in \"ASCII\" or \"text\" or \"non-document\" mode.</p>"},{"location":"introduction/#installation-procedure","title":"Installation Procedure","text":"<p>Create a directory on your hard disk with the name \\CSE or some other name of your choice. Copy the files into that directory. Add the name of the directory to the PATH environment setting unless you intend to use CSE only from the CSE directory.</p>"},{"location":"operation/","title":"Operation","text":""},{"location":"operation/#command-line","title":"Command Line","text":"<p>CSE is invoked from the command prompt or from a batch file using the following command:</p> <pre><code>    CSE *inputfile* {*switches*}\n</code></pre> <p>where:</p> inputfile specifies the name of the text input file for the run(s). If the filename has an extension other than \".cse\" (the default), it must be included. The name of the file with weather data for the simulation(s) is given in this file (wfName= statement, see Weather Data Items). {switches} indicates zero or more of the following: <ul> <li> <p>-Dname defines the preprocessor symbol name with the value \"\". Useful for testing with <code>#ifdef name</code>, to invoke variations in the simulation without changing the input file. The CSE preprocessor is described \"The Preprocessor\".</p> </li> <li> <p>-Dname=value defines the preprocessor symbol name with the specified value. Name can then be used in the input file to allow varying the simulation without changing the input file -- see \"The Preprocessor\" for more information. The entire switch should be enclosed in quotes if it contains any spaces -- otherwise the command processor will divide it into two arguments and CSE will not understand it.</p> </li> <li> <p>-Uname undefines the preprocessor symbol name.</p> </li> <li> <p>-ipath;path;path specifies directories where CSE looks for input and include files.</p> </li> <li> <p>-b batch mode: suppresses all prompts for user input.  Currently there are no prompts implemented in CSE.  -b is retained in case prompts are added in the future.  It is good practice to include -b in batch script CSE invocations.</p> </li> <li> <p>-n suppresses screen display of warning messages.  When -n is specified, warning messages are reported only to the error file.</p> </li> <li> <p>-p display all the class and member names that can be \"probed\" or accessed in CSE expressions. \"Probes\" are described in \"Probes\". Use with command processor redirection operator \"&gt;\" to obtain a report in a file. Inputfile may be given or omitted when -p is given.</p> </li> <li> <p>-p1 similar to -p, but displays additional member names that cannot be probed or would not make sense to probe in an input file (development aid).</p> </li> <li> <p>-c display all input names.</p> </li> <li> <p>-c1 display input names with build-independent details from CSE CULT tables (development aid).</p> </li> <li> <p>-c2 display input names with all details from CSE CULT tables (development aid).</p> </li> <li> <p>-x specifies report test prefix; see TOP repTestPfx. The -x command line setting takes precedence over the input file value, if any.</p> </li> <li> <p>-tnn specifies internal testing option bits (development aid).  The following values should be combined bit-wise to determine nn. \\     1: Omit directory paths from file names in reports, yielding location-independent report files suitable for text comparison.\\     2: Include detailed timing information in the log file (default is summary only).</p> </li> </ul>"},{"location":"operation/#locating-files","title":"Locating Files","text":"<p>As with any program, in order to invoke CSE, the directory containing CSE.EXE must be the current directory, or that directory must be on the operating system path, or you must type the directory path before CSE.</p> <p>A CSE simulation requires a weather file. The name of the weather file is given in the CSE input file (<code>wfName=</code> statement, see Weather Data Items). The weather file must be in one of the same three places: current directory, directory containing CSE.EXE, or a directory on the operating system path; or, the directory path to the file must be given in the <code>wfName=</code> statement in the usual pathName syntax. ?? Appears that file must be in current directory due to file locating bugs 2011-07</p> <p>The CSE input file, named on the CSE command line, must be in the current directory or the directory path to it must be included in the command line.</p> <p>Included input files, named in <code>#include</code> preprocessor directives (see \"The Preprocessor\") in the input file, must be in the current directory or the path to them must be given in the <code>#include</code> directive. In particular, CSE will NOT automatically look for included files in the directory containing the input file. The default extension for included files is \".CSE\".</p> <p>Output files created by default by CSE (error message file, primary report and export files) will be in the same directory as the input file; output files created by explicit command in the input file (additional report and/or export files) will be in the current directory unless another path is explicitly specified in the command creating the file.</p>"},{"location":"operation/#output-file-names","title":"Output File Names","text":"<p>If any error or warning messages are generated, CSE puts them in a file with the same name and path as the input file and extension .ERR, as well as on the screen and, usually, in the primary (default) report file. The exception is errors in the command line: these appear only on the screen. If there are no error or warning messages, any prior file with this name is deleted.</p> <p>By default, CSE generates an output report file with the same name and path as the input file, and extension \".REP\". This file may be examined with a text editor and/or copied to an ASCII printer. If any exports are specified, they go by default into a file with the same name and path as the input file and extension \".EXP\".</p> <p>In response to specifications in the input file, CSE can also generate additional report and export files with user-specified names. The default extensions for these are .REP and .CSV respectively and the default directory is the current directory; other paths and extensions may be specified. For more information on report and export files, see REPORTFILE and EXPORTFILE in \"Input Data\".</p>"},{"location":"operation/#errorlevel","title":"Errorlevel","text":"<p>CSE sets the command processor ERRORLEVEL to 2 if any error occurs in the session. This should be tested in batch files that invoke CSE, to prevent use of the output reports if the run was not satisfactory. The ERRORLEVEL is NOT set if only warning messages that do not suppress or abort the run occur, but such messages DO create the .ERR file.</p>"},{"location":"output-reports/","title":"Output Reports","text":"<p>CSE report data is accumulated during simulation and written to the report file at the end of the run. Some reports are generated by default and cannot be turned off. There are a set of predefined reports which may be requested in the input. The user may also define custom reports which include many CSE internal variables. Reports may accumulate data on an a variety of frequencies including subhourly, hourly, daily, monthly, and annual (run) intervals.</p>"},{"location":"output-reports/#units","title":"Units","text":"<p>The default units for CSE reports are:</p> Energy mBtu, millions of Btu (to convert to kWh divide by 292) Temperature degrees Farenheit Air Flow cfm (cubic feet per minute)"},{"location":"output-reports/#time","title":"Time","text":"<p>Hourly reports show hour 1 through 24 where hour 1 includes the time period from midnight to 1 AM. By default, CSE specifies that January first is a Thursday and the simulation occurs on a non-leap year. Daylight savings is in effect from the second Sunday of March on which CSE skips hour 3 until the first Sunday of November when CSE simulates 25 hours. These calendar defaults can be modified as required.</p>"},{"location":"output-reports/#meter-reports","title":"METER Reports","text":"<p>A Meter Report displays the energy use of a METER object, a user-defined \"device\" that records energy consumption of equipment as simulated by CSE. CSE allows the user to define as many meters as desired and to assign any energy using device to any meter.</p> <p>Meters account for energy use in pre-defined categories, called end uses, that are documented with METER.</p>"},{"location":"output-reports/#air-flow-meter-report","title":"Air Flow Meter Report","text":"<p>An Air Flow Meter Report displays air flow values accumulated by an AFMETER that is associated with one or more ZONEs.  The report provides insight into the results of the AirNet pressure model.</p> <p>AFMETER maintains values for subhour, hour, day, month, and year intervals.  Values are standard cfm (0.075 lb/ft3).  Values for intervals longer than subhour are averages.</p> <p>Flows are categorized by 1) direction of flow (+ = into zone(s), - = out of zone(s)); IZXFER izAFCat tags; and 3) type of source or sink of the flow (ambient, unconditioned zone, conditioned zone).</p> <p>The following items are displayed (using the abbreviations shown in the report headings).  The \"\u00b1\" notation indicates that two columns are included, one for each direction of flow.  For example, \"InfX\u00b1\" means the report includes columns \"InfX+\" (infiltration flows into the zone) and \"InfX-\" (infiltration flows out of the zone).</p> Tot\u00b1 Total flows Unkn\u00b1 Uncategorized flows (generally this shows 0) InfX\u00b1 Infiltration flows from/to ambient (izAFCat = InfilEx) VntX\u00b1 Natural vent exchanges from/to ambient (izAFCat = VentEx) FanX\u00b1 Forced vent and DOAS flows to/from ambient (izAFCat = FanEx) InfU\u00b1 Infiltration flows from/to unconditioned zones (izAFCat = InfilIz) VntU\u00b1 Natural vent flows from/to unconditioned zones (izAFCat = VentIz) FanU\u00b1 Forced vent flows from/to unconditioned zones (izAFCat = FanIz) InfC\u00b1 Infiltration flows from/to conditioned zones (izAFCat = InfilIz) VntC\u00b1 Natural vent flows from/to conditioned zones (izAFCat = VentIz) FanC\u00b1 Forced vent flows from/to conditioned zones (izAFCat = FanIz) Duct\u00b1 Duct leakage flows HVAC\u00b1 HVAC air flows at zone (i.e. at registers)"},{"location":"output-reports/#energy-balance-report","title":"Energy Balance Report","text":"<p>The Energy Balance Report displays the temperature and sensible and latent heat flows into and out of the air of a single zone. Sign conventions assume that a positive flow increases the air temperature. Heat flow from a warm mass element such as a concrete wall into the zone air is defined as a positive flow, heat flow from air into mass is negative. Solar gain into the zone is defined as a positive heat flow. Solar gain that is incident on and absorbed directly into a mass element is shown as both a positve in the SOLAR column (gain to the zone) and a negative in the MASS column (lost from the zone to the mass).</p> <p>In a real building zone energy and moisture flows must balance due to the laws of physics. CSE uses approximate solutions for the energy and moisture balances and displays the net balance which is a measure of internal calculation error.</p> <p>The following items are displayed (using the abbreviations shown in the report headings):</p> Tair Air temperature in the zone (since CSE uses combined films this is technically the effective temperature and includes radiant effects). WBair Wet Bulb temperature in the zone. Cond Heat flow through light weight surfaces from or to the outdoors. InfS Sensible infiltration heat flow from outdoors. Slr Solar gain through glazing (net) and solar gains absorbed by light surfaces and transmitted into the zone air. IgnS Sensible internal gains from lights, equipment, people, etc. Mass Net heat flow to (negative) and from (positive) the mass elements of the zone. Izone Net heat flows to other zones in the building. MechS Net heat flows from heating, cooling and ventilation. BALS The balance (error) calculated by summing the sensible gains and losses. InfL Latent infiltration heat flow. IgnL Latent internal gains. AirL Latent heat absorbed (negative) or released (positive) by changes in the room air moisture content. MechL Latent heat added or removed by cooling or ventilation. BalL The balance (error) calculated by summing the sensible gains and losses."},{"location":"output-reports/#air-handler-load-report","title":"Air Handler Load Report","text":"<p>The Air Handler Load Report displays conditions and loads at the peak load hours for the air handler for a single zone. The following items are displayed:</p> PkVf Peak flow (cfm) at supply fan VfDs Supply fan design flow (same as peak for E10 systems) PkQH Peak heat output from heating coil. Hcapt Rated capacity of heat coil <p>The rest are about the cooling coil. Most of the columns are values at the time of peak part load ratio (plr). Note that, for example, the peak sensible load is the sensible load at the time of peak part load ratio, even if there was a higher sensible load at another time when the part load ratio was smaller.</p> PkMo Month of cooling coil peak plr, 1-12 Dy Day of month 1-31 of peak Hr Hour of day 1-24 of cooling coil peak plr. Tout Outdoor drybulb temperature at time of cooling coil peak plr. Wbou Outdoor wetbulb similarly Ten Cooling coil entering air temperature at time of peak plr. Wben Entering wetbulb similarly Tex Exiting air temperature at plr peakWbexExiting air wetbulb similarly -PkQs Sensible load at time of peak plr, shown positive. -PkQl Latent load likewise -PkQC Total load -- sum of PkQs and PkQl CPlr Peak part load ratio: highest fraction of coil's capacity used, reflecting both fraction of maximum output under current conditions used when on and fraction of the time the fan is on. The maximum output under actual conditions can vary considerably from the rated capacity for DX coils. The fraction of maximum output used can only be 1.0 if the sensible and total loads happen to occur in the same ratio as the sensible and total capacities. The time the fan is on can be less than 1.0 for residential systems in which the fan cycles on with the compressor.For example, if at the cooling peak the coil ran at 0.8 powerwith the fan on 0.9 of the time, a CPlr of 0.72 would be reported. The preceding 12 columns are values at the time this peak occured. Ccapt Cooling coil rated total capacity Ccaps Rated sensible capacity."},{"location":"output-reports/#air-handler-report","title":"Air Handler Report","text":"<p>The Air Handler Load Report displays conditions and heat flows in the air handler for the time period specified. It is important to note that the air handler report only accumulates data if the air handler is on during an hour. The daily and monthly values are averages of the hours the air handler was on and DO NOT INCLUDE OFF HOUR VALUES. The following items are displayed:</p> Tout Outdoor drybulb temperature during hours the air handler was on. Wbou Outdoor wetbulb temperature similarly. Tret Return air dry bulb temperature during hours the air handler was on before return duct losses or leaks. Wbre Return air wetbulb similarly po Fraction outside air including economizer damper leakage, but not return duct leakage. Tmix Mixed air dry bulb temperature -- after return air combined with outside air; after return fan, but before supply fan and coil(s). Wbmi Mixed air wet bulb temperature, similarly. Tsup Supply air dry bulb temperature to zone terminals -- after coil(s) and air handler supply duct leak and loss; (without in zone duct losses after terminals). WBsu Supply air wet bulb temperature similarly. HrsOn Hours during which the fan operated at least part of the time. FOn Fraction of the time the fan was on during the hours it operated (HrsOn). CHECK FOR VAV, IS IT FLOW OR TIME VF Volumetric flow, measured at mix point/supply fan/coils; includes air that leaks out of supply duct and is thus non-0 even when zone terminals are taking noflow Qheat Heat energy added to air stream by heat coil, if any, MEASURED AT COIL not as delivered to zone (see Qload). Qsens, Qlat, Qcool Sensible, latent, and total heat added to air stream, (negative values) by cooling coil, MEASURED AT COIL, including heat cancelled by fan heat and duct losses, and heat added to air lost through supply duct leak. Qout Net heat taken from outdoor air. Sum of sensible and latent, measured RELATIVE TO CURRENT RETURN AIR CONDITIONS. Qfan Heat added to air stream by supply fan, plus return fan if any -- but not relief fan.. Qloss Heat added to air stream by supply and return duct leaks and conductive loss. Computed in each case as the sensible and latent heat in the air streamrelative to return air conditions after the leak or loss, less the same value before the leak or loss. Qload Net energy delivered to the terminals -- Sensible and latent energy, measured relative to return air conditions. INCLUDES DUCT LOSSES after terminals; thus will differ from sum of zone qMech's + qMecLat's. Qbal Sum of all the 'Q' columns, primarily a development aid. Zero indicates consistent and accurate computation; the normal printout is something like .0000, indicating that the value was too small to print in the space alloted, but not precisely zero, due to computational tolerances and internal round-off errors."},{"location":"input-data/","title":"Input Data","text":"<p>This section describes the input for each CSE class (object type). For each object you wish to define, the usual input consists of the class name, your name for the particular object (usually), and zero or more member value statements of the form name=expression. The name of each subsection of this section is a class name (HOLIDAY, MATERIAL, CONSTRUCTION, etc.). The object name, if given, follows the class name; it is the first thing in each description (hdName, matName, conName, etc.). Exception: no statement is used to create or begin the predefined top-level object \"Top\" (of class TOP); its members are given without introduction.</p> <p>After the object name, each member's description is introduced with a line of the form name=type. Type indicates the appropriate expression type for the value:</p> <ul> <li> <p>float</p> </li> <li> <p>int</p> </li> <li> <p>string</p> </li> <li> <p>____name (object name for specified type of object)</p> </li> <li> <p>choice</p> </li> <li> <p>date</p> </li> </ul> <p>These types discussed in the section on expression types.</p> <p>Each member's description continues with a table of the form:</p> Units Legal Range Default Required Variability ft<sup>2</sup> x &gt; 0 wnHeight \\* wnWidth No constant <p>where the column headers have the following meaning:</p> Units units of measure (lb., ft, Btu, etc.) where applicable Legal Range limits of valid range for numeric inputs; valid choices for choice members, etc. Default value assumed if member not given; applicable only if not required Required YES if you must give this member Variability how often the given expression can change: hourly, daily, etc. See sections on expressions, statements, and variation frequencies"},{"location":"input-data/afmeter/","title":"AFMETER","text":"<p>An AFMETER object is a user-defined \"device\" that records zone air flows as simulated by CSE. The user defines AFMETERs and assigns them to zones (see ZONE znAFMtr).</p> <p>Air flow is recorded in standard air cfm (density 0.075 lb/ft3) at subhour, hour, day, month, and year intervals.  At intervals of an hour and longer, values are averaged.  Flows are categorized according to IZXFER izAFCat.</p> <p>If any AFMETERs are defined, an additional AFMETER \"sum_of_AFMETERs\" is automatically created where the sums of all user-define AFMETERs are accumulated.</p> <p>Note that only AirNet flows are recorded.</p> <p>AFMETER results can be REPORTed using rpType=AFMTR (or EXPORTed using exType=AFMTR).  See Air Flow Meter Report.</p>"},{"location":"input-data/afmeter/#afmtrname","title":"afMtrName","text":"<p>Name of meter: required for assigning air flows to the AFMETER.</p> Units Legal Range Default Required Variability 63 characters none Yes constant"},{"location":"input-data/afmeter/#endafmeter","title":"endAFMeter","text":"<p>Indicates the end of the meter definition. Alternatively, the end of the meter definition can be indicated by the declaration of another object or by END.</p> Units Legal Range Default Required Variability none No constant <p>Related Probes:</p> <ul> <li>@afmeter</li> </ul>"},{"location":"input-data/airhandler/","title":"AIRHANDLER","text":"<p>AIRHANDLER defines a central air handling system, containing a fan or fans, optional heating and cooling coils, and optional outside air intake and exhaust. AIRHANDLERs are subobjects of TOP, and deliver air to one or more ZONEs through TERMINAL(s). AIRHANDLER objects can be used to model fan ventilation and forced air heating and cooling. Dual duct systems are modeled with two AIRHANDLERs (one for hot air and one for cool air) and two TERMINALs in each zone. Figure 2 shows\u2026. [need a sentence that explains the figure.]</p> <p></p> <p>Air handler diagram</p> <p>AIRHANDLER is designed primarily to model a central system that supplies hot or cold air at a centrally determined temperature (the \"Supply Temperature Setpoint\") to Variable Air Volume (VAV) terminals in the zones. Some additional variations are also supported:</p> <ol> <li> <p>The AIRHANDLER can model a constant volume, fan-always-on system, where the supply temperature varies to meet the load of a single zone (that is, the thermostat controls the heating and/or cooling coil, but not the fan). This is done by setting the terminal minimum flow, tuVfMn, equal to the maximum flow, tuVfMxH for heating and/or tuVfMxC for cooling, and using a supply temperature control method that adjusts the temperature to the load (ahTsSp = WZ, CZ, or ZN2, described below).</p> </li> <li> <p>The AIRHANDLER can model constant volume, fan cycling systems where the fan cycles with a single zone thermostat, running at full flow enough of the time to meet the load and shutting completely off the rest of the time, rather than running at variable flow to adjust to the demand from the zones.</p> <p>This variation is invoked by specifying ahFanCycles= YES (usually with ahTsSp=ZN, described below). The user should be aware that this is done by treating fractional flow as equivalent to fractional on-time in most of the program, adjusting for the higher flow and less than 100% duty cycle only in a few parts of the model known to be non-linear, such as computation of cooling coil performance, fan heat, and duct leakage. For example, the outside air inputs, designed for VAV modeling, won't work in the expected manner unless you keep this modeling method in mind.</p> </li> <li> <p>The AIRHANDLER can supply hot air, cold air, or shut off according to the requirements of a single zone. This variation is invoked by giving ahTsSp = ZN or ZN2, both described further below.</p> </li> </ol>"},{"location":"input-data/airhandler/#ahname","title":"ahName","text":"<p>Name of air handler: give after the word AIRHANDLER. Required for reference in TERMINALs.</p> Units Legal Range Default Required Variability 63 characters Yes constant"},{"location":"input-data/airhandler/#ahsched","title":"ahSched","text":"<p>Type: choice</p> <p>Air handler schedule; OFF or ON, hourly schedulable by using CSE expression.</p> OFF supply fan off; air handler not operating. Old date? Note: (future) Taylor setback/setup control in effect, when implemented. ON supply fan runs, at varying volume according to TERMINAL demand (except if ahFanCycles = YES, fan cycles on and off at full volume). <p>The following might be used to run an air handler between 8 AM and 5 PM:</p> <pre><code>    ahSched = select(  (\\$hour &gt; 8 &amp;&amp; \\$hour &lt;= 5),  ON,\n                                          default, OFF );\n</code></pre> Units Legal Range Default Required Variability ON/OFF ON No hourly"},{"location":"input-data/airhandler/#ahfxvffan","title":"ahFxVfFan","text":"<p>Type: float</p> <p>Fan flow rate multiplier for autosized fan(s). The default value (1.1) specifies 10% oversizing.</p> Units Legal Range Default Required Variability x \\(\\ge\\) 0 1.1 No constant"},{"location":"input-data/airhandler/#airhandler-supply-air-temperature-controller","title":"AIRHANDLER Supply Air Temperature Controller","text":""},{"location":"input-data/airhandler/#ahtssp","title":"ahTsSp","text":"<p>Type: float or choice</p> <p>Supply temperature setpoint numeric value OR* choice of control method (WZ, CZ, RA, ZN, or ZN2):</p> float A numeric value specifies the supply temperature setpoint. An expression can be used to make dependent on time, weather, etc. WZ Warmest Zone: for cooling, sets the supply temperature setpoint each sub??hour so that the control zone (seeahWzCzns) requiring the coolest supply temperature can meet its load with its VAV damper 90% of the way from its minimum opening to its maximum, that is, at a flow of: tuVfMn + .9(tuVfMxC - * tuVfMn*). CZ Coolest Zone: analogous to WZ, but for heating RA Supply temperature setpoint value is controlled by return air temperature (this cannot be done with a CSE expression without lagging a subhour). See ahTsRaMn and ahTsRaMx. ZN Causes air handler to switch between heating, OFF, and cooling as required by the load of a single zone. When the zone thermostat (modeled through the tuTC and tuTH inputs) calls for neither heating nor cooling, the air handler shuts down, including stopping its fan(s). Changes ahFanCycles default to YES, to simulate a constant volume, fan cycling system. Supply temperature setpoint value when ahFanCycles = YES is taken from ahTsMn for cooling, from ahTsMx for heating (actual temperatures expected to be limited by coil capacity since fan is running at full flow). When ahFanCycles = NO, the setpoint is determined to allow meeting the load, as for WZ and CZ. When the zone is calling for neither heat nor cold, the air handler shuts down, including stopping its fan(s), regardless of the ahFanCycles value. ZN2 Causes air handler to switch between heating, cooling, and FAN ONLY operation as required by the load of a single zone. To model a constant volume system where the fan runs continuously, use ZN2 and set the terminal minimum flow (tuVfMn) equal to the maximum (tuVfMxC and/or tuVfMxH). When ahTsSp is ZN2, the supply temperature setpoint is determined to allow meeting the load, as for WZ and CZ, described above. <p>Only when ahTsSp is ZN or ZN2 does AIRHANDLER switches between heating and cooling supply temperatures according to demand. In other cases, there is but a single setpoint value or control method (RA, CZ, or WZ); if you want the control method or numeric value to change according to time of day or year, outside temperature, etc., your CSE input must contain an appropriate conditional expression for ahTsSp.</p> <p>Unless ahTsSp is ZN or ZN2, the AIRHANDLER does not know whether it is heating or cooling, and will use either the heating coil or cooling coil, if available, as necessary, to keep the supply air at the single setpoint temperature. The coil schedule members, described below, allow you to disable present coils when you don't want them to operate, as to prevent cooling supply air that is already warm enough when heating the zones. For example, in an AIRHANDLER with both heating and cooling coils, if you are using a conditional expression based on outdoor temperature to change ahTsSp between heating and cooling values, you may use expressions with similar conditions for ahhcSched and ahccSched to disable the cooling coil when heating and vice versa. (Expressions would also be used in the TERMINALS to activate their heating or cooling setpoints according to the same conditions.)</p> <p>Giving ahTsSp is disallowed for an air handler with no economizer, no heat coil and no cooling coil. Such an AIRHANDLER object is valid as a ventilator; its supply temperature is not controlled. but rather determined by the outside temperature and/or the return air temperature.</p> Units Legal Range Default Required Variability <sup>o</sup>F number, RA*, WZ, CZ, ZN**, ZN2**, 0 Yes, if coil(s) or economizer present hourly <p>* ahTsRaMn, ahTsRaMx, ahTsMn, and ahTsMx are required input for this choice.</p> <p>** only a single ZONE may be used with these choices.</p> To Model Use Comments VAV heating OR cooling system ahTsSp = _numeric expression, _ WZ, CZ, or RA CSE models this most directly VAV system that both heats and cools (single duct) Use a conditional expression to change ahTsSp between heating and cooling values on the basis of outdoor temperature, date, or some other condition. Also use expressions to disable the unwanted coil and change each zone's setpoints according to same as ahTsSp. For example, when heating, use ahccSched = OFF and tuTC\u00a0=\u00a0999; and when cooling, use ahhcSched = OFF and tuTH =\u00a0-99. Dual duct heating cooling system Use two AIRHANDLERs Single zone VAV system that heats or cools per zone thermostat ahTsSp = ZN2 Supply fan runs, at flow tuVfMn, even when neither heating nor cooling. Supply temp setpoint determined as for CZ or WZ. Single zone constant volume system that heats or cools per zone thermostat, e.g. PSZ. ahTsSp = ZN2; tuVfMn = tuVfMxH = tuVfMxC Supply fan circulates air even if neither heating nor cooling. Supply temp setpoint determined as for CZ or WZ. All tuVf's same forces constant volume. Single zone constant volume, fan cycling system that heats or cools per zone thermostat, e.g. PTAC, RESYS, or furnace. ahTsSp= ZN; ahTsMx = heat supply temp setpoint; ahTsMn = cool supply temp setpoint; tuVfMn= 0; tuVfMxH = tuVfMxC normally; sfanVfDs &gt;= max( tuVfMxH, tuVfMxC) to minimize confusion about flow modeled. AhFanCycles defaults to YES. Supply fan off when not heating or cooling. Flow when fan on is tuVfMxH or tuVfMxC as applicable (or sfanVfDs * sfanVfMxF if smaller). Using AIRHANDLER to Model Various Systems"},{"location":"input-data/airhandler/#ahfancycles","title":"ahFanCycles","text":"<p>Type: choice</p> <p>Determines whether the fan cycles with the zone thermostat.</p> YES Supply fan runs only for fraction of the subhour that the zone requests heating or cooling. When running, supply fan runs at full flow (i.e. constant volume), as determined by the more limiting of the air handler and terminal specifications. Use with a single zone only. Not allowed with ahTsSp = ZN2. NO Normal CSE behavior for simulating VAV systems with continuously running (or scheduled), variable flow supply fans. (For constant volume, fan always on modeling, use NO, and make tuVfMn equal to tuVfMxH/C.) Units Legal Range Default Required Variability YES, NO YES when ahTsSp=ZN, NO otherwise No hourly"},{"location":"input-data/airhandler/#ahtsmn","title":"ahTsMn","text":"<p>Type: float</p> <p>Minimum supply temperature. Also used as cooling supply temperature setpoint value under ahTsSp = ZN.</p> Units Legal Range Default Required Variability <sup>o</sup>F no limit; typically: 40 \\(\\le\\) x \\(\\le\\) 140<sup>o</sup> 0<sup>o</sup>F Only for ahTsSp=RA hourly Units Legal Range Default Required Variability <sup>o</sup>F no limit; typically: 40 \\(\\le\\) x \\(\\le\\) 140<sup>o</sup> 999<sup>o</sup> F Only for asTsSp=RA; recommend giving for ahTsSp=ZN hourly"},{"location":"input-data/airhandler/#ahtsmx","title":"ahTsMx","text":"<p>Type: float</p> <p>Maximum supply temperature. Also used as heating supply temperature setpoint value under ahTsSp = ZN.</p>"},{"location":"input-data/airhandler/#ahwzczns-ahczczns","title":"ahWzCzns, ahCzCzns","text":"<p>Type: zone names or ALL or ALL_BUT zone names**</p> <p>Specify zones monitored to determine supply temperature setpoint value (control zones), under ahTsSp=WZ and CZ respectively.</p> zone names A list of zone names, with commas between them. Up to 15 names may be given. ALL_BUT May be followed by a a comma and list of up to 14 zone names; all zones on air handler other than these are the control zones. ALL Indicates that all zones with terminals connected to the air handler are control zones. <p>A comma must be entered between zone names and after the word ALL_BUT.</p> Units Legal Range Default Required Variability name(s) of ZONEs ALL ALL_BUT zone Name(s) ALL No hourly"},{"location":"input-data/airhandler/#ahtsdsc","title":"ahTsDsC","text":"<p>Type: float</p> <p>Cooling design supply temperature, for sizing coil vs fan.</p> Units Legal Range Default Required Variability <sup>o</sup>F x \\(&gt;\\) 0 ahTsMn No hourly"},{"location":"input-data/airhandler/#ahtsdsh","title":"ahTsDsH","text":"<p>Type: float</p> <p>Heating design supply temperature, for sizing coil vs fan.</p> Units Legal Range Default Required Variability <sup>o</sup>F x \\(&gt;\\) 0 ahTsMx No hourly"},{"location":"input-data/airhandler/#ahctu","title":"ahCtu","text":"<p>Type: terminal name</p> <p>Terminal monitored to determine whether to heat or cool under ZN and ZN2 supply temperature setpoint control. Development aid feature; believe there is no need to give this since ahTsSp = ZN or ZN2 should only be used with  one zone.</p> Units Legal Range Default Required Variability name of a TERMINAL AIRHANDLER's TERMINAL, if only one If ahTsSp = ZN with more than 1 TERMINAL hourly <p>AhTsRaMn and ahTsRaMx are used when ahTsSp is RA.</p>"},{"location":"input-data/airhandler/#ahtsramn","title":"ahTsRaMn","text":"<p>Type: float</p> <p>Return air temperature at which the supply temperature setpoint is at the maximum supply temperature, ahTsMx.</p>"},{"location":"input-data/airhandler/#ahtsramx","title":"ahTsRaMx","text":"<p>Type: float</p> <p>Return air temperature at which the supply temperature setpoint is at the minimum supply temperature, ahTsMn.</p> <p>When the return air temperature is between ahTsRaMnand ahTsRaMx, the supply temperature setpoint has a proportional value between ahTsMx and ahTsMn.</p> <p>If return air moves outside the range ahTsRaMn to ahTsRaMx, the supply temperature setpoint does not change further.</p> Units Legal Range Default Required Variability <sup>o</sup>F no limit; typically: 40 \\(\\le\\) x \\(\\le\\) 140<sup>o</sup> none Only for ahTsSp=RA hourly"},{"location":"input-data/airhandler/#airhandler-supply-fan","title":"AIRHANDLER Supply fan","text":"<p>All AIRHANDLERs have supply fans.</p>"},{"location":"input-data/airhandler/#sfantype","title":"sfanType","text":"<p>Type: choice</p> <p>Supply fan type/position. A BLOWTHRU fan is located in the air path before the coils; a DRAWTHRU fan is after the coils.</p> Units Legal Range Default Required Variability DRAWTHRU, BLOWTHRU DRAWTHRU No constant"},{"location":"input-data/airhandler/#sfanvfds","title":"sfanVfDs","text":"<p>Type: float</p> <p>Design or rated (volumetric) air flow at rated pressure. Many fans will actually blow a larger volume of air at reduced pressure: see sfanVfMxF (next).</p> Units Legal Range Default Required Variability cfm AUTOSIZE or x \\(\\ge\\) 0 none Yes constant"},{"location":"input-data/airhandler/#sfanvfmxf","title":"sfanVfMxF","text":"<p>Type: float</p> <p>Overrun factor: maximum factor by which fan will exceed rated flow (at reduced pressure, not explicitly modeled). CSE delivers flows demanded by terminals until total flow at supply fan reaches sfanVfDs * sfanVsMxF, then reduces maximum flows to terminals, keeping them in proportion to terminal design flows, to keep total flow at that value.</p> <p>We recommend giving 1.0 to eliminate overrun in constant volume modeling.</p> Units Legal Range Default Required Variability x \\(\\ge\\) 1.0 1.3 No constant"},{"location":"input-data/airhandler/#sfanpress","title":"sfanPress","text":"<p>Type: float</p> <p>Design or rated pressure. The work done by the fan is computed as the product of this pressure and the current flow, except that the flow is limited to sfanVfDs. That is, in overrun (see sfanVfMxF) it is assumed that large VAV terminal damper openings allow the pressure to drop in proportion to the flow over rated. This work is added to the air as heat at the fan, and is termed \"fan heat\". Setting sfanPress to zero will eliminate simulated fan heat for theoretical simulation of a coil only.</p> Units Legal Range Default Required Variability inches H<sub>2</sub>O x \\(\\gt\\) 0 3 No constant <p>Prior text: At most, one of the next two items may be given: in combination with sfanVfDs and sfanPress, either is sufficient to compute the other. SfanCurvePy is then used to compute the mechanical power at the fan shaft at partial loads; sfanMotEff allows determining the electrical input from the shaft power.</p> <p>New possible text (after addition of sfanElecPwr): Only one of sfanElecPwr, sfanEff, and sfanShaftBhp may be given: together with sfanVfDs and xfanPress, any one is sufficient for CSE to determine the others and to compute the fan heat contribution to the air stream. </p>"},{"location":"input-data/airhandler/#sfanelecpwr","title":"sfanElecPwr","text":"<p>Type: float</p> <p>Fan input power per unit air flow (at design flow and pressure).</p> Units Legal Range Default Required Variability W/cfm x \\(\\gt\\) 0 derived from sfanEff and sfanShaftBhp If sfanEff and sfanShaftBhp not present constant"},{"location":"input-data/airhandler/#sfaneff","title":"sfanEff","text":"<p>Type: float</p> <p>Fan efficiency at design flow and pressure, as a fraction.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1 derived from sfanShaftBhp if given, else 0.65 No constant"},{"location":"input-data/airhandler/#sfanshaftbhp","title":"sfanShaftBhp","text":"<p>Type: float</p> <p>Fan shaft brake horsepower at design flow and pressure.</p> Units Legal Range Default Required Variability bhp x \\(\\gt\\) 0 derived from sfanEff. No constant"},{"location":"input-data/airhandler/#sfancurvepy","title":"sfanCurvePy","text":"<p>Type: \\(k_0\\), \\(k_1\\), \\(k_2\\), \\(k_3\\), \\(x_0\\)</p> <p>\\(k_0\\) through \\(k_3\\) are the coefficients of a cubic polynomial for the curve relating fan relative energy consumption to relative air flow above the minimum flow \\(x_0\\). Up to five floats may be given, separated by commas. 0 is used for any omitted trailing values. The values are used as follows:</p> \\[z = k_0 + k_1 \\cdot (x - x_0)| + k_2 \\cdot (x - x_0)|^2 + k_3 \\cdot (x - x_0)|^3\\] <p>where:</p> <ul> <li>\\(x\\) is the relative fan air flow (as fraction of sfanVfDs; 0 \\(\\le\\) x \\(\\le\\) 1);</li> <li>\\(x_0\\) is the minimum relative air flow (default 0);</li> <li>\\((x - x_0)|\\) is the \"positive difference\", i.e. \\((x - x_0)\\) if \\(x &gt; x_0\\); else 0;</li> <li>\\(z\\) is the relative energy consumption.</li> </ul> <p>If \\(z\\) is not 1.0 for \\(x\\) = 1.0, a warning message is displayed and the coefficients are normalized by dividing by the polynomial's value for \\(x\\) = 1.0.</p> Units Legal Range Default Required Variability 0, 1, 0, 0, 0 (linear) No constant"},{"location":"input-data/airhandler/#sfanmoteff","title":"sfanMotEff","text":"<p>Type: float</p> <p>Motor/drive efficiency.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1 0.9 No constant"},{"location":"input-data/airhandler/#sfanmotpos","title":"sfanMotPos","text":"<p>Type: choice</p> <p>Motor/drive position: determines disposition of fan motor heat (input energy in excess of work done by fan; the work done by the fan is the \"fan heat\", always added to air flow).</p> IN_FLOW add fan motor heat to supply air at the fan position. IN_RETURN add fan motor heat to the return air flow. EXTERNAL discard fan motor heat"},{"location":"input-data/airhandler/#sfanmtr","title":"sfanMtr","text":"<p>Type: mtrName</p> <p>Name of meter, if any, to record energy used by supply fan. End use category used is \"Fan\".</p> Units Legal Range Default Required Variability name of a METER not recorded No constant"},{"location":"input-data/airhandler/#airhandler-returnrelief-fan","title":"AIRHANDLER Return/Relief fan","text":"<p>A return/relief fan is optional. Its presence is established by setting rfanType to a value other than NONE. For additional information on the return/relief fan members, refer to the description of the corresponding supply fan member above.</p>"},{"location":"input-data/airhandler/#rfantype","title":"rfanType","text":"<p>Type: choice</p> <p>relief fan type/position.</p> RETURN fan is at air handler; all return air passes through it. RELIEF fan is in exhaust path. Air being exhausted to the outdoors passes through fan; return air being recirculated does not pass through it. NONE no return/relief fan in this AIRHANDLER. Units Legal Range Default Required Variability NONE, RETURN, RELIEF NONE Yes, if fan present constant"},{"location":"input-data/airhandler/#rfanvfds","title":"rfanVfDs","text":"<p>Type: float</p> <p>design or rated (volumetric) air flow.</p> Units Legal Range Default Required Variability cfm AUTOSIZE or x \\(\\gt\\) 0 sfanVfDs - oaVfDsMn No constant"},{"location":"input-data/airhandler/#rfanvfmxf","title":"rfanVfMxF","text":"<p>Type: float</p> <p>factor by which fan will exceed design flow (at reduced pressure).</p> Units Legal Range Default Required Variability x \\(\\ge\\) 1.0 1.3 No constant"},{"location":"input-data/airhandler/#rfanpress","title":"rfanPress","text":"<p>Type: float</p> <p>design or rated pressure.</p> Units Legal Range Default Required Variability inches H<sub>2</sub>O x \\(\\gt\\) 0 0.75 No constant <p>At most, one of the next three?? items may be defined: ?? rework re rfanElecPwr</p>"},{"location":"input-data/airhandler/#rfanelecpwr","title":"rfanElecPwr","text":"<p>Type: float</p> <p>Fan input power per unit air flow (at design flow and pressure).</p> Units Legal Range Default Required Variability W/cfm x \\(&gt;\\) 0 derived from rfanEff and rfanShaftBhp If rfanEff and rfanShaftBhp not present constant"},{"location":"input-data/airhandler/#rfaneff","title":"rfanEff","text":"<p>Type: float</p> <p>Fan efficiency at design flow and pressure.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1 derived from rfanShaftBhp if given, else 0.65 No constant"},{"location":"input-data/airhandler/#rfanshaftbhp","title":"rfanShaftBhp","text":"<p>Type: float</p> <p>Fan shaft brake horsepower at design flow and pressure.</p> Units Legal Range Default Required Variability bhp x \\(\\gt\\) 0 derived from rfanEff No constant"},{"location":"input-data/airhandler/#rfancurvepy","title":"rfanCurvePy","text":"<p>Type: \\(k_0\\), \\(k_1\\), \\(k_2\\), \\(k_3\\), \\(x_0\\)</p> <p>\\(k_0\\) through \\(k_3\\) are the coefficients of a cubic polynomial for the curve relating fan relative energy consumption to relative air flow above the minimum flow \\(x_0\\). Up to five floats may be given, separated by commas. 0 is used for any omitted trailing values. The values are used as follows:</p> \\[z = k_0 + k_1 \\cdot (x - x_0)| + k_2 \\cdot (x - x_0)|^2 + k_3 \\cdot (x - x_0)|^3\\] <p>where:</p> <ul> <li>\\(x\\) is the relative fan air flow (as fraction of rfanVfDs; 0 \\(\\le\\) x \\(\\le\\) 1);</li> <li>\\(x_0\\) is the minimum relative air flow (default 0);</li> <li>\\((x - x_0)|\\) is the \"positive difference\", i.e. \\((x - x_0)\\) if \\(x &gt; x_0\\); else 0;</li> <li>\\(z\\) is the relative energy consumption.</li> </ul> <p>If \\(z\\) is not 1.0 for \\(x\\) = 1.0, a warning message is displayed and the coefficients are normalized by dividing by the polynomial's value for \\(x\\) = 1.0.</p> Units Legal Range Default Required Variability 0, 1, 0, 0, 0 (linear) No constant"},{"location":"input-data/airhandler/#rfanmoteff","title":"rfanMotEff","text":"<p>Type: float</p> <p>Motor/drive efficiency.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1 0.9 No constant"},{"location":"input-data/airhandler/#rfanmotpos","title":"rfanMotPos","text":"<p>Type: choice</p> <p>Motor/drive position.</p> Units Legal Range Default Required Variability IN_FLOW, EXTERNAL IN_FLOW No constant"},{"location":"input-data/airhandler/#rfanmtr","title":"rfanMtr","text":"<p>Type: mtrName</p> <p>Name of meter, if any, to record power consumption of this return fan. May be same or different from meter used for other fans and coils in this and other air handlers. \"Fan\" end use category is used.</p> Units Legal Range Default Required Variability name of a METER not recorded No constant"},{"location":"input-data/airhandler/#airhandler-heating-coilmodeling-furnaces","title":"AIRHANDLER Heating coil/Modeling Furnaces","text":"<p>Heating coils are optional devices that warm the air flowing through the AIRHANDLER, including electric resistance heaters, hot water coils supplied by a HEATPLANT, the heating function of an air source heat pump, and furnaces.</p> <p>Furnaces are modeled as AIRHANDLERs with heat \"coils\" that model the heating portion of a gas or oil forced hot air furnace. Notes on modeling a furnace with a CSE AIRHANDLER:</p> <ul> <li>Give ahhcType = GAS or OIL.</li> <li>Give ahhcAux's to model the power consumption of pilot, draft fan, etc.</li> <li>Use ahTsSp = ZN, which implies ahFanCyles = YES, to model constant volume, fan cycling (as opposed to VAV) operation.</li> <li>Use ahTsMx = an appropriate value around 140 or 180 to limit the supply temperature, simulating the furnace's high temperature cutout (the default ahTsMxof 999 is too high!).</li> <li>Use a single TERMINAL on the AIRHANDLER.</li> <li>To eliminate confusion about the fan cfm (which, precisely, under ahFanCyles = YES, is the smaller of the terminal maximum or the supply fan maximum including overrun), give the same value for TERMINAL tuVfMxH and AIRHANDLER sfanVfDs, and give sfanVfMxF = 1.0 to eliminate overrun.</li> <li>You will usually want to use oaVfDsMn = 0 (no outside air), and no economizer.</li> </ul> <p>The heating function of an air source heat pump is modeled with an AIRHANDLER with heat coil type AHP. There are several additional heat coil input variables (names beginning with ahp-) described later in the heat coil section. Also, a heat pump generally has a crankcase heater, which is specified with the crankcase heater inputs (cch-), described later in the AIRHANDLER Section 0. If the heat pump also performs cooling, its cooling function is modeled by specifying a suitable cooling coil in the same AIRHANDLER. Use ahccType = DX until a special cooling coil type for heat pumps is implemented. It is the user's responsibility to specify consistent heating and cooling coil inputs when the intent is to model a heat pump that both heats and cools, as CSE treats the heat coil and the cool coil as separate devices.</p> <p>The next four members apply to all heat coil types, except as noted.</p> <p>To specify that an AIRHANDLER has a heating coil and thus heating capability, give an ahhcType other than NONE.</p>"},{"location":"input-data/airhandler/#ahhctype","title":"ahhcType","text":"<p>Type: choice</p> <p>Coil type choice:</p> ELECTRIC electric resistance heat: 100% efficient, can deliver its full rated capacity at any temperature and flow. HW hot water coil, supplied by a HEATPLANT object. GAS or OIL 'coil' type that models heating portion of a forced hot air furnace. Furnace 'coil' model uses inputs for full-load efficiency and part-load power input; model must be completed with appropriate auxiliaries, ahTsSp, etc. See notes above. GAS and OIL are the same here -- the differences between gas- and oil-fired furnaces is in the auxiliaries (pilot vs. draft fan, etc.), which you specify separately. AHP heating function of an air source heat pump. NONE AIRHANDLER has no heat coil, thus no heating capability. Units Legal Range Default Required Variability ELECTRIC, HW, GAS OIL, AHP, NONE NONE Yes, if coil is present constant"},{"location":"input-data/airhandler/#ahhcsched","title":"ahhcSched","text":"<p>Type: choice</p> <p>Heat coil schedule; choice of AVAIL or OFF, hourly variable. Use an appropriate ahhcSched expression if heat coil is to operate only at certain times of the day or year or only under certain weather conditions, etc.</p> AVAIL heat coil available: will operate as necessary to heat supply air to supply temperature setpoint, up to the coil's capacity. OFF coil will not operate, no matter how cold supply air is. A HW coil should be scheduled off whenever its HEATPLANT is scheduled off (hpSched) to insure against error messages. Units Legal Range Default Required Variability AVAIL, OFF AVAIL No hourly"},{"location":"input-data/airhandler/#ahhccaptrat","title":"ahhcCapTRat","text":"<p>Type: float</p> <p>Total heating (output) capacity. For an ELECTRIC, AHP, GAS, or OIL coil, this capacity is always available. For an HW heating coil, when the total heat being requested from the coil's HEATPLANT would overload the HEATPLANT, the capacity of all HW coils connected to the plant (in TERMINALs as well as AIRHANDLERs) is reduced proportionately until the requested total heat is within the HEATPLANT's capacity. For AHP, this value represents the AHRI rated capacity at 47 <sup>o</sup>F outdoor temperature.</p> Units Legal Range Default Required Variability Btuh AUTOSIZE or x \\(\\ge\\) 0 none Yes, if coil present hourly"},{"location":"input-data/airhandler/#ahhcfxcap","title":"ahhcFxCap","text":"<p>Type: float</p> <p>Capacity sizing multiplier for autoSized heating coils. The default value (1.1) specifies 10% oversizing.</p> Units Legal Range Default Required Variability x \\(&gt;\\) 0 1.1 No constant"},{"location":"input-data/airhandler/#ahhcmtr","title":"ahhcMtr","text":"<p>Type: mtrName</p> <p>Name of meter to accumulate energy use by this heat coil. The input energy used by the coil is accumulated in the end use category \"Htg\"; for a heat pump, the energy used by the supplemental resistance heaters (regular and defrost) is accumulated under the category \"hp\". Not allowed when*ahhcType* is HW, as an HW coil's energy comes from its HEATPLANT, and the HEATPLANT's BOILERs accumulate input energy to meters.</p> Units Legal Range Default Required Variability name of a METER not recorded No constant <p>The following input is used only when ahhcType is HW:</p>"},{"location":"input-data/airhandler/#ahhcheatplant","title":"ahhcHeatplant","text":"<p>Type: Heatplant name</p> <p>Name of HEATPLANT supporting hot water coil.</p> Units Legal Range Default Required Variability name of a HEATPLANT none if ahhcType is HW constant <p>The following inputs are used only for furnaces (ahhcType = GAS or OIL).</p> <p>One of the next two items, but not both, must be given for furnaces:</p>"},{"location":"input-data/airhandler/#ahhceirr","title":"ahhcEirR","text":"<p>Type: float</p> <p>Rated energy input ratio (input energy/output energy) at full power.</p> Units Legal Range Default Required Variability x \\(\\ge\\) 1 none if ahhcEirR not given and ahhcType is GAS or OIL hourly"},{"location":"input-data/airhandler/#ahhceffr","title":"ahhcEffR","text":"<p>Type: float</p> <p>Rated efficiency (output energy/input energy; 1/ahhcEirR) at full power</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1 none if ahhcEirR not given and ahhcType is GAS or OIL hourly"},{"location":"input-data/airhandler/#ahhcpyei","title":"ahhcPyEi","text":"<p>Type: \\(k_0\\), \\(k_1\\), \\(k_2\\), \\(k_3\\)</p> <p>Coefficients of cubic polynomial function of (subhour average) part-load-ratio (plrAv) to adjust the full-load furnace energy input for part load operation. Enter, separated by commas, in order, the constant part, the coefficient of plrAv, the coefficient of plrAv squared, and the coefficient of plrAv cubed. CSE will normalize the coefficients if necessary to make the polynomial value be 1.0 when the part load ratio is 1.0.</p> <p>The default, from DOE2, is equivalent to:</p> <pre><code>    ahhcPyEi = .01861, 1.094209, -.112819, 0.;\n</code></pre> <p>which corresponds to the quadratic polynomial:</p> \\[\\text{pyEi}(\\text{plrAv}) = 0.01861 + 1.094209 \\cdot \\textbf{plrAv} - 0.112819 \\cdot \\textbf{plrAv}^2\\] <p>Note that the value of this polynomial adjusts the energy input, not the energy input ratio, for part load operation.</p> Units Legal Range Default Required Variability 0.01861, 1.094209, -0.112819, 0.0. No constant"},{"location":"input-data/airhandler/#ahhcstackeffect","title":"ahhcStackEffect","text":"<p>Type: float</p> <p>Fraction of unused furnace capacity that must be used to make up for additional infiltration caused by stack effect of a hot flue when the (indoor) furnace is NOT running, only in subhours when furnace runs PART of the subhour, per DOE2 model.</p> <p>This is an obscure feature that will probably never be used, included only due to indecisiveness on the part of most members of the committee designing this program. The first time reader should skip this section, or read it only as an example of deriving an expression to implement a desired relationship.</p> <p>The stack effect is typically a function of the square root of the difference between the outdoor temperature and the assumed stack temperature.</p> <p>For example, the following is a typical example for furnace stack effect:</p> <pre><code>    ahhcStackEffect =  @Top.tDbO &gt;= 68.  ?  0.\n                        :  (68. - @Top.tDbO)\n                           * sqrt(200.-@Top.tDbO)\n                           / (10*68*sqrt(200));\n</code></pre> <p>The code \"<code>@Top.tDbO &gt;= 68 ? 0. : ...</code>\" insures that the value will be 0, not negative, when it is warmer than 68 out (if the furnace were to run when the value was negative, a run-time error would terminate the run).</p> <p>The factor \"<code>(68. - @Top.tDbO)</code>\" reflects the fact that the energy requirement to heat the infiltrating air is proportional to how much colder it is than the indoor temperature. Note that its permitted to use a constant for the indoor temperature because if it is below setpoint, the furnace will be running all the time, and there will be no unused capacity and the value of ahhcStackEffect will be moot.</p> <p>The factor \"<code>sqrt(200.-@Top.tDbO)</code>\" represents the volume of infiltrated air that is typically proportional to the square root of the driving temperature difference, where 200 is used for the estimated effective flue temperature.</p> <p>The divisor \"<code>/ (10*68*sqrt(200))</code>\" is to make the value 0.1 when tDbO is 0, that is, to make the stack effect loss use 10% of unused load when it is 0 degrees out. The actual modeling engineer must know enough about his building to be able to estimate the additional infiltration load at some temperature.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1 0 No hourly <p>The following heat coil input members, beginning with ahp-, are used when modeling the heating function of an air source heat pump with the air handler heat coil, that is, when ahhcType= AHP is given. Also, see the \"AIRHANDLER Crankcase Heater\" section with regard to specifying the heat pump's crankcase heater.</p>"},{"location":"input-data/airhandler/#ahpcap17","title":"ahpCap17","text":"<p>Type: float</p> <p>AHRI steady state (continuous operation) rated capacity at 70 degrees F indoor (return) air temp, and 17 degrees F outdoor temp, respectively. These values reflect no cycling, frost, or defrost degradation. To help you find input errors, the program issues an error message if ahpCap17 &gt;= ahhcCapTRat.</p> Units Legal Range Default Required Variability Btuh x \\(\\gt\\) 0 none Yes, for AHP coil constant"},{"location":"input-data/airhandler/#ahpcaprat1747","title":"ahpCapRat1747","text":"<p>Type: float</p> <p>The ratio of AHRI steady state (continuous operation) rated capacities at 17 and 47 degrees F outdoor temp. This is used to determine ahpCap35 when ahhcCapTRat is AUTOSIZEd.</p> Units Legal Range Default Required Variability x \\(\\gt\\) 0 0.6184 No constant"},{"location":"input-data/airhandler/#ahpcaprat9547","title":"ahpCapRat9547","text":"<p>Type: float</p> <p>Ratio of ahccCapTRat to ahhcCapTRat. This ratio is used for defaulting of AUTOSIZEd heat pump heating and cooling capacities such that they have consistent values as is required given that a heat pump is a single device. If not given, ahpCapRat9547 is determined during calculations using the relationship ahccCapTRat = 0.98 * ahhcCapTRat + 180 (derived via correlation of capacities of a set of real units).</p> Units Legal Range Default Required Variability x \\(&gt;\\) 0 See above No constant"},{"location":"input-data/airhandler/#ahpcap35","title":"ahpCap35","text":"<p>Type: float</p> <p>AHRI steady state (continuous operation) rated capacity at 35 F outdoor temp, reflecting frost buildup and defrost degradation but no cycling. Unlikely to be available for input; if not given, will be defaulted to ahpFd35Df (next description) times a value determined by linear interpolation between the given ahpCap17 and ahhcCapTRat values. If ahpCap35 is given, CSE will issue an error message if it is greater than value determined by linear interpolation between ahpCap17 and ahhcCapTRat.</p> Units Legal Range Default Required Variability Btuh x \\(\\gt\\) 0 from ahpFd35Df No constant"},{"location":"input-data/airhandler/#ahpfd35df","title":"ahpFd35Df","text":"<p>Type: float</p> <p>Default frost/defrost degradation factor at 35 F: reduction of output at unchanged input, due to defrosting and due to frost on outdoor coil. Used in determining default value for ahpCap35 (preceding description); not used if ahpCap35 is given.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1 0.85 No constant"},{"location":"input-data/airhandler/#ahpcapia","title":"ahpCapIa","text":"<p>Type: float</p> <p>Capacity correction factor for indoor (return) air temperature, expressed as a fraction reduction in capacity per degree above 70F.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1 0.004 No constant"},{"location":"input-data/airhandler/#ahpcapsuph","title":"ahpCapSupH","text":"<p>Type: float</p> <p>Output capacity of the supplemental reheat coil used when heat pump alone cannot meet the load or to offset the defrost cooling load. Energy consumed by this heater is accumulated in category \"HPBU\" of ahhcMeter (whereas energy consumption of the heat pump compressor is accumulated under category \"Htg\").</p> Units Legal Range Default Required Variability Btu/hr x \\(\\ge\\) 0 0 No constant"},{"location":"input-data/airhandler/#ahpeffsuph","title":"ahpEffSupH","text":"<p>Type: float</p> <p>Efficiency of the supplemental reheat coil. Use values other than the default for gas supplemental heaters.</p> Units Legal Range Default Required Variability x \\(\\gt\\) 0 1.0 No hourly"},{"location":"input-data/airhandler/#ahpsuphmtr","title":"ahpSupHMtr","text":"<p>Type: mtrName</p> <p>Specifies a meter for recording supplemental heater energy use. End use category \"HPBU\" is used.</p> Units Legal Range Default Required Variability name of a METER not recorded No constant <p>The next seven inputs specify frost buildup and defrosting and their effect on capacity.</p>"},{"location":"input-data/airhandler/#ahptfrmn","title":"ahpTFrMn","text":"<p>Type: float</p>"},{"location":"input-data/airhandler/#ahptfrmx","title":"ahpTFrMx","text":"<p>Type: float</p>"},{"location":"input-data/airhandler/#ahptfrpk","title":"ahpTFrPk","text":"<p>Type: float</p> <p>Lowest, highest, and peak temperatures for frost buildup and defrost effects. Capacity reduction due to frost and defrosting consists of a component due to frost buildup on the outdoor coil, plus a component due to lost heating during the time the heat pump is doing reverse cycle defrosting (heating the outdoor coil to melt off the frost, which cools the indoor coil). The effects of Frost Buildup and of time spent defrosting are computed for different temperature ranges as follows:</p> <ul> <li> <p>Above ahpTFrMx: no frost buildup, no defrosting.</p> </li> <li> <p>At ahpTFrMx OR ahpTFrMn: defrosting time per ahpDfrFMn (next description); no frost buildup effect.</p> </li> <li> <p>At ahpTFrPk: defrosting time per ahpDfrFMx, plus additional output reduction due to effect of frost buildup, computed by linear extrapolation from ahpCap35 or its default.</p> </li> <li> <p>Between ahpTFrPk and ahpTFrMn or ahpTFrMx: defrost time and defrost buildup degradation linearly interpolated between values at ahpTFrPk and values at ahpTFrMn or ahpTFrMx.</p> </li> <li> <p>Below ahpTFrMn: no frost buildup effect; time defrosting remains at ahpDfrFMn.</p> </li> </ul> <p>In other words, the curve of capacity loss due to frost buildup follows straight lines from its high point at ahpTFrPk to zero at ahpTFrMn and ahpTFrMx, and remains zero outside the range ahpTFrMn to ahpTFrMx. The height of the high point is determined to match the ahpCap35 input value or its default. The curve of time spent defrosting is described in other words in the description of ahpDfrFMn and ahpDfrFMx, next.</p> <p>An error will occur unless ahpTFrMn &lt; ahpTFrPk &lt; ahpTFrMx and ahpTFrMn &lt;\u00a035\u00a0&lt;\u00a0ahpTFrMx.</p> Units Legal Range Default Required Variability <sup>o</sup>F x \\(\\gt\\) 0 ahpTFrMn: 17, ahpTFrMx: 47, ahpTFrPk: 42 No constant"},{"location":"input-data/airhandler/#ahpdfrfmn","title":"ahpDfrFMn","text":"<p>Type: float</p>"},{"location":"input-data/airhandler/#ahpdfrfmx","title":"ahpDfrFMx","text":"<p>Type: float</p> <p>Minimum and maximum fraction of time spent in reverse cycle defrost cooling.</p> <p>The fraction of the time spent defrosting depends on the outdoor temperature, as follows: at or below ahpTFrMn, and at (but not above) ahpTFrMx, ahpDfrFMn is used. ahpDfrFMx is used at ahpTFrMx. Linear interpolation is used between ahpTFrMn or ahpTFrMx and ahpTFrMx. No time is spent defrosting above ahpTFrMx.</p> <p>In other words, the curve of time spent defrosting versus outdoor temperature has the value ahpDfrFMn up to ahpTFrMn, then rises in a straight line to ahpDfrFMx at ahpTFrMx, then falls in a straight line back to ahpDfrFMn at ahpTFrMx, then drops directly to zero for all higher temperatures.</p> <p>During the fraction of the time spent defrosting, the heat pump's input remains constant and the output is changed as follows:</p> <ul> <li> <p>Usual heat output is not delivered to load.</p> </li> <li> <p>Cold output due to reverse cycle operation is delivered to load. See ahpDfrCap.</p> </li> <li> <p>An additional resistance heater is operated; and its heat output is delivered to load. See ahpDfrRh.</p> </li> </ul> <p>The program will issue an error message if ahpDfrFMx \\(\\le\\) ahpDfrFMn.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1 ahpDfrFMn: .0222, (2 minutes/90 minutes), ahpDfrFMx:.0889, (8 minutes / 90 minutes) No constant"},{"location":"input-data/airhandler/#ahpdfrcap","title":"ahpDfrCap","text":"<p>Type: float</p> <p>Cooling capacity (to air handler supply air) during defrosting. Program separately computes the lost heating capacity during defrosting, but effects of switchover transient should be included in ahpDfrCap.</p> Units Legal Range Default Required Variability Btuh x \\(\\neq\\) 0 2 \\(\\cdot\\) ahpCap17 No constant"},{"location":"input-data/airhandler/#ahptoff","title":"ahpTOff","text":"<p>Type: float</p>"},{"location":"input-data/airhandler/#ahpton","title":"ahpTOn","text":"<p>Type: float</p> <p>Heat pump low temperature cutout setpoints. Heat pump is disabled (only the supplemental resistance heater operates) when outdoor temperature falls below ahpTOff, and is re-enabled when temperature rises above ahpTOn. Different values may be given to simulate thermostat differential. ahpTOff must be \\(\\le\\) ahpTOn; equal values are accepted.</p> Units Legal Range Default Required Variability <sup>o</sup>F ahpTOff: 5, ahpTOn: 12 No constant <p>The next four inputs specify the heating power input for an air source heat pump:</p>"},{"location":"input-data/airhandler/#ahpcop47","title":"ahpCOP47","text":"<p>Type: float</p>"},{"location":"input-data/airhandler/#ahpcop17","title":"ahpCOP17","text":"<p>Type: float</p> <p>Steady state (full power, no cycling) coeffient of performance for compressor and crankcase heater at 70 degrees F indoor (return) air temp and 47 and 17 degrees F outdoor temp, respectively.</p> Units Legal Range Default Required Variability kW x \\(\\gt\\) 0 none Yes, for AHP coil constant"},{"location":"input-data/airhandler/#ahpinia","title":"ahpInIa","text":"<p>Type: float</p> <p>Indoor (return) air temp power input correction factor: fraction increase in steady-state input per degree above 70 F, or decrease below 70F.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1 0.004 No constant"},{"location":"input-data/airhandler/#ahpcd","title":"ahpCd","text":"<p>Type: float</p> <p>AHRI cycling degradation coefficient: ratio of fraction drop in system coefficient of performance (COP) to fraction drop in capacity when cycling, from steady-state values, in AHRI 47 F cycling performance tests. A value of .25 means that if the heat pump is cycled to drop its output to 20% of full capacity (i.e. by the fraction .8), its COP will drop by .8 * .25 = .2. Here COP includes all energy inputs: compressor, crankcase heater, defrost operation, etc.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1 0.25 No constant <p>The following four air handler heat coil members allow specification of auxiliary input power consumption associated with the heat coil (or furnace) under the indicated conditions. The single description box applies to all four.</p>"},{"location":"input-data/airhandler/#ahhcaux","title":"ahhcAux","text":"<p>Type: float</p> <p>Auxiliary energy used by the heating coil.</p> Units Legal Range Default Required Variability Btu/hr x \\(\\ge\\) 0 0 No hourly"},{"location":"input-data/airhandler/#ahhcauxmtr","title":"ahhcAuxMtr","text":"<p>Type: mtrName</p> <p>Specifies a meter for recording auxiliary energy use. End use category \"Aux\" is used.</p> Units Legal Range Default Required Variability name of a METER not recorded No constant"},{"location":"input-data/airhandler/#airhandler-cooling-coil","title":"AIRHANDLER Cooling coil","text":"<p>A cooling coil is an optional device that remove heat and humidity from the air passing through the AIRHANDLER. Available cooling coil types include chilled water (CHW), supported by a COOLPLANT that supplies cold water, and Direct Expansion (DX), supported by a dedicated compressor and condenser that are modeled integrally with the DX coil. No plant is used with DX coils.</p> <p>The following five members are used for all cool coil types except as noted. Presence of a cool coil in the AIRHANDLER is indicated by giving an ahccType value other than NONE.</p>"},{"location":"input-data/airhandler/#ahcctype","title":"ahccType","text":"<p>Type: choice</p> <p>Cool coil type choice:</p> ELECTRIC Testing artifice: removes heat at 100% efficiency up to rated capacity at any flow and temperature; removes no humidity. Use in research runs to isolate effects of coil models from other parts of the CSE program. CHW CHilled Water coil, using a cold water from a COOLPLANT. DX Direct Expansion coil, with dedicated compressor and condenser modeled integrally. NONE AIRHANDLER has no cooling coil and no cooling capability. Units Legal Range Default Required Variability ELECTRIC, DX, CHW, NONE NONE Yes, if coil present constant"},{"location":"input-data/airhandler/#ahccsched","title":"ahccSched","text":"<p>Type: choice</p> <p>Cooling coil schedule choice, hourly variable. Use a suitable CSE expression for ahccSched if cooling coil is to operate only at certain times, only in hot weather, etc.</p> AVAIL Cooling coil will operate as necessary (within its capacity) to cool the supply air to the supply temperature setpoint. OFF Cooling coil will not operate no matter how hot the supply air is. To avoid error messages, a CHW coil should be scheduled OFF whenever its COOLPLANT is scheduled OFF. Units Legal Range Default Required Variability AVAIL, OFF AVAIL No constant"},{"location":"input-data/airhandler/#ahcccaptrat","title":"ahccCapTRat","text":"<p>Type: float</p> <p>Total rated capacity of coil: sum of its \"sensible\" (heat-removing) and \"latent\" (moisture removing) capacities. Not used with CHW coils, for which capacity is implicitly specified by water flow (ahccGpmDs) and transfer unit (ahccNtuoDs* and ahccNtuiDs) inputs, described below.</p> <p>For coil specification conditions (a.k.a. rating conditions or design conditions), see ahccDsTDbEn, ahccDsTWbEn, ahccDsTDbCndand ahccVfRbelow (see index).</p> Units Legal Range Default Required Variability Btuh AUTOSIZE or x \\(&gt;\\) 0 none Yes constant"},{"location":"input-data/airhandler/#ahcccapsrat","title":"ahccCapSRat","text":"<p>Type: float</p> <p>Sensible (heat-removing) rated capacity of cooling coil. Not used with CHW coils.</p> Units Legal Range Default Required Variability Btuh x \\(&gt;\\) 0 none Yes constant"},{"location":"input-data/airhandler/#ahccshrrat","title":"ahccSHRRat","text":"<p>Type: float</p> <p>Rated sensible heat ratio (ahccCapSRat/ahccCapTRat) for cooling coil. Default based on correlation to ahccVfRperTon. Not used with CHW coils.</p> Units Legal Range Default Required Variability x \\(&gt;\\) 0 based on ahccVfRperTon No constant"},{"location":"input-data/airhandler/#ahccfxcap","title":"ahccFxCap","text":"<p>Type: float</p> <p>Capacity sizing multiplier for autoSized cooling coils. The default value (1.1) specifies 10% oversizing.</p> Units Legal Range Default Required Variability x \\(&gt;\\) 0 1.1 No constant"},{"location":"input-data/airhandler/#ahccmtr","title":"ahccMtr","text":"<p>Type: mtrName</p> <p>Name of meter, if any, to record energy use of air handler cool coil. End use category \"Clg\" is used. Not used with CHW coils, because the input energy use for a CHW coil is recorded by the COOLPLANT's CHILLERs.</p> Units Legal Range Default Required Variability name of a METER not recorded No constant <p>The following six members are used with DX cooling coils.</p>"},{"location":"input-data/airhandler/#ahccmintevap","title":"ahccMinTEvap","text":"<p>Type: float</p> <p>Minimum (effective surface) temperature of coil (evaporator). Represents refrigerant setpoint, or cutout to prevent freezing. Coil model will reduce output to keep simulated coil from getting colder than this, even though it lets supply air get warmer than setpoint. Should default be 35??</p> Units Legal Range Default Required Variability <sup>o</sup>F x \\(&gt;\\) 0 40<sup>o</sup>F No constant"},{"location":"input-data/airhandler/#ahcck1","title":"ahccK1","text":"<p>Type: float</p> <p>Exponent in power relationship expressing coil effectiveness as a function of relative air flow. Used as K1 in the relationship ntu = ntuR * relCfmk1, which says that the \"number of transfer units\" (on the coil outside or air side) varies with the relative air flow raised to the K1 power. Used with CHW as well as DX coils; for a CHW coil, ntuR in the formula is ahccNtuoDs.</p> Units Legal Range Default Required Variability x \\(&lt;\\) 0 -0.4 No constant"},{"location":"input-data/airhandler/#ahccbypass","title":"ahccBypass","text":"<p>Type: float</p> <p>Fraction of air flow which does NOT flow through DX cooling coil, for better humidity control. Running less of the air through the coil lets the coil run colder, resulting in greater moisture removal right??.</p> Units Legal Range Default Required Variability 0 \\(\\lt\\) x \\(\\le\\) 1 0 No constant <p>The next three members are used in determining the energy input to a DX coil under various load conditions. The input is derived from the full load energy input ratio for four segments of the part load curve.  In the following the part load ratio (plr) is the ratio of the actual sensible + latent load on the coil to the coil's capacity. The coil's capacity is ahccCaptRat, adjusted by the coil model for differences between entering air temperature, humidity, and flow rate and the coil rating conditions. The coil may run at less than capacity even at full fan flow, depending on the air temperature change needed, the moisture content of the entering air, and the relative values of between sfanVfDs and ahccVfR.</p> full load plr (part load ratio) = 1.0 Full-load power input is power output times ahhcEirR. compressor unloading region 1.0 &gt; plr \\(\\ge\\) ahhcMinUnldPlr Power input is the full-load input times the value of the pydxEirUl polynomial (below) for the current plr, i.e. pydxEirUl(plr). false loading region ahccMinUnldPlr &gt; plr \\(\\ge\\) ahccMinFsldPlr Power input in this region is constant at the value for the low end of the compressor unloading region, i.e. pydxEirUl(ahccMinUnldPlr). cycling region ahccMinFsldPlr &gt; plr \\(\\ge\\) 0 In this region the compressor runs at the low end of the false loading region for the necessary fraction of the time, and the power input is the false loading value correspondingly prorated, i.e. pydxEirUl(ahccMinUnldPlr) * plr / ahccMinFsldPlr. <p>The default values for the following three members are the DOE2 PTAC (Window air conditioner) values.</p>"},{"location":"input-data/airhandler/#ahcceirr","title":"ahccEirR","text":"<p>Type: float</p> <p>DX compressor energy input ratio (EIR) at full load under rated conditions; defined as the full-load electric energy input divided by the rated capacity, both in Btuh; same as the reciprocal of the Coefficient Of Performance (COP). Polynomials given below are used by CSE to adjust the energy input for part load and for off rated flow and temperature conditions. The default value includes outdoor (condenser) fan energy, but not indoor (air handler supply) fan energy.</p> Units Legal Range Default Required Variability 0.438 No constant"},{"location":"input-data/airhandler/#ahccminunldplr","title":"ahccMinUnldPlr","text":"<p>Type: float</p> <p>Compressor part load ratio (total current load/current capacity) at/above which \"Compressor unloading\" is used and pydxEirUl (below) is used to adjust the full-load power input to get the current part load power input.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1 1 (no unloading) No constant"},{"location":"input-data/airhandler/#ahccminfsldplr","title":"ahccMinFsldPlr","text":"<p>Type: float</p> <p>\"False Loading\" is used between this compressor part load ratio and the plr where unloading is activated (ahccMinUnldPlr). In this region, input remains at pydxEirUl(ahccMinUnldPlr).For plr's less than ahccMinFsldPlr, cycling is used, and the power input goes to 0 in a straight line.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) ahccMinUnldPlr ahccMinUnldPlr (no false loading) No constant <p>The following four inputs specify polynomials to approximate functions giving DX coil capacity and power (energy) input as functions of entering temperatures, relative (to ahccVfR) flow, and relative load (plr). In each case several float values may be given, for use as coefficients of the polynomial. The values are ordered from constant to coefficient of highest power. If fewer than the maximum number of values are given, zeroes are used for the trailing (high order) coefficients.</p> <p>Examples:</p> <pre><code>    pydxCaptT = 2.686, -0.01667, 0, 0.006, 0, 0;\n\n    pydxCaptT = 2.686, -0.01667, 0, 0.006; // same\n\n    pydxEirUl = .9, 1.11, .023, -.00345;\n</code></pre> <p>If the polynomial does not evaluate to 1.0 when its inputs are equal to the rating conditions (1.0 for relative flows and plr), CSE will normalize your coefficients by dividing them by the non-1.0 value.</p> <p>Some of the polynomials are biquadratic polynomials whose variables are the entering air wetbulb and drybulb temperatures. These are of the form</p> \\[z = a + bx + cx^2 + dy + ey^2 + fxy\\] <p>where a through f are user-inputtable coefficients, x is the entering wetbulb temperature, y is the entering drybulb temperature, and the polynomial value, z, is a factor by which the coil's capacity, power input, etc. at rated conditions is multiplied to adjust it for the actual entering air temperatures.</p> <p>Other polynomials are cubic polynomials whose variable is the air flow or load as a fraction of full flow or load.. These are of the form</p> \\[z = a + bx + cx^2+ dx^3\\] <p>where a, b, c, and d are user-inputtable coefficients, \\(x\\) is the variable, and the value \\(z\\) is a factor by which the coil's capacity, power input, etc. at rated conditions is multiplied to adjust it for the actual flow or load.</p> <p>The default values for the polynomial coefficients are the DOE2 PTAC values.</p>"},{"location":"input-data/airhandler/#pydxcaptt","title":"pydxCaptT","text":"<p>Type: a, b, c, d, e, f</p> <p>Coefficients of biquadratic polynomial function of entering air wetbulb and condenser temperatures whose value is used to adjust ahccCaptRat for the actual entering air temperatures. The condenser temperature is the outdoor drybulb, but not less than 70. See discussion in preceding paragraphs.</p> Units Legal Range Default Required Variability 1.1839345, -0.0081087, 0.00021104, -0.0061425, 0.00000161, -0.0000030 No constant"},{"location":"input-data/airhandler/#pydxcaptf","title":"pydxCaptF","text":"<p>Type: a=a, b, c, d</p> <p>Coefficients of cubic polynomial function of relative flow (entering air cfm/ahccVfR) whose value is used to adjust ahccCaptRat for the actual flow. See discussion in preceding paragraphs.</p> Units Legal Range Default Required Variability 0.8, 0.2, 0.0, 0.0 No constant"},{"location":"input-data/airhandler/#pydxcaptflim","title":"pydxCaptFLim","text":"<p>Type: float</p> <p>Upper limit for value of pydxCaptF.</p> Units Legal Range Default Required Variability x \\(&gt;\\) 0 1.05 No constant"},{"location":"input-data/airhandler/#pydxeirt","title":"pydxEirT","text":"<p>Type: a, b, c, d, e, f</p> <p>Coefficients of biquadratic polynomial function of entering air wetbulb and condenser temperatures whose value is used to adjust ahccEirR for the actual entering air temperatures. The condenser temperature is the outdoor air drybulb, but not less than 70. If the entering air wetbulb is less than 60, 60 is used, in this function only. See discussion in preceding paragraphs.</p> Units Legal Range Default Required Variability -0.6550461, 0.03889096, -0.0001925, 0.00130464, 0.00013517, -0.0002247 No constant"},{"location":"input-data/airhandler/#pydxeirul","title":"pydxEirUl","text":"<p>Type: a, b, c, d</p> <p>Coefficients of cubic polynomial function of part load ratio used to adjust energy input to part load conditions, in the compressor unloading part load region (1 \\(\\ge\\) plr \\(\\ge\\) ahccMinUnldPlr) as described above. See discussion of polynomials in preceding paragraphs.</p> <p>This polynomial adjusts the full load energy input to part load, not the ratio of input to output, despite the \"Eir\" in its name.</p> Units Legal Range Default Required Variability 0.125, 0.875, 0.0, 0.0 No constant <p>The following four members are used only with CHW coils. In addition, ahccK1, described above, is used.</p>"},{"location":"input-data/airhandler/#ahcccoolplant","title":"ahccCoolplant","text":"<p>Type: name</p> <p>name of COOLPLANT supporting CHW coil. COOLPLANTs contain CHILLERs, and are described in Section 5.21.</p> Units Legal Range Default Required Variability name of a COOLPLANT none for CHW coil constant"},{"location":"input-data/airhandler/#ahccgpmds","title":"ahccGpmDs","text":"<p>Type: float</p> <p>Design (i.e. maximum) water flow through CHW coil.</p> Units Legal Range Default Required Variability gpm x \\(\\ge\\) 0 none Yes, for CHW coil constant"},{"location":"input-data/airhandler/#ahccntuods","title":"ahccNtuoDs","text":"<p>Type: float</p> <p>CHW coil outside number of transfer units at design air flow (ahccVfR, below). SeeahccK1* above with regard to transfer units at other air flows.</p> Units Legal Range Default Required Variability x \\(\\gt\\) 0 2 No constant"},{"location":"input-data/airhandler/#ahccntuids","title":"ahccNtuiDs","text":"<p>Type: float</p> <p>CHW coil inside number of transfer units at design water flow (ahccGpmDs, above).</p> Units Legal Range Default Required Variability x \\(\\gt\\) 0 2 No constant <p>The following four members let you give the specification conditions for the cooling coil: the rating conditions, design conditions, or other test conditions under which the coil's performance is known. The defaults are AHRI (Air-Conditioning and Refrigeration Institute) standard rating conditions.</p>"},{"location":"input-data/airhandler/#ahccdstdben","title":"ahccDsTDbEn","text":"<p>Type: float</p> <p>Design (rating) entering air dry bulb temperature, used with DX and CHW cooling coils. With CHW coils, this input is used only as the temperature at which to convert ahccVfR from volume to mass.</p> Units Legal Range Default Required Variability <sup>o</sup>F x \\(\\gt\\) 0 80<sup>o</sup>F (AHRI) No constant"},{"location":"input-data/airhandler/#ahccdstwben","title":"ahccDsTWbEn","text":"<p>Type: float</p> <p>Design (rating) entering air wet bulb temperature, for CHW coils.</p> Units Legal Range Default Required Variability <sup>o</sup>F x \\(\\gt\\) 0 67<sup>o</sup>F (AHRI) No constant"},{"location":"input-data/airhandler/#ahccdstdbcnd","title":"ahccDsTDbCnd","text":"<p>Type: float</p> <p>Design (rating) condenser temperature (outdoor air temperature) for DX coils.</p> Units Legal Range Default Required Variability <sup>o</sup>F x \\(\\gt\\) 0 95<sup>o</sup>F (AHRI) No constant"},{"location":"input-data/airhandler/#ahccvfr","title":"ahccVfR","text":"<p>Type: float</p> <p>Design (rating) (volumetric) air flow rate for DX or CHW cooling coil. The AHRI specification for this test condition for CHW coils is \"450 cfm/ton or less\", right??</p> Units Legal Range Default Required Variability cfm x \\(\\gt\\) 0 DX coil: ahccVfRperTon CHW coil: sfanVfDs No constant <p>The following four members permit specification of auxiliary input power use associated with the cooling coil under the conditions indicated.</p>"},{"location":"input-data/airhandler/#ahccvfrperton","title":"ahccVfRperTon","text":"<p>Type: float</p> <p>Design default ahccVfR per ton (12000 Btuh) of ahhcCapTRat.</p> Units Legal Range Default Required Variability x \\(&gt;\\) 0 400.0 No constant"},{"location":"input-data/airhandler/#ahccaux","title":"ahccAux","text":"<p>Type: float</p> <p>Auxiliary energy used by the cooling coil.</p> Units Legal Range Default Required Variability Btu/hr x \\(\\ge\\) 0 0 No hourly"},{"location":"input-data/airhandler/#ahccauxmtr","title":"ahccAuxMtr","text":"<p>Type: mtrName</p> <p>Specifies a meter for recording auxiliary energy use. End use category \"Aux\" is used.</p> Units Legal Range Default Required Variability name of a METER not recorded No constant"},{"location":"input-data/airhandler/#airhandler-outside-air","title":"AIRHANDLER Outside Air","text":"<p>Outside air introduced into the air hander supply air can be controlled on two levels. First, a minimumfraction or volume of outside air may be specified. By default, a minimum volume of .15 cfm per square foot of zone area is used. Second, an economizer may be specified. The simulated economizer increases the outside air above the minimum when the outside air is cooler or has lower enthalpy than the return air, in order to reduce cooling coil energy usage. By default, there is no economizer.</p>"},{"location":"input-data/airhandler/#oamnctrl","title":"oaMnCtrl","text":"<p>Type: choice</p> <p>Minimum outside air flow control method choice, VOLUME or FRACTION. Both computations are based on the minimum outside air flow, oaVfDsMn; if the control method is FRACTION, the outside air flow is pro-rated when the air handler is supplying less than its design cfm. In both cases the computed minimum cfm is multiplied by a schedulable fraction, oaMnFrac, to let you vary the outside air or turn in off when none is desired.</p> VOLUME Volume (cfm) of outside air is regulated: min_oa_flow = oaMnFrac * oaVfDsMn FRACTION Fraction of outside air in supply air is regulated. The fraction is oaVfDsMn divided by sfanVfDs, the air handler supply fan design flow. The minimum cfm of outside air is thus computed as min_oa_flow = oaMnFrac * curr_flow * oaVfDsMn / sfanVfDs where curr_flow is the current air handler cfm. <p>If the minimum outside air flow is greater than the total requested by the terminals served by the air handler, then 100% outside air at the latter flow is used. To insure minimum outside air cfm to the zones, use suitable terminal minimum flows (tuVfMn) as well as air handler minimum outside air specifications.</p> Units Legal Range Default Required Variability VOLUME, FRACTION VOLUME No constant"},{"location":"input-data/airhandler/#oavfdsmn","title":"oaVfDsMn","text":"<p>Type: float</p> <p>Design minimum outside air flow. If oaMnCtrl is FRACTION, then this is the minimum outside air flow at full air handler flow. See formulas in oaMnCtrl description, just above.</p> Units Legal Range Default Required Variability cfm x \\(\\ge\\) 0 0.15 times total area of zones served No constant"},{"location":"input-data/airhandler/#oamnfrac","title":"oaMnFrac","text":"<p>Type: float</p> <p>Fraction of minimum outside air to use this hour, normally 1.0. Use a CSE expression that evaluates to 0 for hours you wish to disable the minimum outside air flow, for example to suppress ventilation during the night or during warm-up hours. Intermediate values may be used for intermediate outside air minima. See formulas in oaMnCtrl description, above.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1 1.0 No hourly <p>CAUTION: the minimum outside air flow only applies when the supply fan is running; it won't assure meeting minimum ventilation requirements when used with ahFanCycles = YES (constant volume, fan cycling).</p>"},{"location":"input-data/airhandler/#oazoneleak","title":"oaZoneLeak","text":"<p>Type: float</p> <p>For the purposes of airnet zone pressure modeling ONLY, oaZoneLeak specifies the fraction of supply air that is assumed to leak from zone(s) (as opposed to returning to the airhandler via the return duct). For example, if the supply air volume is 500 cfm and oaZoneLeak is 0.4, the values passed to airnet are 500 cfm inflow and 300 cfm outflow. The 200 cfm difference is distributed to other zone leaks according to their pressure/flow characteristics.</p> <p>The default assumption is that airhandlers with return or relief fans provide balanced zone flows while half the supply flow leaks from zones served by supply-fan-only airhandlers.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1 no return/relief fan: 0.5 else 0 No hourly <p>If an oaEcoType choice other than NONE is given, an economizer will be simulated. The economizer will be enabled when the outside temperature is below oaLimT AND the outside air enthalpy is below oaLimE. When enabled, the economizer adjusts the economizer dampers to increase the outside air mixed with the return air until the mixture is cooler than the air handler supply temperature setpoint, if possible, or to maximum outside air if the outside air is not cool enough.</p> <p>CAUTIONS: the simulated economizer is just as dumb as the hardware being simulated. Two considerations particularly require attention. First, if enabled when the outside air is warmer than the return air, it will do the worst possible thing: use 100% outside air. Prevent this by being sure your oaLimT or oaLimE input disables the economizer when the outside air is too warm -- or leave the oaLimT = RA default in effect.</p> <p>Second, the economizer will operate even if the air handler is heating, resulting in use of more than minimum outside air should the return air get above the supply temperature setpoint. Economizers are intended for cooling air handlers; if you heat and cool with the same air handler, consider disabling the economizer when heating by scheduling a very low oaLimT or oaLimE.</p>"},{"location":"input-data/airhandler/#oaecotype","title":"oaEcoType","text":"<p>Type: choice</p> <p>Type of economizer. Choice of:</p> NONE No economizer; outside air flow is the minimum. INTEGRATED Coil and economizer operate independently. NONINTEGRATED Coil does not run when economizer is using all outside air: simulates interlock in some equipment designed to prevent coil icing due to insufficient load, right? TWO_STAGE Economizer is disabled when coil cycles on. NOT IMPLEMENTED as of July 1992."},{"location":"input-data/airhandler/#oalimt","title":"oaLimT","text":"<p>Type: float or RA</p> <p>Economizer outside air temperature high limit. The economizer is disabled (outside air flow is reduced to a minimum) when the outside air temperature is greater than oaLimT. A number may be entered, or \"RA\" to specify the current Return Air temperature. OaLimT may be scheduled to a low value, for example -99, if desired to disable the economizer at certain times.</p> Units Legal Range Default Required Variability <sup>o</sup>F number or RA RA (return air temperature) No hourly"},{"location":"input-data/airhandler/#oalime","title":"oaLimE","text":"<p>Type: float or RA</p> <p>Economizer outside air enthalpy high limit. The economizer is disabled (outside air flow is reduced to a minimum) when the outside air enthalpy is greater than oaLimE. A number may be entered, or \"RA\" to specify the current Return Air enthalpy. OaLimE may be scheduled to a low value, for example -99, if desired to disable the economizer at certain times.</p> Units Legal Range Default Required Variability Btu/<sup>o</sup>F number or RA 999 (enthalpy limit disabled) No hourly <p>oaOaLeak and oaRaLeak specify leakages in the economizer dampers, when present. The leaks are constant-cfm flows, expressed as fractions of the maximum possible flow. Thus, when the current flow is less than the maximum possible, the range of operation of the economizer is reduced. When the two damper leakages add up to more than the current air handler flow, outside and return air are used in the ratio of the two leakages and the economizer, if enabled, is ineffective.</p>"},{"location":"input-data/airhandler/#oaoaleak","title":"oaOaLeak","text":"<p>Type: float</p> <p>Outside air damper leakage to mixed air. Puts a minimum on return air flow and thus a maximum on outside air flow, to mixed air. If an economizer is present, oaOaLeak is a fraction of the supply fan design cfm, sfanVfDs. Otherwise, oaOaLeak is a fraction of the design minimum outside air flow oaVfDsMn.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1.0 0.1 No constant"},{"location":"input-data/airhandler/#oaraleak","title":"oaRaLeak","text":"<p>Type: float</p> <p>Return air damper leakage to mixed air. Puts a minimum on return air flow and thus a maximum on outside air flow, to mixed air. Expressed as a fraction of the supply fan design cfm, sfanVfDs. Not used when no economizer is being modeled.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1.0 0.1 No constant"},{"location":"input-data/airhandler/#airhandler-heat-recovery","title":"AIRHANDLER Heat Recovery","text":"<p>The following data members are used to describe a heat exchanger for recovering heat from exhaust air. Heat recovery added to the model when a value for oaHXSenEffHDs is provided.</p>"},{"location":"input-data/airhandler/#oahxvfds","title":"oaHXVfDs","text":"<p>Type: float</p> <p>Heat exchanger design or rated flow.</p> Units Legal Range Default Required Variability cfm x \\(\\gt\\) 0 oaVfDsMn No constant"},{"location":"input-data/airhandler/#oahxf2","title":"oaHXf2","text":"<p>Type: float</p> <p>Heat exchanger flow fraction (of design flow) used for second set of effectivenesses.</p> Units Legal Range Default Required Variability 0 \\(\\lt\\) x \\(\\lt\\) 1.0 0.75 No constant"},{"location":"input-data/airhandler/#oahxseneffhds","title":"oaHXSenEffHDs","text":"<p>Type: float</p> <p>Heat exchanger sensible effectiveness in heating mode at the design flow rate. Specifying input triggers modeling of heat recovery.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1.0 \u2014 when modeling heat recovery constant"},{"location":"input-data/airhandler/#oahxseneffhf2","title":"oaHXSenEffHf2","text":"<p>Type: float</p> <p>Heat exchanger sensible effectiveness in heating mode at the second flow rate (oaHXf2).</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1.0 0 No constant"},{"location":"input-data/airhandler/#oahxlateffhds","title":"oaHXLatEffHDs","text":"<p>Type: float</p> <p>Heat exchanger latent effectiveness in heating mode at the design flow rate.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1.0 0 No constant"},{"location":"input-data/airhandler/#oahxlateffhf2","title":"oaHXLatEffHf2","text":"<p>Type: float</p> <p>Heat exchanger latent effectiveness in heating mode at the second flow rate (oaHXf2).</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1.0 0 No constant"},{"location":"input-data/airhandler/#oahxseneffcds","title":"oaHXSenEffCDs","text":"<p>Type: float</p> <p>Heat exchanger sensible effectiveness in cooling mode at the design flow rate.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1.0 0 No constant"},{"location":"input-data/airhandler/#oahxseneffcf2","title":"oaHXSenEffCf2","text":"<p>Type: float</p> <p>Heat exchanger sensible effectiveness in cooling mode at the second flow rate (oaHXf2).</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1.0 0 No constant"},{"location":"input-data/airhandler/#oahxlateffcds","title":"oaHXLatEffCDs","text":"<p>Type: float</p> <p>Heat exchanger latent effectiveness in cooling mode at the design flow rate.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1.0 0 No constant"},{"location":"input-data/airhandler/#oahxlateffcf2","title":"oaHXLatEffCf2","text":"<p>Type: float</p> <p>Heat exchanger latent effectiveness in cooling mode at the second flow rate (oaHXf2).</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1.0 0 No constant"},{"location":"input-data/airhandler/#oahxbypass","title":"oaHXBypass","text":"<p>Type: choice</p> <p>Yes/No choice for enabling heat exchanger bypass. If selected, the outdoor air will bypass the heat exchanger when otherwise the heat exchanger would require more heating or cooling energy to meet the respective setpoints.</p> Units Legal Range Default Required Variability NO, YES NO No constant"},{"location":"input-data/airhandler/#oahxauxpwr","title":"oaHXAuxPwr","text":"<p>Type: float</p> <p>Auxiliary power required to operate the heat recovery device (e.g., wheel motor, contorls).</p> Units Legal Range Default Required Variability W x \\(\\ge\\) 0 0 No subhourly"},{"location":"input-data/airhandler/#oahxauxmtr","title":"oaHXAuxMtr","text":"<p>Type: mtrName</p> <p>Name of meter, if any, to record energy used by auxiliary components of the heat recovery system.</p> Units Legal Range Default Required Variability name of a METER not recorded No constant"},{"location":"input-data/airhandler/#airhandler-leaks-and-losses","title":"AIRHANDLER Leaks and Losses","text":"<p>AhSOLeak and ahRoLeak express air leaks in the common supply and return ducts, if any, that connect the air handler to the conditioned space. For leakage after the point where a duct branches off to an individual zone, see TERMINAL member tuSRLeak. These inputs model leaks in constant pressure (or vacuum) areas nearer the supply fan than the terminal VAV dampers; thus, they are constant volume regardless of flow to the zones. Hence, unless 0 leakage flows are specified, the air handler cfm is greater than the sum of the terminal cfm's, and the air handler cfm is non-0 even when all terminal flows are 0. Any heating or cooling energy applied to the excess cfm is lost to the outdoors.</p> <p>If unequal leaks are specified, at present (July 1992) CSE will use the average of the two specifications for both leaks, as the modeled supply and return flows must be equal. A future version may allow unequal flows, making up the difference in exfiltration or infiltration to the zones.</p>"},{"location":"input-data/airhandler/#ahsoleak","title":"ahSOLeak","text":"<p>Type: float</p> <p>Supply duct leakage to outdoors, expressed as a fraction of supply fan design flow (sfanVfDs). Use 0 if the duct is indoors. A constant-cfm leak is modeled, as the pressure is constant when the fan is on.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1 0.01 No constant"},{"location":"input-data/airhandler/#ahroleak","title":"ahROLeak","text":"<p>Type: float</p> <p>Return duct leakage FROM outdoors, expressed as a fraction of sfanVfDs. Use 0 if the duct is indoors.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1 0.01 No constant <p>AhSOLoss and ahROLoss represent conductive losses from the common supply and return ducts to the outdoors. For an individual zone's conductive duct loss, see TERMINAL member tuSRLoss. Losses here are expressed as a fraction of the temperature difference which is lost. For example, if the supply air temperature is 120, the outdoor temperature is 60, and the pertinent loss is .1, the effect of the loss as modeled will be to reduce the supply air temperature by 6 degrees ( .1 * (120 - 60) ) to 114 degrees. CSE currently models these losses a constant TEMPERATURE LOSSes regardless of cfm.</p>"},{"location":"input-data/airhandler/#ahsoloss","title":"ahSOLoss","text":"<p>Type: float</p> <p>Supply duct loss/gain to the outdoors.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1 0.1 No constant"},{"location":"input-data/airhandler/#ahroloss","title":"ahROLoss","text":"<p>Type: float</p> <p>Return duct heat loss/gain to the outdoors.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1 0.1 No constant"},{"location":"input-data/airhandler/#airhandler-crankcase-heater","title":"AIRHANDLER Crankcase Heater","text":"<p>A \"crankcase heater\" is an electric resistance heater in the crankcase of the compressor of heat pumps and dx cooling coils. The function of the crankcase heater is to keep the compressor's oil warmer than the refrigerant when the compressor is not operating, in order to prevent refrigerant from condensing into and remaining in the oil, which impairs its lubricating properties and shortens the life of the compressor. Manufacturers have come up with a number of different methods for controlling the crankcase heater. The crankcase heater can consume a significant part of the heat pump's energy input; thus, it is important to model it.</p> <p>In CSE a heat pump is modeled as though it were separate heating and cooling coils. However, the crankcase heater may operate (or not, according to its control method) whether the heat pump is heating, or cooling, or, in particular, doing neither, so it is modeled as a separate part of the air handler, not associated particularly with heating or cooling.</p> <p>When modeling an air source heat pump (ahhcType = AHP), these variables should be used to specify the crankcase heater, insofar as non-default inputs are desired.</p> <p>Appropriateness of use of these inputs when specifying a DX system without associated heat pump heating is not clear to me (Rob) as of 10-23-92; on the one hand, the DX compressor probably has a crankcase heater; on the other hand, the rest of the DX model is supposed to be complete in itself, and adding a crankcase heater here might produce excessive energy input; on the third hand, the DX model does not include any energy input when the compressor is idle; ... .</p>"},{"location":"input-data/airhandler/#cchcm","title":"cchCM","text":"<p>Type: choice</p> <p>Crankcase heater presence and control method. Choice of:</p> NONE No crankcase heater present CONSTANT Crankcase heater input always cchPMx (below). PTC Proportional control based on oil temp when compressor does not run in subhour (see cchTMx, cchMn, and cchDT). If compressor runs at all in subhour, the oil is assumed to be hotter than cchTMn and crankcase heater input is cchPMn. (PTC stands for 'Positive Temperature Coefficient' or 'Proportional Temperature Control'.) TSTAT Control based on outdoor temperature, with optional differential, during subhours when compressor is off; crankcase heater does not operate if compressor runs at all in subhour. See cchTOn, cchTOff. CONSTANT_CLO PTC_CLO Same as corresponding choices above except zero crankcase heater input during fraction of time compressor is on ('Compressor Lock Out'). There is no TSTAT_CLO because under TSTAT the crankcase heater does not operate anyway when the compressor is on. Units Legal Range Default Required Variability CONSTANT CONSTANT_CLO PTC PTC_CLO TSTAT NONE PTC_CLO if ahhcType is AHP else NONE No constant"},{"location":"input-data/airhandler/#cchpmx","title":"cchPMx","text":"<p>Type: float</p> <p>Crankcase resistance heater input power; maximum power if cchCM is PTC or PTC_CLO.</p> Units Legal Range Default Required Variability kW x \\(\\gt\\) 0 .4 kW No constant"},{"location":"input-data/airhandler/#cchpmn","title":"cchPMn","text":"<p>Type: float</p> <p>Crankcase heater minimum input power if cchCM is PTC or PTC_CLO, disallowed for other cchCM's. &gt; 0.</p> Units Legal Range Default Required Variability kW x \\(\\gt\\) 0 .04 kW No constant"},{"location":"input-data/airhandler/#cchtmx","title":"cchTMx","text":"<p>Type: float</p>"},{"location":"input-data/airhandler/#cchtmn","title":"cchTMn","text":"<p>Type: float</p> <p>For cchCM = PTC or PTC_CLO, the low temperature (max power) and high temperature (min power) setpoints. In subhours when the compressor does not run, crankcase heater input is cchPMx when oil temperature is at or below cchTMx, cchPMn when oil temp is at or above cchTMn, and varies linearly (proportionally) in between. cchTMn must be \\(\\ge\\) cchTMx. See cchDT (next).</p> <p>(Note that actual thermostat setpoints probably cannot be used for cchTMx and cchTMn inputs, because the model assumes the difference between the oil temperature and the outdoor temperature is constant (cchDT) regardless of the heater power. </p> Units Legal Range Default Required Variability <sup>o</sup>F cchTMn: 0; cchTMx: 150 No constant"},{"location":"input-data/airhandler/#cchdt","title":"cchDT","text":"<p>Type: float</p> <p>For cchCM = PTC or PTC_CLO, how much warmer than the outdoor temp CSE assumes the crankcase oil to be in subhours when the compressor does not run. If the compressor runs at all in the subhour, the oil is assumed to be warmer than cchTMn.</p> Units Legal Range Default Required Variability <sup>o</sup>F 20<sup>o</sup>F No constant"},{"location":"input-data/airhandler/#cchton","title":"cchTOn","text":"<p>Type: float</p>"},{"location":"input-data/airhandler/#cchtoff","title":"cchTOff","text":"<p>Type: float</p> <p>For cchCM = TSTAT, in subhours when compressor does not run, the crankcase heater turn-on and turn-off outdoor temperatures, respectively. Unequal values may be given to simulate thermostat differential. When the compressor runs at all in a subhour, the crankcase heater is off for the entire subhour.</p> Units Legal Range Default Required Variability <sup>o</sup>F cchTOff \\(\\ge\\) cchTOn cchTOn: 72<sup>o</sup>F; chcTOff: chcTOn No constant"},{"location":"input-data/airhandler/#cchmtr","title":"cchMtr","text":"<p>Type: name of a METER</p> <p>METER to record crankcase heater energy use, category \"Aux\"; not recorded if not given.</p> Units Legal Range Default Required Variability name of a METER not recorded No constant"},{"location":"input-data/airhandler/#endairhandler","title":"endAirHandler","text":"<p>Indicates the end of the air handler definition. Alternatively, the end of the air handler definition can be indicated by the declaration of another object.</p> Units Legal Range Default Required Variability none No constant <p>Related Probes:</p> <ul> <li>@airHandler</li> <li>@ahRes (accumulated results)</li> </ul>"},{"location":"input-data/battery/","title":"BATTERY","text":"<p>BATTERY describes input data for a model of an energy-storage system which is not tied to any specific energy storage technology. The battery model integrates the energy added and removed (accounting for efficiency losses). Note: although we use the term battery, the underlying model is flexible enough to model any energy storage system.</p> <p>The modeler can set limits and constraints on capacities and flows and the associated efficiencies for this model.</p>"},{"location":"input-data/battery/#btname","title":"btName","text":"<p>Name of the battery system. Given after the word BATTERY.</p> Units Legal Range Default Required Variability 63 characters* none No constant"},{"location":"input-data/battery/#btmeter","title":"btMeter","text":"<p>Type: choice</p> <p>Name of a METER to which the BATTERY's charge/discharge energy flows are recorded. Battery energy flows are accumulated to meter end use \"BT\". Battery energy flows are seen from the standpoint of a \"load\" on the electric grid, so charges to the BATTERY system are positive values while discharges from the BATTERY system are negative values.</p> <p>Note btMeter also determines the source for the probe value loadSeen.  See discussion and example under btChgReq (below).</p> Units Legal Range Default Required Variability meter name none No constant"},{"location":"input-data/battery/#btchgeff","title":"btChgEff","text":"<p>Type: float</p> <p>The charging efficiency of storing electricity into the BATTERY system. A value of 1.0 means that no energy is lost and 100% of charge energy enters and is stored in the battery.</p> Units Legal Range Default Required Variability 0 &lt; x \\(\\le\\) 1 0.975 No hourly"},{"location":"input-data/battery/#btdschgeff","title":"btDschgEff","text":"<p>Type: float</p> <p>The discharge efficiency for when the BATTERY system is discharging power. A value of 1.0 means that no energy is lost and 100% of discharge energy leaves the system.</p> Units Legal Range Default Required Variability 0 &lt; x \\(\\le\\) 1 0.975 No hourly"},{"location":"input-data/battery/#btmaxcap","title":"btMaxCap","text":"<p>Type: float</p> <p>This is the maximum amount of energy that can be stored in the BATTERY system in kilowatt-hours. Once the BATTERY has reached its maximum capacity, no additional energy will be stored.</p> Units Legal Range Default Required Variability kWh x \\(\\ge\\) 0 16 No constant"},{"location":"input-data/battery/#btinitsoe","title":"btInitSOE","text":"<p>Type: float</p> <p>The initial state of energy of the BATTERY system as a fraction of the total capacity. If <code>btInitSOE</code> is specified, the battery state-of-energy at the beginning of the actual simulation will be set to the amount specified, regardless of whether there was a warm-up period or not. If <code>btInitSOE</code> is NOT specififed, it will default to 1.0 (i.e., 100%) at the beginning of the warmup period (if any).</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 0 1.0 No constant"},{"location":"input-data/battery/#btinitcycles","title":"btInitCycles","text":"<p>Type: int</p> <p>The number of cycles on the battery at the beginning of the run.</p> Units Legal Range Default Required Variability number of cycles x \\(\\ge\\) 0 0 No runly"},{"location":"input-data/battery/#btmaxchgpwr","title":"btMaxChgPwr","text":"<p>Type: float</p> <p>The maximum rate at which the BATTERY can be charged in kilowatts (i.e., energy flowing into the BATTERY).</p> Units Legal Range Default Required Variability kW x \\(\\ge\\) 0 4 No hourly"},{"location":"input-data/battery/#btmaxdschgpwr","title":"btMaxDschgPwr","text":"<p>Type: float</p> <p>The maximum rate at which the BATTERY can be discharged in kilowatts (i.e., energy flowing out of the BATTERY).</p> Units Legal Range Default Required Variability kW x \\(\\ge\\) 0 4 No hourly"},{"location":"input-data/battery/#btcontrolalg","title":"btControlAlg","text":"<p>Type: choice</p> <p>Selects charge/discharge control algorithm.  btChgReq (next) specifies the desired battery charge or discharge rate.  btControlAlg allows selection of alternative algorithms for deriving btChgReq.</p> DEFAULT btChgReq is used as input or defaulted (see below) TDVPEAKSAVE btChgReq input (if any) is ignored.  Instead, a California-specific algorithm is used that saves battery charge until peak TDV (Time Dependant Valuation) hours of the day, shifting energy generated on site (e.g. PV) to supply feed the grid during critical periods.  The algorithm requires availability of hourly TDV data, see Top.tdvFName. <p>Note btControlAlg has hourly variability, allowing dynamic algorithm selection.  In California compliance applications, TDVPEAKSAVE is typically used only on days with high TDV peaks.</p> Units Legal Range Default Required Variability DEFAULT or TDVPEAKSAVE DEFAULT No hourly"},{"location":"input-data/battery/#btchgreq","title":"btChgReq","text":"<p>Type: float</p> <p>The power request to charge (or discharge if negative) the battery. If omitted, the default strategy is used (attempt to satisfy all loads and absorb all available excess power).  btChgReq and the default strategy requested power are literally requests: that is, more power will not be delivered than is available; more power will not be absorbed than capacity exits to store; and the battery's power limits will be respected.</p> <p>btChgReq can be set by an expression to allow complex energy management/dispatch strategies.  These approaches typically involve the BATTERY probe value loadSeen, which is the net electricity use (not including the battery) on the meter specified by btMeter (above).  When loadSeen is positive, electricity input (e.g. from the grid) is required; when negative, excess electrical energy is available from photovoltaic generation. loadSeen can be used in btChgReq expressions such as --</p> <pre><code>btChgReq = select(\n    $hour&gt;=9 &amp;&amp; $hour&lt;=20,-min(@BATTERY[ 1].loadSeen, 0), // hrs 9 - 20: charge when surplus energy\n    default -max( @BATTERY[ 1].loadSeen, 0))              // else: discharge when energy is required\n</code></pre> <p>The sign conventions here are tricky.  min(@BATTERY[ 1].loadSeen, 0) produces a value &lt;=0 that is the negative of the amount of surplus energy available.  A positive btChgReq value requests charging, hence \"-\" (minus sign) in front of the min().  Conversely, max( @BATTERY[ 1].loadSeen, 0) results in a value &gt;= 0 indicating the net energy needed by the building.  To request discharge, btChgReq must be negative, so \"-\" is also needed in the discharge expression.  (The @BATTERY[1] references mean \"this battery\", assuming there is only one battery being modelled.  In multi-battery situations, the current BATTERY's index or name must be included within the \"[  ]\".)</p> Units Legal Range Default Required Variability kW btMeter net load No hourly"},{"location":"input-data/battery/#btuseusrchg","title":"btUseUsrChg","text":"<p>Type: choice</p> <p>Former yes/no choice that currently has no effect.  Deprecated, will be removed in a future version.</p>"},{"location":"input-data/battery/#endbattery","title":"endBATTERY","text":"<p>Optionally indicates the end of the BATTERY definition. Alternatively, the end of the definition can be indicated by END or by beginning another object.</p> Units Legal Range Default Required Variability none No constant <p>Related Probes:</p> <ul> <li>@battery</li> </ul>"},{"location":"input-data/boiler/","title":"BOILER","text":"<p>BOILERs are subObjects of HEATPLANTs (preceding Section 5.20). BOILERs supply heat, through their associated HEATPLANT, to HW coils and heat exchangers.</p> <p>Each boiler has a pump. The pump operates whenever the boiler is in use; the pump generates heat in the water, which is added to the boiler's output. The pump heat is independent of load -- the model assumes a bypass valve keeps the water flow constant when the loads are using less than full flow -- except that the heat is assumed never to exceed the load.</p>"},{"location":"input-data/boiler/#boilername","title":"boilerName","text":"<p>Name of BOILER object, given immediately after the word BOILER. The name is used to refer to the boiler in heat plant stage commands.</p> Units Legal Range Default Required Variability 63 characters none Yes constant"},{"location":"input-data/boiler/#blrcap","title":"blrCap","text":"<p>Type: float</p> <p>Heat output capacity of this BOILER.</p> Units Legal Range Default Required Variability Btuh x \\(\\gt\\) 0 none Yes constant"},{"location":"input-data/boiler/#blreffr","title":"blrEffR","text":"<p>Type: float</p> <p>Boiler efficiency at steady-state full load, as a fraction. 1.0 may be specified to model a 100% efficient boiler.</p> Units Legal Range Default Required Variability 0 \\(\\lt\\) x \\(\\le\\) 1.0 0.8 No constant"},{"location":"input-data/boiler/#blreirr","title":"blrEirR","text":"<p>Type: float</p> <p>Boiler Energy Input Ratio: alternate method of specifying efficiency.</p> Units Legal Range Default Required Variability x \\(\\ge\\) 1.0 1/blrEffR No constant"},{"location":"input-data/boiler/#blrpyei","title":"blrPyEi","text":"<p>Type: a, b, c, d</p> <p>Coefficients of cubic polynomial function of part load ratio (load/capacity) to adjust full-load energy input for part load operation. Up to four floats may be given, separated by commas, lowest order (i.e. constant term) coefficient first. If the given coefficients result in a polynomial whose value is not 1.0 when the input variable, part load ratio, is 1.0, a warning message will be printed and the coefficients will be normalized to produce value 1.0 at input 1.0.</p> Units Legal Range Default Required Variability .082597, .996764, 0.79361, 0. No constant"},{"location":"input-data/boiler/#blrmtr","title":"blrMtr","text":"<p>Type: name of a METER</p> <p>Meter to which Boiler's input energy is accumulated; if omitted, input energy is not recorded.</p> Units Legal Range Default Required Variability name of a METER none No constant"},{"location":"input-data/boiler/#blrpgpm","title":"blrpGpm","text":"<p>Type: float</p> <p>Boiler pump flow in gallons per minute: amount of water pumped from this boiler through the hot water loop supplying the HEATPLANT's loads (HW coils and heat exchangers) whenever boiler is operating.</p> Units Legal Range Default Required Variability gpm x \\(\\gt\\) 0 blrCap/10000 No constant"},{"location":"input-data/boiler/#blrphdloss","title":"blrpHdloss","text":"<p>Type: float</p> <p>Boiler pump head loss (pressure). 0 may be specified to eliminate pump heat and pump energy input.</p> Units Legal Range Default Required Variability ft H2O x \\(\\ge\\) 0 114.45* No constant <p>* may be temporary value for 10-31-92 version; prior value of 35 may be restored.</p>"},{"location":"input-data/boiler/#blrpmoteff","title":"blrpMotEff","text":"<p>Type: float</p> <p>Boiler pump motor efficiency.</p> Units Legal Range Default Required Variability 0 \\(\\lt\\) x \\(\\le\\) 1.0 .88 No constant"},{"location":"input-data/boiler/#blrphydeff","title":"blrpHydEff","text":"<p>Type: float</p> <p>Boiler pump hydraulic efficiency</p> Units Legal Range Default Required Variability 0 \\(\\lt\\) x \\(\\le\\) 1.0 .70 No constant"},{"location":"input-data/boiler/#blrpmtr","title":"blrpMtr","text":"<p>Type: name of a METER</p> <p>Meter to which pump electrical input energy is accumulated. If omitted, pump input energy use is not recorded.</p> Units Legal Range Default Required Variability name of a METER none No constant <p>The following four members permit specification of auxiliary input power use associated with the boiler under the conditions indicated.</p> blrAuxOn=float Auxiliary power used when boiler is running, in proportion to its subhour average part load ratio (plr). blrAuxOff=float Auxiliary power used when boiler is not running, in proportion to 1 - plr. blrAuxFullOff=float Auxiliary power used only when boiler is off for entire subhour; not used if the boiler is on at all during the subhour. blrAuxOnAtAll=float Auxiliary power used in full value if boiler is on for any fraction of subhour. Units Legal Range Default Required Variability x \\(\\ge\\) 0 0 No hourly <p>The following four allow specification of meters to record boiler auxiliary energy use through blrAuxOn, blrAuxOff, blrFullOff, and blrAuxOnAtAll, respectively. End use category \"Aux\" is used.</p>"},{"location":"input-data/boiler/#blrauxon","title":"blrAuxOn","text":"<p>Type: float</p> <p>Additional input energy used in proportion to part load ratio when coil on, as for induced draft fan, hourly variable for unforeseen applications.</p> Units Legal Range Default Required Variability x \\(\\ge\\) 0 0.0 No hourly"},{"location":"input-data/boiler/#blrauxonmtr","title":"blrAuxOnMtr","text":"<p>Type: mtrName</p> <p>Meter to which to charge auxOn.</p> Units Legal Range Default Required Variability name of a METER not recorded No constant"},{"location":"input-data/boiler/#blrauxoff","title":"blrAuxOff","text":"<p>Type: float</p> <p>Additional input energy when off for part or all of subhour.</p> Units Legal Range Default Required Variability x \\(\\ge\\) 0 0.0 No hourly"},{"location":"input-data/boiler/#blrauxoffmtr","title":"blrAuxOffMtr","text":"<p>Type: mtrName</p> <p>Meter to which to charge auxOff.</p> Units Legal Range Default Required Variability name of a METER not recorded No constant"},{"location":"input-data/boiler/#blrauxfulloff","title":"blrAuxFullOff","text":"<p>Type: float</p> <p>Additional input energy when off for an entire subhour.</p> Units Legal Range Default Required Variability x \\(\\ge\\) 0 0.0 No hourly"},{"location":"input-data/boiler/#blrauxfulloffmtr","title":"blrAuxFullOffMtr","text":"<p>Type: mtrName</p> <p>Meter to which to charge blrAuxFullOff.</p> Units Legal Range Default Required Variability name of a METER not recorded No constant"},{"location":"input-data/boiler/#blrauxonatall","title":"blrAuxOnAtall","text":"<p>Type: float</p> <p>Additional input energy used in coil on for any part of subhour, for unforeseen uses.</p> Units Legal Range Default Required Variability x \\(\\ge\\) 0 0.0 No hourly"},{"location":"input-data/boiler/#blrauxonatallmtr","title":"blrAuxOnAtAllMtr","text":"<p>Type: mtrName</p> <p>MTR for \"auxOnAtall\"</p> Units Legal Range Default Required Variability name of a METER not recorded No constant"},{"location":"input-data/boiler/#endboiler","title":"endBoiler","text":"<p>Optionally indicates the end of the boiler definition. Alternatively, the end of the definition can be indicated by END or by beginning another object.</p> Units Legal Range Default Required Variability none No constant <p>Related Probes:</p> <ul> <li>@boiler</li> </ul>"},{"location":"input-data/chiller/","title":"CHILLER","text":"<p>CHILLERs are subobjects of COOLPLANTs (Section 5.21). CHILLERs supply coldness, in the form of chilled water, via their COOLPLANT, to CHW (CHilled Water) cooling coils in AIRHANDLERs. CHILLERs exhaust heat through the cooling towers in their COOLPLANT's TOWERPLANT. Each COOLPLANT can contain multiple CHILLERs; chiller operation is controlled by the scheduling and staging logic of the COOLPLANT, as described in the previous section.</p> <p>Each chiller has primary and secondary pumps that operate when the chiller is on. The pumps add heat to the primary and secondary loop water respectively; this heat is considered in the modeling of the loop's water temperature.</p>"},{"location":"input-data/chiller/#chillername","title":"chillerName","text":"<p>Name of CHILLER object, given immediately after the word CHILLER. This name is used to refer to the chiller in cpStage commands.</p> Units Legal Range Default Required Variability 63 characters none Yes constant <p>The next four inputs allow specification of the CHILLER's capacity (amount of heat it can remove from the primary loop water) and how this capacity varies with the supply (leaving) temperature of the primary loop water and the entering temperature of the condenser (secondary loop) water. The chiller capacity at any supply and condenser temperatures is chCapDs times the value of chPyCapT at those temperatures.</p>"},{"location":"input-data/chiller/#chcapds","title":"chCapDs","text":"<p>Type: float</p> <p>Chiller design capacity, that is, the capacity at chTsDs and chTcndDs (next).</p> Units Legal Range Default Required Variability Btuh x \\(\\neq\\) 0 none Yes constant"},{"location":"input-data/chiller/#chtsds","title":"chTsDs","text":"<p>Type: float</p> <p>Design supply temperature: temperature of primary water leaving chiller at which capacity is chCapDs.</p> Units Legal Range Default Required Variability <sup>o</sup>F x \\(\\gt\\) 0 44 No constant"},{"location":"input-data/chiller/#chtcndds","title":"chTcndDs","text":"<p>Type: float</p> <p>Design condenser temperature: temperature of secondary water entering chiller condenser at which capacity is chCapDs.</p> Units Legal Range Default Required Variability <sup>o</sup>F x \\(\\gt\\) 0 85 No constant"},{"location":"input-data/chiller/#chpycapt","title":"chPyCapT","text":"<p>Type: a, b, c, d, e, f</p> <p>Coefficients of bi-quadratic polynomial function of supply (ts) and condenser (tcnd) temperatures that specifies how capacity varies with these temperatures. This polynomial is of the form</p> \\[a + b \\cdot ts + c \\cdot ts^2 + d \\cdot tcnd + e \\cdot tcnd^2 + f \\cdot ts \\cdot tcnd\\] <p>Up to six float values may be entered, separated by commas; CSE will use zero for omitted trailing values. If the polynomial does not evaluate to 1.0 when ts is chTsDs and tcnd is chTcndDs, a warning message will be issued and the coefficients will be adjusted (normalized) to make the value 1.0.</p> Units Legal Range Default Required Variability -1.742040, .029292, .000067, .048054, .000291, -.000106 No constant <p>The next three inputs allow specification of the CHILLER's full-load energy input and how it varies with supply and condenser temperature. Only one of chCop and chEirDs should be given. The full-load energy input at any supply and condenser temperatures is the chiller's capacity at these temperatures, times chEirDs (or 1/chCop), times the value of chPyEirT at these temperatures.</p>"},{"location":"input-data/chiller/#chcop","title":"chCop","text":"<p>Type: float</p> <p>Chiller full-load COP (Coefficient Of Performance) at chTsDsand chTcndDs. This is the output energy divided by the electrical input energy (in the same units) and reflects both motor and compressor efficiency.</p> Units Legal Range Default Required Variability x \\(\\gt\\) 0 4.2 No constant"},{"location":"input-data/chiller/#cheirds","title":"chEirDs","text":"<p>Type: float</p> <p>Alternate input for COP: Full-load Energy Input Ratio (electrical input energy divided by output energy) at design temperatures; the reciprocal of chCop.</p> Units Legal Range Default Required Variability x \\(\\gt\\) 0 chCop is defaulted No constant"},{"location":"input-data/chiller/#chpyeirt","title":"chPyEirT","text":"<p>Type: a, b, c, d, e, f</p> <p>Coefficients of bi-quadratic polynomial function of supply (ts) and condenser (tcnd) temperatures that specifies how energy input varies with these temperatures. This polynomial is of the form</p> \\[a + b \\cdot ts + c \\cdot ts^2 + d \\cdot tcnd + e \\cdot tcnd^2 + f \\cdot ts \\cdot tcnd\\] <p>Up to six float values may be entered, separated by commas; CSE will use zero for omitted trailing values. If the polynomial does not evaluate to 1.0 when ts is chTsDs and tcnd is chTcndDs, a warning message will be issued and the coefficients will be adjusted (normalized) to make the value 1.0.</p> Units Legal Range Default Required Variability 3.117600, -.109236, .001389, .003750, .000150, -.000375 No constant <p>The next three inputs permit specification of the CHILLER's part load energy input. In the following the part load ratio (plr) is defined as the actual load divided by the capacity at the current supply and condenser temperatures. The energy input is defined as follows for four different plr ranges:</p> full loadplr (part load ratio) = 1.0 Power input is full-load input, as described above. compressor unloading region 1.0 &gt; plr \\(\\ge\\) chMinUnldPlr Power input is the full-load input times the value of the chPyEirUl polynomial for the current plr, that is, chPyEirUl(plr). false loading region chMinUnldPlr &gt; plr &gt; chMinFsldPlr Power input in this region is constant at the value for the low end of the compressor unloading region, i.e. chPyEirUl(chMinUnldPlr). cycling region chMinFsldPlr &gt; plr \\(\\ge\\) 0 In this region the chiller runs at the low end of the false loading region for the necessary fraction of the time, and the power input is the false loading value correspondingly prorated, i.e. chPyEirUl(chMinUnldPlr) plr / chMinFsldPlr. <p>These plr regions are similar to those for a DX coil &amp; compressor in an AIRHANDLER, Section 0.</p>"},{"location":"input-data/chiller/#chpyeirul","title":"chPyEirUl","text":"<p>Type: a, b, c, d</p> <p>Coefficients of cubic polynomial function of part load ratio (plr) that specifies how energy input varies with plr in the compressor unloading region (see above). This polynomial is of the form</p> \\[a + b \\cdot plr + c \\cdot plr^2 + d \\cdot plr^3\\] <p>Up to four float values may be entered, separated by commas; CSE will use zero for omitted trailing values. If the polynomial does not evaluate to 1.0 when plr is 1.0, a warning message will be issued and the coefficients will be adjusted (normalized) to make the value 1.0.</p> Units Legal Range Default Required Variability .222903, .313387, .463710, 0. No constant"},{"location":"input-data/chiller/#chminunldplr","title":"chMinUnldPlr","text":"<p>Type: float</p> <p>Minimum compressor unloading part load ratio (plr); maximum false loading plr. See description above.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1 0.1 No constant"},{"location":"input-data/chiller/#chminfsldplr","title":"chMinFsldPlr","text":"<p>Type: float</p> <p>Minimum compressor false loading part load ratio (plr); maximum cycling plr. See description above.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) chMinFsldPlr 0.1 No constant"},{"location":"input-data/chiller/#chmoteff","title":"chMotEff","text":"<p>Type: float</p> <p>Fraction of CHILLER compressor motor input power which goes to the condenser. For an open-frame motor and compressor, where the motor's waste heat goes to the air, enter the motor's efficiency: a fraction around .8 or .9. For a hermetic compressor, where the motor's waste heat goes to the refrigerant and thence to the condenser, use 1.0.</p> Units Legal Range Default Required Variability 0 &lt; x \\(\\le\\) 1 1.0 No constant"},{"location":"input-data/chiller/#chmtr","title":"chMtr","text":"<p>Type: name</p> <p>Name of METER to which to accumulate CHILLER's electrical input energy. Category \"Clg\" is used. Note that two additional commands, chppMtr and chcpMtr, are used to specify meters for recording chiller pump input energy.</p> Units Legal Range Default Required Variability name of a METER not recorded No constant <p>The next six inputs specify this CHILLER's PRIMARY PUMP, which pumps chilled water from the chiller through the CHW coils connected to the chiller's COOLPLANT.</p>"},{"location":"input-data/chiller/#chppgpm","title":"chppGpm","text":"<p>Type: float</p> <p>Chiller primary pump flow in gallons per minute: amount of water pumped from this chiller through the primary loop supplying the COOLPLANT's loads (CHW coils) whenever chiller is operating. Any excess flow over that demanded by coils is assumed to go through a bypass valve. If coil flows exceed chppGpm, CSE assumes the pressure drops and the pump \"overruns\" to deliver the extra flow with the same energy input. The default is one gallon per minute for each 5000 Btuh of chiller design capacity.</p> Units Legal Range Default Required Variability gpm x \\(\\gt\\) 0 chCapDs / 5000 No constant"},{"location":"input-data/chiller/#chpphdloss","title":"chppHdloss","text":"<p>Type: float</p> <p>Chiller primary pump head loss (pressure). 0 may be specified to eliminate pump heat and pump energy input.</p> Units Legal Range Default Required Variability ft H2O x \\(\\ge\\) 0 57.22* No constant <p>* May be temporary default for 10-31-92 version; prior value (65) may be restored.</p>"},{"location":"input-data/chiller/#chppmoteff","title":"chppMotEff","text":"<p>Type: float</p> <p>Chiller primary pump motor efficiency.</p> Units Legal Range Default Required Variability 0 &lt; x \\(\\le\\) 1.0 .88 No constant"},{"location":"input-data/chiller/#chpphydeff","title":"chppHydEff","text":"<p>Type: float</p> <p>Chiller primary pump hydraulic efficiency</p> Units Legal Range Default Required Variability 0 &lt; x \\(\\le\\) 1.0 0.7 No constant"},{"location":"input-data/chiller/#chppovrunf","title":"chppOvrunF","text":"<p>Type: float</p> <p>Chiller primary pump maximum overrun: factor by which flow demanded by coils can exceed chppGpm. The primary flow is not simulated in detail; chppOvrun is currently used only to issue an error message if the sum of the design flows of the coils connected to a COOLPLANT exceeds the sum of the products of chppGpm and chppOvrun for the chiller's in the plants most powerful stage.</p> Units Legal Range Default Required Variability x \\(\\ge\\) 1.0 1.3 No constant"},{"location":"input-data/chiller/#chppmtr","title":"chppMtr","text":"<p>Type: name of a METER</p> <p>Meter to which primary pump electrical input energy is accumulated. If omitted, pump input energy use is not recorded.</p> Units Legal Range Default Required Variability name of a METER none No constant <p>The next five inputs specify this CHILLER's CONDENSER PUMP, also known as the SECONDARY PUMP or the HEAT REJECTION PUMP. This pump pumps water from the chiller's condenser through the cooling towers in the COOLPLANT's TOWERPLANT.</p>"},{"location":"input-data/chiller/#chcpgpm","title":"chcpGpm","text":"<p>Type: float</p> <p>Chiller condenser pump flow in gallons per minute: amount of water pumped from this chiller through the cooling towers when chiller is operating.</p> Units Legal Range Default Required Variability gpm x \\(\\gt\\) 0 chCapDs / 4000 No constant"},{"location":"input-data/chiller/#chcphdloss","title":"chcpHdloss","text":"<p>Type: float</p> <p>Chiller condenser pump head loss (pressure). 0 may be specified to eliminate pump heat and pump energy input.</p> Units Legal Range Default Required Variability ft H2O x \\(\\ge\\) 0 45.78* No constant <p>* May be temporary default for 10-31-92 version; prior value (45) may be restored.</p>"},{"location":"input-data/chiller/#chcpmoteff","title":"chcpMotEff","text":"<p>Type: float</p> <p>Chiller condenser pump motor efficiency.</p> Units Legal Range Default Required Variability 0 &lt; x \\(\\le\\) 1.0 .88 No constant"},{"location":"input-data/chiller/#chcphydeff","title":"chcpHydEff","text":"<p>Type: float</p> <p>Chiller condenser pump hydraulic efficiency</p> Units Legal Range Default Required Variability 0 &lt; x \\(\\le\\) 1.0 0.7 No constant"},{"location":"input-data/chiller/#chcpmtr","title":"chcpMtr","text":"<p>Type: name of a METER</p> <p>Meter to which condenser pump electrical input energy is accumulated. If omitted, pump input energy use is not recorded.</p> Units Legal Range Default Required Variability name of a METER none No constant <p>The following four members permit specification of auxiliary input power use associated with the chiller under the conditions indicated.</p>"},{"location":"input-data/chiller/#chauxon","title":"chAuxOn","text":"<p>Type: float</p> <p>Auxiliary power used when chiller is running, in proportion to its subhour average part load ratio (plr).</p>"},{"location":"input-data/chiller/#chauxoff","title":"chAuxOff","text":"<p>Type: float</p> <p>Auxiliary power used when chiller is not running, in proportion to 1 - plr.</p>"},{"location":"input-data/chiller/#chauxfulloff","title":"chAuxFullOff","text":"<p>Type: float</p> <p>Auxiliary power used only when chiller is off for entire subhour; not used if the chiller is on at all during the subhour.</p>"},{"location":"input-data/chiller/#chauxonatall","title":"chAuxOnAtAll","text":"<p>Type: float</p> <p>Auxiliary power used in full value if chiller is on for any fraction of subhour.</p> Units Legal Range Default Required Variability x \\(\\ge\\) 0 0 No constant <p>The following four allow specification of meters to record chiller auxiliary energy use through chAuxOn, chAuxOff, chFullOff, and chAuxOnAtAll, respectively. End use category \"Aux\" is used.</p>"},{"location":"input-data/chiller/#chauxonmtr-chauxoffmtr-chauxfulloffmtr-chauxonatallmtr","title":"chAuxOnMtr, chAuxOffMtr, chAuxFullOffMtr, chAuxOnAtAllMtr","text":"<p>Type: mtrName</p> Units Legal Range Default Required Variability name of a METER none No constant"},{"location":"input-data/chiller/#endchiller","title":"endChiller","text":"<p>Optionally indicates the end of the CHILLER definition. Alternatively, the end of the definition can be indicated by END or by beginning another object.</p> Units Legal Range Default Required Variability none No constant <p>Related Probes:</p> <ul> <li>@chiller</li> </ul>"},{"location":"input-data/construction/","title":"CONSTRUCTION","text":"<p>CONSTRUCTION constructs an object of class CONSTRUCTION that represents a light weight or massive ceiling, wall, floor, or mass assembly (mass assemblies cannot, obviously, be lightweight). Once defined, CONSTRUCTIONs can be referenced from SURFACEs (below). A defined CONSTRUCTION need not be referenced. Each CONSTRUCTION is optionally followed by LAYERs, which define the constituent LAYERs of the construction.</p>"},{"location":"input-data/construction/#conname","title":"conName","text":"<p>Name of construction. Required for reference from SURFACE and DOOR objects, below.</p> Units Legal Range Default Required Variability 63 characters none Yes constant"},{"location":"input-data/construction/#conu","title":"conU","text":"<p>Type: float</p> <p>U-value for the construction (NOT including surface (air film) conductances; see SURFACE statements). If omitted, one or more LAYERs must immediately follow to specify the LAYERs that make up the construction. If specified, no LAYERs can follow.</p> Units Legal Range Default Required Variability Btuh/ft<sup>2</sup>-<sup>o</sup>F x \\(&gt;\\) 0 calculated from LAYERs if omitted, LAYERs must follow constant"},{"location":"input-data/construction/#endconstruction","title":"endConstruction","text":"<p>Optional to indicates the end of the CONSTRUCTION. Alternatively, the end of the CONSTRUCTION definition can be indicated by \"END\" or by beginning another object If END or endConstruction is used, it should follow the construction's LAYER subobjects, if any.</p> Units Legal Range Default Required Variability N/A No constant <p>Related Probes:</p> <ul> <li>@construction</li> </ul>"},{"location":"input-data/coolplant/","title":"COOLPLANT","text":"<p>A COOLPLANT contains one or more CHILLER subobjects (Section 5.21.1). Each COOLPLANT supports one or more CHilled Water (CHW) cooling coils in AIRHANDLERs, and is supported by a TOWERPLANT (Section 5.22). The piping circuit connecting the cold-water (evaporator) side of the CHILLERs to the CHW coils is referred to as the primary loop; the piping connecting the warm-water (condenser) side of the CHILLERs to the cooling towers in the TOWERPLANT is referred to as the secondary loop. Flows in these loops are established primary and secondary (or heat rejection) by pumps in each CHILLER; these pumps operate when the CHILLER operates.</p> <p>The modeling of the CHW coils, COOLPLANTs, and CHILLERs includes modeling the supply temperature of the water in the primary loop, that is, the water supplied from the COOLPLANT's operating CHILLER(s) to the CHW coils. If the (negative) heat demanded by the connected coils exceeds the plant's capacity, the temperature rises and the available power is distributed among the AIRHANDLERs according to the operation of the CHW coil model.</p> <p>The primary water flow through each CHILLER is always at least that CHILLER's specified primary pump capacity -- it is assumed that any flow in excess of that used by the coils goes through a bypass value. When the coils request more flow than the pump's capacity, it is assumed the pressure drops and the pump can deliver the greater flow at the same power input and while imparting the same heat to the water. The primary water flow is not simulated during the run, but an error occurs before the run if the total design flow of the CHW coils connected to a COOLPLANT exceeds the pumping capacity of the CHILLERs in the plant's most powerful stage.</p> <p>The CHILLERs in the COOLPLANT can be grouped into STAGES of increasing capacity. The COOLPLANT uses the first stage that can meet the load. The load is distributed amoung the CHILLERs in the active stage so that each operates at the same fraction of its capacity; CHILLERs not in the active stage are turned off.</p> <p>For each COOLPLANT, primary loop piping loss is modeled, as a heat gain equal to a constant fraction of the CHILLER capacity of the COOLPLANT's most powerful stage. This heat gain is added to the load whenever the plant is operating; as modeled, the heat gain is independent of load, weather, which stage is operating, or any other variables. No secondary loop piping loss is modeled.</p>"},{"location":"input-data/coolplant/#coolplantname","title":"coolplantName","text":"<p>Name of COOLPLANT object, given immediately after the word COOLPLANT. This name is used to refer to the coolPlant in ahhcCoolplant commands.</p> Units Legal Range Default Required Variability 63 characters none Yes constant"},{"location":"input-data/coolplant/#cpsched","title":"cpSched","text":"<p>Type: choice</p> <p>Coolplant schedule: hourly variable choice of OFF, AVAIL, or ON.</p> OFF COOLPLANT will not supply chilled water regardless of demand. All loads (CHW coils) should be scheduled off when the plant is off; an error will occur if a coil calls for chilled water when its plant is off. AVAIL COOLPLANT will operate when one or more loads demand chilled water. ON COOLPLANT runs unconditionally. When no load wants chilled water, least powerful (first) stage runs anyway. Units Legal Range Default Required Variability OFF, AVAIL, or ON AVAIL No hourly"},{"location":"input-data/coolplant/#cptssp","title":"cpTsSp","text":"<p>Type: float</p> <p>Coolplant primary loop supply temperature setpoint: setpoint temperature for chilled water supplied to coils.</p> Units Legal Range Default Required Variability <sup>o</sup>F x \\(\\gt\\) 0 44 No hourly"},{"location":"input-data/coolplant/#cppipelossf","title":"cpPipeLossF","text":"<p>Type: float</p> <p>Coolplant pipe loss: heat assumed gained from primary loop piping connecting chillers to loads whenever the COOLPLANT is operating, expressed as a fraction of the chiller capacity of the plant's most powerful stage.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1 .01 No constant"},{"location":"input-data/coolplant/#cptowerplant","title":"cpTowerplant","text":"<p>Type: name</p> <p>TOWERPLANT that cools the condenser water for the chillers in this COOLPLANT.</p> Units Legal Range Default Required Variability name of a TOWERPLANT none Yes constant"},{"location":"input-data/coolplant/#cpstagen","title":"cpStageN","text":"<p>Type: chillerName list, ALL_BUT and chillerName list, or ALL</p> <p>The commands cpStage1 through cpStage7 allow specification of up to seven STAGES in which chillers are activated as the load increases. CSE will use the first stage that can meet the load; if no stage will meet the load (output the heat requested by the coils at cpTsSp), the last COOLPLANT stage is used.</p> <p>Each stage may be specified with a list of up to seven names of CHILLERs in the COOLPLANT, or with the word ALL, meaning all of the COOLPLANT's CHILLERs, or with the word ALL_BUT and a list of up to six names of CHILLERs. Each stage should be more powerful than the preceding one. If you have less than seven stages, you may skip some of the commands cpStage1 through cpStage7 -- the used stage numbers need not be contiguous.</p> <p>If none of cpStage1 through cpStage7 are given, CSE supplies a single default stage containing all chillers.</p> <p>A comma must be entered between chiller names and after the word ALL_BUT.</p> Units Legal Range Default Required Variability 1 to 7 names;ALL_BUT and 1\u00a0to 6 names;ALL cpStage1 = ALL No constant"},{"location":"input-data/coolplant/#endcoolplant","title":"endCoolplant","text":"<p>Optionally indicates the end of the COOLPLANT definition. Alternatively, the end of the definition can be indicated by END or by beginning another object.</p> Units Legal Range Default Required Variability none No constant <p>Related Probes:</p> <ul> <li>@coolPlant</li> </ul>"},{"location":"input-data/descond/","title":"DESCOND","text":"<p>Specifies conditions for a cooling design day.  When referenced in TOP coolDsCond (see TOP Autosizing), DESCOND members are used to generate a 24 hour design day used during cooling autosizing. Note that coolDsCond can reference more than one DESCOND, allowing multiple design conditions to be used for autosizing.  For example, both summer and fall days could be specified to ensure a range of sun angles are considered.  Any DESCONDs that are not referenced in coolDsCond have no effect.</p>"},{"location":"input-data/descond/#descondname","title":"desCondName","text":"<p>Object name, given after \u201cDESCOND\u201d.  Required for referencing from Top coolDsCond.</p> Units Legal Range Default Required Variability 63 characters none Yes constant"},{"location":"input-data/descond/#dcday","title":"dcDay","text":"<p>Type: date</p> <p>Calendar date for this design cooling condition.</p> Units Legal Range Default Required Variability 1-365 200 No constant"},{"location":"input-data/descond/#dcdb","title":"dcDB","text":"<p>Type: float</p> <p>Design dry-bulb temperature (maxiumum temperature on design day).</p> Units Legal Range Default Required Variability <sup>o</sup>F no-limitations? 0.0 No constant"},{"location":"input-data/descond/#dcmcdbr","title":"dcMCDBR","text":"<p>Type: float</p> <p>Coincident daily dry-bulb range.</p> Units Legal Range Default Required Variability <sup>o</sup>F no-limitations? none No constant"},{"location":"input-data/descond/#dcmcwb","title":"dcMCWB","text":"<p>Type: float</p> <p>Coincident wet-bulb design temperature.</p> Units Legal Range Default Required Variability <sup>o</sup>F no-limitations? none No constant"},{"location":"input-data/descond/#dcmcwbr","title":"dcMCWBR","text":"<p>Type: float</p> <p>Coincident daily wet-bulb range.</p> Units Legal Range Default Required Variability <sup>o</sup>F no-limitations? none No constant"},{"location":"input-data/descond/#dcwindspeed","title":"dcWindSpeed","text":"<p>Type: float</p> <p>Wind speed for design conditions.</p> Units Legal Range Default Required Variability mph x \\(\\geq\\) 0 0.0 No constant <p>DESCOND provides two mutually-exclusive methods for specifying design day direct beam and diffuse horizontal irradiance values.  Both use the ASHRAE clear sky model.  Consult the ASHRAE Handbook of Fundamentals Climatic Data chapter for model documentation.</p> <ul> <li>Pseudo optical depth.  dcTauB and dcTauD define the taub and taud parameters in the clear sky model.</li> <li>Solar noon irradiance.  CSE uses dcEbnSlrNoon and dcEdhSlrNoon to back-calculate taub and taud.</li> </ul> <p>At most one of these methods can be used within a given DESCOND.  If all solar-related values are omitted, the generated design day has 0 irradiance for all hours.</p>"},{"location":"input-data/descond/#dctaub-dctaud","title":"dcTauB, dcTauD","text":"<p>Type: float</p> <p>ASHRAE clear sky model beam and diffuse pseudo optical depths.  These values are available by month for many locations in ASHRAE design weather data.  Cannot be given if dcEbnSlrNoon and dcEdhSlrNoon are specified.</p> Units Legal Range Default Required Variability 0 irradiance No constant"},{"location":"input-data/descond/#dcebnslrnoon-dcedhslrnoon","title":"dcEbnSlrNoon, dcEdhSlrNoon","text":"<p>Type: float</p> <p>Solar noon direct beam and diffuse horizontal irradiance. Cannot be given if dcTauB and dcTauD are specified.</p> Units Legal Range Default Required Variability Btuh/ft<sup>2</sup> x \\(\\geq\\) 0 0 irradiance No constant"},{"location":"input-data/descond/#enddescond","title":"endDesCond","text":"<p>Optionally indicates the end of the descond definition.</p> Units Legal Range Default Required Variability none No"},{"location":"input-data/dhwdayuse/","title":"DHWDAYUSE","text":"<p>Defines an object that represents domestic hot water use for a single day.  A DHWDAYUSE contains a collection of DHWUSE objects that specify the time, volume, and duration of individual draws.  DHWDAYUSEs are referenced by DHWSYS wsDayUse.  Unreferenced DHWDAYUSEs are allowed.</p> <p>DHWDAYUSEs and their child DHWUSEs are used to construct minute-by-minute hot water use schedules in addition to aggregated hourly schedules.  The minute-by-minute schedules are used for modeling resistance and heat pump storage water heaters, see DHWHEATER whType=SmallStorage whHeatSrc=ResistanceX or whHeatSrc=ASHPX.</p> <p>The following illustrates some features of DHWDAYUSE / DHWUSE --</p> <pre><code>DHWDAYUSE \"Sample\"\n   // 6 AM: 7 min shower, 2 gpm @ 105 F\n   DHWUSE whStart=6.0 wuDuration=7 wuFlow=2 wuTemp=105 wuEndUse=Shower wuEventID=1\n\n   // 7 AM: 1 min faucet draw, 100% hot\n   DHWUSE whStart=7.0 wuDuration=1 wuFlow=1 wuHotF=1 whEndUse=Faucet wuEventID=2\n\n   // 12:30 PM: dishwasher start, several draws over 70 mins; note common wuEventID\n   DHWUSE whStart=12.5 wuDuration=2 wuFlow=2 wuHotF=1 whEndUse=DWashr wuEventID=3\n   DHWUSE whStart=12.8 wuDuration=1.5 wuFlow=2 wuHotF=1 whEndUse=DWashr wuEventID=3\n   DHWUSE whStart=13.6 wuDuration=3 wuFlow=2 wuHotF=1 whEndUse=DWashr wuEventID=3\n\n   // 7 PM every 2nd day: clothes washer runs\n   //   even days: 0 gpm (no draw)\n   //   odd days: 3 gpm, 22% hot\n   DHWUSE whStart=19 wuDuration=30 wuFlow = ($dayOfYear%2)*3 whEndUse=CWashr whHotF=.22 wuEventID=4\n\n   // 11:54 PM: 20 min bath, 1.5 gpm, 80% hot water\n   // Duration spans midnight: draw is wrapped to beginning of *current* day\n   //   In this case a 12 M - 12:14 AM draw is modeled -- before (!) the bath start.\n   DHWUSE whStart 23.9 wuDuration=20 wuFlow=1.5  wuHotF=.8 whEndUse=Bath wuEventID=99\nendDHWDAYUSE\n\nDHWSYS \"DHWSYS1\"\n  ...\n  wsDayUse = \"Sample\"\n  ...\n</code></pre> <p>During the simulation, DHWUSEs are evaluated each hour.  Many DHWUSE values have hourly variability and this allows complicated schemes to be constructed very flexibly.  For example:</p> <pre><code>DHWDAYUSE \"HourlyFaucet\"\n   // Every hour on the half hour: 5 minute, 2 gpm draw\n   //   Same as 24 DHWUSEs, one for each hour\n   DHWUSE wuStart=$hour+.5 wuDuration=5 wuFlow=2 wuEndUse=Faucet\nendDAYUSE\n</code></pre> <p>Some DHWUSE configurations involve mixing to specified wuTemp.  Hot and cold water arriving at the point of use is assumed to be at DHWSYS wsUseTemp and wsMainsTemp respectively.  It is possible to set up situations where wuTemp cannot be achieved (wuTemp &gt; wsUseTemp, for example).  Runtime error messages are produced when impossible conditions are detected.</p> <p>When more than one DHWSYS references the same DHWDAYUSE, DHWUSEs are allocated to DHWSYSs in wuEventID rotation.  This procedure divides the water heating load approximately equally while retaining the peak demand of individual events.  When detailed information is available about which loads are served by specific systems, separate DHWDAYUSEs should be given.</p>"},{"location":"input-data/dhwdayuse/#dhwdayusename","title":"dhwDayUseName","text":"<p>Object name, given after \u201cDHWDAYUSE\u201d.  Required for referencing from DHWSYS.</p> Units Legal Range Default Required Variability 63 characters none Yes constant"},{"location":"input-data/dhwdayuse/#wdumult","title":"wduMult","text":"<p>Type: float</p> <p>Scale factor applied to all draws in this DHWDAYUSE.</p> Units Legal Range Default Required Variability x \\(\\ge\\) 0 1 No constant"},{"location":"input-data/dhwdayuse/#enddhwdayuse","title":"endDHWDAYUSE","text":"<p>Indicates the end of the DHWDAYUSE definition.  endDHWDAYUSE should follow all child DHWUSEs.  Alternatively, the end of the meter definition can be indicated by the declaration of another object or by END.</p> Units Legal Range Default Required Variability none No constant <p>Related Probes:</p> <ul> <li>@DHWDayUse</li> </ul>"},{"location":"input-data/dhwheater/","title":"DHWHEATER","text":"<p>DHWHEATER constructs an object representing a domestic hot water heater (or several if identical).</p>"},{"location":"input-data/dhwheater/#whname","title":"whName","text":"<p>Optional name of water heater; give after the word \u201cDHWHEATER\u201d if desired.</p> Units Legal Range Default Required Variability 63 characters none No constant"},{"location":"input-data/dhwheater/#whmult","title":"whMult","text":"<p>Type: integer</p> <p>Number of identical water heaters of this type. Any value \\(&gt;1\\) is equivalent to repeated entry of the same DHWHEATER.</p> Units Legal Range Default Required Variability x \\(&gt;\\) 0 1 No constant"},{"location":"input-data/dhwheater/#whtype","title":"whType","text":"<p>Type: choice</p> <p>Type of water heater.  This categorization is based on CEC and federal rating standards that change from time to time.</p> SMALLSTORAGE A storage water heater having an energy factor (EF) rating.  Generally, a gas-fired storage water heater with input of 75,000 Btuh or less, an oil-fired storage water heater with input of 105,000 Btuh or less, an electric storage water heater with input of 12 kW or less, or a heat pump water heater rated at 24 amps or less. LARGESTORAGE Any storage water heater that is not SMALLSTORAGE. SMALLINSTANTANEOUS A water heater that has an input rating of at least 4,000 Btuh per gallon of stored water. Small instantaneous water heaters include: gas instantaneous water heaters with an input of 200,000 Btu per hour or less, oil instantaneous water heaters with an input of 210,000 Btu per hour or less, and electric instantaneous water heaters with an input of 12 kW or less. LARGEINSTANTANEOUS An instantaneous water heater that does not conform to the definition of SMALLINSTANTANEOUS, an indirect fuel-fired water heater, or a hot water  supply boiler. INSTANTANEOUSUEF An instantaneous water heater having a UEF rating (as opposed to EF). Units Legal Range Default Required Variability Codes listed above SMALLSTORAGE No constant"},{"location":"input-data/dhwheater/#whheatsrc","title":"whHeatSrc","text":"<p>Type: choice</p> <p>Heat source for water heater.  CSE implements uses efficiency-based models for all whTypes (as documented in RACM, App. B).  In addition, the detailed Ecotope HPWH model is available for electric (air source heat pump and resistance) SMALLSTORAGE water heaters.</p> RESISTANCE Electric resistance heating element Deprecated for whType=SMALLSTORAGE (use RESISTANCEX) RESISTANCEX Electric resistance heating element, detailed HPWH model ASHP Air source heat pump, EF model Deprecated for whType=SMALLSTORAGE (use ASHPX) ASHPX Air source heat pump, detailed HPWH model FUEL Fuel-fired burner Units Legal Range Default Required Variability Codes listed above FUEL No constant"},{"location":"input-data/dhwheater/#whrestype","title":"whResType","text":"<p>Type: choice</p> <p>Resistance heater type, valid only if whHeatSrc is equal to RESISTANCEX, else ignored. These choices are supported by the detailed HPWH model.  Except for Generic, all heater characteristics are set by HPWH based on whResType.</p> Units Legal Range Default Required Variability Typical SwingTank Typical No constant"},{"location":"input-data/dhwheater/#whheatingcap","title":"whHeatingCap","text":"<p>Type: float</p> <p>Nominal heating capacity, available only for a limited HPWH types.</p> Units Legal Range Default Required Variability Btuh x \\(&gt;\\) 0 0 No constant"},{"location":"input-data/dhwheater/#whvol","title":"whVol","text":"<p>Type: float</p> <p>Storage tank volume. Must be omitted or 0 for instantaneous whTypes.  Used by HPWH model (whHeatSrc=RESISTANCEX or whHeatSrc=ASHPX). Required when whHeatSrc=RESISTANCEX or whHeatSrc=ASHPX with whASHPType=GENERIC.  For all other configurations, whVol is documentation-only.</p> Units Legal Range Default Required Variability gal \\(\\ge\\) 0.1 (caution: small values may cause runtime errors) per whASHPType if HPWH else 50 For some HPWH configurations, see above constant"},{"location":"input-data/dhwheater/#whvolrunning","title":"whVolRunning","text":"<p>Type: float</p> <p>Running storage volume is the volume above aquastat. Requires the total volume based on aquastat position. Ecotope's HPWH tank and heater.</p> Units Legal Range Default Required Variability gal x \\(&gt;\\) 0 0 No constant"},{"location":"input-data/dhwheater/#whef","title":"whEF","text":"<p>Type: float</p> <p>Rated energy factor that specifies DHWHEATER efficiency under test conditions.  Used by CSE to derive annual water heating efficiency and/or other characteristics as described below.  Calculation methods are documented in RACM, Appendix B.</p> Configuration whEF default Use whType=SMALLSTORAGE, whHeatSrc=RESISTANCE or FUEL 0.82 Derivation of whLDEF whType=SMALLSTORAGE, whHeatSrc=ASHP 0.82 Derivation of whLDEFnote inappropriate default (deprecated, use ASHPX) whType=SMALLSTORAGE, whHeatSrc=ASHPX, whASHPType=GENERIC (req'd) Tank losses Overall efficiency whType=SMALLSTORAGE, whHeatSrc=RESISTANCEX (req'd) Tank losses Note: maximum whEF=0.98. whType=SMALLINSTANTANEOUS, whHeatSrc=RESISTANCE or FUEL 0.82 Annual efficiency = whEF*0.92 Any other (unused) Units Legal Range Default Required Variability \\(&gt;\\) 0 Caution: maximum not checked. Unrealistic values will cause runtime errors and/or invalid results See above See above constant"},{"location":"input-data/dhwheater/#whldef","title":"whLDEF","text":"<p>Type: float</p> <p>Load-dependent energy factor for DHWHEATERs with whType=SMALLSTORAGE and whHeatSrc=FUEL or whHeatSrc=RESISTANCE.  If not given, whLDEF is derived using a preliminary simulation activated via DHWSYS wsCalcMode=PRERUN.  See RACM Appendix B.</p> Units Legal Range Default Required Variability x \\(&gt;\\) 0 Calculated via DHWSYS PreRun mechanism When whType = SMALLSTORAGE and PreRun not used constant"},{"location":"input-data/dhwheater/#whuef","title":"whUEF","text":"<p>Type: float</p> <p>Water heater Uniform Energy Factor efficiency rating. Required when whType=INSTANTANEOUSUEF. When specified with whType=SMALLSTORAGE and whHeatSrc=ASHPX, the compressor performance will be adjusted to match the value input here. </p> Units Legal Range Default Required Variability x \\(\\ge\\) 0 none when whType= INSTANTANEOUSUEF constant"},{"location":"input-data/dhwheater/#whannualelec","title":"whAnnualElec","text":"<p>Type: float</p> <p>Annual electricity use assumed in UEF rating derivation.  Used when whType=INSTANTANEOUSUEF.</p> Units Legal Range Default Required Variability kWh x \\(\\ge\\) 0 none when whType= INSTANTANEOUSUEF constant"},{"location":"input-data/dhwheater/#whannualfuel","title":"whAnnualFuel","text":"<p>Type: float</p> <p>Annual fuel use assumd in UEF rating derivation, used when whType=INSTANTANEOUSUEF.</p> Units Legal Range Default Required Variability therms x \\(\\ge\\) 0 none when whType= INSTANTANEOUSUEF constant"},{"location":"input-data/dhwheater/#whratedflow","title":"whRatedFlow","text":"<p>Type: float</p> <p>Maximum flow rate assumed in UEF rating derivation.  Used when whType=INSTANTANEOUSUEF.</p> Units Legal Range Default Required Variability gpm x \\(&gt;\\) 0 none when whType= INSTANTANEOUSUEF constant"},{"location":"input-data/dhwheater/#whstbyelec","title":"whStbyElec","text":"<p>Type: float</p> <p>Instantaneous water heater standby power (electricity consumed when heater is not operating).  Used when whType=INSTANTANEOUSUEF.</p> Units Legal Range Default Required Variability W x \\(\\ge\\) 0 4 No constant"},{"location":"input-data/dhwheater/#whloadcfwdf","title":"whLoadCFwdF","text":"<p>Type: float</p> <p>Instanteous water heater load carry forward factor -- approximate number of hours the heater is allowed to meet water heating demand that is unmet on a 1 minute basis, used when whType=INSTANTANEOUSUEF.</p> Units Legal Range Default Required Variability x \\(\\ge\\) 0 1 No constant"},{"location":"input-data/dhwheater/#whzone","title":"whZone","text":"<p>Type: znName</p> <p>Name of zone where water heater is located, used only in detailed HPWH models (whHeatSrc=ASHPX or whHeatSrc=RESISTANCEX), otherwise no effect. Zone conditions are used for tank heat loss calculations.  Heat losses from the DHWHEATER are included in the zone heat balance.  whZone also provides the default for whASHPSrcZn (see below).</p> <p>whZone and whTEx cannot both be specified.</p> Units Legal Range Default Required Variability name of a ZONE Not in a zone (heat losses discarded) No constant"},{"location":"input-data/dhwheater/#whtex","title":"whTEx","text":"<p>Type: float</p> <p>Water heater surround temperature, used only in detailed HPWH models (whHeatSrc=ASHPX or whHeatSrc=RESISTANCEX), otherwise no effect.  When whTEx is specified, tank heat losses are calculated using whTEx and modify tank water temperatures, but the lost heat has no external effect.</p> <p>whZone and whTEx cannot both be specified.</p> Units Legal Range Default Required Variability <sup>o</sup>F x \\(\\ge\\) 0 whZone air temperature if specified, else 70 <sup>o</sup>F No hourly"},{"location":"input-data/dhwheater/#whashptype","title":"whASHPType","text":"<p>Type: choice</p> <p>Air source heat pump type, valid only if whHeatSrc=ASHPX. These choices are supported by the detailed HPWH model.  Except for Generic, all heater characteristics are set by HPWH based on whASHPType.</p> Choice Specified type Generic General generic (parameterized by wh_EF and wh_vol) AOSmithPHPT60 60 gallon Voltex AOSmithPHPT80 80 gallon Voltex AOSmithHPTU50 50 gallon AOSmith HPTU AOSmithHPTU66 66 gallon AOSmith HPTU AOSmithHPTU80 80 gallon AOSmith HPTU AOSmithHPTU80DR 80 gallon AOSmith HPTU (demand reduction variant) AOSmithCAHP120 120 gallon AOSmith Sanden40 Sanden 40 gallon CO2 external heat pump Sanden80 Sanden 80 gallon CO2 external heat pump Sanden120 Sanden 120 gallon CO2 external heat pump SandenGS3 Sanden GS3 compressor CO2 external GE2012 2012 era GeoSpring GE2014 2014 80 gal GE model run in the efficiency mode GE2014_80DR 2014 80 gal GE model run in the efficiency mode (demand reduction variant) GE2014StdMode 2014 50 gal GE run in standard mode GE2014StdMode80 2014 80 gal GE run in standard mode RheemHB50 newish Rheem (2014 model?) RheemHBDR2250 50 gallon 2250 W resistance Rheem HB Duct Ready RheemHBDR4550 50 gallon 4500 W resistance Rheem HB Duct Ready RheemHBDR2265 65 gallon 2250 W resistance Rheem HB Duct Ready RheemHBDR4565 65 gallon 4500 W resistance Rheem HB Duct Ready RheemHBDR2280 80 gallon 2250 W resistance Rheem HB Duct Ready RheemHBDR4580 80 gallon 4500 W resistance Rheem HB Duct Ready Rheem2020Prem40 40 gallon Rheem 2020 Premium Rheem2020Prem50 50 gallon Rheem 2020 Premium Rheem2020Prem65 65 gallon Rheem 2020 Premium Rheem2020Prem80 80 gallon Rheem 2020 Premium Rheem2020Build40 40 gallon Rheem 2020 Builder Rheem2020Build50 50 gallon Rheem 2020 Builder Rheem2020Build65 65 gallon Rheem 2020 Builder Rheem2020Build80 80 gallon Rheem 2020 Builder RheemPlugInShared40 40 gal Rheem plug-in 120V shared circuit (no resistance elements) RheemPlugInShared50 50 gal Rheem plug-in 120V shared circuit (no resistance elements) RheemPlugInShared65 65 gal Rheem plug-in 120V shared circuit (no resistance elements) RheemPlugInShared80 80 gal Rheem plug-in 120V shared circuit (no resistance elements) RheemPlugInDedicated40 40 gal Rheem plug-in 120V dedicated circuit (no resistance elements) RheemPlugInDedicated50 50 gal Rheem  plug-in 120V dedicated circuit (no resistance elements) Stiebel220E Stiebel Eltron (2014 model?) AOSmithSHPT50 AOSmith add'l models (added 3-24-2017) AOSmithSHPT66 AOSmith add'l models (added 3-24-2017) AOSmithSHPT80 AOSmith add'l models (added 3-24-2017) GenericTier1 Generic Tier 1 GenericTier2 Generic Tier 2 GenericTier3 Generic Tier 3 Generic General generic (parameterized by EF and vol) UEF2Generic Experimental UEF=2 WorstCaseMedium UEF2Generic alias (supports pre-existing test cases) BasicIntegrated Typical integrated HPWH ResTank Resistance heater (no compressor).  Superceded by whHeatSrc=RESITANCEX ResTankNoUA Resistance heater (no compressor) with no tank losses.  Superseded by whHeatSrc=RESISTANCEX. AOSmithHPTU80DR 80 gallon AOSmith HPTU with fixed backup setpoint (experimental for demand response testing) AOSmithSHPT50 50 gal AOSmith SHPT AOSmithSHPT66 66 gal AOSmith SHPT AOSmithSHPT80 80 gal AOSmith SHPT AOSmithHPTS40 40 gal AOSmith HPTS AOSmithHPTS50 50 gal AOSmith HPTS AOSmithHPTS66 66 gal AOSmith HPTS AOSmithHPTS80 80 gal AOSmith HPTS ColmacCxV5_SP Colmac CxA-xx modular external HPWHs (single pass mode) ColmacCxA10_SP Colmac CxA-xx modular external HPWHs (single pass mode) ColmacCxA15_SP Colmac CxA-xx modular external HPWHs (single pass mode) ColmacCxA20_SP Colmac CxA-xx modular external HPWHs (single pass mode) ColmacCxA25_SP Colmac CxA-xx modular external HPWHs (single pass mode) ColmacCxA30_SP Colmac CxA-xx modular external HPWHs (single pass mode) ColmacCxV5_MP Colmac CxA-xx modular external HPWHs (multi-pass mode) ColmacCxA10_MP Colmac CxA-xx modular external HPWHs (multi-pass mode) ColmacCxA15_MP Colmac CxA-xx modular external HPWHs (multi-pass mode) ColmacCxA20_MP Colmac CxA-xx modular external HPWHs (multi-pass mode) ColmacCxA25_MP Colmac CxA-xx modular external HPWHs (multi-pass mode) ColmacCxA30_MP Colmac CxA-xx modular external HPWHs (multi-pass mode) NyleC25A_SP Nyle Cxx external HPWHs (SP = single pass mode) NyleC60A_SP Nyle Cxx external HPWHs (SP = single pass mode) NyleC90A_SP Nyle Cxx external HPWHs (SP = single pass mode) NyleC125A_SP Nyle Cxx external HPWHs (SP = single pass mode) NyleC185A_SP Nyle Cxx external HPWHs (SP = single pass mode) NyleC250A_SP Nyle Cxx external HPWHs (SP = single pass mode) NyleC60A_CWP_SP Nyle Cxx external SP HPWHs with cold weather package NyleC90A_CWP_SP Nyle Cxx external SP HPWHs with cold weather package NyleC125A_CWP_SP Nyle Cxx external SP HPWHs with cold weather package NyleC185A_CWP_SP Nyle Cxx external SP HPWHs with cold weather package NyleC250A_CWP_SP Nyle Cxx external SP HPWHs with cold weather package NyleC60A_MP Nyle Cxx external HPWHs (MP = multi-pass mode) NyleC90A_MP Nyle Cxx external HPWHs (MP = multi-pass mode) NyleC125A_MP Nyle Cxx external HPWHs (MP = multi-pass mode) NyleC185A_MP Nyle Cxx external HPWHs (MP = multi-pass mode) NyleC250A_MP Nyle Cxx external HPWHs (MP = multi-pass mode) NyleC60A_CWP_MP Nyle Cxx external MP HPWHs w/ cold weather package NyleC90A_CWP_MP Nyle Cxx external MP HPWHs w/ cold weather package NyleC125A_CWP_MP Nyle Cxx external MP HPWHs w/ cold weather package NyleC185A_CWP_MP Nyle Cxx external MP HPWHs w/ cold weather package NyleC250A_CWP_MP Nyle Cxx external MP HPWHs w/ cold weather package Rheem_HPHD60HNU_MP Rheem HPHD60 MP external MP HPWHs Rheem_HPHD60VNU_MP Rheem HPHD60 MP external MP HPWHs Rheem_HPHD135HNU_MP Rheem HPHD135 MP external MP HPWHs Rheem_HPHD135VNU_MP Rheem HPHD135 MP external MP HPWHs Scalable_SP single pass scalable type for autosized standard design Scalable_MP multipass scalable type for autosized standard design AquaThermAire Villara AquaThermAire HPWH GenericUEF217 65-gal tank meeting Federal standard minimum requirement AWHSTier3Generic40 A 40-gal tank meeting Advanced Water Heating Specification Tier-3 minimum requirements AWHSTier3Generic50 A 50-gal tank meeting Advanced Water Heating Specification Tier-3 minimum requirements AWHSTier3Generic65 A 65-gal tank meeting Advanced Water Heating Specification Tier-3 minimum requirements AWHSTier3Generic80 A 80-gal tank meeting Advanced Water Heating Specification Tier-3 minimum requirements AWHSTier4Generic40 A 40-gal tank meeting Advanced Water Heating Specification Tier-4 minimum requirements AWHSTier4Generic50 A 50-gal tank meeting Advanced Water Heating Specification Tier-4 minimum requirements AWHSTier4Generic65 A 65-gal tank meeting Advanced Water Heating Specification Tier-4 minimum requirements AWHSTier4Generic80 A 80-gal tank meeting Advanced Water Heating Specification Tier-4 minimum requirements BradfordWhiteAeroThermRE2H50 Bradford White 50-gal AeroTherm2023 BradfordWhiteAeroThermRE2H65 Bradford White 65-gal AeroTherm2023 BradfordWhiteAeroThermRE2H80 Bradford White 80-gal AeroTherm2023 LG_APHWC50 LG 50-gal integrated HPWH LG_APHWC80 LG 580-gal integrated HPWH Units Legal Range Default Required Variability Codes listed above none When whHeatSrc=ASHPX constant"},{"location":"input-data/dhwheater/#whashpsrczn","title":"whASHPSrcZn","text":"<p>Type: znName</p> <p>Name of zone that serves as heat pump heat source used when whHeatSrc=ASHPX. Heat removed from the zone is added to the heated water and is included in zone heat balance (that is, heat pump operation cools the zone).</p> <p>whASHPSrcZn and whASHPSrcT cannot both be specified.</p> Units Legal Range Default Required Variability name of a ZONE whZoneIf no zone is specified by input or default, heat extracted by ASHP has no effect. No constant"},{"location":"input-data/dhwheater/#whashpsrct","title":"whASHPSrcT","text":"<p>Type: float</p> <p>Heat pump source air temperature used when whHeatSrc=ASHPX.  Heat removed from this source is added to the heated water but has no other effect.</p> <p>whASHPSrcZn and whASHPSrcT cannot both be specified.</p> <p>The logic to determine the temperature of the heat pump source air is:</p> <pre><code>        if whASHPSrcT is specified\n          use whASHPSrcT\n        else if whASHPSRCZn is specified\n          use whASHPSrcZn air temp\n        else if whZone is specified\n          use whZone air temp\n        else\n          use 70 F\n</code></pre> <p>To model a heat pump that uses outdoor air as its heat source, omit whASHPSrcZn and specify whASHPSrcT = $tDbO.</p> Units Legal Range Default Required Variability <sup>o</sup>F x \\(\\ge\\) 0 70 <sup>o</sup>F (used only when whASHPSrcZn and whZone not specified) No hourly"},{"location":"input-data/dhwheater/#whashpresuse","title":"whASHPResUse","text":"<p>Type: float</p> <p>Specifies activation temperature difference for resistance heating, used only when whHeatSrc=ASHPX and whASHPType=GENERIC.  Refer to HPWH engineering documentation for model details.</p> Units Legal Range Default Required Variability <sup>o</sup>C x \\(\\ge\\) 0 7.22 No constant"},{"location":"input-data/dhwheater/#whreshtpwr","title":"whResHtPwr","text":"<p>Type: float</p> <p>Specifies resistance upper element power, used only with whHeatSrc=RESISTANCEX.</p> Units Legal Range Default Required Variability W x \\(\\ge\\) 0 4500 No constant"},{"location":"input-data/dhwheater/#whreshtpwr2","title":"whResHtPwr2","text":"<p>Type: float</p> <p>Specifies resistance lower element power, used only with whHeatSrc=RESISTANCEX.</p> Units Legal Range Default Required Variability W x \\(\\ge\\) 0 whResHtPwr No constant"},{"location":"input-data/dhwheater/#whua","title":"whUA","text":"<p>Type: float</p> <p>HPWH-type total UA (not per tank)</p> Units Legal Range Default Required Variability Btuh/F x \\(\\geq\\) 0 HPWH default No constant"},{"location":"input-data/dhwheater/#whinsulr","title":"whInsulR","text":"<p>Type: float</p> <p>Tank insulation resistance for heat pump water heater.</p> Units Legal Range Default Required Variability hr-F/Btuh x \\(&gt;\\) 0 -1 No constant"},{"location":"input-data/dhwheater/#whinhtsupply-whinhtloopret","title":"whInHtSupply, whInHtLoopRet","text":"<p>Type: float</p> <p>Fractional tank height of inlets for supply water and DHWLOOP return, used only with HPWH types (whHeatSrc=RESISTANCEX or whHeatSrc=ASHPX).  0 indicates the bottom of the water heater tank and 1 specifies the top.  Inlet height influences tank layer mixing and can impact heat pump COP and/or heating activation frequency.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1 HPWH default (0?) No constant"},{"location":"input-data/dhwheater/#whtankcount","title":"whtankCount","text":"<p>Type: float</p> <p>Number of storage tanks per DHWHEATER, re built-up whType=Builtup, does not reflect wh_mult (wh_mult=2, wh_tankCount=3 -&gt; 6 tanks).</p> Units Legal Range Default Required Variability # x \\(\\geq\\) 1 1 No constant"},{"location":"input-data/dhwheater/#wheff","title":"whEff","text":"<p>Type: float</p> <p>Water heating efficiency, used in modeling whType=LARGESTORAGE and whType=LARGEINSTANTANEOUS.</p> Units Legal Range Default Required Variability 0 \\(&lt;\\) whEff \\(\\leq\\) 1 .82 No constant"},{"location":"input-data/dhwheater/#whsbl","title":"whSBL","text":"<p>Type: float</p> <p>Standby loss, used in modeling whType=LARGESTORAGE.</p> Units Legal Range Default Required Variability Btuh x \\(\\ge\\) 0 0 No constant"},{"location":"input-data/dhwheater/#whpilotpwr","title":"whPilotPwr","text":"<p>Type: float</p> <p>Pilot light consumption, included in fuel energy use of DHWHEATERs with whHeatSrc=FUEL.</p> Units Legal Range Default Required Variability Btuh x \\(\\ge\\) 0 0 No hourly"},{"location":"input-data/dhwheater/#whparelec","title":"whParElec","text":"<p>Type: float</p> <p>Parasitic electricity power, included in electrical energy use of all DHWHEATERs.</p> Units Legal Range Default Required Variability W x \\(\\ge\\) 0 0 No hourly"},{"location":"input-data/dhwheater/#whfadjelec-whfadjfuel","title":"whFAdjElec, whFAdjFuel","text":"<p>Type: float</p> <p>Water heater energy use modifiers.  Multiplies calculated use of electricity (whFAdjElec) and fuel (whFAdjFuel).  All components of energy use -- primary, backup, XBU (extra backup), and other auxiliary -- are modified before they are accumulated to whElecMtr and whFuelMtr.</p> Units Legal Range Default Required Variability \\(\\ge\\) 0 1 No subhourly"},{"location":"input-data/dhwheater/#whelecmtr","title":"whElecMtr","text":"<p>Type: mtrName</p> <p>Name of METER object, if any, by which DHWHEATER electrical energy use is recorded (under end use DHW).</p> Units Legal Range Default Required Variability name of a METER Parent DHWSYS wsElecMtr No constant"},{"location":"input-data/dhwheater/#whxbuenduse","title":"whxBUEndUse","text":"<p>Type: choice</p> <p>Specifies the whElecMtr end use, if any, to which extra backup energy is accumulated. In some water heater types, extra backup energy is modeled to maintain output temperature at wsTUse.  By default, extra backup energy is included in end use dhwBU.  whxBUEndUse allows specification of an alternative end use to which extra backup energy is accumulated.</p> Units Legal Range Default Required Variability end use code (extra backup accums to dhwBU) No constant"},{"location":"input-data/dhwheater/#whfuelmtr","title":"whFuelMtr","text":"<p>Type: mtrName</p> <p>Name of METER object, if any, by which DHWHEATER fuel energy use is recorded (under end use DHW).</p> Units Legal Range Default Required Variability name of a METER Parent DHWSYS wsFuelMtr No constant"},{"location":"input-data/dhwheater/#whtanktinit","title":"whTankTInit","text":"<p>Type: comma-separated list of 12 floats</p> <p>A list of 12 initial values for HPWH tank model layer temperatures, in bottom-to-top order.  If given, these values are used to initialize tank layer temperatures at the beginning of the warmup period.  Initialization is not repeated at the beginning of the main simulation.</p> <p>whTankTInit is allowed only for HPWH-based types (whHeatSrc=ASHPX or whHeatSrc=ResistanceX).</p> <p>whTankTInit is intended for use in empirical validation studies where the initial tank state needs to match measured data.  whTankTInit should not be generally used.  In the absence of whTankTInit, layer temperatures are initialized to the water heater setpoint inherited from the parent DHWSYS.</p> Units Legal Range Default Required Variability <sup>o</sup>F x \\(\\gt\\) 0 No constant"},{"location":"input-data/dhwheater/#enddhwheater","title":"endDHWHEATER","text":"<p>Optionally indicates the end of the DHWHEATER definition.</p> Units Legal Range Default Required Variability x \\(\\geq\\) 0 none No <p>Related Probes:</p> <ul> <li>@DHWHeater</li> </ul>"},{"location":"input-data/dhwheatrec/","title":"DHWHEATREC","text":"<p>DHWHEATREC constructs an object representing one or more heat recovery devices in a DHWSYS. Drain water heat recovered by the device increases parent DHWSYS wsInlet temperature and/or fixture cold water feed temperature.  This reduces water heating energy consumption.</p>"},{"location":"input-data/dhwheatrec/#wrname","title":"wrName","text":"<p>Optional name of device; give after the word \u201cDHWHEATREC\u201d if desired.</p> Units Legal Range Default Required Variability 63 characters none No constant"},{"location":"input-data/dhwheatrec/#wrmult","title":"wrMult","text":"<p>Type: integer</p> <p>Number of identical heat recovery devices of this type. Any value &gt;1 is equivalent to repeated entry of the same DHWHEATREC.</p> Units Legal Range Default Required Variability x \\(&gt;\\) 0 1 No constant"},{"location":"input-data/dhwheatrec/#wrhwenduse","title":"wrHWEndUse","text":"<p>Type: choice</p> <p>Hot water end use to which this DHWHEATREC is applied: one of Shower, Bath, CWashr, DWashr, or Faucet.  Selects DHWUSE draws for heat recovery calculations.  Currently, only Shower is supported.</p> Units Legal Range Default Required Variability Shower Shower No constant"},{"location":"input-data/dhwheatrec/#wrcountfxdrain","title":"wrCountFXDrain","text":"<p>Type: integer</p> <p>Number of fixtures (of type wrHWEndUse) whose drain lines pass through this heat recovery device.  wrCountFXDrain=0 causes this DHWHEATREC to have no effect (that is, equivalent to omitting the DHWHEATREC command).</p> Units Legal Range Default Required Variability x \\(\\ge\\) 0 1 No constant"},{"location":"input-data/dhwheatrec/#wrcountfxcold","title":"wrCountFXCold","text":"<p>Type: integer</p> <p>Number of fixtures (of type wrHWEndUse) with cold water supply connected to the DHWHEATREC potable-side outlet and thus use tempered water to mix with hot water.</p> Units Legal Range Default Required Variability x \\(\\ge\\) 0 1 No constant"},{"location":"input-data/dhwheatrec/#wrfeedswh","title":"wrFeedsWH","text":"<p>Type: choice</p> <p>Specifies whether the potable-side outlet of the DHWHEATREC is connected to the DHWHEATER(s) inlet.</p> Units Legal Range Default Required Variability Yes, No No No constant"},{"location":"input-data/dhwheatrec/#wrtype","title":"wrType","text":"<p>Type: choice</p> <p>Specifies the type of heat recovery device: Vertical, Horizontal, or SetEF.  Horizontal and Vertical derive effectiveness from wrCSARatedEF, flow rates, and water temperatures.  As of Feb. 2019, the same correlation is used for both Horizontal and Vertical, so these choices have no effect on results.  Choice SetEF uses wrCSARatedEF without modification as the effectiveness (note hourly variability).</p> Units Legal Range Default Required Variability Vertical, Horizontal, SetEF Vertical No constant"},{"location":"input-data/dhwheatrec/#wrcsaratedef","title":"wrCSARatedEF","text":"<p>Type: float</p> <p>Specifies the heat recovery effectiveness, generally determined using CSA B55.2 rating conditions.  This value is modified during simulation based on water flow rates and temperatures.  If wrType=SetEF, wsCSARatedEF is used without modification.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1 none Yes hourly"},{"location":"input-data/dhwheatrec/#wrtdindiff","title":"wrTDInDiff","text":"<p>Type: float</p> <p>Temperature drop between the fixture drain and DHWHEATREC drain-side inlet.  The drain-side inlet temperature is thus DHWUSE wuTemp - wrTDInDiff.</p> Units Legal Range Default Required Variability <sup>o</sup>F x \\(\\ge\\) 0 4.6 <sup>o</sup>F No hourly"},{"location":"input-data/dhwheatrec/#wrtdinwarmup","title":"wrTDInWarmup","text":"<p>Type: float</p> <p>Drain-side inlet water temperature during warmup.  During the warmup portion of a draw (if any), the drain-side inlet temperature will initially be lower than that based on DHWUSE wuTemp.  wrTDInWarmup allows input of user estimates for this temperature.  Note wrTDInWarmup is not adjusted by wrTDInDiff.</p> Units Legal Range Default Required Variability <sup>o</sup>F x \\(&gt;\\) 0 65 <sup>o</sup>F No hourly"},{"location":"input-data/dhwheatrec/#enddhwheatrec","title":"endDHWHEATREC","text":"<p>Optionally indicates the end of the DHWHEATREC definition.</p> Units Legal Range Default Required Variability none No <p>Related Probes:</p>"},{"location":"input-data/dhwloop/","title":"DHWLOOP","text":"<p>DHWLOOP constructs one or more objects representing a domestic hot water circulation loop. The actual pipe runs in the DHWLOOP are specified by any number of DHWLOOPSEGs (see below). Circulation pumps are specified by DHWLOOPPUMPs (also below).</p>"},{"location":"input-data/dhwloop/#wlname","title":"wlName","text":"<p>Optional name of loop; give after the word \u201cDHWLOOP\u201d if desired.</p> Units Legal Range Default Required Variability 63 characters none No constant"},{"location":"input-data/dhwloop/#wlmult","title":"wlMult","text":"<p>Type: integer</p> <p>Number of identical loops of this type. Any value \\(&gt;1\\) is equivalent to repeated entry of the same DHWLOOP (and all child objects).</p> Units Legal Range Default Required Variability x \\(&gt;\\) 0 1 No constant"},{"location":"input-data/dhwloop/#wlflow","title":"wlFlow","text":"<p>Type: float</p> <p>Loop flow rate (when operating).</p> Units Legal Range Default Required Variability gpm x \\(\\ge\\) 0 6 No hourly"},{"location":"input-data/dhwloop/#wltin1","title":"wlTIn1","text":"<p>Type: float</p> <p>Inlet temperature of first DHWLOOPSEG.</p> Units Legal Range Default Required Variability <sup>o</sup>F x \\(&gt;\\) 0 DHWSYS wsTUse No hourly"},{"location":"input-data/dhwloop/#wlrunf","title":"wlRunF","text":"<p>Type: float</p> <p>Fraction of hour that loop circulation operates.</p> Units Legal Range Default Required Variability x \\(\\ge\\) 0 1 No hourly"},{"location":"input-data/dhwloop/#wlfua","title":"wlFUA","text":"<p>Type: float</p> <p>DHWLOOPSEG pipe heat loss adjustment factor.  DHWLOOPSEG UA is derived (from wgSize, wgLength, wgInsulK, wgInsulThk, and wgExH) and multiplied by wlFUA.  Note: does not apply to child DHWLOOPBRANCHs (see wbFUA).</p> Units Legal Range Default Required Variability x \\(&gt;\\) 0 1 No constant"},{"location":"input-data/dhwloop/#wllossmakeuppwr","title":"wlLossMakeupPwr","text":"<p>Type: float</p> <p>Specifies electrical power available to make up losses from DHWLOOPSEGs (loss from DHWLOOPBRANCHs is not included). Separate loss makeup is typically used in multi-unit HPWH systems to avoid inefficiencies associated with high condenser temperatures.  Loss-makeup energy is calculated hourly and is the smaller of loop losses and wlLossMakeupPwr.  The resulting electricity use (including the effect of wlLossMakeupEff) is accumulated to the METER specified by wlElecMtr (end use dhwMFL). No other effect, such as heat gain to surroundings, is modeled.</p> Units Legal Range Default Required Variability W x \\(\\ge\\) 0 0 No hourly"},{"location":"input-data/dhwloop/#wllossmakeupeff","title":"wlLossMakeupEff","text":"<p>Type: float</p> <p>Specifies the efficiency of loss makeup heating if any.  No effect when wlLossMakeupPwr is 0.</p> Units Legal Range Default Required Variability x \\(&gt;\\) 0 1 No hourly"},{"location":"input-data/dhwloop/#wlelecmtr","title":"wlElecMtr","text":"<p>Type: mtrName</p> <p>Name of METER object, if any, to which DHWLOOP electrical energy use is recorded (under end use dhwMFL).</p> Units Legal Range Default Required Variability name of a METER Parent DHWSYS wsElecMtr No constant"},{"location":"input-data/dhwloop/#enddhwloop","title":"endDHWLoop","text":"<p>Optionally indicates the end of the DHWLOOP definition.</p> Units Legal Range Default Required Variability none No <p>Related Probes:</p> <ul> <li>@DHWLoop</li> </ul>"},{"location":"input-data/dhwloopbranch/","title":"DHWLOOPBRANCH","text":"<p>DHWLOOPBRANCH constructs one or more objects representing a branch pipe from the preceding DHWLOOPSEG. A DHWLOOPSEG can have any number of DHWLOOPBRANCHs to represent pipe runs with differing sizes, insulation, or surrounding conditions.</p>"},{"location":"input-data/dhwloopbranch/#wbname","title":"wbName","text":"<p>Optional name of segment; give after the word \u201cDHWLOOPBRANCH\u201d if desired.</p> Units Legal Range Default Required Variability 63 characters none No constant"},{"location":"input-data/dhwloopbranch/#wbmult","title":"wbMult","text":"<p>Type: float</p> <p>Specifies the number of identical DHWLOOPBRANCHs. Note may be non-integer.</p> Units Legal Range Default Required Variability x \\(&gt;\\) 0 1 No constant"},{"location":"input-data/dhwloopbranch/#wblength","title":"wbLength","text":"<p>Type: float</p> <p>Length of branch.</p> Units Legal Range Default Required Variability ft x \\(\\ge\\) 0 0 No constant"},{"location":"input-data/dhwloopbranch/#wbsize","title":"wbSize","text":"<p>Type: float</p> <p>Nominal size of pipe. CSE assumes the pipe outside diameter = size + 0.125 in.</p> Units Legal Range Default Required Variability in x \\(&gt;\\) 0 none Yes constant"},{"location":"input-data/dhwloopbranch/#wbinsulk","title":"wbInsulK","text":"<p>Type: float</p> <p>Pipe insulation conductivity</p> Units Legal Range Default Required Variability Btuh-ft/ft<sup>2</sup>-<sup>o</sup>F x \\(&gt;\\) 0 0.02167 No constant"},{"location":"input-data/dhwloopbranch/#wbinsulthk","title":"wbInsulThk","text":"<p>Type: float</p> <p>Pipe insulation thickness</p> Units Legal Range Default Required Variability in x \\(\\ge\\) 0 1 No constant"},{"location":"input-data/dhwloopbranch/#wbexh","title":"wbExH","text":"<p>Type: float</p> <p>Combined radiant/convective exterior surface conductance between insulation (or pipe if no insulation) and surround.</p> Units Legal Range Default Required Variability Btuh/ft<sup>2</sup>-<sup>o</sup>F x \\(&gt;\\) 0 1.5 No hourly"},{"location":"input-data/dhwloopbranch/#wbexcnd","title":"wbExCnd","text":"<p>Type: choice</p> <p>Specify exterior conditions.</p> Choice Description ADIABATIC Adiabatic on other side AMBIENT Ambient exterior SPECT Specify temperature ADJZN Adjacent zone GROUND Ground conditions Units Legal Range Default Required Variability See table above SPECT No constant"},{"location":"input-data/dhwloopbranch/#wbadjzn","title":"wbAdjZn","text":"<p>Type: float</p> <p>Boundary conditions for adjacent zones.</p> Units Legal Range Default Required Variability x \\(&gt;\\) 0 0.0 No runly"},{"location":"input-data/dhwloopbranch/#wbextx","title":"wbExTX","text":"<p>Type: float</p> <p>External boundary conditions.</p> Units Legal Range Default Required Variability x \\(&gt;\\) 0 70.0 No runly"},{"location":"input-data/dhwloopbranch/#wbfua","title":"wbFUA","text":"<p>Type: float</p> <p>Adjustment factor applied to branch UA.  UA is derived (from wbSize, wbLength, wbInsulK, wbInsulThk, and wbExH) and then multiplied by wbFUA.  Used to represent e.g. imperfect insulation.  Note that parent DHWLOOP wlFUA does not apply to DHWLOOPBRANCH (only DHWLOOPSEG)</p> Units Legal Range Default Required Variability x \\(\\ge\\) 0 1 No constant"},{"location":"input-data/dhwloopbranch/#wbext","title":"wbExT","text":"<p>Type: float</p> <p>Surrounding equivalent temperature.</p> Units Legal Range Default Required Variability <sup>o</sup>F x \\(&gt;\\) 0 70 No hourly"},{"location":"input-data/dhwloopbranch/#wbflow","title":"wbFlow","text":"<p>Type: float</p> <p>Branch flow rate assumed during draw.</p> Units Legal Range Default Required Variability gpm x \\(\\ge\\) 0 2 No hourly"},{"location":"input-data/dhwloopbranch/#wbfwaste","title":"wbFWaste","text":"<p>Type: float</p> <p>Number of times during the hour when the branch volume is discarded.</p> Units Legal Range Default Required Variability x \\(\\ge\\) 0 0 No hourly"},{"location":"input-data/dhwloopbranch/#enddhwloopbranch","title":"endDHWLOOPBRANCH","text":"<p>Optionally indicates the end of the DHWLOOPBRANCH definition.</p> Units Legal Range Default Required Variability none none No <p>Related Probes:</p> <ul> <li>@DHWLoopBranch</li> </ul>"},{"location":"input-data/dhwloopheater/","title":"DHWLOOPHEATER","text":"<p>DHWHEATERLOOP constructs an object representing a hot water heater dedicated to heating DHWLOOP return water (or several if identical).</p>"},{"location":"input-data/dhwloopheater/#whname","title":"whName","text":"<p>Optional name of water heater; give after the word \u201cDHWHEATER\u201d if desired.</p> Units Legal Range Default Required Variability 63 characters none No constant"},{"location":"input-data/dhwloopheater/#whmult","title":"whMult","text":"<p>Type: integer</p> <p>Number of identical water heaters of this type. Any value \\(&gt;1\\) is equivalent to repeated entry of the same DHWHEATER.</p> Units Legal Range Default Required Variability x \\(&gt;\\) 0 1 No constant"},{"location":"input-data/dhwloopheater/#whtype","title":"whType","text":"<p>Type: choice</p> <p>Type of water heater.  This categorization is based on CEC and federal rating standards that change from time to time.</p> SMALLSTORAGE A storage water heater having an energy factor (EF) rating.  Generally, a gas-fired storage water heater with input of 75,000 Btuh or less, an oil-fired storage water heater with input of 105,000 Btuh or less, an electric storage water heater with input of 12 kW or less, or a heat pump water heater rated at 24 amps or less. LARGESTORAGE Any storage water heater that is not SMALLSTORAGE. SMALLINSTANTANEOUS A water heater that has an input rating of at least 4,000 Btuh per gallon of stored water. Small instantaneous water heaters include: gas instantaneous water heaters with an input of 200,000 Btu per hour or less, oil instantaneous water heaters with an input of 210,000 Btu per hour or less, and electric instantaneous water heaters with an input of 12 kW or less. LARGEINSTANTANEOUS An instantaneous water heater that does not conform to the definition of SMALLINSTANTANEOUS, an indirect fuel-fired water heater, or a hot water  supply boiler. INSTANTANEOUSUEF An instantaneous water heater having a UEF rating (as opposed to EF). Units Legal Range Default Required Variability Codes listed above SMALLSTORAGE No constant"},{"location":"input-data/dhwloopheater/#whheatsrc","title":"whHeatSrc","text":"<p>Type: choice</p> <p>Heat source for water heater.  CSE implements uses efficiency-based models for all whTypes (as documented in RACM, App. B).  In addition, the detailed Ecotope HPWH model is available for electric (air source heat pump and resistance) SMALLSTORAGE water heaters.</p> RESISTANCE Electric resistance heating element Deprecated for whType=SMALLSTORAGE (use RESISTANCEX) RESISTANCEX Electric resistance heating element, detailed HPWH model ASHP Air source heat pump, EF model Deprecated for whType=SMALLSTORAGE (use ASHPX) ASHPX Air source heat pump, detailed HPWH model FUEL Fuel-fired burner Units Legal Range Default Required Variability Codes listed above FUEL No constant"},{"location":"input-data/dhwloopheater/#whrestype","title":"whResType","text":"<p>Type: choice</p> <p>Resistance heater type, valid only if whHeatSrc is equal to RESISTANCEX, else ignored. These choices are supported by the detailed HPWH model.  Except for Generic, all heater characteristics are set by HPWH based on whResType.</p> Units Legal Range Default Required Variability Typical SwingTank Typical No constant"},{"location":"input-data/dhwloopheater/#whheatingcap","title":"whHeatingCap","text":"<p>Type: float</p> <p>Nominal heating capacity, available only for a limited HPWH types.</p> Units Legal Range Default Required Variability Btuh x \\(&gt;\\) 0 0 No constant"},{"location":"input-data/dhwloopheater/#whvol","title":"whVol","text":"<p>Type: float</p> <p>Storage tank volume. Must be omitted or 0 for instantaneous whTypes.  Used by HPWH model (whHeatSrc=RESISTANCEX or whHeatSrc=ASHPX). Required when whHeatSrc=RESISTANCEX or whHeatSrc=ASHPX with whASHPType=GENERIC.  For all other configurations, whVol is documentation-only.</p> Units Legal Range Default Required Variability gal \\(\\ge\\) 0.1 (caution: small values may cause runtime errors) per whASHPType if HPWH else 50 For some HPWH configurations, see above constant"},{"location":"input-data/dhwloopheater/#whvolrunning","title":"whVolRunning","text":"<p>Type: float</p> <p>Running storage volume is the volume above aquastat. Requires the total volume based on aquastat position. Ecotope's HPWH tank and heater.</p> Units Legal Range Default Required Variability gal x \\(&gt;\\) 0 0 No constant"},{"location":"input-data/dhwloopheater/#whef","title":"whEF","text":"<p>Type: float</p> <p>Rated energy factor that specifies DHWHEATER efficiency under test conditions.  Used by CSE to derive annual water heating efficiency and/or other characteristics as described below.  Calculation methods are documented in RACM, Appendix B.</p> Configuration whEF default Use whType=SMALLSTORAGE, whHeatSrc=RESISTANCE or FUEL 0.82 Derivation of whLDEF whType=SMALLSTORAGE, whHeatSrc=ASHP 0.82 Derivation of whLDEFnote inappropriate default (deprecated, use ASHPX) whType=SMALLSTORAGE, whHeatSrc=ASHPX, whASHPType=GENERIC (req'd) Tank losses Overall efficiency whType=SMALLSTORAGE, whHeatSrc=RESISTANCEX (req'd) Tank losses Note: maximum whEF=0.98. whType=SMALLINSTANTANEOUS, whHeatSrc=RESISTANCE or FUEL 0.82 Annual efficiency = whEF*0.92 Any other (unused) Units Legal Range Default Required Variability \\(&gt;\\) 0 Caution: maximum not checked. Unrealistic values will cause runtime errors and/or invalid results See above See above constant"},{"location":"input-data/dhwloopheater/#whldef","title":"whLDEF","text":"<p>Type: float</p> <p>Load-dependent energy factor for DHWHEATERs with whType=SMALLSTORAGE and whHeatSrc=FUEL or whHeatSrc=RESISTANCE.  If not given, whLDEF is derived using a preliminary simulation activated via DHWSYS wsCalcMode=PRERUN.  See RACM Appendix B.</p> Units Legal Range Default Required Variability x \\(&gt;\\) 0 Calculated via DHWSYS PreRun mechanism When whType = SMALLSTORAGE and PreRun not used constant"},{"location":"input-data/dhwloopheater/#whuef","title":"whUEF","text":"<p>Type: float</p> <p>Water heater Uniform Energy Factor efficiency rating. Required when whType=INSTANTANEOUSUEF. When specified with whType=SMALLSTORAGE and whHeatSrc=ASHPX, the compressor performance will be adjusted to match the value input here. </p> Units Legal Range Default Required Variability x \\(\\ge\\) 0 none when whType= INSTANTANEOUSUEF constant"},{"location":"input-data/dhwloopheater/#whannualelec","title":"whAnnualElec","text":"<p>Type: float</p> <p>Annual electricity use assumed in UEF rating derivation.  Used when whType=INSTANTANEOUSUEF.</p> Units Legal Range Default Required Variability kWh x \\(\\ge\\) 0 none when whType= INSTANTANEOUSUEF constant"},{"location":"input-data/dhwloopheater/#whannualfuel","title":"whAnnualFuel","text":"<p>Type: float</p> <p>Annual fuel use assumd in UEF rating derivation, used when whType=INSTANTANEOUSUEF.</p> Units Legal Range Default Required Variability therms x \\(\\ge\\) 0 none when whType= INSTANTANEOUSUEF constant"},{"location":"input-data/dhwloopheater/#whratedflow","title":"whRatedFlow","text":"<p>Type: float</p> <p>Maximum flow rate assumed in UEF rating derivation.  Used when whType=INSTANTANEOUSUEF.</p> Units Legal Range Default Required Variability gpm x \\(&gt;\\) 0 none when whType= INSTANTANEOUSUEF constant"},{"location":"input-data/dhwloopheater/#whstbyelec","title":"whStbyElec","text":"<p>Type: float</p> <p>Instantaneous water heater standby power (electricity consumed when heater is not operating).  Used when whType=INSTANTANEOUSUEF.</p> Units Legal Range Default Required Variability W x \\(\\ge\\) 0 4 No constant"},{"location":"input-data/dhwloopheater/#whloadcfwdf","title":"whLoadCFwdF","text":"<p>Type: float</p> <p>Instanteous water heater load carry forward factor -- approximate number of hours the heater is allowed to meet water heating demand that is unmet on a 1 minute basis, used when whType=INSTANTANEOUSUEF.</p> Units Legal Range Default Required Variability x \\(\\ge\\) 0 1 No constant"},{"location":"input-data/dhwloopheater/#whzone","title":"whZone","text":"<p>Type: znName</p> <p>Name of zone where water heater is located, used only in detailed HPWH models (whHeatSrc=ASHPX or whHeatSrc=RESISTANCEX), otherwise no effect. Zone conditions are used for tank heat loss calculations.  Heat losses from the DHWHEATER are included in the zone heat balance.  whZone also provides the default for whASHPSrcZn (see below).</p> <p>whZone and whTEx cannot both be specified.</p> Units Legal Range Default Required Variability name of a ZONE Not in a zone (heat losses discarded) No constant"},{"location":"input-data/dhwloopheater/#whtex","title":"whTEx","text":"<p>Type: float</p> <p>Water heater surround temperature, used only in detailed HPWH models (whHeatSrc=ASHPX or whHeatSrc=RESISTANCEX), otherwise no effect.  When whTEx is specified, tank heat losses are calculated using whTEx and modify tank water temperatures, but the lost heat has no external effect.</p> <p>whZone and whTEx cannot both be specified.</p> Units Legal Range Default Required Variability <sup>o</sup>F x \\(\\ge\\) 0 whZone air temperature if specified, else 70 <sup>o</sup>F No hourly"},{"location":"input-data/dhwloopheater/#whashptype","title":"whASHPType","text":"<p>Type: choice</p> <p>Air source heat pump type, valid only if whHeatSrc=ASHPX. These choices are supported by the detailed HPWH model.  Except for Generic, all heater characteristics are set by HPWH based on whASHPType.</p> Choice Specified type Generic General generic (parameterized by wh_EF and wh_vol) AOSmithPHPT60 60 gallon Voltex AOSmithPHPT80 80 gallon Voltex AOSmithHPTU50 50 gallon AOSmith HPTU AOSmithHPTU66 66 gallon AOSmith HPTU AOSmithHPTU80 80 gallon AOSmith HPTU AOSmithHPTU80DR 80 gallon AOSmith HPTU (demand reduction variant) AOSmithCAHP120 120 gallon AOSmith Sanden40 Sanden 40 gallon CO2 external heat pump Sanden80 Sanden 80 gallon CO2 external heat pump Sanden120 Sanden 120 gallon CO2 external heat pump SandenGS3 Sanden GS3 compressor CO2 external GE2012 2012 era GeoSpring GE2014 2014 80 gal GE model run in the efficiency mode GE2014_80DR 2014 80 gal GE model run in the efficiency mode (demand reduction variant) GE2014StdMode 2014 50 gal GE run in standard mode GE2014StdMode80 2014 80 gal GE run in standard mode RheemHB50 newish Rheem (2014 model?) RheemHBDR2250 50 gallon 2250 W resistance Rheem HB Duct Ready RheemHBDR4550 50 gallon 4500 W resistance Rheem HB Duct Ready RheemHBDR2265 65 gallon 2250 W resistance Rheem HB Duct Ready RheemHBDR4565 65 gallon 4500 W resistance Rheem HB Duct Ready RheemHBDR2280 80 gallon 2250 W resistance Rheem HB Duct Ready RheemHBDR4580 80 gallon 4500 W resistance Rheem HB Duct Ready Rheem2020Prem40 40 gallon Rheem 2020 Premium Rheem2020Prem50 50 gallon Rheem 2020 Premium Rheem2020Prem65 65 gallon Rheem 2020 Premium Rheem2020Prem80 80 gallon Rheem 2020 Premium Rheem2020Build40 40 gallon Rheem 2020 Builder Rheem2020Build50 50 gallon Rheem 2020 Builder Rheem2020Build65 65 gallon Rheem 2020 Builder Rheem2020Build80 80 gallon Rheem 2020 Builder RheemPlugInShared40 40 gal Rheem plug-in 120V shared circuit (no resistance elements) RheemPlugInShared50 50 gal Rheem plug-in 120V shared circuit (no resistance elements) RheemPlugInShared65 65 gal Rheem plug-in 120V shared circuit (no resistance elements) RheemPlugInShared80 80 gal Rheem plug-in 120V shared circuit (no resistance elements) RheemPlugInDedicated40 40 gal Rheem plug-in 120V dedicated circuit (no resistance elements) RheemPlugInDedicated50 50 gal Rheem  plug-in 120V dedicated circuit (no resistance elements) Stiebel220E Stiebel Eltron (2014 model?) AOSmithSHPT50 AOSmith add'l models (added 3-24-2017) AOSmithSHPT66 AOSmith add'l models (added 3-24-2017) AOSmithSHPT80 AOSmith add'l models (added 3-24-2017) GenericTier1 Generic Tier 1 GenericTier2 Generic Tier 2 GenericTier3 Generic Tier 3 Generic General generic (parameterized by EF and vol) UEF2Generic Experimental UEF=2 WorstCaseMedium UEF2Generic alias (supports pre-existing test cases) BasicIntegrated Typical integrated HPWH ResTank Resistance heater (no compressor).  Superceded by whHeatSrc=RESITANCEX ResTankNoUA Resistance heater (no compressor) with no tank losses.  Superseded by whHeatSrc=RESISTANCEX. AOSmithHPTU80DR 80 gallon AOSmith HPTU with fixed backup setpoint (experimental for demand response testing) AOSmithSHPT50 50 gal AOSmith SHPT AOSmithSHPT66 66 gal AOSmith SHPT AOSmithSHPT80 80 gal AOSmith SHPT AOSmithHPTS40 40 gal AOSmith HPTS AOSmithHPTS50 50 gal AOSmith HPTS AOSmithHPTS66 66 gal AOSmith HPTS AOSmithHPTS80 80 gal AOSmith HPTS ColmacCxV5_SP Colmac CxA-xx modular external HPWHs (single pass mode) ColmacCxA10_SP Colmac CxA-xx modular external HPWHs (single pass mode) ColmacCxA15_SP Colmac CxA-xx modular external HPWHs (single pass mode) ColmacCxA20_SP Colmac CxA-xx modular external HPWHs (single pass mode) ColmacCxA25_SP Colmac CxA-xx modular external HPWHs (single pass mode) ColmacCxA30_SP Colmac CxA-xx modular external HPWHs (single pass mode) ColmacCxV5_MP Colmac CxA-xx modular external HPWHs (multi-pass mode) ColmacCxA10_MP Colmac CxA-xx modular external HPWHs (multi-pass mode) ColmacCxA15_MP Colmac CxA-xx modular external HPWHs (multi-pass mode) ColmacCxA20_MP Colmac CxA-xx modular external HPWHs (multi-pass mode) ColmacCxA25_MP Colmac CxA-xx modular external HPWHs (multi-pass mode) ColmacCxA30_MP Colmac CxA-xx modular external HPWHs (multi-pass mode) NyleC25A_SP Nyle Cxx external HPWHs (SP = single pass mode) NyleC60A_SP Nyle Cxx external HPWHs (SP = single pass mode) NyleC90A_SP Nyle Cxx external HPWHs (SP = single pass mode) NyleC125A_SP Nyle Cxx external HPWHs (SP = single pass mode) NyleC185A_SP Nyle Cxx external HPWHs (SP = single pass mode) NyleC250A_SP Nyle Cxx external HPWHs (SP = single pass mode) NyleC60A_CWP_SP Nyle Cxx external SP HPWHs with cold weather package NyleC90A_CWP_SP Nyle Cxx external SP HPWHs with cold weather package NyleC125A_CWP_SP Nyle Cxx external SP HPWHs with cold weather package NyleC185A_CWP_SP Nyle Cxx external SP HPWHs with cold weather package NyleC250A_CWP_SP Nyle Cxx external SP HPWHs with cold weather package NyleC60A_MP Nyle Cxx external HPWHs (MP = multi-pass mode) NyleC90A_MP Nyle Cxx external HPWHs (MP = multi-pass mode) NyleC125A_MP Nyle Cxx external HPWHs (MP = multi-pass mode) NyleC185A_MP Nyle Cxx external HPWHs (MP = multi-pass mode) NyleC250A_MP Nyle Cxx external HPWHs (MP = multi-pass mode) NyleC60A_CWP_MP Nyle Cxx external MP HPWHs w/ cold weather package NyleC90A_CWP_MP Nyle Cxx external MP HPWHs w/ cold weather package NyleC125A_CWP_MP Nyle Cxx external MP HPWHs w/ cold weather package NyleC185A_CWP_MP Nyle Cxx external MP HPWHs w/ cold weather package NyleC250A_CWP_MP Nyle Cxx external MP HPWHs w/ cold weather package Rheem_HPHD60HNU_MP Rheem HPHD60 MP external MP HPWHs Rheem_HPHD60VNU_MP Rheem HPHD60 MP external MP HPWHs Rheem_HPHD135HNU_MP Rheem HPHD135 MP external MP HPWHs Rheem_HPHD135VNU_MP Rheem HPHD135 MP external MP HPWHs Scalable_SP single pass scalable type for autosized standard design Scalable_MP multipass scalable type for autosized standard design AquaThermAire Villara AquaThermAire HPWH GenericUEF217 65-gal tank meeting Federal standard minimum requirement AWHSTier3Generic40 A 40-gal tank meeting Advanced Water Heating Specification Tier-3 minimum requirements AWHSTier3Generic50 A 50-gal tank meeting Advanced Water Heating Specification Tier-3 minimum requirements AWHSTier3Generic65 A 65-gal tank meeting Advanced Water Heating Specification Tier-3 minimum requirements AWHSTier3Generic80 A 80-gal tank meeting Advanced Water Heating Specification Tier-3 minimum requirements AWHSTier4Generic40 A 40-gal tank meeting Advanced Water Heating Specification Tier-4 minimum requirements AWHSTier4Generic50 A 50-gal tank meeting Advanced Water Heating Specification Tier-4 minimum requirements AWHSTier4Generic65 A 65-gal tank meeting Advanced Water Heating Specification Tier-4 minimum requirements AWHSTier4Generic80 A 80-gal tank meeting Advanced Water Heating Specification Tier-4 minimum requirements BradfordWhiteAeroThermRE2H50 Bradford White 50-gal AeroTherm2023 BradfordWhiteAeroThermRE2H65 Bradford White 65-gal AeroTherm2023 BradfordWhiteAeroThermRE2H80 Bradford White 80-gal AeroTherm2023 LG_APHWC50 LG 50-gal integrated HPWH LG_APHWC80 LG 580-gal integrated HPWH Units Legal Range Default Required Variability Codes listed above none When whHeatSrc=ASHPX constant"},{"location":"input-data/dhwloopheater/#whashpsrczn","title":"whASHPSrcZn","text":"<p>Type: znName</p> <p>Name of zone that serves as heat pump heat source used when whHeatSrc=ASHPX. Heat removed from the zone is added to the heated water and is included in zone heat balance (that is, heat pump operation cools the zone).</p> <p>whASHPSrcZn and whASHPSrcT cannot both be specified.</p> Units Legal Range Default Required Variability name of a ZONE whZoneIf no zone is specified by input or default, heat extracted by ASHP has no effect. No constant"},{"location":"input-data/dhwloopheater/#whashpsrct","title":"whASHPSrcT","text":"<p>Type: float</p> <p>Heat pump source air temperature used when whHeatSrc=ASHPX.  Heat removed from this source is added to the heated water but has no other effect.</p> <p>whASHPSrcZn and whASHPSrcT cannot both be specified.</p> <p>The logic to determine the temperature of the heat pump source air is:</p> <pre><code>        if whASHPSrcT is specified\n          use whASHPSrcT\n        else if whASHPSRCZn is specified\n          use whASHPSrcZn air temp\n        else if whZone is specified\n          use whZone air temp\n        else\n          use 70 F\n</code></pre> <p>To model a heat pump that uses outdoor air as its heat source, omit whASHPSrcZn and specify whASHPSrcT = $tDbO.</p> Units Legal Range Default Required Variability <sup>o</sup>F x \\(\\ge\\) 0 70 <sup>o</sup>F (used only when whASHPSrcZn and whZone not specified) No hourly"},{"location":"input-data/dhwloopheater/#whashpresuse","title":"whASHPResUse","text":"<p>Type: float</p> <p>Specifies activation temperature difference for resistance heating, used only when whHeatSrc=ASHPX and whASHPType=GENERIC.  Refer to HPWH engineering documentation for model details.</p> Units Legal Range Default Required Variability <sup>o</sup>C x \\(\\ge\\) 0 7.22 No constant"},{"location":"input-data/dhwloopheater/#whreshtpwr","title":"whResHtPwr","text":"<p>Type: float</p> <p>Specifies resistance upper element power, used only with whHeatSrc=RESISTANCEX.</p> Units Legal Range Default Required Variability W x \\(\\ge\\) 0 4500 No constant"},{"location":"input-data/dhwloopheater/#whreshtpwr2","title":"whResHtPwr2","text":"<p>Type: float</p> <p>Specifies resistance lower element power, used only with whHeatSrc=RESISTANCEX.</p> Units Legal Range Default Required Variability W x \\(\\ge\\) 0 whResHtPwr No constant"},{"location":"input-data/dhwloopheater/#whua","title":"whUA","text":"<p>Type: float</p> <p>HPWH-type total UA (not per tank)</p> Units Legal Range Default Required Variability Btuh/F x \\(\\geq\\) 0 HPWH default No constant"},{"location":"input-data/dhwloopheater/#whinsulr","title":"whInsulR","text":"<p>Type: float</p> <p>Tank insulation resistance for heat pump water heater.</p> Units Legal Range Default Required Variability hr-F/Btuh x \\(&gt;\\) 0 -1 No constant"},{"location":"input-data/dhwloopheater/#whinhtsupply-whinhtloopret","title":"whInHtSupply, whInHtLoopRet","text":"<p>Type: float</p> <p>Fractional tank height of inlets for supply water and DHWLOOP return, used only with HPWH types (whHeatSrc=RESISTANCEX or whHeatSrc=ASHPX).  0 indicates the bottom of the water heater tank and 1 specifies the top.  Inlet height influences tank layer mixing and can impact heat pump COP and/or heating activation frequency.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1 HPWH default (0?) No constant"},{"location":"input-data/dhwloopheater/#whtankcount","title":"whtankCount","text":"<p>Type: float</p> <p>Number of storage tanks per DHWHEATER, re built-up whType=Builtup, does not reflect wh_mult (wh_mult=2, wh_tankCount=3 -&gt; 6 tanks).</p> Units Legal Range Default Required Variability # x \\(\\geq\\) 1 1 No constant"},{"location":"input-data/dhwloopheater/#wheff","title":"whEff","text":"<p>Type: float</p> <p>Water heating efficiency, used in modeling whType=LARGESTORAGE and whType=LARGEINSTANTANEOUS.</p> Units Legal Range Default Required Variability 0 \\(&lt;\\) whEff \\(\\leq\\) 1 .82 No constant"},{"location":"input-data/dhwloopheater/#whsbl","title":"whSBL","text":"<p>Type: float</p> <p>Standby loss, used in modeling whType=LARGESTORAGE.</p> Units Legal Range Default Required Variability Btuh x \\(\\ge\\) 0 0 No constant"},{"location":"input-data/dhwloopheater/#whpilotpwr","title":"whPilotPwr","text":"<p>Type: float</p> <p>Pilot light consumption, included in fuel energy use of DHWHEATERs with whHeatSrc=FUEL.</p> Units Legal Range Default Required Variability Btuh x \\(\\ge\\) 0 0 No hourly"},{"location":"input-data/dhwloopheater/#whparelec","title":"whParElec","text":"<p>Type: float</p> <p>Parasitic electricity power, included in electrical energy use of all DHWHEATERs.</p> Units Legal Range Default Required Variability W x \\(\\ge\\) 0 0 No hourly"},{"location":"input-data/dhwloopheater/#whfadjelec-whfadjfuel","title":"whFAdjElec, whFAdjFuel","text":"<p>Type: float</p> <p>Water heater energy use modifiers.  Multiplies calculated use of electricity (whFAdjElec) and fuel (whFAdjFuel).  All components of energy use -- primary, backup, XBU (extra backup), and other auxiliary -- are modified before they are accumulated to whElecMtr and whFuelMtr.</p> Units Legal Range Default Required Variability \\(\\ge\\) 0 1 No subhourly"},{"location":"input-data/dhwloopheater/#whelecmtr","title":"whElecMtr","text":"<p>Type: mtrName</p> <p>Name of METER object, if any, by which DHWHEATER electrical energy use is recorded (under end use DHW).</p> Units Legal Range Default Required Variability name of a METER Parent DHWSYS wsElecMtr No constant"},{"location":"input-data/dhwloopheater/#whxbuenduse","title":"whxBUEndUse","text":"<p>Type: choice</p> <p>Specifies the whElecMtr end use, if any, to which extra backup energy is accumulated. In some water heater types, extra backup energy is modeled to maintain output temperature at wsTUse.  By default, extra backup energy is included in end use dhwBU.  whxBUEndUse allows specification of an alternative end use to which extra backup energy is accumulated.</p> Units Legal Range Default Required Variability end use code (extra backup accums to dhwBU) No constant"},{"location":"input-data/dhwloopheater/#whfuelmtr","title":"whFuelMtr","text":"<p>Type: mtrName</p> <p>Name of METER object, if any, by which DHWHEATER fuel energy use is recorded (under end use DHW).</p> Units Legal Range Default Required Variability name of a METER Parent DHWSYS wsFuelMtr No constant"},{"location":"input-data/dhwloopheater/#whtanktinit","title":"whTankTInit","text":"<p>Type: comma-separated list of 12 floats</p> <p>A list of 12 initial values for HPWH tank model layer temperatures, in bottom-to-top order.  If given, these values are used to initialize tank layer temperatures at the beginning of the warmup period.  Initialization is not repeated at the beginning of the main simulation.</p> <p>whTankTInit is allowed only for HPWH-based types (whHeatSrc=ASHPX or whHeatSrc=ResistanceX).</p> <p>whTankTInit is intended for use in empirical validation studies where the initial tank state needs to match measured data.  whTankTInit should not be generally used.  In the absence of whTankTInit, layer temperatures are initialized to the water heater setpoint inherited from the parent DHWSYS.</p> Units Legal Range Default Required Variability <sup>o</sup>F x \\(\\gt\\) 0 No constant"},{"location":"input-data/dhwloopheater/#enddhwheater","title":"endDHWHEATER","text":"<p>Optionally indicates the end of the DHWHEATER definition.</p> Units Legal Range Default Required Variability x \\(\\geq\\) 0 none No <p>Related Probes:</p> <ul> <li>@DHWHeater</li> </ul>"},{"location":"input-data/dhwlooppump/","title":"DHWLOOPPUMP","text":"<p>DHWLOOPPUMP constructs an object representing a pump serving part a DHWLOOP. The model is identical to DHWPUMP except that that the electricity use calculation reflects wlRunF of the parent DHWLOOP.</p>"},{"location":"input-data/dhwlooppump/#wlpname","title":"wlpName","text":"<p>Optional name of pump; give after the word \u201cDHWLOOPPUMP\u201d if desired.</p> Units Legal Range Default Required Variability 63 characters none No constant"},{"location":"input-data/dhwlooppump/#wlpmult","title":"wlpMult","text":"<p>Type: integer</p> <p>Number of identical pumps of this type. Any value \\(&gt;1\\) is equivalent to repeated entry of the same DHWPUMP.</p> Units Legal Range Default Required Variability x \\(&gt;\\) 0 1 No constant"},{"location":"input-data/dhwlooppump/#wlppwr","title":"wlpPwr","text":"<p>Type: float</p> <p>Pump power.</p> Units Legal Range Default Required Variability W x \\(&gt;\\) 0 0 No hourly"},{"location":"input-data/dhwlooppump/#wlpliqheatf","title":"wlpLiqHeatF","text":"<p>Type: float</p> <p>Fraction of pump power that heats circulating liquid.  The remainder is discarded.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1 1 No hourly"},{"location":"input-data/dhwlooppump/#wlpelecmtr","title":"wlpElecMtr","text":"<p>Type: mtrName</p> <p>Name of METER object, if any, to which DHWLOOPPUMP electrical energy use is recorded (under end use dhwMFL).</p> Units Legal Range Default Required Variability name of a METER Parent DHWLOOP wlElecMtr No constant"},{"location":"input-data/dhwlooppump/#enddhwlooppump","title":"endDHWLOOPPUMP","text":"<p>Optionally indicates the end of the DHWPUMP definition.</p> Units Legal Range Default Required Variability none No constant <p>Related Probes:</p> <ul> <li>@DHWLoopPump</li> </ul>"},{"location":"input-data/dhwloopseg/","title":"DHWLOOPSEG","text":"<p>DHWLOOPSEG constructs one or more objects representing a segment of the preceeding DHWLOOP. A DHWLOOP can have any number of DHWLOOPSEGs to represent the segments of the loop with possibly differing sizes, insulation, or surrounding conditions.</p>"},{"location":"input-data/dhwloopseg/#wgname","title":"wgName","text":"<p>Optional name of segment; give after the word \u201cDHWLOOPSEG\u201d if desired.</p> Units Legal Range Default Required Variability 63 characters none No constant"},{"location":"input-data/dhwloopseg/#wgty","title":"wgTy","text":"<p>Type: choice</p> <p>Specifies the type of segment.  RETURN segments, if any, must follow SUPPLY segments.</p> SUPPLY Indicates a supply segment (flow is sum of circulation and draw flow, child DHWLOOPBRANCHs permitted). RETURN Indicates a return segment (flow is only due to circulation, child DHWLOOPBRANCHs not allowed) Units Legal Range Default Required Variability none Yes constant"},{"location":"input-data/dhwloopseg/#wglength","title":"wgLength","text":"<p>Type: float</p> <p>Length of segment.</p> Units Legal Range Default Required Variability ft x \\(\\ge\\) 0 0 No constant"},{"location":"input-data/dhwloopseg/#wgsize","title":"wgSize","text":"<p>Type: float</p> <p>Nominal size of pipe. CSE assumes the pipe outside diameter = size + 0.125 in.</p> Units Legal Range Default Required Variability in x \\(&gt;\\) 0 1 Yes constant"},{"location":"input-data/dhwloopseg/#wginsulk","title":"wgInsulK","text":"<p>Type: float</p> <p>Pipe insulation conductivity</p> Units Legal Range Default Required Variability Btuh-ft/ft<sup>2</sup>-<sup>o</sup>F x \\(&gt;\\) 0 0.02167 No constant"},{"location":"input-data/dhwloopseg/#wginsulthk","title":"wgInsulThk","text":"<p>Type: float</p> <p>Pipe insulation thickness</p> Units Legal Range Default Required Variability in x \\(\\ge\\) 0 1 No constant"},{"location":"input-data/dhwloopseg/#wgexh","title":"wgExH","text":"<p>Type: float</p> <p>Combined radiant/convective exterior surface conductance between insulation (or pipe if no insulation) and surround.</p> Units Legal Range Default Required Variability Btuh/ft<sup>2</sup>-<sup>o</sup>F x \\(&gt;\\) 0 1.5 No hourly"},{"location":"input-data/dhwloopseg/#wgext","title":"wgExT","text":"<p>Type: float</p> <p>Surrounding equivalent temperature.</p> Units Legal Range Default Required Variability <sup>o</sup>F x \\(&gt;\\) 0 70 No hourly"},{"location":"input-data/dhwloopseg/#wgfnodraw","title":"wgFNoDraw","text":"<p>Type: float</p> <p>Fraction of hour when no draw occurs.</p> Units Legal Range Default Required Variability <sup>o</sup>F x \\(&gt;\\) 0 70 No hourly"},{"location":"input-data/dhwloopseg/#enddhwloopseg","title":"endDHWLoopSeg","text":"<p>Optionally indicates the end of the DHWLOOPSEG definition.</p> Units Legal Range Default Required Variability none No <p>Related Probes:</p> <ul> <li>@DHWLoopSeg</li> </ul>"},{"location":"input-data/dhwmeter/","title":"DHWMETER","text":"<p>A DHWMETER object is a user-defined \"device\" that records water consumption as simulated by CSE.  The data accumulated by DHWMETERs can be reported at hourly, daily, monthly, and annual (run) intervals by using REPORTs and EXPORTs of type DHWMTR. Water use is reported in gallons.</p> <p>DHWMETERs account for water use in the following pre-defined end uses.  The abbreviations in parentheses are used in DHWMTR report headings.</p> <ul> <li>Total water use (Total)</li> <li>Unknown end use (Unknown)</li> <li>Miscellaneous draws (Faucet)</li> <li>Shower (Shower)</li> <li>Bathtub (Bath)</li> <li>Clothes washer (CWashr)</li> <li>Dishwasher (DWashr)</li> </ul> <p>DHWSYS items wsWHhwMtr and wsFXhwMtr specify the DHWMETER(s) to which water consumption is accumulated.</p>"},{"location":"input-data/dhwmeter/#dhwmtrname","title":"dhwMtrName","text":"<p>Name of meter: required for assigning water uses to the DHWMETER.</p> Units Legal Range Default Required Variability 63 characters none Yes constant"},{"location":"input-data/dhwmeter/#enddhwmeter","title":"endDhwMeter","text":"<p>Related Probes:</p> <ul> <li>@DHWmeter</li> </ul>"},{"location":"input-data/dhwpump/","title":"DHWPUMP","text":"<p>DHWPUMP constructs an object representing a domestic hot water circulation pump (or more than one if identical).</p>"},{"location":"input-data/dhwpump/#wpname","title":"wpName","text":"<p>Optional name of pump; give after the word \u201cDHWPUMP\u201d if desired.</p> Units Legal Range Default Required Variability 63 characters none No constant"},{"location":"input-data/dhwpump/#wpmult","title":"wpMult","text":"<p>Type: integer</p> <p>Number of identical pumps of this type. Any value \\(&gt;1\\) is equivalent to repeated entry of the same DHWPUMP.</p> Units Legal Range Default Required Variability x \\(&gt;\\) 0 1 No constant"},{"location":"input-data/dhwpump/#wppwr","title":"wpPwr","text":"<p>Type: float</p> <p>Pump power.</p> Units Legal Range Default Required Variability W x \\(&gt;\\) 0 0 No hourly"},{"location":"input-data/dhwpump/#wpelecmtr","title":"wpElecMtr","text":"<p>Type: mtrName</p> <p>Name of METER object, if any, to which DHWPUMP electrical energy use is recorded (under end use DHW).</p> Units Legal Range Default Required Variability name of a METER Parent DHWSYS wsElecMtr No constant"},{"location":"input-data/dhwpump/#enddhwpump","title":"endDHWPump","text":"<p>Optionally indicates the end of the DHWPUMP definition.</p> Units Legal Range Default Required Variability none No <p>Related Probes:</p> <ul> <li>@DHWPump</li> </ul>"},{"location":"input-data/dhwsolarcollector/","title":"DHWSOLARCOLLECTOR","text":"<p>Solar Collector Array. May be multiple collectors on the same DHWSOLARSYS system. All inlets come from the DHWSOLARTANK.</p> <p>Uses SRCC Ratings.</p>"},{"location":"input-data/dhwsolarcollector/#scarea","title":"scArea","text":"<p>Type: float</p> <p>Collector area.</p> Units Legal Range Default Required Variability ft^2 \\(&gt;\\) 0 0 Yes constant"},{"location":"input-data/dhwsolarcollector/#scmult","title":"scMult","text":"<p>Number of identical collectors, default 1</p> Units Legal Range Default Required Variability \\(&gt;\\) 0 1 No constant"},{"location":"input-data/dhwsolarcollector/#sctilt","title":"scTilt","text":"<p>Type: float</p> <p>Array tilt.</p> Units Legal Range Default Required Variability deg 0 Yes constant"},{"location":"input-data/dhwsolarcollector/#scazm","title":"scAzm","text":"<p>Type: float</p> <p>Array azimuth.</p> Units Legal Range Default Required Variability deg 0 Yes constant"},{"location":"input-data/dhwsolarcollector/#scfrul","title":"scFRUL","text":"<p>Type: float</p> <p>Fit slope</p> Units Legal Range Default Required Variability Btuh/ft<sup>2-</sup>o^F -0.727 No constant"},{"location":"input-data/dhwsolarcollector/#scfrta","title":"scFRTA","text":"<p>Type: float</p> <p>Fit y-intercept</p> Units Legal Range Default Required Variability none \\(&gt;\\) 0 0.758 No constant"},{"location":"input-data/dhwsolarcollector/#sctestmassflow","title":"scTestMassFlow","text":"<p>Type: flaot</p> <p>Mass flow rate for collector loop SRCC rating.</p> Units Legal Range Default Required Variability lb/h-ft<sup>2</sup> x \\(&gt;\\) 0 14.79 No constant"},{"location":"input-data/dhwsolarcollector/#sckta60","title":"scKta60","text":"<p>Type: float</p> <p>Incident angle modifier at 60 degree, from SRCC rating.</p> Units Legal Range Default Required Variability x \\(\\geq\\) 0 0.72 No constant"},{"location":"input-data/dhwsolarcollector/#scoprmassflow","title":"scOprMassFlow","text":"<p>Type: float</p> <p>Collector loop operating mass flow rate.</p> Units Legal Range Default Required Variability lb/h-ft<sup>2</sup> x \\(&gt;\\) 0 0.0 No constant"},{"location":"input-data/dhwsolarcollector/#scpipinglength","title":"scPipingLength","text":"<p>Type: float</p> <p>Collector piping length.</p> Units Legal Range Default Required Variability ft x \\(\\geq\\) 0 0.0 No Hourly and at the end of interval"},{"location":"input-data/dhwsolarcollector/#scpipinginsulk","title":"scPipingInsulK","text":"<p>Type: float</p> <p>Collector piping insulation conductivity.</p> Units Legal Range Default Required Variability x \\(&gt;\\) 0 0.02167 No Hourly and at the end of interval"},{"location":"input-data/dhwsolarcollector/#scpipinginsulthk","title":"scPipingInsulThk","text":"<p>Type: float</p> <p>Collector piping insulation thickness.</p> Units Legal Range Default Required Variability x \\(\\geq\\) 0 1.0 No Hourly and at the end of interval"},{"location":"input-data/dhwsolarcollector/#scpipingexh","title":"scPipingExH","text":"<p>Type: float</p> <p>Collector piping heat transfer coefficient.</p> Units Legal Range Default Required Variability x \\(&gt;\\) 0 1.5 No Hourly and at the end of interval"},{"location":"input-data/dhwsolarcollector/#scpipingext","title":"scPipingExT","text":"<p>Type: float</p> <p>Collector piping surround temperature.</p> Units Legal Range Default Required Variability <sup>o</sup>F x \\(\\geq\\) 32 70.0 No hourly"},{"location":"input-data/dhwsolarcollector/#scpumppwr","title":"scPumpPwr","text":"<p>Type: float</p> Units Legal Range Default Required Variability Btu/h x \\(\\ge\\) 0 from scPumpflow No constant"},{"location":"input-data/dhwsolarcollector/#scpumpliqheatf","title":"scPumpLiqHeatF","text":"<p>Type: float</p> <p>Fraction of scPumpPwr added to liquid stream, the remainder is discarded.</p> Units Legal Range Default Required Variability x \\(\\geq\\) 0 1.0 No Every run"},{"location":"input-data/dhwsolarcollector/#scpumpondeltat","title":"scPumpOnDeltaT","text":"<p>Type: float</p> <p>Temperature difference between the tank and collector outlet where pump turns on</p> Units Legal Range Default Required Variability <sup>o</sup>F 10.0 No constant"},{"location":"input-data/dhwsolarcollector/#scpumpoffdeltat","title":"scPumpOffDeltaT","text":"<p>Type: float</p> <p>Temperature difference between the tank and collector outlet where pump turns off</p> Units Legal Range Default Required Variability <sup>o</sup>F 5.0 No constant"},{"location":"input-data/dhwsolarcollector/#enddhwsolarcollector","title":"endDHWSOLARCOLLECTOR","text":"<p>Optionally indicates the end of the DHWSOLARCOLLECTOR definition.</p> Units Legal Range Default Required Variability none No"},{"location":"input-data/dhwsolarsys/","title":"DHWSOLARSYS","text":"<p>Solar water heating system.</p> <ul> <li>DHWSOLARSYS<ul> <li>DHWSOLARCOLLECTOR</li> <li>DHWSOLARTANK</li> </ul> </li> </ul> <p>May have any number of solar collectors, but only one tank.</p> <p>May have no tank for direct system? What if system has multiple primary tanks?</p>"},{"location":"input-data/dhwsolarsys/#swelecmtr","title":"swElecMtr","text":"<p>Type: mtrName</p> <p>Name of METER object, if any, to which DHWSOLARSYS electrical energy use is recorded (under end use ???).</p> Units Legal Range Default Required Variability <sup>o</sup>F name of a METER not recorded No constant"},{"location":"input-data/dhwsolarsys/#swscfluidspht","title":"swSCFluidSpHt","text":"<p>Type: float</p> <p>Specific heat for the collector fluid.</p> Units Legal Range Default Required Variability Btu/lbm-<sup>o</sup>F x \\(&gt;\\) 0 0.9 No constant"},{"location":"input-data/dhwsolarsys/#swscfluiddens","title":"swSCFluidDens","text":"<p>Type: float</p> <p>Density for the collector fluid.</p> Units Legal Range Default Required Variability lb/ft<sup>3</sup> x \\(&gt;\\) 0 64.0 No constant"},{"location":"input-data/dhwsolarsys/#swenduse","title":"swEndUse","text":"<p>End use of pump energy; defaults to \"DHW\".</p>"},{"location":"input-data/dhwsolarsys/#swparelec","title":"swParElec","text":"<p>Type: float</p> Units Legal Range Default Required Variability x \\(\\ge\\) 0 0 No hourly"},{"location":"input-data/dhwsolarsys/#swtankhxeff","title":"swTankHXEff","text":"<p>Type: float</p> <p>Tank heat exchanger effectiveness.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 0.99 0 No hourly"},{"location":"input-data/dhwsolarsys/#swtankthxlimit","title":"swTankTHxLimit","text":"<p>Type: float</p> <p>Temperature limit for the tank collector.</p> Units Legal Range Default Required Variability <sup>o</sup>F x \\(\\geq\\) 0 180.0 No constant"},{"location":"input-data/dhwsolarsys/#swtankua","title":"swTankUA","text":"<p>Type: float</p> <p>Heat transfer coefficient for the tank multiplied by area.</p> Units Legal Range Default Required Variability Btuh/<sup>o</sup>F No constant"},{"location":"input-data/dhwsolarsys/#swtankvol","title":"swTankVol","text":"<p>Type: float</p> Units Legal Range Default Required Variability gal No constant"},{"location":"input-data/dhwsolarsys/#swtankinsulr","title":"swTankInsulR","text":"<p>Type: float</p> <p>Total tank insulation resistance, built-in plus exterior wrap.</p> Units Legal Range Default Required Variability ft<sup>2</sup>-<sup>o</sup>F/Btuh No constant"},{"location":"input-data/dhwsolarsys/#swtankzone","title":"swTankZone","text":"<p>Type: znName</p> <p>Pointer to tank zone location, use sw_tankTEx if NULL</p> Units Legal Range Default Required Variability Name of ZONE No constant"},{"location":"input-data/dhwsolarsys/#swtanktex","title":"swTankTEx","text":"<p>Type: float</p> <p>Surrounding temperature.</p> Units Legal Range Default Required Variability <sup>o</sup>F No hourly"},{"location":"input-data/dhwsolarsys/#enddhwsolarsys","title":"endDHWSOLARSYS","text":"<p>Optionally indicates the end of the DHWSOLARSYS definition.</p> Units Legal Range Default Required Variability none No"},{"location":"input-data/dhwsys/","title":"DHWSYS","text":"<p>DHWSYS constructs an object representing a domestic hot water system consisting of one or more hot water heaters, storage tanks, loops, and pumps (DHWHEATER, DHWTANK, DHWLOOP, and DHWPUMP, see below) and a distribution system characterized by loss parameters. This model is based on Appendix B of the 2019 Residential ACM Reference Manual and the Ecotope HPWHSim air source heat pump water heater model (called HPWH herein).</p> <p>The parent-child structure of DHWSYS components is determined by input order. For example, DHWHEATERs belong to the DHWSYS that precedes them in the input file. The following hierarchy shows the relationship among components. Note that any of the commands can be repeated any number of times.</p> <ul> <li>DHWSYS<ul> <li>DHWHEATER</li> <li>DHWLOOPHEATER</li> <li>DHWHEATREC</li> <li>DHWTANK</li> <li>DHWPUMP</li> <li>DHWLOOP<ul> <li>DHWLOOPPUMP</li> <li>DHWLOOPSEG<ul> <li>DHWLOOPBRANCH</li> </ul> </li> </ul> </li> </ul> </li> </ul> <p>Minimal modeling is included for physically realistic controls. For example, if several DHWHEATERs are included in a DHWSYS, an equal fraction of the required hot water is assumed to be produced by each heater, even if they are different types or sizes. Thus a DHWSYS is in some ways a collection of components as opposed to an explicitly connected system.  This approach avoids requiring detailed input that would impose impractical user burden, especially in compliance applications.</p>"},{"location":"input-data/dhwsys/#dhwsysname","title":"dhwsysName","text":"<p>Optional name of system; give after the word \u201cDHWSYS\u201d if desired.</p> Units Legal Range Default Required Variability 63 characters none No constant"},{"location":"input-data/dhwsys/#wscalcmode","title":"wsCalcMode","text":"<p>Type: choice</p> <p>Enables preliminary simulation that derives values needed for simulation.</p> PRERUN Calculate hot water heating load; at end of run, derive whLDEF for all child DHWHEATERs for which that value is required and defaulted (this emulates methods used in the T24DHW.DLL implementation of CEC DHW procedures). Also derived are average number of draws per day by end use (used in the wsDayWaste scheme). SIMULATE Perform full modeling calculations <p>To use PRERUN efficiently, the recommended input file structure is:</p> <ul> <li>General input</li> <li>DHWSYS(s) and child objects</li> <li>RUN</li> <li>ALTER DHWSYS input (as needed)</li> <li>Building input</li> <li>RUN</li> </ul> <p>This order avoids duplicate time-consuming simulation of the full building model.</p> Units Legal Range Default Required Variability Codes listed above SIMULATE No"},{"location":"input-data/dhwsys/#wscentraldhwsys","title":"wsCentralDHWSYS","text":"<p>Type: dhwsysName</p> <p>Name of the central DHWSYS that serves this DHWSYS, allowing representation of multiple units having distinct distribution configurations and/or water use patterns but served by a central DHWSYS.  The child DHWSYS(s) may not include DHWHEATERs -- they are \"loads only\" systems.  wsCentralDHWSYS and wsLoadShareDHWSYS cannot both be given.</p> Units Legal Range Default Required Variability name of a DHWSYS DHWSYS is standalone No constant"},{"location":"input-data/dhwsys/#wsloadsharedhwsys","title":"wsLoadShareDHWSYS","text":"<p>Type: dhwsysName</p> <p>Name of a DHWSYS that serves the same loads as this DHWSYS, allowing representation of multiple water heating systems within a unit. If given, wsUse and wsDayUse are not allowed, hot water requirements are derived from the referenced DHWSYS.  wsCentralDHWSYS and wsLoadShareDHWSYS cannot both be given.</p> <p>For example, two DHWSYSs should be defined to model two water heating systems serving a load represented by wsDayUse DayUseTyp.  Each DHWSYS should include DHWHEATER(s) and other components as needed.  DHWSYS Sys1 should specify wsDayUse=DayUseTyp and DHWSYS Sys2 should have wsLoadShareDHWSYS=Sys1 in place of wsDayUse.</p> <p>Loads are shared by assigning DHWUSE events sequentially by end use to all DHWSYS with compatible fixtures (determined by wsFaucetCount, wsShowerCount etc., see below) in the group.  This algorithm approximately divides load for each end use by the number of compatible fixtures in the group.  In addition, assigning 0 to a fixture type prevents assignment of an end use load to a DHWSYS -- for example, wsDWashrCount=0 could be provided for a DHWSYS that does not serve a kitchen.</p> Units Legal Range Default Required Variability name of a DHWSYS No shared loads No constant"},{"location":"input-data/dhwsys/#wsmult","title":"wsMult","text":"<p>Type: float</p> <p>Number of identical systems of this type (including all child objects). Any value \\(&gt; 1\\) is equivalent to repeated entry of the same DHWSYS.  A value of 0 is equivalent to omitting the DHWSYS.  Non-integral values scale all results; this may be useful in parameterized models, for example.</p> Units Legal Range Default Required Variability x \\(\\ge\\) 0 1 No constant"},{"location":"input-data/dhwsys/#wsfaucetcount-wsshowercount-wsbathcount-wscwashrcount-wsdwashrcount","title":"wsFaucetCount, wsShowerCount, wsBathCount, wsCWashrCount, wsDWashrCount","text":"<p>Type: integer</p> <p>Specifies the count of fixtures served by this DHWSYS that can accommodate draws of each end use (see DHWUSE).  These counts are used for distributing draws in shared load configurations (multiple DHWSYSs serving the same loads, see wsLoadShareDHWSYS above).</p> <p>In addition, wsShowerCount participates in assignment of Shower draws to DHWHEATRECs (if any).</p> <p>Unless this DHWSYS is part of a shared-load group or includes DHWHEATREC(s), these counts have no effect and need not be specified.</p> Units Legal Range Default Required Variability x \\(\\ge\\) 0 1 No constant"},{"location":"input-data/dhwsys/#wstinlet","title":"wsTInlet","text":"<p>Type: float</p> <p>Specifies cold (mains) water temperature supplying this DHWSYS.  DHWHEATER supply water temperature wsTInlet adjusted (increased) by any DHWHEATREC recovered heat and application of wsSSF (approximating solar preheating).</p> Units Legal Range Default Required Variability <sup>o</sup>F \\(&gt;\\) 32 <sup>o</sup>F Mains temp from weather file No hourly"},{"location":"input-data/dhwsys/#wstinlettest","title":"wsTInletTest","text":"<p>Type: float</p> <p>Overides at the substep interval the cold (mains) water temperature supplying this DHWSYS.</p> <p>CAUTION: wsTInletTest is intended for testing and model validation studies and should not be generally used. It is not fully supported for all DHWSYS configurations.  wsTInletTest is allowed only for configurations using HPWH-based DHWHEATERs (whHeatSrc=ASHPX or whHeatSrc=RESISTANCEX).  </p> Units Legal Range Default Required Variability <sup>o</sup>F \\(&gt;\\) 32 <sup>o</sup>F No subhourly"},{"location":"input-data/dhwsys/#wstinletdes","title":"wsTInletDes","text":"<p>Type: float</p> <p>Cold water inlet design temperature for sizing.</p> Units Legal Range Default Required Variability <sup>o</sup>F x \\(&gt;\\) 32 <sup>o</sup>F Annual minimums mains temperature No constant"},{"location":"input-data/dhwsys/#wsuse","title":"wsUse","text":"<p>Type: float</p> <p>Hourly hot water use (at the point of use).  See further info under wsDayUse.</p> Units Legal Range Default Required Variability gal x \\(\\ge\\) 0 0 No hourly"},{"location":"input-data/dhwsys/#wsusetest","title":"wsUseTest","text":"<p>Type: float</p> <p>Additional substep hot water use added to draw(s) specfied by wsHWUse and wsDayUse.</p> <p>CAUTION: wsUseTest is intended for testing and model validation studies and should not be generally used. It is not fully supported for all DHWSYS configurations.  wsUseTest is allowed only for configurations using HPWH-based DHWHEATERs (whHeatSrc=ASHPX or whHeatSrc=RESISTANCEX).  </p> Units Legal Range Default Required Variability gal x \\(\\ge\\) 0 No subhourly"},{"location":"input-data/dhwsys/#wsdayuse","title":"wsDayUse","text":"<p>Type: dhwdayuseName</p> <p>Name of DHWDAYUSE object that specifies a detailed schedule of mixed water use at points of hot water use (that is, \"at the tap\").  The mixed water amounts are used to derive hot water requirements based on specified mixing fractions or mixed water temperature (see DHWDAYUSE and DHWUSE).</p> <p>The total water use modeled by CSE is the sum of amounts given by wsUse and the DWHDAYUSE schedule.  DHWDAYUSE draws are resolved to minute-by-minute bins compatible with the HPWH model and wsUse/60 is added to each minute bin.  Conversely, the hour total of the DHWDAYUSE amounts is included in the draw applied to non-HPWH DHWHEATERs.</p> <p>wsDayUse variability is daily, so it is possible to select different schedules as a function of day type (or any other condition), as follows --</p> <pre><code>     DHWSYS \"DHW1\"\n       ...\n       wsDayUse = choose( $isWeHol, \"DUSEWeekday\", \"DUSEWeHol\")\n       ...\n</code></pre> <p>Note that while DHWDAYUSE selection is updated daily, the DHWUSE values within the DHWDAYUSE can be altered hourly, providing additional scheduling flexibility.</p> Units Legal Range Default Required Variability name of a DHWDAYUSE (no scheduled draws) No daily"},{"location":"input-data/dhwsys/#wsfaucetdrawdurf","title":"wsFaucetDrawDurF","text":"<p>Type: float</p> <p>Water heater draw duration factor for faucets. Defined as the ratio of the actual draw duration (including time waiting for hot water to arrive at the fixture) to the nominal draw duration (as though hot water was instantly available).</p> Units Legal Range Default Required Variability x \\(\\geq\\) 0 0.0 No Hourly"},{"location":"input-data/dhwsys/#wsshowerdrawdurf","title":"wsShowerDrawDurF","text":"<p>Type: float</p> <p>Water heater draw duration factor for showers. Defined as the ratio of the actual draw duration (including time waiting for hot water to arrive at the fixture) to the nominal draw duration (as though hot water was instantly available).</p> Units Legal Range Default Required Variability x \\(\\geq\\) 0 0.0 No Hourly"},{"location":"input-data/dhwsys/#wsbathdrawdurf","title":"wsBathDrawDurF","text":"<p>Type: float</p> <p>Water heater draw duration factor for baths. Defined as the ratio of the actual draw duration (including time waiting for hot water to arrive at the fixture) to the nominal draw duration (as though hot water was instantly available).</p> Units Legal Range Default Required Variability x \\(\\geq\\) 0 0.0 No Hourly"},{"location":"input-data/dhwsys/#wscwashrdrawdurf","title":"wsCWashrDrawDurF","text":"<p>Type: float</p> <p>Water heater draw duration factor for clothes washers. Defined as the ratio of the actual draw duration (including time waiting for hot water to arrive at the fixture) to the nominal draw duration (as though hot water was instantly available).</p> Units Legal Range Default Required Variability x \\(\\geq\\) 0 1.0 No Hourly"},{"location":"input-data/dhwsys/#wsdwashrdurf","title":"wsDWashrDurF","text":"<p>Type: float</p> <p>Water heater draw duration factor for dishwashers. Defined as the ratio of the actual draw duration (including time waiting for hot water to arrive at the fixture) to the nominal draw duration (as though hot water was instantly available).</p> Units Legal Range Default Required Variability x \\(\\geq\\) 0 1.0 No Hourly"},{"location":"input-data/dhwsys/#wsunkdrawdurf","title":"wsUnkDrawDurF","text":"<p>Type: float</p> <p>Water heater draw duration factor for unknown end use. Defined as the ratio of the actual draw duration (including time waiting for hot water to arrive at the fixture) to the nominal draw duration (as though hot water was instantly available).</p> Units Legal Range Default Required Variability x \\(\\geq\\) 0 0.0 No Hourly"},{"location":"input-data/dhwsys/#wsfaucetdrawwaste","title":"wsFaucetDrawWaste","text":"<p>Type: float</p> <p>Draw water waste for faucets. Specifies additional draw volume per DHWUSE event (at fixture, by end use).  This can be used to account for water discarded during warmup or otherwise adjust the draw volume.  Because the values are at the fixture, the impact on hot water demand additionally depends on DHWUSE parameters.  The value is applied by lengthening (or shortening) the draw duration.</p> Units Legal Range Default Required Variability gal/draw x \\(\\geq\\) 0 0.0 No Hourly"},{"location":"input-data/dhwsys/#wsshowerdrawwaste","title":"wsShowerDrawWaste","text":"<p>Type: float</p> <p>Draw water waste for showers. Specifies additional draw volume per DHWUSE event (at fixture, by end use).  This can be used to account for water discarded during warmup or otherwise adjust the draw volume.  Because the values are at the fixture, the impact on hot water demand additionally depends on DHWUSE parameters.  The value is applied by lengthening (or shortening) the draw duration.</p> Units Legal Range Default Required Variability gal/draw x \\(\\geq\\) 0 0.0 No Hourly"},{"location":"input-data/dhwsys/#wsbathdrawwaste","title":"wsBathDrawWaste","text":"<p>Type: float</p> <p>Draw water waste for baths. Specifies additional draw volume per DHWUSE event (at fixture, by end use).  This can be used to account for water discarded during warmup or otherwise adjust the draw volume.  Because the values are at the fixture, the impact on hot water demand additionally depends on DHWUSE parameters.  The value is applied by lengthening (or shortening) the draw duration.</p> Units Legal Range Default Required Variability gal/draw x \\(\\geq\\) 0 0.0 No Hourly"},{"location":"input-data/dhwsys/#wscwashrdrawwaste","title":"wsCWashrDrawWaste","text":"<p>Type: float</p> <p>Draw water waste for clothes washers. Specifies additional draw volume per DHWUSE event (at fixture, by end use).  This can be used to account for water discarded during warmup or otherwise adjust the draw volume.  Because the values are at the fixture, the impact on hot water demand additionally depends on DHWUSE parameters.  The value is applied by lengthening (or shortening) the draw duration.</p> Units Legal Range Default Required Variability gal/draw x \\(\\geq\\) 0 0.0 No Hourly"},{"location":"input-data/dhwsys/#wsdwashrdrawwaste","title":"wsDWashrDrawWaste","text":"<p>Type: float</p> <p>Draw water waste for dishwashers. Specifies additional draw volume per DHWUSE event (at fixture, by end use).  This can be used to account for water discarded during warmup or otherwise adjust the draw volume.  Because the values are at the fixture, the impact on hot water demand additionally depends on DHWUSE parameters.  The value is applied by lengthening (or shortening) the draw duration.</p> Units Legal Range Default Required Variability gal/draw x \\(\\geq\\) 0 0.0 No Hourly"},{"location":"input-data/dhwsys/#wsunkdrawwaste","title":"wsUnkDrawWaste","text":"<p>Type: float</p> <p>Draw water waste for unknown end use. Specifies additional draw volume per DHWUSE event (at fixture, by end use).  This can be used to account for water discarded during warmup or otherwise adjust the draw volume.  Because the values are at the fixture, the impact on hot water demand additionally depends on DHWUSE parameters.  The value is applied by lengthening (or shortening) the draw duration.</p> Units Legal Range Default Required Variability gal/draw x \\(\\geq\\) 0 0.0 No Hourly"},{"location":"input-data/dhwsys/#wstrltest","title":"wsTRLTest","text":"<p>Type: float</p> <p>Circulation loop return temperature for testing and validation.</p> Units Legal Range Default Required Variability F x \\(\\geq\\) 0 0.0 No Subhourly"},{"location":"input-data/dhwsys/#wsvolrltest","title":"wsVolRLTest","text":"<p>Type: float</p> <p>Circulation loop volume flow rate for testing and validation.</p> Units Legal Range Default Required Variability gpm x \\(\\geq\\) 0 0.0 No Subhourly"},{"location":"input-data/dhwsys/#wsbranchmodel","title":"wsBranchModel","text":"<p>Type: choice</p> <p>Branch model selection.</p> wsBranchModel Description T24DHW Model in appendix B of the Alternative Compliance Manual DRAWWASTE Draw duration increase per draw waste DAYWASTE draw duration increase per day waste"},{"location":"input-data/dhwsys/#wsdaywastevol","title":"wsDayWasteVol","text":"<p>Type: float</p> <p>Average amount of waste per day.</p> Units Legal Range Default Required Variability gal/day x \\(\\ge\\) 0 wsDayWasteBranchVolF * (Total DHWLOOPBRANCH vol) No constant"},{"location":"input-data/dhwsys/#wsdaywastebranchvolf","title":"wsDayWasteBranchVolF","text":"<p>Type: float</p> <p>Day waste scaling factor.</p> Units Legal Range Default Required Variability x \\(\\ge\\) 0 1 No constant"},{"location":"input-data/dhwsys/#wsfaucetdaywastef","title":"wsFaucetDayWasteF","text":"<p>Type: float</p> <p>Relative faucet water draw for day of waste scheme.</p> Units Legal Range Default Required Variability x \\(&gt;\\) 0 0.0 No subhourly"},{"location":"input-data/dhwsys/#wsshowerdaywastef","title":"wsShowerDayWasteF","text":"<p>Type: float</p> <p>Relative shower water draw for day of waste scheme.</p> Units Legal Range Default Required Variability x \\(&gt;\\) 0 0.0 No subhourly"},{"location":"input-data/dhwsys/#wsbathdaywastef","title":"wsBathDayWasteF","text":"<p>Type: float</p> <p>Relative bath water draw for day of waste scheme.</p> Units Legal Range Default Required Variability x \\(&gt;\\) 0 0.0 No subhourly"},{"location":"input-data/dhwsys/#wscwashrdaywastef","title":"wsCWashrDayWasteF","text":"<p>Type: float</p> <p>Relative clothes washer water draw for day of waste scheme.</p> Units Legal Range Default Required Variability x \\(&gt;\\) 0 0.0 No subhourly"},{"location":"input-data/dhwsys/#wsdwashrdaywastef","title":"wsDWashrDayWasteF","text":"<p>Type: float</p> <p>Relative dish washer water draw for day of waste scheme.</p> Units Legal Range Default Required Variability x \\(&gt;\\) 0 0.0 No subhourly"},{"location":"input-data/dhwsys/#wsunkdaywastef","title":"wsUnkDayWasteF","text":"<p>Type: float</p> <p>Unknown relative water draw for day of waste scheme.</p> Units Legal Range Default Required Variability x \\(&gt;\\) 0 0.0 No subhourly"},{"location":"input-data/dhwsys/#wstuse","title":"wsTUse","text":"<p>Type: float</p> <p>Hot water delivery temperature (at output of water heater(s) and at point of use).  Delivered water is mixed down to wsTUSe (with cold water) or heated to wsTUse (with extra electric resistance backup, see DHWHEATER whXBUEndUse).  Note that draws defined via DHWDAYUSE / DHWUSE can specify mixing to a lower temperature.</p> Units Legal Range Default Required Variability <sup>o</sup>F \\(&gt;\\) 32 <sup>o</sup>F 120 No hourly"},{"location":"input-data/dhwsys/#wstusetest","title":"wsTUseTest","text":"<p>Type: float</p> <p>Overides at the substep interval the hot water delivery temperature.</p> <p>CAUTION: wsTUseTest is intended for testing and model validation studies and should not be generally used. It is not fully supported for all DHWSYS configurations.  wsTUseTest is allowed only for configurations using HPWH-based DHWHEATERs (whHeatSrc=ASHPX or whHeatSrc=RESISTANCEX).  </p> Units Legal Range Default Required Variability <sup>o</sup>F \\(&gt;\\) 32 <sup>o</sup>F No subhourly"},{"location":"input-data/dhwsys/#wstsetpoint","title":"wsTSetPoint","text":"<p>Type: float</p> <p>Specifies the hot water setpoint temperature for all child DHWHEATERs.  Used only for HPWH-based DHWHEATERs (HPWH models tank temperatures and heating controls), otherwise has no effect.  wsTSetpoint can be modified hourly to achieve load-shifting effects.</p> Units Legal Range Default Required Variability <sup>o</sup>F \\(&gt;\\) 32 <sup>o</sup>F wsTUse No hourly"},{"location":"input-data/dhwsys/#wstsetpointlh","title":"wsTSetPointLH","text":"<p>Type: float</p> <p>Specifies the hot water set point temperature for all child DHWLOOPHEATERs.  Used only for HPWH-based DHWHLOOPEATERs (HPWH explicitly models tank temperatures and heating controls), otherwise has no effect.</p> Units Legal Range Default Required Variability <sup>o</sup>F \\(&gt;\\) 32 <sup>o</sup>F wsTSetPoint No hourly"},{"location":"input-data/dhwsys/#wstsetpointdes","title":"wsTSetpointDes","text":"<p>Type: float</p> <p>Specifies the design (sizing) set point temperature.</p> Units Legal Range Default Required Variability <sup>o</sup>F x \\(&gt;\\) 32 <sup>o</sup>F wsTUse No constant"},{"location":"input-data/dhwsys/#wsvolrunningdes","title":"wsVolRunningDes","text":"<p>Type: float</p> <p>Running volume for design. Active volume (above aquastat) equals to a full tank volume, defaults from EcoSizer at end of prerun if not input. No direct use, must be passed to DHWHEATER via ALTER.</p> Units Legal Range Default Required Variability gal x \\(&gt;\\) 0 0.0 No constant"},{"location":"input-data/dhwsys/#wsashptsrcdes","title":"wsASHPTSrcDes","text":"<p>Type: float</p> <p>Design (sizing) source air temperature for HPWH DHWHEATERs.</p> Units Legal Range Default Required Variability <sup>o</sup>F x \\(&gt;\\) 32 <sup>o</sup>F Heating design temperature No At the start and at the end of interval"},{"location":"input-data/dhwsys/#wsfxdes","title":"wsFxDes","text":"<p>Type: float</p> <p>Excess size factor for domestic hot water design. wsFxDes is applied when wsHeatingCapDes and/or wsVolRunningDes are defaulted from EcoSizer at the end of the prerun. There is no effect if those values are input.</p> Units Legal Range Default Required Variability x \\(&gt;\\) 0 1.0 No constant"},{"location":"input-data/dhwsys/#wsdrmethod","title":"wsDRMethod","text":"<p>Type: choice</p> <p>Selects alternative control schemes for HPWH-based DHWHEATERs.  These allow shifting primary heater (compressor or resistance element) operation to times of day that have load-management advantages.</p> wsDRMethod Description NONE None (default setpoint-based control) SCHEDULE Demand response schedule (see wsDRSignal) STATEOFCHARGE State-of-charge (see wsTargetSOC) Units Legal Range Default Required Variability See table above NONE No constant"},{"location":"input-data/dhwsys/#wsdrsignal","title":"wsDRSignal","text":"<p>Type: choice</p> <p>When (and only when) wsDRMethod=SCHEDULE, wsDRSignal allows hourly specification of modified control schemes.  Available signals are:</p> wsDRSignal Description ON Normal operation following the water heater's internal control logic. TOO Tops off the tank once by engaging the all the available heating sources (compressor and resistive elements) in the water heater to heat the tank to setpoint (regardless of the current condition). TOOLOR Tops off the tank once and locks out the resistance elements (only the compressor is used to heat the tank to setpoint). TOOLOC Tops off the tank once and locks out the compressor (only the resistance elements are used to heat the tank to setpoint). TOT Tops off the tank on a timer using all the available heating sources (compressor and resistive elements) in the water heater. The tank starts a timer and heating to setpoint when the call is received and repeats the heating call when the timer reaches zero. TOTLOR Tops of the tank on a timer and locks out the resistance elements (only the compressor is used to heat the tank to setpoint). TOTLOC Tops of the tank on a timer and locks out the compressor (only the resistance elements are used to heat the tank to setpoint). LOC Locks out the compressor from the water heater's normal internal control logic. LOR Locks out the resistive elements from the water heater's normal internal control logic. LOCLOR Locks out the compressor and resistive elements from the water heater's normal internal control logic. <p>Scheduling functions can be used to construct control strategies of interest, for example:</p> <pre><code>wsDRSignal = $isWeHol\n  ? hourval( on,  on,  on,  on,  on,  on,  on,  on,  on,  on,  on,  on,\n            on,  on,  on,  on,  on,  on, TOO, LOC, LOR,  on,  on,  on)\n  : hourval( on,  on,  on,  on,  on,     on,     on,  on,  on,  on,  on,  on,\n            on,  on,  on,  on,  TOOLOR, TOOLOR, LOC, LOR, LOR, LOR,  on,  on)\n</code></pre> <p>Note also that wsTSetpoint can be also be modified hourly to achieve load-shifting effects.</p> Units Legal Range Default Required Variability See Table above ON No hourly"},{"location":"input-data/dhwsys/#wstargetsoc","title":"wsTargetSOC","text":"<p>Type: float</p> <p>When (and only when) wsDRMethod=STATEOFCHARGE, wsTargetSOC specifies the target fraction of maximum tank heat content.  The tank is deemed fully charged when its entire contents is at wsTSetpoint and 0 charged at 110 <sup>o</sup>F.  Schedules are used to indicate anticipated heat requirements. The STATEOFCHARGE method can be used in combined heat / DHW systems (see RSYS rsType=COMBINEDHEATDHW) when there is excess capacity during summer months, as shown in the following:</p> <pre><code>wsTargetSOC = select(\n  $month &gt; 11 || $month &lt; 3,\n      hourval(.70,.70,.70,.70,.70,.70,.70,.30,.95,.95,.95,.95,\n              .95,.95,.95,.95,.95,.70,.70,.70,.70,.70,.70,.70),\n  $month==3 || $month== 4,\n      hourval(.50,.50,.50,.50,.50,.50,.50,.30,.95,.95,.95,.95,\n              .95,.95,.95,.95,.95,.50,.50,.50,.50,.50,.50,.50),\n  default\n      hourval(.15,.15,.15,.15,.15,.15,.15,.15,.15,.15,.15,.15,\n              .15,.60,.60,.60,.15,.15,.15,.15,.15,.15,.15,.15))\n</code></pre> Units Legal Range Default Required Variability 0 \\(\\lt\\) x \\(\\le\\) 1 0.9 No hourly"},{"location":"input-data/dhwsys/#wssdlm","title":"wsSDLM","text":"<p>Type: float</p> <p>Specifies the standard distribution loss multiplier. See App B Eqn 4. To duplicate CEC 2019 methods, this value should be set according to the value derived with App B Eqn 5.</p> Units Legal Range Default Required Variability \\(&gt;\\) 0 1 No constant"},{"location":"input-data/dhwsys/#wsdsm","title":"wsDSM","text":"<p>Type: float</p> <p>Distribution system multiplier. See RACM App B Eqn 4. To duplicate CEC 2016 methods, wsDSM should be set to the appropriate value from App B Table B-2. Note the NCF (non-compliance factor) included in App B Eqn 4 is not a CSE input and thus must be applied externally to wsDSM.</p> Units Legal Range Default Required Variability \\(&gt;\\) 0 1 No constant"},{"location":"input-data/dhwsys/#wswf","title":"wsWF","text":"<p>Type: float</p> <p>Waste factor. See RACM App B Eqn 1. wsWF is applied to hot water draws.  The default value (1) reflects the inclusion of waste in draw amounts.  App B specifies wsWF=0.9 when the system has a within-unit pumped loop that reduces waste due to immediate availability of hot water at fixtures.</p> Units Legal Range Default Required Variability x \\(&gt;\\) 0 1 No hourly"},{"location":"input-data/dhwsys/#wsssf","title":"wsSSF","text":"<p>Type: float</p> <p>NOTE: Deprecated. Use wsSolarSys instead.</p> <p>Specifies the solar savings fraction, allowing recognition of externally-calculated solar water heating energy contributions.  The contributions are modeled by deriving an increased water heater feed temperature --</p> \\[tWHFeed = tInletAdj + wsSSF*([wsTUse][wstuse]-tInletAdj)\\] <p>where tInletAdj is the source cold water temperature including any DHWHEATREC tempering (that is, wsTInlet + heat recovery temperature increase, if any).  This model approximates the diminishing returns associated with combined preheat strategies such as drain water heat recovery and solar.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 0.99 No hourly"},{"location":"input-data/dhwsys/#wssolarsys","title":"wsSolarSys","text":"<p>Type: dhwSolarSys</p> <p>Name of DHWSOLARSYS object, if any, that supplies pre-heated water to this DHWSYS.</p> Units Legal Range Default Required Variability name of a DHWSOLARSYS not recorded No constant"},{"location":"input-data/dhwsys/#wsparelec","title":"wsParElec","text":"<p>Type: float</p> <p>Specifies electrical parasitic power to represent recirculation pumps or other system-level electrical devices. Calculated energy use is accumulated to the METER specified by wsElecMtr (end use DHW). No other effect, such as heat gain to surroundings, is modeled.</p> Units Legal Range Default Required Variability W x \\(\\ge\\) 0 0 No hourly"},{"location":"input-data/dhwsys/#wsdrawmaxdur","title":"wsDrawMaxDur","text":"<p>Type: integer</p> <p>Maximum draw duration for the sizing window.</p> Units Legal Range Default Required Variability Hr x \\(\\geq\\) 0 4 No constant"},{"location":"input-data/dhwsys/#wsloadmaxdur","title":"wsLoadMaxDur","text":"<p>Type: integer</p> <p>Maximum load duration for the sizing window.</p> Units Legal Range Default Required Variability Hr x \\(\\geq\\) 0 12 No constant"},{"location":"input-data/dhwsys/#wselecmtr","title":"wsElecMtr","text":"<p>Type: mtrName</p> <p>Name of METER object, if any, to which DHWSYS electrical energy use is recorded (under end use DHW). In addition, wsElecMtr provides the default whElectMtr selection for all DHWHEATERs and DHWPUMPs in this DHWSYS.</p> Units Legal Range Default Required Variability name of a METER not recorded No constant"},{"location":"input-data/dhwsys/#wsfuelmtr","title":"wsFuelMtr","text":"<p>Type: mtrName</p> <p>Name of METER object, if any, to which DHWSYS fuel energy use is recorded (under end use DHW). DHWSYS fuel use is usually (always?) 0, so the primary use of this input is to specify the default whFuelMtr choice for DHWHEATERs in this DHWSYS.</p> Units Legal Range Default Required Variability name of a METER not recorded No constant"},{"location":"input-data/dhwsys/#wswhhwmtr","title":"wsWHhwMtr","text":"<p>Type: dhwmtrName</p> <p>Name of DHWMETER object, if any, to which hot water quantities (at water heater) are recorded by hot water end use.</p> Units Legal Range Default Required Variability name of a METER not recorded No constant"},{"location":"input-data/dhwsys/#wsfxhwmtr","title":"wsFXhwMtr","text":"<p>Type: dhwmtrName</p> <p>Name of DHWMETER object, if any, to which mixed hot water use (at fixture) quantities are recorded by hot water end use.  DHWDAYUSE and wsUse input can be verified using DHWMETER results.</p> Units Legal Range Default Required Variability name of a METER No constant"},{"location":"input-data/dhwsys/#wswritedrawcsv","title":"wsWriteDrawCSV","text":"<p>Type: choice</p> <p>If Yes, a comma-separated file is generated containing 1-minute interval hot water draw values for testing or linkage purposes.</p> Units Legal Range Default Required Variability Yes or No No No constant"},{"location":"input-data/dhwsys/#enddhwsys","title":"endDHWSys","text":"<p>Optionally indicates the end of the DHWSYS definition.</p> Units Legal Range Default Required Variability none No <p>Related Probes:</p> <ul> <li>@DHWSys</li> </ul>"},{"location":"input-data/dhwtank/","title":"DHWTANK","text":"<p>DHWTANK constructs an object representing one or more unfired water storage tanks in a DHWSYS. DHWTANK heat losses contribute to the water heating load.</p>"},{"location":"input-data/dhwtank/#wtname","title":"wtName","text":"<p>Optional name of tank; give after the word \u201cDHWTANK\u201d if desired.</p> Units Legal Range Default Required Variability 63 characters none No constant"},{"location":"input-data/dhwtank/#wtmult","title":"wtMult","text":"<p>Type: integer</p> <p>Number of identical tanks of this type. Any value \\(&gt;1\\) is equivalent to repeated entry of the same DHWTANK.</p> Units Legal Range Default Required Variability x \\(&gt;\\) 0 1 No constant <p>Tank heat loss is calculated hourly (note that default heat loss is 0) --</p> \\[\\text{qLoss} = \\text{wtMult} \\cdot (\\text{[wtUA][wtua]} \\cdot (\\text{[wtTTank][wtttank]} - \\text{[wtTEx][wttex]}) + \\text{[wtXLoss][wtxloss]})\\]"},{"location":"input-data/dhwtank/#wtua","title":"wtUA","text":"<p>Type: float</p> <p>Tank heat loss coefficient.</p> Units Legal Range Default Required Variability Btuh/<sup>o</sup>F x \\(\\ge\\) 0 Derived from wtVol and wtInsulR No constant"},{"location":"input-data/dhwtank/#wtvol","title":"wtVol","text":"<p>Type: float</p> <p>Specifies tank volume.</p> Units Legal Range Default Required Variability gal x \\(\\ge\\) 0 0 No constant"},{"location":"input-data/dhwtank/#wtinsulr","title":"wtInsulR","text":"<p>Type: float</p> <p>Specifies total tank insulation resistance. The input value should represent the total resistance from the water to the surroundings, including both built-in insulation and additional exterior wrap insulation.</p> Units Legal Range Default Required Variability ft<sup>2</sup>-<sup>o</sup>F/Btuh x \\(\\ge\\) 0.01 0 No constant"},{"location":"input-data/dhwtank/#wtzone","title":"wtZone","text":"<p>Type: znName</p> <p>Zone location of DHWTANK regarding tank loss. The value of zero only valid if wtTEx is being used. Half of the heat losses go to zone air and the other goes to half radiant.</p> Units Legal Range Default Required Variability Name of ZONE 0 No constant"},{"location":"input-data/dhwtank/#wttex","title":"wtTEx","text":"<p>Type: float</p> <p>Tank surround temperature.</p> Units Legal Range Default Required Variability <sup>o</sup>F x \\(\\ge\\) 0 70 No hourly"},{"location":"input-data/dhwtank/#wtttank","title":"wtTTank","text":"<p>Type: float</p> <p>Tank average water temperature.</p> Units Legal Range Default Required Variability <sup>o</sup>F \\(&gt;\\) 32 <sup>o</sup>F Parent DHWSYSTEM wsTUse No hourly"},{"location":"input-data/dhwtank/#wtxloss","title":"wtXLoss","text":"<p>Type: float</p> <p>Additional tank heat loss. To duplicate CEC 2016 procedures, this value should be used to specify the fitting loss of 61.4 Btuh.</p> Units Legal Range Default Required Variability Btuh (any) 0 No hourly"},{"location":"input-data/dhwtank/#enddhwtank","title":"endDHWTank","text":"<p>Optionally indicates the end of the DHWTANK definition.</p> Units Legal Range Default Required Variability none No constant <p>Related Probes:</p> <ul> <li>@DHWTank</li> </ul>"},{"location":"input-data/dhwuse/","title":"DHWUSE","text":"<p>Defines a single hot water draw as part of a DHWDAYUSE.  See discussion and examples under DHWDAYUSE. As noted there, most DHWUSE values have hourly variability, allowing flexible representation.</p>"},{"location":"input-data/dhwuse/#wuname","title":"wuName","text":"<p>Optional name; give after the word \u201cDHWUSE\u201d if desired.</p> Units Legal Range Default Required Variability 63 characters none No constant"},{"location":"input-data/dhwuse/#wustart","title":"wuStart","text":"<p>Type: float</p> <p>The starting time of the hot water draw.</p> Units Legal Range Default Required Variability hr 0 \\(\\le\\) x \\(\\le\\) 24 none Yes constant"},{"location":"input-data/dhwuse/#wuduration","title":"wuDuration","text":"<p>Type: float</p> <p>Draw duration.  wuDuration = 0 is equivalent to omitting the DHWUSE. Durations that extend beyond midnight are included in the current day.</p> Units Legal Range Default Required Variability min 0 \\(\\le\\) x \\(\\le\\) 1440 0 No hourly"},{"location":"input-data/dhwuse/#wuflow","title":"wuFlow","text":"<p>Type: float</p> <p>Draw flow rate at the point of use (in other words, the mixed-water flow rate).  wuFlow = 0 is equivalent to omitting the DHWUSE.  There is no enforced upper limit on wuFlow, however, unrealistically large values can cause runtime errors.</p> Units Legal Range Default Required Variability gpm x \\(\\le\\) 0 0 No hourly"},{"location":"input-data/dhwuse/#wuhotf","title":"wuHotF","text":"<p>Type: float</p> <p>Fraction of draw that is hot water.  Cannot be specified with wuTemp or wuHeatRecEF.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1 1 No hourly"},{"location":"input-data/dhwuse/#wutemp","title":"wuTemp","text":"<p>Type: float</p> <p>Mixed-water use temperature at the fixture. Cannot be specified when wuHotF is given.   </p> Units Legal Range Default Required Variability <sup>o</sup>F x \\(\\le\\) 0 0 when wuHeatRecEF is given or parent DHWSYS includes DHWHEATREC(s) hourly"},{"location":"input-data/dhwuse/#wuheatrecef","title":"wuHeatRecEF","text":"<p>Type: float</p> <p>Heat recovery effectiveness, allows simple modeling of heat recovery devices such as drain water heat exchangers.</p> <p>If non-0 (evaluated hourly), hot water use is reduced based on wuTemp, DHWSYS wsTUse, and DHWSYS wsTInlet.  DHWHEATREC(s), if any, are ignored for this use.  wuTemp must be specified.</p> <p>If 0, detailed heat recovery modeling may apply, see DHWHEATREC.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 0.9 0 No hourly"},{"location":"input-data/dhwuse/#wuhwenduse","title":"wuHWEndUse","text":"<p>Type: choice</p> <p>Hot-water end use: one of Shower, Bath, CWashr, DWashr, or Faucet.  wuHWEndUse has the following functions --</p> <ul> <li>Allocation of hot water use among multiple DHWSYSs (if more than one DHWSYS references a given DHWDAYUSE).</li> <li>DHWMETER end-use accounting (via DHWSYS).</li> <li>Activation of the detailed heat recovery model (available for end use Shower when wuHeatRecEF=0 and the parent DHWSYS includes DHWHEATREC(s)).</li> </ul> Units Legal Range Default Required Variability One of above choices (use allocated to Unknown) No constant"},{"location":"input-data/dhwuse/#wueventid","title":"wuEventID","text":"<p>Type: integer</p> <p>User-defined identifier that associates multiple DHWUSEs with a single event or activity.  For example, a dishwasher uses water at several discrete times during a 90 minute cycle and all DHWUSEs would be assigned the same wuEventID.  All DHWUSEs having the same wuEventID should have the same wuHWEndUse.</p> Units Legal Range Default Required Variability x \\(\\ge\\) 0 0 No constant"},{"location":"input-data/dhwuse/#enddhwuse","title":"endDHWUSE","text":"<p>Optionally indicates the end of the DHWUSE definition.</p> Units Legal Range Default Required Variability none No <p>Related Probes:</p> <ul> <li>@DHWUse</li> </ul>"},{"location":"input-data/doas/","title":"DOAS","text":"<p>DOAS (Dedicated Outdoor Air System) provides centralized supply and/or exhuast ventilation air to IZXFER objects with the izNVType = AIRNETDOAS. The supply air may be preconditioned using heat recovery and/or tempering coils.</p>"},{"location":"input-data/doas/#oaname","title":"oaName","text":"<p>Name of DOAS.</p>"},{"location":"input-data/doas/#doas-supply-fan-data-members","title":"DOAS Supply Fan Data Members","text":""},{"location":"input-data/doas/#oasupfanvfds","title":"oaSupFanVfDs","text":"<p>Type: float</p> <p>Supply fan design or rated flow at rated pressure.</p> Units Legal Range Default Required Variability cfm x \\(\\ge\\) 0 Sum of referencing IZXFER supply flows No constant"},{"location":"input-data/doas/#oasupfanpress","title":"oaSupFanPress","text":"<p>Type: float</p> <p>Design or rated fan pressure.</p> Units Legal Range Default Required Variability inches H<sub>2</sub>O x \\(&gt;\\) 0 0.3 No constant <p>Only one of oaSupFanElecPwr, oaSupFanEff, and oaSupFanShaftBhp may be given.</p>"},{"location":"input-data/doas/#oasupfanelecpwr","title":"oaSupFanElecPwr","text":"<p>Type: float</p> <p>Fan input power per unit air flow (at design flow and pressure).</p> Units Legal Range Default Required Variability W/cfm x \\(&gt;\\) 0 derived from oaSupFanEff and oaSupFanShaftBhp If oaSupFanEff and oaSupFanShaftBhp not present constant"},{"location":"input-data/doas/#oasupfaneff","title":"oaSupFanEff","text":"<p>Type: float</p> <p>Fan efficiency at design flow and pressure, as a fraction.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1 derived from oaSupFanShaftBhp if given, else 0.08 No constant"},{"location":"input-data/doas/#oasupfanshaftbhp","title":"oaSupFanShaftBhp","text":"<p>Type: float</p> <p>Fan shaft brake horsepower at design flow and pressure.</p> Units Legal Range Default Required Variability bhp x \\(&gt;\\) 0 derived from oaSupFanEff. No constant"},{"location":"input-data/doas/#oasupfancurvepy","title":"oaSupFanCurvePy","text":"<p>Type: \\(k_0\\), \\(k_1\\), \\(k_2\\), \\(k_3\\), \\(x_0\\)</p> <p>\\(k_0\\) through \\(k_3\\) are the coefficients of a cubic polynomial for the curve relating fan relative energy consumption to relative air flow above the minimum flow \\(x_0\\). Up to five floats may be given, separated by commas. 0 is used for any omitted trailing values. The values are used as follows:</p> \\[z = k_0 + k_1 \\cdot (x - x_0)|  +  k_2 \\cdot (x - x_0)|^2 + k_3 \\cdot (x - x_0)|^3\\] <p>where:</p> <ul> <li>\\(x\\) is the relative fan air flow (as fraction of oaSupFanVfDs; 0 \\(\\le\\) \\(x\\) \\(\\le\\) 1);</li> <li>\\(x_0\\) is the minimum relative air flow (default 0);</li> <li>\\((x - x_0)|\\) is the \"positive difference\", i.e. \\((x - x_0)\\) if \\(x &gt; x_0\\); else 0;</li> <li>\\(z\\) is the relative energy consumption.</li> </ul> <p>If \\(z\\) is not 1.0 for \\(x\\) = 1.0, a warning message is displayed and the coefficients are normalized by dividing by the polynomial's value for \\(x\\) = 1.0.</p> Units Legal Range Default Required Variability x \\(\\ge\\) 0 0, 1, 0, 0, 0 (linear) No constant"},{"location":"input-data/doas/#oasupfanmtr","title":"oaSupFanMtr","text":"<p>Type: mtrName</p> <p>Name of meter, if any, to record energy used by supply fan. End use category used is specified by oaSupFanEndUse (next).</p> Units Legal Range Default Required Variability name of a METER not recorded No constant"},{"location":"input-data/doas/#oasupfanenduse","title":"oaSupFanEndUse","text":"<p>Type: choice</p> <p>End use to which fan energy is recorded (in METER specified by oaSupFanMtr).  See METER for available end use choices.</p> Units Legal Range Default Required Variability end use choice Fan No constant"},{"location":"input-data/doas/#oatex","title":"oaTEx","text":"<p>Type: float</p> <p>Alternative supply fan source air dry bulb temperature. If given, oaTEx overrides the outdoor dry-bulb temperature read from the weather file or derived from design conditions.</p> <p>Caution: oaTEx is not checked for reasonableness.</p> Units Legal Range Default Required Variability <sup>o</sup>F Outdoor dry-bulb No subhourly"},{"location":"input-data/doas/#oawex","title":"oaWEx","text":"<p>Type: float</p> <p>Alternative supply fan source air air humidity ratio. If given, oaWEx overrides the outdoor humidity ratio derived from weather file data or design conditions.</p> <p>Caution: oaWEx is not checked against saturation -- there is no verification that the value provided is physically possible.</p> Units Legal Range Default Required Variability \\(\\gt\\) 0 Outdoor humidity ratio No subhourly"},{"location":"input-data/doas/#doas-exhaust-fan-data-members","title":"DOAS Exhaust Fan Data Members","text":""},{"location":"input-data/doas/#oaexhfanvfds","title":"oaExhFanVfDs","text":"<p>Type: float</p> <p>Exhaust fan design or rated flow at rated pressure.</p> Units Legal Range Default Required Variability cfm x \\(\\ge\\) 0 Sum of referencing IZXFER exhaust flows No constant"},{"location":"input-data/doas/#oaexhfanpress","title":"oaExhFanPress","text":"<p>Type: float</p> <p>Design or rated fan pressure.</p> Units Legal Range Default Required Variability inches H<sub>2</sub>O x \\(&gt;\\) 0 0.3 No constant <p>Only one of oaExhFanElecPwr, oaExhFanEff, and oaExhFanShaftBhp may be given.</p>"},{"location":"input-data/doas/#oaexhfanelecpwr","title":"oaExhFanElecPwr","text":"<p>Type: float</p> <p>Fan input power per unit air flow (at design flow and pressure).</p> Units Legal Range Default Required Variability W/cfm x \\(&gt;\\) 0 derived from oaExhFanEff and oaExhFanShaftBhp If oaExhFanEff and oaExhFanShaftBhp not present constant"},{"location":"input-data/doas/#oaexhfaneff","title":"oaExhFanEff","text":"<p>Type: float</p> <p>Fan efficiency at design flow and pressure, as a fraction.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1 derived from oaExhFanShaftBhp if given, else 0.08 No constant"},{"location":"input-data/doas/#oaexhfanshaftbhp","title":"oaExhFanShaftBhp","text":"<p>Type: float</p> <p>Fan shaft brake horsepower at design flow and pressure.</p> Units Legal Range Default Required Variability bhp x \\(&gt;\\) 0 derived from oaExhFanEff. No constant"},{"location":"input-data/doas/#oaexhfancurvepy","title":"oaExhFanCurvePy","text":"<p>Type: \\(k_0\\), \\(k_1\\), \\(k_2\\), \\(k_3\\), \\(x_0\\)</p> <p>\\(k_0\\) through \\(k_3\\) are the coefficients of a cubic polynomial for the curve relating fan relative energy consumption to relative air flow above the minimum flow \\(x_0\\). Up to five floats may be given, separated by commas. 0 is used for any omitted trailing values. The values are used as follows:</p> \\[z = k_0 + k_1 \\cdot (x - x_0)|  +  k_2 \\cdot (x - x_0)|^2 + k_3 \\cdot (x - x_0)|^3\\] <p>where:</p> <ul> <li>\\(x\\) is the relative fan air flow (as fraction of oaExhFanVfDs; 0 \\(\\le\\) \\(x\\) \\(\\le\\) 1);</li> <li>\\(x_0\\) is the minimum relative air flow (default 0);</li> <li>\\((x - x_0)|\\) is the \"positive difference\", i.e. \\((x - x_0)\\) if \\(x &gt; x_0\\); else 0;</li> <li>\\(z\\) is the relative energy consumption.</li> </ul> <p>If \\(z\\) is not 1.0 for \\(x\\) = 1.0, a warning message is displayed and the coefficients are normalized by dividing by the polynomial's value for \\(x\\) = 1.0.</p> Units Legal Range Default Required Variability x \\(\\ge\\) 0 0, 1, 0, 0, 0 (linear) No constant"},{"location":"input-data/doas/#oaexhfanmtr","title":"oaExhFanMtr","text":"<p>Type: mtrName</p> <p>Name of meter, if any, to record energy used by exhaust fan. End use category used is specified by oaExhFanEndUse (next).</p> Units Legal Range Default Required Variability name of a METER not recorded No constant"},{"location":"input-data/doas/#oaexhfanenduse","title":"oaExhFanEndUse","text":"<p>Type: choice</p> <p>End use to which fan energy is recorded (in METER specified by oaExhFanMtr).  See METER for available end use choices.</p> Units Legal Range Default Required Variability end use choice Fan No constant"},{"location":"input-data/doas/#doas-tempering-coils-data-members","title":"DOAS Tempering Coils Data Members","text":""},{"location":"input-data/doas/#oasupth","title":"oaSupTH","text":"<p>Type: float</p> <p>Heating setpoint for tempering and/or heat exchanger bypass.</p> Units Legal Range Default Required Variability <sup>o</sup>F \u2014 68 No subhourly"},{"location":"input-data/doas/#oaeirh","title":"oaEIRH","text":"<p>Type: float</p> <p>Energy Input Ratio of the heating coil. This is the inverse of the coil efficiency or COP. A value of zero indicates that the coil does not use energy (e.g., hot water coils). Specifying input triggers the modeling of a heating coil.</p> Units Legal Range Default Required Variability x \\(\\ge\\) 0 0 when modeling heating coil subhourly"},{"location":"input-data/doas/#oacoilhmtr","title":"oaCoilHMtr","text":"<p>Type: mtrName</p> <p>Name of meter, if any, to record energy used by the heating coil.</p> Units Legal Range Default Required Variability name of a METER not recorded No constant"},{"location":"input-data/doas/#oasuptc","title":"oaSupTC","text":"<p>Type: float</p> <p>Cooling setpoint for tempering and/or heat exchanger bypass.</p> Units Legal Range Default Required Variability <sup>o</sup>F \u2014 68 No subhourly"},{"location":"input-data/doas/#oaeirc","title":"oaEIRC","text":"<p>Type: float</p> <p>Energy Input Ratio of the cooling coil. This is the inverse of the coil efficiency or COP. A value of zero indicates that the coil does not use energy (e.g., chilled water coils). Specifying input triggers the modeling of a cooling coil.</p> Units Legal Range Default Required Variability x \\(\\ge\\) 0 0 when modeling cooling coil subhourly"},{"location":"input-data/doas/#oashrtarget","title":"oaSHRtarget","text":"<p>Type: float</p> <p>Sensible Heat Ratio of the cooling coil. If the required sensible capacity of the coil and the entered SHR do not produce a valid psychrometric state, the SHR is adjusted and reported through the SHR probe.</p> Units Legal Range Default Required Variability x \\(\\gt\\) 0 1.0 No subhourly"},{"location":"input-data/doas/#oacoilcmtr","title":"oaCoilCMtr","text":"<p>Type: mtrName</p> <p>Name of meter, if any, to record energy used by the cooling coil.</p> Units Legal Range Default Required Variability name of a METER not recorded No constant"},{"location":"input-data/doas/#oaloadmtr","title":"oaLoadMtr","text":"<p>Type: ldMtrName</p> <p>Name of load meter, if any, to record load met by the heating coil or cooling coil.</p> Units Legal Range Default Required Variability name of a LOADMETER not recorded No constant"},{"location":"input-data/doas/#doas-heat-recovery-data-members","title":"DOAS Heat Recovery Data Members","text":""},{"location":"input-data/doas/#oahxvfds","title":"oaHXVfDs","text":"<p>Type: float</p> <p>Heat exchanger design or rated flow.</p> Units Legal Range Default Required Variability cfm x \\(\\gt\\) 0 Average of supply and exhaust fan design flows No constant"},{"location":"input-data/doas/#oahxf2","title":"oaHXf2","text":"<p>Type: float</p> <p>Heat exchanger flow fraction (of design flow) used for second set of effectivenesses.</p> Units Legal Range Default Required Variability 0 \\(\\lt\\) x \\(\\lt\\) 1.0 0.75 No constant"},{"location":"input-data/doas/#oahxseneffhds","title":"oaHXSenEffHDs","text":"<p>Type: float</p> <p>Heat exchanger sensible effectiveness in heating mode at the design flow rate. Specifying input triggers modeling of heat recovery.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1.0 \u2014 when modeling heat recovery constant"},{"location":"input-data/doas/#oahxseneffhf2","title":"oaHXSenEffHf2","text":"<p>Type: float</p> <p>Heat exchanger sensible effectiveness in heating mode at the second flow rate (oaHXf2).</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1.0 0 No constant"},{"location":"input-data/doas/#oahxlateffhds","title":"oaHXLatEffHDs","text":"<p>Type: float</p> <p>Heat exchanger latent effectiveness in heating mode at the design flow rate.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1.0 0 No constant"},{"location":"input-data/doas/#oahxlateffhf2","title":"oaHXLatEffHf2","text":"<p>Type: float</p> <p>Heat exchanger latent effectiveness in heating mode at the second flow rate (oaHXf2).</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1.0 0 No constant"},{"location":"input-data/doas/#oahxseneffcds","title":"oaHXSenEffCDs","text":"<p>Type: float</p> <p>Heat exchanger sensible effectiveness in cooling mode at the design flow rate.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1.0 0 No constant"},{"location":"input-data/doas/#oahxseneffcf2","title":"oaHXSenEffCf2","text":"<p>Type: float</p> <p>Heat exchanger sensible effectiveness in cooling mode at the second flow rate (oaHXf2).</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1.0 0 No constant"},{"location":"input-data/doas/#oahxlateffcds","title":"oaHXLatEffCDs","text":"<p>Type: float</p> <p>Heat exchanger latent effectiveness in cooling mode at the design flow rate.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1.0 0 No constant"},{"location":"input-data/doas/#oahxlateffcf2","title":"oaHXLatEffCf2","text":"<p>Type: float</p> <p>Heat exchanger latent effectiveness in cooling mode at the second flow rate (oaHXf2).</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1.0 0 No constant"},{"location":"input-data/doas/#oahxbypass","title":"oaHXBypass","text":"<p>Type: choice</p> <p>Yes/No choice for enabling heat exchanger bypass. If selected, the outdoor air will bypass the heat exchanger when otherwise the heat exchanger would require more heating or cooling energy to meet the respective setpoints.</p> Units Legal Range Default Required Variability NO, YES NO No constant"},{"location":"input-data/doas/#oahxauxpwr","title":"oaHXAuxPwr","text":"<p>Type: float</p> <p>Auxiliary power required to operate the heat recovery device (e.g., wheel motor, contorls).</p> Units Legal Range Default Required Variability W x \\(\\ge\\) 0 0 No subhourly"},{"location":"input-data/doas/#oahxauxmtr","title":"oaHXAuxMtr","text":"<p>Type: mtrName</p> <p>Name of meter, if any, to record energy used by auxiliary components of the heat recovery system.</p> Units Legal Range Default Required Variability name of a METER not recorded No constant"},{"location":"input-data/doas/#enddoas","title":"endDOAS","text":"<p>Indicates the end of the DOAS definition. Alternatively, the end of the DOAS definition can be indicated by the declaration of another object or by \"END\".</p> Units Legal Range Default Required Variability \u2014 \u2014 N/A No constant <p>Related Probes:</p> <ul> <li>@doas</li> </ul>"},{"location":"input-data/door/","title":"DOOR","text":"<p>DOOR constructs a subobject belonging to the current SURFACE. The azimuth, tilt, ground reflectivity and exterior conditions associated with the door are the same as those of the owning surface, although the exterior surface conductance and the exterior absorptivity can be altered.</p>"},{"location":"input-data/door/#drname","title":"drName","text":"<p>Name of door.</p> Units Legal Range Default Required Variability 63 characters none No constant"},{"location":"input-data/door/#drarea","title":"drArea","text":"<p>Type: float</p> <p>Overall area of door.</p> Units Legal Range Default Required Variability ft<sup>2</sup> x \\(&gt;\\) 0 none Yes constant"},{"location":"input-data/door/#drmodel","title":"drModel","text":"<p>Type: choice</p> <p>Provides user control over how CSE models conduction for this door:</p> QUICK Surface is modeled using a simple conductance. Heat capacity effects are ignored. Either drCon or drU (next) can be specified. DELAYED, DELAYED_HOUR, DELAYED_SUBOUR Surface is modeled using a multi-layer finite difference technique which represents heat capacity effects. If the time constant of the door is too short to accurately simulate, a warning message is issued and the Quick model is used. drCon (next) must be specified -- the program cannot use the finite difference model if drU rather than drCon is specified. AUTO Program selects Quick or appropriate Delayed automatically according to the time constant of the surface (if drU is specified, Quick is selected). FD or FORWARD_DIFFERENCE Selects the forward difference model (used with short time steps and the CZM/UZM zone models) Units Legal Range Default Required Variability choices above AUTO No constant <p>Either drU or drCon must be specified, but not both.</p>"},{"location":"input-data/door/#dru","title":"drU","text":"<p>Type: float</p> <p>Door U-value, NOT including surface (air film) conductances. Allows direct entry of U-value, without defining a CONSTRUCTION, when no heat capacity effects are to be modeled.</p> Units Legal Range Default Required Variability Btuh/ft<sup>2</sup>-<sup>o</sup>F x \\(&gt;\\) 0 Determined from drCon if drCon not given constant"},{"location":"input-data/door/#drcon","title":"drCon","text":"<p>Type: conName</p> <p>Name of construction for door.</p> Units Legal Range Default Required Variability name of a CONSTRUCTION none unless drU given constant"},{"location":"input-data/door/#drlthkf","title":"drLThkF","text":"<p>Type: float</p> <p>Sublayer thickness adjustment factor for FORWARD_DIFFERENCE conduction model used with drCon surfaces.  Material layers in the construction are divided into sublayers as needed for numerical stability.  drLThkF allows adjustment of the thickness criterion used for subdivision.  A value of 0 prevents subdivision; the default value (0.5) uses layers with conservative thickness equal to half of an estimated safe value.  Fewer (thicker) sublayers improves runtime at the expense of accurate representation of rapid changes.</p> Units Legal Range Default Required Variability x \\(\\ge\\) 0 0.5 No constant"},{"location":"input-data/door/#drexabs","title":"drExAbs","text":"<p>Type: float</p> <p>Door exterior solar absorptivity. Applicable only if sfExCnd of owning surface is AMBIENT or SPECIFIEDT.</p> Units Legal Range Default Required Variability Btuh/ft<sup>2</sup>-<sup>o</sup>F x \\(&gt;\\) 0 same as owning surface No monthly-hourly"},{"location":"input-data/door/#drinabs","title":"drInAbs","text":"<p>Type: float</p> <p>Door interior solar absorptivity.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1 0.5 No monthly-hourly"},{"location":"input-data/door/#drexepslw","title":"drExEpsLW","text":"<p>Type: float</p> <p>Door exterior long wave (thermal) emittance.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1 0.9 No constant"},{"location":"input-data/door/#drinepslw","title":"drInEpsLW","text":"<p>Type: float</p> <p>Door interior long wave (thermal) emittance.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1 0.9 No constant"},{"location":"input-data/door/#drinh","title":"drInH","text":"<p>Type: float</p> <p>Door interior surface (air film) conductance. Ignored if drModel = Forward_Difference</p> Units Legal Range Default Required Variability Btuh/ft<sup>2</sup>-<sup>o</sup>F x \\(&gt;\\) 0 same as owning surface No constant"},{"location":"input-data/door/#drexh","title":"drExH","text":"<p>Type: float</p> <p>Door exterior surface (air film) conductance. Ignored if drModel = Forward_Difference</p> Units Legal Range Default Required Variability Btuh/ft<sup>2</sup>-<sup>o</sup>F x \\(&gt;\\) 0 same as owning surface No constant <p>When drModel = Forward_Difference, several models are available for calculating inside and outside surface convective coefficients.  Inside surface faces can be exposed only to zone conditions. Outside faces may be exposed either to ambient conditions or zone conditions, based on drExCnd.  Only UNIFIED and INPUT are typically used.  The other models were used during CSE development for comparison.  For details, see CSE Engineering Documentation.</p> Model Exposed to ambient Exposed to zone UNIFIED default CSE model default CSE model INPUT hc = drExHcMult hc = drxxHcMult AKBARI Akbari model n/a WALTON Walton model n/a WINKELMANN Winkelmann model n/a MILLS n/a Mills model ASHRAE n/a ASHRAE handbook values"},{"location":"input-data/door/#drexhcmodel","title":"drExHcModel","text":"<p>Type: choice</p> <p>Selects the model used for exterior surface convection when drModel = Forward_Difference.</p> Units Legal Range Default Required Variability choices above UNIFIED No constant"},{"location":"input-data/door/#drexhclchar","title":"drExHcLChar","text":"<p>Type: float</p> <p>Characteristic length of surface, used in derivation of forced exterior convection coefficients in some models when outside face is exposed to ambient (i.e. to wind).</p> Units Legal Range Default Required Variability ft x \\(&gt;\\) 0 10 No constant"},{"location":"input-data/door/#drexhcmult","title":"drExHcMult","text":"<p>Type: float</p> <p>Exterior convection coefficient adjustment factor.  When drExHcModel=INPUT, hc=drExHcMult.  For other drExHcModel choices, the model-derived hc is multiplied by drExHcMult.</p> Units Legal Range Default Required Variability x \\(\\ge\\) 0 1 No subhourly"},{"location":"input-data/door/#drexrf","title":"drExRf","text":"<p>Type: float</p> <p>Exterior roughness factor.  Typical roughness values:</p> Roughness Index drExRf Example 1 (very rough) 2.17 Stucco 2 (rough) 1.67 Brick 3 (medium rough) 1.52 Concrete 4 (Medium smooth) 1.13 Clear pine 5 (Smooth) 1.11 Smooth plaster 6 (Very Smooth) 1 Glass Units Legal Range Default Required Variability drExHcModel = WINKELMANN: 1.66 else 2.17 No constant"},{"location":"input-data/door/#drinhcmodel","title":"drInHcModel","text":"<p>Type: choice</p> <p>Selects the model used for the inside (zone) surface convection when drModel = Forward_Difference.</p> Units Legal Range Default Required Variability choices above (see drExHcModel) UNIFIED No constant"},{"location":"input-data/door/#drinhcmult","title":"drInHcMult","text":"<p>Type: float</p> <p>Interior convection coefficient adjustment factor.  When drInHcModel=INPUT, hc=drInHcMult.  For other drInHcModel choices, the model-derived hc is multiplied by drInHcMult.</p> Units Legal Range Default Required Variability x \\(\\ge\\) 0 1 No subhourly"},{"location":"input-data/door/#drinhcfrccoeffs","title":"drInHcFrcCoeffs","text":"<p>Type: float array</p> <p>Specifies 3 coefficients for an alternative inside surface forced convection model (applicable only for drInHCModel=UNIFIED).  When given, the inside surface forced convection coefficient for this surface is derived as follows:</p> <pre><code>  hcFrc = hConvF * (drInHcFrcCoeffs[ 1] + drInHcFrcCoeffs[ 2] * ACH ^ drInHcFrcCoeffs[ 3])\n</code></pre> <p>where hConvF is the convection adjustment factor (derived from elevation, see Top hConvMod) and ACH is the zone air change rate per hour from the prior simulation step (including heat pump water heater evaporator air flow).  This formulation is dangerously flexible, so caution is advised when selecting coefficient values.</p> <p>The default hcFrc value (used when drInHcFrCoeff is not provided) is hConvF * znHcFrcF * ACH ^ 0.8.</p> Units Legal Range Default Required Variability Btuh/ft<sup>2</sup>-<sup>o</sup>F inherited from parent surface No subhourly"},{"location":"input-data/door/#enddoor","title":"endDoor","text":"<p>Indicates the end of the door definition. Alternatively, the end of the door definition can be indicated by the declaration of another object or by END.</p> Units Legal Range Default Required Variability none No constant <p>Related Probes:</p> <ul> <li>@door</li> <li>@xsurf</li> <li>@mass</li> </ul>"},{"location":"input-data/ductseg/","title":"DUCTSEG","text":"<p>DUCTSEG defines a duct segment. Each RSYS has at most one return duct segment and at most one supply duct segment. That is, DUCTSEG input may be completely omitted to eliminate duct losses.</p>"},{"location":"input-data/ductseg/#dsname","title":"dsName","text":"<p>Optional name of duct segment; give after the word \u201cDUCTSEG\u201d if desired.</p> Units Legal Range Default Required Variability 63 characters none No constant"},{"location":"input-data/ductseg/#dsty","title":"dsTy","text":"<p>Type: choice</p> <p>Duct segment type.</p> Units Legal Range Default Required Variability SUPPLY, RETURN Yes constant <p>The surface area of a DUCTSEG depends on its shape. 0 surface area is legal (leakage only). DUCTSEG shape is modeled either as flat or round --</p> <ul> <li>dsExArea specified: Flat. Interior and exterior areas are assumed to be equal (duct surfaces are flat and corner effects are neglected).</li> <li>dsExArea not specified: Round. Any two of dsInArea, dsDiameter, and dsLength must be given. Insulation thickness is derived from dsInsulR and dsInsulMat and this thickness is used to calculate the exterior surface area. Overall inside-to-outside conductance is also calculated including suitable adjustment for curvature.</li> </ul>"},{"location":"input-data/ductseg/#dsbranchlen","title":"dsBranchLen","text":"<p>Type: float</p> <p>Average branch length.</p> Units Legal Range Default Required Variability ft x \\(&gt;\\) 0 -1.0 No constant"},{"location":"input-data/ductseg/#dsbranchcount","title":"dsBranchCount","text":"<p>Type: integer</p> <p>Number of branches.</p> Units Legal Range Default Required Variability x \\(&gt;\\) 0 -1 No constant"},{"location":"input-data/ductseg/#dsbranchcfa","title":"dsBranchCFA","text":"<p>Type: float</p> <p>Floor area served per branch</p> Units Legal Range Default Required Variability ft<sup>2</sup> x \\(&gt;\\) 0 -1.0 No constant"},{"location":"input-data/ductseg/#dsairvelds","title":"dsAirVelDs","text":"<p>Type: float</p> <p>Specified air velocity design.</p> Units Legal Range Default Required Variability fpm x \\(&gt;\\) 0 -1.0 No constant"},{"location":"input-data/ductseg/#dsexarea","title":"dsExArea","text":"<p>Type: float</p> <p>Duct segment surface area at outside face of insulation for flat duct shape, see above.</p> Units Legal Range Default Required Variability ft<sup>2</sup> x \\(\\ge\\) 0 none No constant"},{"location":"input-data/ductseg/#dsinarea","title":"dsInArea","text":"<p>Type: float</p> <p>Duct segment inside surface area (at duct wall, duct wall thickness assumed negligible) for round shaped duct.</p> Units Legal Range Default Required Variability ft<sup>2</sup> x \\(\\ge\\) 0 Derived from dsDiameter and dsLength (see above reduct shape) constant"},{"location":"input-data/ductseg/#dsdiameter","title":"dsDiameter","text":"<p>Type: float</p> <p>Duct segment round duct diameter (duct wall thickness assumed negligible)</p> Units Legal Range Default Required Variability ft x \\(\\ge\\) 0 Derived from dsInArea and dsLength (see above reduct shape) constant"},{"location":"input-data/ductseg/#dslength","title":"dsLength","text":"<p>Type: float</p> <p>Duct segment length.</p> Units Legal Range Default Required Variability ft x \\(\\ge\\) 0 Derived from dsInArea and dsDiameter (see above reduct shape) constant"},{"location":"input-data/ductseg/#dsexcnd","title":"dsExCnd","text":"<p>Type: choice</p> <p>Conditions surrounding duct segment.</p> Units Legal Range Default Required Variability ADIABATIC, AMBIENT, SPECIFIEDT, ADJZN ADJZN No constant"},{"location":"input-data/ductseg/#dsadjzn","title":"dsAdjZn","text":"<p>Type: znName</p> <p>Name of zone surrounding duct segment; used only when dsExCon is ADJZN. Can be the same as a zone served by the RSYS owning the duct segment.</p> Units Legal Range Default Required Variability name of a ZONE none Required when dsExCon = ADJZN constant"},{"location":"input-data/ductseg/#dsepslw","title":"dsEpsLW","text":"<p>Type: float</p> <p>Exposed (i.e. insulation) outside surface exterior long wave (thermal) emittance.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1 0.9 No constant"},{"location":"input-data/ductseg/#dsext","title":"dsExT","text":"<p>Type: float</p> <p>Air dry-bulb temperature surrounding duct segment. </p> Units Legal Range Default Required Variability <sup>o</sup>F unrestricted none Required if sfExCnd = SPECIFIEDT hourly"},{"location":"input-data/ductseg/#dsinsulr","title":"dsInsulR","text":"<p>Type: float</p> <p>Insulation thermal resistance not including surface conductances. dsInsulR and dsInsulMat are used to calculate insulation thickness (see below).  Duct insulation is modeled as a pure conductance (no mass).</p> Units Legal Range Default Required Variability ft<sup>2</sup>-<sup>o</sup>F-hr / Btu x \\(\\ge\\) 0 0 No constant"},{"location":"input-data/ductseg/#dsinsulmat","title":"dsInsulMat","text":"<p>Type: matName</p> <p>Name of insulation MATERIAL. The conductivity of this material at 70 <sup>o</sup>F is combined with dsInsulR to derive the duct insulation thickness. If omitted, a typical fiberglass material is assumed having conductivity of 0.025 Btu/hr-ft<sup>2</sup>-F at 70 <sup>o</sup>F and a conductivity coefficient of .00418 1/F (see MATERIAL). In addition, insulation conductivity is adjusted during the simulation in response its average temperature.  As noted with dsInsulR, duct insulation is modeled as pure conductance -- MATERIAL matDens and matSpHt are ignored.</p> Units Legal Range Default Required Variability name of a MATERIAL fiberglass No constant"},{"location":"input-data/ductseg/#dsleakf","title":"dsLeakF","text":"<p>Type: float</p> <p>Duct leakage. Return duct leakage is modeled as if it all occurs at the segment inlet. Supply duct leakage is modeled as if it all occurs at the outlet.</p> Units Legal Range Default Required Variability 0 \\(&lt;\\) x \\(\\le\\) 1 none No constant"},{"location":"input-data/ductseg/#dsexh","title":"dsExH","text":"<p>Type: float</p> <p>Outside (exposed) surface convection coefficient.</p> Units Legal Range Default Required Variability Btuh/ft<sup>2</sup>-<sup>o</sup>F x \\(\\ge\\) 0 .54 No subhourly"},{"location":"input-data/ductseg/#endductseg","title":"endDuctSeg","text":"<p>Optionally indicates the end of the DUCTSEG definition.</p> Units Legal Range Default Required Variability none No constant <p>Related Probes:</p> <ul> <li>@ductSeg</li> <li>@izXfer (generated as \"\\&lt;Zone Name&gt;-DLkI\" for supply or \"\\&lt;Zone Name&gt;-DLkO\" for return)</li> </ul>"},{"location":"input-data/export/","title":"EXPORT","text":"<p>Exports contain the same information as CSE reports, but in a \"comma-quote\" format intended for reading into a spreadsheet or other program for further processing, plotting, special print formatting, etc.</p> <p>No exports are generated by default; each desired export must be specified with an EXPORT object.</p> <p>Each row of an export contains several values, separated by commas, with quotes around string values. The row is terminated with a carriage return/line feed character pair. The first fields of the row identify the data. Multiple fields are used as necessary to identify the data. For example, the rows of an hourly ZEB export begin with the month, day of month, and hour of day. In contrast, reports, being subject to a width limitation, use only a single column of each row to identify the data; additional identification is put in the header. For example, an hourly ZEB Report shows the hour in a column and the day and month in the header; the header is repeated at the start of each day. The header of an export is never repeated.</p> <p>Depending on your application, if you specify multiple exports, you may need to place each in a separate file. Generate these files with EXPORTFILE, preceding section. You may also need to suppress the export header and/or footer, with exHeader and/or exFooter, described in this section.</p> <p>Input for EXPORTs is similar to input for REPORTs; refer to the REPORT description in Section 5.25 for further discussion of the members shown here.</p>"},{"location":"input-data/export/#exname","title":"exName","text":"<p>Name of export. Give after the word EXPORT.</p> Units Legal Range Default Required Variability 63 characters none No constant"},{"location":"input-data/export/#exexportfile","title":"exExportfile","text":"<p>Type: fname</p> <p>Name of export file to which current export will be written. If omitted, if EXPORT is within an EXPORTFILE object, report will be written to that export file, or else to the automatically-supplied EXPORTFILE \"Primary\", which by default uses the name of the input file with the extension .csv.</p> Units Legal Range Default Required Variability name of an  EXPORTFILE current EXPORTFILE, if any, else 'Primary' No constant"},{"location":"input-data/export/#extype","title":"exType","text":"<p>Type: choice</p> <p>Choice indicating export type. See descriptions in Section 5.22, REPORT. While not actually disallowed, use of exType = ERR, LOG, INP, or ZDD is unexpected.</p> Units Legal Range Default Required Variability ZEB, ZST, MTR, DHWMTR, AH, UDT, or SUM none Yes constant"},{"location":"input-data/export/#exfreq","title":"exFreq","text":"<p>Type: choice</p> <p>Export Frequency: specifies interval for generating rows of export data:</p> Units Legal Range Default Required Variability YEAR, MONTH, DAY, HOUR, HOURANDSUB, SUBHOUR none Yes constant"},{"location":"input-data/export/#exdaybeg","title":"exDayBeg","text":"<p>Type: date</p> <p>Initial day of export. Exports for which exFreq = YEAR do not allow specification of exDayBeg and exDayEnd; for MONTH exports, these members are optional and default to include the entire run; for DAY and shorter-interval exports, exDayBeg is required and exDayEnd defaults to exDayBeg.</p> Units Legal Range Default Required Variability date first day of simulation if exFreq = MONTH Required for exTypes ZEB, ZST, MTR, AH, and UDT if exFreq is DAY, HOUR, HOURANDSUB, or SUBHOUR constant"},{"location":"input-data/export/#exdayend","title":"exDayEnd","text":"<p>Type: date</p> <p>Final day of export period, except for YEAR exports.</p> Units Legal Range Default Required Variability date last day of simulation if exFreq= MONTH, else exDayBeg No constant"},{"location":"input-data/export/#exzone","title":"exZone","text":"<p>Type: znName</p> <p>Name of ZONE for which a ZEB, ZST, or ZDD export is being requested; ALL and SUM are also allowed except with exType = ZST.</p> Units Legal Range Default Required Variability name of a ZONE, ALL, SUM none Required for exTypes ZDD, ZEB, and ZST. constant"},{"location":"input-data/export/#exmeter","title":"exMeter","text":"<p>Type: mtrName</p> <p>Specifies meter(s) whose data is to be exported, for exType=MTR.</p> Units Legal Range Default Required Variability name of a METER, ALL, SUM none for exType=MTR constant"},{"location":"input-data/export/#extu","title":"exTu","text":"<p>Type: tuName</p> <p>Specifies air handler(s) to be reported, for rpType=TUSIZE or TULOAD.</p> Units Legal Range Default Required Variability name of a TERMINAL, ALL, SUM Required for rpType constant"},{"location":"input-data/export/#exdhwmeter","title":"exDHWMeter","text":"<p>Type: dhwMtrName</p> <p>Specifies DHW meter(s) whose data is to be exported, for exType=DHWMTR.</p> Units Legal Range Default Required Variability name of a DHWMETER, ALL, SUM none for exType=DHWMTR constant"},{"location":"input-data/export/#exafmeter","title":"exAFMeter","text":"<p>Type: afMtrName</p> <p>Air flow meter report.</p> Units Legal Range Default Required Variability Name of AFMETER 0 No runly"},{"location":"input-data/export/#exah","title":"exAh","text":"<p>Type: ahName</p> <p>Specifies air handler(s) to be exported, for exType=AH.</p> Units Legal Range Default Required Variability name of an AIRHANDLER, ALL, SUM none for exType=AH constant"},{"location":"input-data/export/#exbtusf","title":"exBtuSf","text":"<p>Type: float</p> <p>Scale factor used for exported energy values.</p> Units Legal Range Default Required Variability any multiple of ten 1,000,000: energy exported in MBtu. No constant"},{"location":"input-data/export/#excond","title":"exCond","text":"<p>Type: expression</p> <p>Conditional exporting flag. If given, export rows are generated only when value of expression is non-0. Allowed with exTypes ZEB, ZST, MTR, AH, and UDT.</p> Units Legal Range Default Required Variability any numeric expression 1 (exporting enabled) No subhour /end of interval"},{"location":"input-data/export/#extitle","title":"exTitle","text":"<p>Type: string</p> <p>Title for use in export header of User-Defined export. Disallowed if exType is not UDT.</p> Units Legal Range Default Required Variability User-defined Export No constant"},{"location":"input-data/export/#exheader","title":"exHeader","text":"<p>Type: choice</p> <p>Use NO to suppress the export header which gives the export type, zone, meter, or air handler being exported, time interval, column headings, etc. You might do this if the export is to be subsequently imported to a program that is confused by the header information. Alternatively, one may use COLUMNSONLY to print only the column headings. This can be useful when plotting CSV data in a spreadsheet tool or DView.</p> <p>The choices YESIFNEW and COLUMNSONLYIFNEW cause header generation when the associated EXPORTFILE is being created but suppress headers when appending to an existing file.  This is useful for accumulating results from a set of runs where typically column headings are desired only once.</p> <p>If not suppressed, the export header shows, in four lines:</p> <p>runTitle and runSerial (see Section 5.1);the run date and time the export type (\"Energy Balance\", \"Statistics\", etc., or exTitle if given)and frequency (\"year\", \"day\", etc.)a list of field names in the order they will be shown in the data rows(\"Mon\", \"Day\", \"Tair\", etc.)</p> <p>The specific month, day, etc. is NOT shown in the export header (as it is shown in the report header), because it is shown in each export row.</p> <p>The field names may be used by a program reading the export to identify the data in the rows which follow; if the program does this, it will not require modification when fields are added to or rearranged in the export in a future version of CSE.</p> Units Legal Range Default Required Variability YES, YESIFNEW, NO, COLUMNSONLY, COLUMNSONLYIFNEW YES No constant"},{"location":"input-data/export/#exfooter","title":"exFooter","text":"<p>Type: choice</p> <p>Use NO to suppress the blank line otherwise output as an export \"footer\". (Exports do not receive the total lines that most reports receive as footers.)</p> Units Legal Range Default Required Variability YES, NO YES No constant"},{"location":"input-data/export/#endexport","title":"endExport","text":"<p>Optionally indicates the end of the export definition. Alternatively, the end of the export definition can be indicated by END or by beginning another object.</p> Units Legal Range Default Required Variability none No constant <p>Related Probes:</p> <ul> <li>@export</li> </ul>"},{"location":"input-data/exportcol/","title":"EXPORTCOL","text":"<p>Each EXPORTCOL defines a single datum of a User Defined Table (UDT) export; EXPORTCOLs are not used with other export types.</p> <p>Use as many EXPORTCOLs as there are values to be shown in each row of the user-defined export. The values will appear in the order defined in each data row output. Be sure to include values needed to identify the data, such as the month, day, and hour, as appropriate -- these are NOT automatically supplied in user-defined exports.</p> <p>EXPORTCOL members are similar to the corresponding REPORTCOL members. See Section 5.265.1.5 for further discussion.</p>"},{"location":"input-data/exportcol/#colname","title":"colName","text":"<p>Name of EXPORTCOL.</p> Units Legal Range Default Required Variability 63 characters none No constant"},{"location":"input-data/exportcol/#colexport","title":"colExport","text":"<p>Type: exName</p> <p>Name of export to which this column belongs. If the EXPORTCOL is given within an EXPORT object, then colExport defaults to that export.</p> Units Legal Range Default Required Variability name of an EXPORT current export, if any Unless in an EXPORT constant"},{"location":"input-data/exportcol/#colval","title":"colVal","text":"<p>Type: expression</p> <p>Value to show in this position in each row of export.</p> Units Legal Range Default Required Variability any numeric or string expression none Yes subhour /end interval"},{"location":"input-data/exportcol/#colhead","title":"colHead","text":"<p>Type: string</p> <p>Text used for field name in export header.</p> Units Legal Range Default Required Variability colName or blank No constant"},{"location":"input-data/exportcol/#colwid","title":"colWid","text":"<p>Type: int</p> <p>Maximum width. Leading and trailing spaces and non-significant zeroes are removed from export data to save file space. Specifying a colWid less than the default may reduce the maximum number of significant digits output.</p> Units Legal Range Default Required Variability x \\(\\ge\\) 0 13 No constant"},{"location":"input-data/exportcol/#coldec","title":"colDec","text":"<p>Type: int</p> <p>Number of digits after decimal point.</p> Units Legal Range Default Required Variability x \\(\\ge\\) 0 flexible format No constant"},{"location":"input-data/exportcol/#coljust","title":"colJust","text":"<p>Type: choice</p> <p>Specifies positioning of data within column:</p> Left Left justified Right Right justified"},{"location":"input-data/exportcol/#endexportcol","title":"endExportCol","text":"<p>Optionally indicates the end of the EXPORTCOL. Alternatively, the end of the definition can be indicated by END or by beginning another object.</p> Units Legal Range Default Required Variability none No constant <p>Related Probes:</p> <ul> <li>@exportCol</li> </ul>"},{"location":"input-data/exportfile/","title":"EXPORTFILE","text":"<p>EXPORTFILE allows optional specification of different or additional files to receive CSE EXPORTs.</p> <p>EXPORTs contain the same information as reports, but formatted for reading by other programs rather than by people. By default, CSE generates no exports. Exports are specified via the EXPORT object, described in Section 5.28 (next). As for REPORTs, CSE automatically supplies a primary export file; it has the same name and path as the input file, and extension .csv.</p> <p>Input for EXPORTFILEs and EXPORTs is similar to that for REPORTFILEs and REPORTs, except that there is no page formatting. Refer to their preceding descriptions (Sections 5.24 and 5.25) for more additional discussion.</p>"},{"location":"input-data/exportfile/#xfname","title":"xfName","text":"<p>Name of EXPORTFILE object.</p> Units Legal Range Default Required Variability 63 characters none No constant"},{"location":"input-data/exportfile/#xffilename","title":"xfFileName","text":"<p>Type: string</p> <p>path name of file to be written. If no path is specified, the file is written in the current directory. If no extension is specified, .csv is used.</p> Units Legal Range Default Required Variability file name, path and extension optional none Yes constant"},{"location":"input-data/exportfile/#xffilestat","title":"xfFileStat","text":"<p>Type: choice</p> <p>What CSE should do if file xfFileName already exists:</p> OVERWRITE Overwrite pre-existing file. NEW Issue error message if file exists. APPEND Append new output to present contents of existing file. <p>If the specified file does not exist, it is created and xfFileStat has no effect.</p> Units Legal Range Default Required Variability OVERWRITE, NEW, APPEND OVERWRITE No constant"},{"location":"input-data/exportfile/#endexportfile","title":"endExportFile","text":"<p>Optionally indicates the end of the export file definition. Alternatively, the end of the Export file definition can be indicated by END or by beginning another object.</p> Units Legal Range Default Required Variability none No constant <p>Related Probes:</p> <ul> <li>@exportFile</li> </ul>"},{"location":"input-data/fndblock/","title":"FNDBLOCK","text":"<p>Foundation blocks are materials within the two-dimensional domain beyond those defined by TOP soil properties, the parent FOUNDATION object, and floor and wall SURFACEs. Common examples of using FNDBLOCKs include representing:</p> <ul> <li>Perimeter slab insulation</li> <li>Slab gap insulation</li> <li>Partial interior wall insulation</li> <li>Exterior horizontal or vertical insulation</li> <li>Concrete footings</li> </ul> <p>Each block is represented as a rectangle in the domain by specifying the X (lateral) and Z (vertical) coordinates of two opposite corners. It does not matter which of the four corners of a block are used to define the two points as long as they are opposite corners. The coordinate system for each point is relative to the X and Z references defined by the user. By convention, the positive X direction is away from the building, and the positive Z direction is down. FNDBLOCKs that overlap materials defined by TOP, FOUNDATION, SURFACE objects, or previously defined FNDBLOCKs will override the thermal properties within the extents of the FNDBLOCK.</p> <p>Each corner point of a FNDBLOCK is defined relative to its reference point. The user may specify reference points to simplify the calculation of corner point coordinates. X and Z point values of zero imply that a point is the same as the reference point. The default for X and Z point values is zero since points will often align with one or both of the reference values. Options for X and Z references are illustrated in the figure below.</p> <p></p> <p>Foundation block reference choices</p> <p>The default X and Z references for the first corner point is WALLINT and WALLTOP, respectively. The second set of references default to the same reference as the first point.</p> <p>An example of defining FNDBLOCKs for a basement are shown below.</p> <p></p> <p>Foundation block example for a basement with partial wall insulation</p> <p>The example for a slab foundation shown below illustrates how leveraging default values can simplify user input.</p> <p></p> <p>Foundation block example for a slab with gap and inerior perimeter insulation</p>"},{"location":"input-data/fndblock/#fbmat","title":"fbMat","text":"<p>Type: matName</p> <p>Name of MATERIAL of the foundation block.</p> Units Legal Range Default Required Variability \u2014 Name of a Material none Yes constant"},{"location":"input-data/fndblock/#fbx1ref","title":"fbX1Ref","text":"<p>Type: choice</p> <p>Relative X origin for fbX1 point. Options are:</p> <ul> <li>SYMMETRY</li> <li>WALLINT</li> <li>WALLCENTER</li> <li>WALLEXT</li> <li>FARFIELD</li> </ul> Units Legal Range Default Required Variability choices above WALLINT No constant"},{"location":"input-data/fndblock/#fbz1ref","title":"fbZ1Ref","text":"<p>Type: choice</p> <p>Relative Z origin for fbZ1 point. Options are:</p> <ul> <li>WALLTOP</li> <li>GRADE</li> <li>SLABTOP</li> <li>SLABBOTTOM</li> <li>WALLBOTTOM</li> <li>DEEPGROUND</li> </ul> Units Legal Range Default Required Variability choices above WALLTOP No constant"},{"location":"input-data/fndblock/#fbx1","title":"fbX1","text":"<p>Type: float</p> <p>The X position of the first corner of the block relative to fbX1Ref.</p> Units Legal Range Default Required Variability ft 0.0 No constant"},{"location":"input-data/fndblock/#fbz1","title":"fbZ1","text":"<p>Type: float</p> <p>The Z position of the first corner of the block relative to fbZ1Ref.</p> Units Legal Range Default Required Variability ft 0.0 No constant"},{"location":"input-data/fndblock/#fbx2ref","title":"fbX2Ref","text":"<p>Type: choice</p> <p>Relative X origin for fbX2 point. Options are:</p> <ul> <li>SYMMETRY</li> <li>WALLINT</li> <li>WALLCENTER</li> <li>WALLEXT</li> <li>FARFIELD</li> </ul> Units Legal Range Default Required Variability choices above same as fbX1Ref No constant"},{"location":"input-data/fndblock/#fbz2ref","title":"fbZ2Ref","text":"<p>Type: choice</p> <p>Relative Z origin for fbZ2 point. Options are:</p> <ul> <li>WALLTOP</li> <li>GRADE</li> <li>SLABTOP</li> <li>SLABBOTTOM</li> <li>WALLBOTTOM</li> <li>DEEPGROUND</li> </ul> Units Legal Range Default Required Variability choices above same as fbZ1Ref No constant"},{"location":"input-data/fndblock/#fbx2","title":"fbX2","text":"<p>Type: float</p> <p>The X position of the second corner of the block relative to fbX2Ref.</p> Units Legal Range Default Required Variability ft 0.0 No constant"},{"location":"input-data/fndblock/#fbz2","title":"fbZ2","text":"<p>Type: float</p> <p>The Z position of the second corner of the block relative to fbZ2Ref.</p> Units Legal Range Default Required Variability ft 0.0 No constant"},{"location":"input-data/fndblock/#endfndblock","title":"endFndBlock","text":"<p>Indicates the end of the foundation block definition. Alternatively, the end of the foundation block definition can be indicated by the declaration of another object or by END.</p> Units Legal Range Default Required Variability none No constant"},{"location":"input-data/foundation/","title":"FOUNDATION","text":"<p>Foundation describes the two-dimensional relationship between ground-contact SURFACEs (i.e., sfExCnd = GROUND) and the surrounding ground. A FOUNDATION is referenced by ground-contact floor SURFACEs (see sfFnd). FOUNDATIONs are used to describe the two-dimensional features of foundation designs that cannot be captured by the typical one-dimensional CONSTRUCTIONs. The dimensions from the one-dimensional CONSTRUCTIONs associated with ground-contact floors and walls are automatically interpreted into the two-dimensional context.</p> <p></p> <p>Two-dimensional context for a slab foundation</p> <p></p> <p>Two-dimensional context with below grade walls</p> <p>Any ground-contact wall SURFACEs in contact with the ground must refer to a Floor SURFACE object (see sfFndFloor) to indicate which floor shares the same ground boundary condition in the two-dimensional context.</p> <p>MATERIALs used in a FOUNDATION cannot have variable properties at this time.</p> <p>Some of the relevant dimensions and properties in the two-dimensional context are defined in the FOUNDATION object (and FNDBLOCK subobjects), but several others are specified by the corresponding SURFACE objects:</p> <ul> <li>sfFnd</li> <li>sfFndFloor</li> <li>sfHeight</li> <li>sfExpPerim</li> <li>sfCon</li> </ul> <p>Some properties applying to all FOUNDATIONs are defined at the TOP level:</p> <ul> <li>soilCond</li> <li>soilSpHt</li> <li>soilDens</li> <li>grndEmiss</li> <li>grndRefl</li> <li>grndRf</li> <li>farFieldWidth</li> <li>deepGrndCnd</li> <li>deepGrndDepth</li> <li>deepGrndT</li> <li>grndMinDim</li> <li>grndMaxGrthCoeff</li> <li>grndTimeStep</li> </ul> <p>The following data members describe the dimensions and properties of the structural foundation wall. The height of the foundation wall (from the top of the wall to the top of the slab) is defined by sfHeight in wall SURFACEs that specify the same sfFndFloor that references the FOUNDATION (through sfFnd).</p> <p>Other components of the foundation design (e.g., interior/exterior insulation) as well as other variations in thermal properties within the ground are defined using FNDBLOCK (foundation block) objects. Any number of FNDBLOCKs can appear after the definition of a FOUNDATION to be properly associated.</p>"},{"location":"input-data/foundation/#fdname","title":"fdName","text":"<p>Name of foundation; give after the word FOUNDATION. Required for reference from SURFACE objects.</p> Units Legal Range Default Required Variability \u2014 63 characters none Yes constant"},{"location":"input-data/foundation/#fdwlhtabvgrd","title":"fdWlHtAbvGrd","text":"<p>Type: float</p> <p>Distance between the grade level and the top of the foundation wall.</p> Units Legal Range Default Required Variability ft x \\(\\geq\\) 0 0.5 No constant"},{"location":"input-data/foundation/#fdwldpblwslb","title":"fdWlDpBlwSlb","text":"<p>Type: float</p> <p>Distance between the bottom of the slab and the bottom of the foundation wall. Foundation walls typically extend to the bottom of the slab and rest on a footing. If the footing isn't explicitly modeled as a FNDBLOCK, this value can be extended to approximate the footing.</p> Units Legal Range Default Required Variability ft x \\(\\geq\\) 0 0.0 No constant"},{"location":"input-data/foundation/#fdwlcon","title":"fdWlCon","text":"<p>Type: conName</p> <p>Name of the CONSTRUCTION for the structural foundation wall. In the two-dimensional context, this construction spans from the top of the foundation wall to its depth below the slab (fdWlDpBlwSlb). Any construction on the interior of the wall (spanning from the top of the foundation wall to the top of the slab), must be defined by the sfCon of the corresponding wall surface. Typically, this CONSTRUCTION will be a single layer of poured concrete.</p> Units Legal Range Default Required Variability \u2014 Name of a Construction none Yes constant"},{"location":"input-data/foundation/#endfoundation","title":"endFoundation","text":"<p>Indicates the end of the foundation definition. Alternatively, the end of the foundation definition can be indicated by the declaration of another object or by END.</p> Units Legal Range Default Required Variability none No constant"},{"location":"input-data/gain/","title":"GAIN","text":"<p>A GAIN object adds sensible and/or latent heat to the ZONE, and/or adds arbitrary energy use to a METER. GAINs may be subobjects of ZONEs and are normally given within the input for their ZONE.  As many GAINs as desired (or none) may be given for each ZONE.  Alternatively, GAINs may be subobjects of TOP and specify gnZone to specify their associate zone.</p> <p>Each gain has an amount of power (gnPower), which may optionally be accumulated to a METER (gnMeter). The power may be distributed to the zone, plenum, or return as sensible heat with an optional fraction radiant, or to the zone as latent heat (moisture addition), or not.</p>"},{"location":"input-data/gain/#gain-zones","title":"Gain zones","text":"<p>The gain to the zone may be further divided into convective sensible, radiant sensible and latent heat via the gnFrRad and gnFrLat members; the plenum and return gains are assumed all convective sensible.</p> <p>In the CNE zone mode, the radiant internal gain is distributed to the surfaces in the zone, rather than going directly to the zone \"air\" heat capacity (znCAir). A simple model is used -- all surfaces are assumed to be opaque and to have the same (infrared) absorptivity -- even windows. Along with the assumption that the zone is spherical (implicit in the current treatment of solar gains), this allows distribution of gains to surfaces in proportion to their area, without any absorptivity or transmissivity calculations. The gain for windows and quick-model surfaces is assigned to the znCAir, except for the portion which conducts through the surface to the other side rather than through the surface film to the adjacent zone air; the gain to massive (delayed-model) surfaces is assigned to the side of surface in the zone with the gain.</p> <p>Radiant internal gains are included in the IgnS (Sensible Internal Gain) column in the zone energy balance reports. (They could easily be shown in a separate IgnR column if desired.) Any energy transfer shows two places in the ZEB report, with opposite signs, so that the result is zero -- otherwise it wouldn't be an energy balance. The rest of the reporting story for radiant internal gains turns out to be complex. The specified value of the radiant gain (gnPower * gnFrZn * gnFrRad) shows in the IgnS column. To the extent that the gain heats the zone, it also shows negatively in the Masses column, because the zone CAir is lumped with the other masses. To the extent that the gain heats massive surfaces, it also shows negatively in the masses column. To the extent that the gain conducts through windows and quick-model surfaces, it shows negatively in the Conduction column. If the gain conducts through a quick-model surface to another zone, it shows negatively in the Izone (Interzone) column, positively in the Izone column of the receiving zone, and negatively in the receiving zone's Masses or Cond column.</p>"},{"location":"input-data/gain/#gnname","title":"gnName","text":"<p>Name of gain; follows the word GAIN if given.</p> Units Legal Range Default Required Variability 63 characters none No constant"},{"location":"input-data/gain/#gnzone","title":"gnZone","text":"<p>Type: znName</p> <p>Name of ZONE to which heat gains are added.  Omitted when GAIN is given as a ZONE subobject.  If a TOP subobject (i.e., not a ZONE subobject) and znZone is omitted, heat gains are discarded but energy use is still recorded to gnMeter.  This feature can be used to represent energy uses that our outside of conditioned zones (e.g. exterior lighting).</p> Units Legal Range Default Required Variability name of ZONE parent zone if any No constant"},{"location":"input-data/gain/#gnpower","title":"gnPower","text":"<p>Type: float</p> <p>Rate of heat addition/energy use. Negative gnPower values may be used to represent heat removal/energy generation. Expressions containing functions are commonly used with this member to schedule the gain power on a daily and/or hourly basis. Refer to the functions section in Section 4 for details and examples.</p> <p>All gains, including electrical, are specified in Btuh units unless associated with DHW use (see gnCtrlDHWSYS), in which case gnPower is specified in Btuh/gal.  Note that meter reporting of internal gain is in MBtu (millions of Btu) by default.  </p> Units Legal Range Default Required Variability Btuh no restrictions none Yes hourly"},{"location":"input-data/gain/#gnmeter","title":"gnMeter","text":"<p>Type: choice</p> <p>Name of meter by which this GAIN's gnPower is recorded. If omitted, gain is assigned to no meter and energy use is not accounted in CSE simulation reports; thus, gnMeter should only be omitted for \"free\" energy sources.</p> Units Legal Range Default Required Variability name of METER none No constant"},{"location":"input-data/gain/#gnenduse","title":"gnEndUse","text":"<p>Type: choice</p> <p>Meter end use to which the GAIN's energy use should be accumulated.</p> Clg Cooling Htg Heating (includes heat pump compressor) HPBU Heat pump resistance heating (backup and defrost) DHW Domestic (service) hot water DHWBU Domestic (service) hot water heating backup (HPWH resistance) DHWMFL Domestic (service) hot water heating multi-family loop pumping and loss makeup FANC Fans, AC and cooling ventilation FANH Fans, heating FANV Fans, IAQ venting FAN Fans, other purposes AUX HVAC auxiliaries such as pumps PROC Process LIT Lighting RCP Receptacles EXT Exterior lighting REFR Refrigeration DISH Dishwashing DRY Clothes drying WASH Clothes washing COOK Cooking USER1 User-defined category 1 USER2 User-defined category 2 BT Battery charge power PV Photovoltaic power generation Units Legal Range Default Required Variability Codes listed above none Required if gnMeter is given constant <p>The gnFrZn, gnFrPl, and gnFrRtn members allow you to allocate the gain among the zone, the zone's plenum, and the zone's return air flow. Values that total to more than 1.0 constitute an error. If they total less than 1, the unallocated portion of the gain is recorded by the meter (if specified) but not transferred into the building. By default, all of the gain not directed to the return or plenum goes to the zone.</p>"},{"location":"input-data/gain/#gnfrzn","title":"gnFrZn","text":"<p>Type: float</p> <p>Fraction of gain going to zone. gnFrLat (below) gives portion of this gain that is latent, if any; the remainder is sensible.</p> Units Legal Range Default Required Variability 0 \\(\\leq\\) x \\(\\leq\\) 1 1. No hourly"},{"location":"input-data/gain/#gnfrpl","title":"gnFrPl","text":"<p>Type: float</p> <p>Fraction of gain going to plenum.</p> Units Legal Range Default Required Variability gnFrZn + gnFrPl + gnFrRtn \\(\\leq\\) 1 0. No hourly"},{"location":"input-data/gain/#gnfrrtn","title":"gnFrRtn","text":"<p>Type: float</p> <p>Fraction of gain going to return.</p> Units Legal Range Default Required Variability gnFrZn + gnFrPl + gnFrRtn \\(\\leq\\) 1 0. No hourly"},{"location":"input-data/gain/#gnfrrad","title":"gnFrRad","text":"<p>Type: float</p> <p>Fraction of total gain going to zone (gnFrZn) that is radiant rather than convective or latent.</p> Units Legal Range Default Required Variability 0 \\(\\leq\\) x \\(\\leq\\) 1 0.0 No hourly"},{"location":"input-data/gain/#gnfrlat","title":"gnFrLat","text":"<p>Type: float</p> <p>Fraction of total gain going to zone (gnFrZn) that is latent heat (moisture addition).</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1 0.0 No hourly"},{"location":"input-data/gain/#gndlfrpow","title":"gnDlFrPow","text":"<p>Type: float</p> <p>Hourly power reduction factor, typically used to modify lighting power to account for daylighting.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1 1.0 No hourly"},{"location":"input-data/gain/#gnctrldhwsys","title":"gnCtrlDHWSYS","text":"<p>Type: dhwsysName</p> <p>Name of a DHWSYS whose water use modulates gnPower.  For example, electricity use of water-using appliances (e.g. dishwasher or clothes washer) can be modeled based on water use, ensuring that the uses are synchronized.  When this feature is used, gnPower should be specified in Btuh/gal.</p> Units Legal Range Default Required Variability name of a DHWSYS no DHWSYS/GAIN linkage No constant"},{"location":"input-data/gain/#gnctrldhwmeter","title":"gnCtrlDHWMETER","text":"<p>Type: dhwMtrName</p> <p>Allows gains to track water usage such as dishwashers, clothes washers, etc.</p> Units Legal Range Default Required Variability name of DHWMETER 0 No constant"},{"location":"input-data/gain/#gnctrldhwenduse","title":"gnCtrlDHWEndUse","text":"<p>Type: dhwEndUseName</p> <p>Name of the DHWSYS end use consumption that modulates gnPower.  See DHWMETER for DHW end use definitions.</p> Units Legal Range Default Required Variability DHW end use Total No constant"},{"location":"input-data/gain/#endgain","title":"endGain","text":"<p>Optional to indicate the end of the GAIN definition. Alternatively, the end of the gain definition can be indicated by END or by the declaration of another object.</p> Units Legal Range Default Required Variability none No constant <p>Related Probes:</p> <ul> <li>@gain</li> </ul>"},{"location":"input-data/glazetype/","title":"GLAZETYPE","text":"<p>GLAZETYPE constructs an object of class GLAZETYPE that represents a glazing type for use in WINDOWs.</p>"},{"location":"input-data/glazetype/#gtname","title":"gtName","text":"<p>Name of glazetype. Required for reference from WINDOW objects, below.</p> Units Legal Range Default Required Variability 63 characters none Yes constant"},{"location":"input-data/glazetype/#gtmodel","title":"gtModel","text":"<p>Type: choice</p> <p>Selects model to be used for WINDOWs based on this GLAZETYPE.</p> Units Legal Range Default Required Variability SHGC, ASHWAT SHGC No constant"},{"location":"input-data/glazetype/#gtu","title":"gtU","text":"<p>Type: float</p> <p>Glazing conductance (U-factor without surface films, therefore not actually a U-factor but a C-factor). Used as wnU default; an error message will be issued if the U value is not given in the window (wnU) nor in the glazeType (gtU).  Preferred Approach: To use accurately with standard winter rated U-factor from ASHRAE or NFRC enter as:</p> <pre><code>    gtU = (1/((1/U-factor)-0.85)\n</code></pre> <p>Where 0.85 is the sum of the interior (0.68) and exterior (0.17) design air film resistances assumed for rating window U-factors. Enter wnInH (usually 1.5=1/0.68) instead of letting it default. Enter the wnExH or let it default. It is important to use this approach if the input includes gnFrad for any gain term. Using approach 2 below will result in an inappropriate internal gain split at the window.</p> <p>Approach 2. Enter gtU=U-factor and let the wnInH and wnExH default. This approach systematically underestimates the window U-factor because it adds the wnExfilm resistance to 1/U-factor thereby double counting the exterior film resistance. This approach will also yield incorrect results for gnFrad internal gain since the high wnInH will put almost all the gain back in the space.</p> Units Legal Range Default Required Variability Btuh/ft<sup>2</sup>-<sup>o</sup>F x \\(&gt;\\) 0 none No constant"},{"location":"input-data/glazetype/#gtunfrc","title":"gtUNFRC","text":"<p>Type: float</p> <p>Fenestration system (including frame) U-factor evaluated at NFRC heating conditions. For ASHWAT windows, a value for the NFRC U-factor is required, set via gtUNFRC or wnUNFRC.</p> Units Legal Range Default Required Variability Btuh/ft<sup>2</sup>-<sup>o</sup>F x \\(&gt;\\) 0 none No constant"},{"location":"input-data/glazetype/#gtshgc","title":"gtSHGC","text":"<p>Type: float</p> <p>Glazing Solar Heat Gain Coefficient: fraction of normal beam insolation which gets through glass to space inside. We recommend using this to represent the glass normal transmissivity characteristic only, before shading and framing effects</p> Units Legal Range Default Required Variability fraction 0 \\(\\leq\\) x \\(\\leq\\) 1 none Yes constant"},{"location":"input-data/glazetype/#gtsmso","title":"gtSMSO","text":"<p>Type: float</p> <p>SHGC multiplier with shades open. May be overriden in the specific window input.</p> Units Legal Range Default Required Variability fraction 0 \\(\\leq\\) x \\(\\leq\\) 1 1.0 No Monthly - Hourly"},{"location":"input-data/glazetype/#gtsmsc","title":"gtSMSC","text":"<p>Type: float</p> <p>SHGC multiplier with shades closed. May be overriden in the specific window input.</p> Units Legal Range Default Required Variability fraction 0 \\(\\leq\\) x \\(\\leq\\) 1 gtSMSO (no shades) No Monthly - Hourly"},{"location":"input-data/glazetype/#gtfmult","title":"gtFMult","text":"<p>Type: float</p> <p>Framing multiplier used if none given in window, for example .9 if frame and mullions reduce the solar gain by 10%. Default of 1.0 implies frame/mullion effects allowed for in gtSHGC's or always specified in Windows.</p> Units Legal Range Default Required Variability fraction 0 \\(\\leq\\) x \\(\\leq\\) 1 gtSHGCO No Monthly - Hourly"},{"location":"input-data/glazetype/#gtpyshgc","title":"gtPySHGC","text":"<p>Type: float</p> <p>Four float values separated by commas. Coefficients for incidence angle SHGC multiplier polynomial applied to gtSHGC to determine beam transmissivity at angles of incidence other than 90 degrees. The values are coefficients for first through fourth powers of the cosine of the incidence angle; there is no constant part. An error message will be issued if the coefficients do not add to one. They are used in the following computation:</p> <p>angle = incidence angle of beam radiation, measured from normal to glass.</p> <p>cosI = cos( angle)</p> <p>angMult = a*cosI + b*cosI^2 + c*cosI^3 + d*cosI^4</p> <p>beamXmisvty = gtSHGCO * angMult (shades open)</p> Units Legal Range Default Required Variability float any none Yes constant"},{"location":"input-data/glazetype/#gtdmshgc","title":"gtDMSHGC","text":"<p>Type: float</p> <p>SHGC diffuse multiplier, applied to gtSHGC to determine transmissivity for diffuse radiation.</p> Units Legal Range Default Required Variability fraction 0 \\(\\leq\\) x \\(\\leq\\) 1 none Yes constant"},{"location":"input-data/glazetype/#gtdmrbsol","title":"gtDMRBSol","text":"<p>Type: float</p> <p>SHGC diffuse multiplier, applied to qtSHGC to determine transmissivity for diffuse radiation reflected back out the window. Misnamed as a reflectance. Assume equal to DMSHGC if no other data available.</p> Units Legal Range Default Required Variability fraction 0 \\(\\leq\\) x \\(\\leq\\) 1 none Yes constant"},{"location":"input-data/glazetype/#gtnglz","title":"gtNGlz","text":"<p>Type: int</p> <p>Number of glazings in the Glazetype (bare glass only, not including any interior or exterior shades).</p> Units Legal Range Default Required Variability 0 \\(&lt;\\) x \\(\\leq\\) 4 2 No constant"},{"location":"input-data/glazetype/#gtexshd","title":"gtExShd","text":"<p>Type: choice</p> <p>Exterior shading type (ASHWAT only).</p> Units Legal Range Default Required Variability NONE INSCRN NONE No constant"},{"location":"input-data/glazetype/#gtinshd","title":"gtInShd","text":"<p>Type: choice</p> <p>Interior shade type (ASHWAT only).</p> Units Legal Range Default Required Variability NONE DRAPEMED NONE No constant"},{"location":"input-data/glazetype/#gtdirtloss","title":"gtDirtLoss","text":"<p>Type: float</p> <p>Glazing dirt loss factor.</p> Units Legal Range Default Required Variability fraction 0 \\(\\leq\\) x \\(\\leq\\) 1 0 No constant"},{"location":"input-data/glazetype/#endglazetype","title":"endGlazeType","text":"<p>Optional to indicates the end of the Glazetype. Alternatively, the end of the GLAZETYPE definition can be indicated by \"END\" or by beginning another object</p> Units Legal Range Default Required Variability none No constant <p>Related Probes:</p> <ul> <li>@glazeType</li> </ul>"},{"location":"input-data/heatplant/","title":"HEATPLANT","text":"<p>A HEATPLANT contains one or more BOILER subobjects (Section 5.20.1) and supports one or more Hot Water (HW) coils in TERMINALs and/or AIRHANDLERs, and/or heat exchangers in HPLOOPs (HPLOOPs are not implemented as of September 1992.). There can be more than one HEATPLANT in a simulation.</p> <p>BOILERs, HW coils, and heat exchangers are modeled with simple heat-injection models. There is no explicit modeling of circulating hot water temperatures and flows; it is always assumed the temperature and flow at each load (HW coil or heat exchanger) are sufficient to allow the load to transfer any desired amount of heat up to its capacity. When the total heat demand exceeds the plant's capacity, the model reduces the capacity of each load until the plant is not overloaded. The reduced capacity is the same fraction of rated capacity for all loads on the HEATPLANT; any loads whose requested heat is less than the reduced capacity are unaffected.</p> <p>The BOILERs in the HEATPLANT can be grouped into STAGES of increasing capacity. The HEATPLANT uses the first stage that can meet the load. The load is distributed among the BOILERs in the stage so that each operates at the same fraction of its rated capacity.</p> <p>For each HEATPLANT, piping loss is modeled, as a constant fraction of the BOILER capacity of the heatPlant's most powerful stage. This heat loss is added to the load whenever the plant is operating; as modeled, the heat loss is independent of load, weather, or any other variables.</p>"},{"location":"input-data/heatplant/#heatplantname","title":"heatplantName","text":"<p>Name of HEATPLANT object, given immediately after the word HEATPLANT. This name is used to refer to the heatPlant in tuhcHeatplant and ahhcHeatplant  commands.</p> Units Legal Range Default Required Variability 63 characters none Yes constant"},{"location":"input-data/heatplant/#hpsched","title":"hpSched","text":"<p>Type: choice</p> <p>Heat plant schedule: hourly variable choice of OFF, AVAIL, or ON.</p> OFF HEATPLANT will not supply hot water regardless of demand. All loads (HW coils and heat exchangers) should be scheduled off when the plant is off; an error will occur if a coil calls for heat when its plant is off. AVAIL HEATPLANT will operate when one or more loads demand heat. ON HEATPLANT runs unconditionally. When no load wants heat, least powerful (first) stage runs. Units Legal Range Default Required Variability OFF, AVAIL, or ON AVAIL No hourly"},{"location":"input-data/heatplant/#hppipelossf","title":"hpPipeLossF","text":"<p>Type: float</p> <p>Heat plant pipe loss: heat assumed lost from piping connecting boilers to loads whenever the HEATPLANT is operating, expressed as a fraction of the boiler capacity of the plant's most powerful stage.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1 0.01 No constant"},{"location":"input-data/heatplant/#hpstagen","title":"hpStageN","text":"<p>Type: boilerName list, ALL_BUT and boilerName list, or ALL</p> <p>The commands hpStage1 through hpStage7 allow specification of up to seven STAGES in which BOILERs are activated as the load increases. Each stage may be specified with a list of up to seven names of BOILERs in the HEATPLANT, or with the word ALL, meaning all of the HEATPLANT's BOILERs, or with the word ALL_BUT and a list of up to six names of BOILERs. Each stage should be more powerful than the preceding one. If you have less than seven stages, you may skip some of the commands hpStage1 through hpStage7 -- the used stage numbers need not be contiguous.</p> <p>If none of hpStage1 through hpStage7 are given, CSE supplies a single default stage containing all boilers.</p> <p>A comma must be entered between boiler names and after the word ALL_BUT.</p> Units Legal Range Default Required Variability 1 to 7 names;ALL_BUT and 1\u00a0to 6 names;ALL hpStage1 = ALL No constant"},{"location":"input-data/heatplant/#endheatplant","title":"endHeatplant","text":"<p>Optionally indicates the end of the HEATPLANT definition. Alternatively, the end of the definition can be indicated by END or by beginning another object.</p> Units Legal Range Default Required Variability none No constant <p>Related Probes:</p> <ul> <li>@heatPlant</li> </ul>"},{"location":"input-data/holiday/","title":"HOLIDAY","text":"<p>HOLIDAY objects define holidays. Holidays have no inherent effect, but input expressions can test for holidays via the <code>$DOWH</code>, <code>$isHoliday</code>, <code>$isHoliTrue</code>, <code>$isWeHol</code>, and <code>$isBegWeek</code> system variables (4.6.4).</p> <p>Examples and the list of default holidays are given after the member descriptions.</p>"},{"location":"input-data/holiday/#hdname","title":"hdName","text":"<p>Name of holiday:  must follow the word HOLIDAY. </p> Units Legal Range Default Required Variability 63 characters none Yes constant <p>A holiday may be specified by date or via a rule such as \"Fourth Thursday in November\". To specify by date, give hdDateTrue, and also hdDateObs or hdOnMonday if desired. To specify by rule, give all three of hdCase, hdMon, and hdDow.</p>"},{"location":"input-data/holiday/#hddatetrue","title":"hdDateTrue","text":"<p>Type: date</p> <p>The true date of a holiday, even if not celebrated on that day.</p> Units Legal Range Default Required Variability date blank No constant"},{"location":"input-data/holiday/#hddateobs","title":"hdDateObs","text":"<p>Type: date</p> <p>The date that a holiday will be observed. Allowed only if hdDateTrue given and hdOnMonday not given.</p> Units Legal Range Default Required Variability date hdDateTrue No constant"},{"location":"input-data/holiday/#hdonmonday","title":"hdOnMonday","text":"<p>Type: choice</p> <p>If YES, holiday is observed on the following Monday if the true date falls on a weekend. Allowed only if hdDateTrue given and hdDateObs not given.</p> <p>Note: there is no provision to celebrate a holiday that falls on a Saturday on Friday (as July 4 was celebrated in 1992).</p> Units Legal Range Default Required Variability YES/NO YES No constant"},{"location":"input-data/holiday/#hdcase","title":"hdCase","text":"<p>Type: choice</p> <p>Week of the month that the holiday is observed. hdCase, hdMon, and hdDow may be given only if hdDateTrue, hdDateObs, and hdOnMonday are not given.</p> Units Legal Range Default Required Variability FIRST SECOND THIRD FOURTH LAST FIRST No constant"},{"location":"input-data/holiday/#hdmon","title":"hdMon","text":"<p>Type: choice</p> <p>Month that the holiday is observed.</p> Units Legal Range Default Required Variability JAN, FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV, DEC none required if hdCase given constant"},{"location":"input-data/holiday/#hddow","title":"hdDow","text":"<p>Type: choice</p> <p>Day of the week that the holiday is observed.</p> Units Legal Range Default Required Variability SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY MONDAY required if hdCase given constant"},{"location":"input-data/holiday/#endholiday","title":"endHoliday","text":"<p>Indicates the end of the holiday definition. Alternatively, the end of the holiday definition can be indicated by \"END\" or simply by beginning another object.</p> Units Legal Range Default Required Variability none constant <p>Examples of valid HOLIDAY object specifications:</p> <ul> <li>Holiday on May first, observed date moved to following Monday if the first falls on a weekend (hdOnMonday defaults Yes).</li> </ul> <pre><code>    HOLIDAY MAYDAY;\n        hdDateTrue = May 1;\n</code></pre> <ul> <li>Holiday on May 1, observed on May 3.</li> </ul> <pre><code>    HOLIDAY MAYDAY;\n        hdDateTrue = May 1;\n        hdDateObs  = May 3;\n</code></pre> <ul> <li>Holiday observed on May 1 even if on a weekend.</li> </ul> <pre><code>    HOLIDAY MAYDAY;\n        hdDateTrue = May 1;\n        hdOnMonday = No;\n</code></pre> <ul> <li>Holiday observed on Wednesday of third week of March</li> </ul> <pre><code>    HOLIDAY HYPOTHET;\n        hdCase = third;\n        hdDow  = Wed;\n        hdMon  = MAR\n</code></pre> <p>As with reports, Holidays are automatically generated for a standard set of Holidays. The following are the default holidays automatically defined by CSE:</p> New Year's Day *January 1 M L King Day *January 15 President's Day 3<sup>rd</sup> Monday in February Memorial Day last Monday in May Fourth of July *July 4 Labor Day 1<sup>st</sup> Monday in September Columbus Day 2<sup>nd</sup> Monday in October Veterans Day *November 11 Thanksgiving 4<sup>th</sup> Thursday in November Christmas *December 25 <p>* observed on the following Monday if falls on a weekend, except as otherwise noted:</p> <p>If a particular default holiday is not desired, it can be removed with a DELETE statement:</p> <pre><code>    DELETE HOLIDAY Thanksgiving\n\n    DELETE HOLIDAY \"Columbus Day\"  // Quotes necessary (due to space)\n\n    DELETE HOLIDAY \"VETERANS DAY\"  // No case-sensitivity\n</code></pre> <p>Note that the name must be spelled exactly as listed above.</p> <p>Related Probes:</p> <ul> <li>@holiday</li> </ul>"},{"location":"input-data/importfile/","title":"IMPORTFILE","text":"<p>IMPORTFILE allows specification of a file from which external data can be accessed using the import() and importStr() functions. This allows external values to be referenced in expressions.  Any number of IMPORTFILEs can be defined and any number of import()/importStr() references can be made to a give IMPORTFILE.</p> <p>Import files are text files containing an optional header and comma-separated data fields.  With the header present, the structure of an import file matches that of an EXPORT file.  This makes it convenient to import unmodified files EXPORTed from prior runs.  The file structure is as follows (noting that the header in lines 1-4 should not be present when imHeader=NO) --</p> Line Contents Notes 1 runTitle, runNumber read but not checked 2 timestamp in quotes, read but not checked 3 title, freq should match imTitle and imFreq (see below) 4 colName1, colName2, ... comma separated column names optionally in quotes 5 .. val1, val2, ... comma separated values (string values optionally in quotes) <p>Example import file imp1.csv</p> <pre><code>    \"Test run\",001\n    \"Fri 04-Nov-16  10:54:37 am\"\n    \"Daily Data\",\"Day\"\n    Mon,Day,Tdb,Twb\n    1,1,62.2263,53.2278\n    1,2,61.3115,52.8527\n    1,3,60.4496,52.4993\n    1,4,60.2499,52.4174\n    1,5,60.9919,52.7216\n    1,6,61.295,52.8459\n    1,7,62.3178,53.2654\n    1,8,62.8282,53.4747\n    (... continues for 365 data lines ...)\n</code></pre> <p>Example IMPORTFILE use (reading from imp1.csv)</p> <pre><code>    // ... various input statements ...\n\n    IMPORTFILE Example imFileName=\"imp1.csv\" imFreq=Day imTitle=\"Daily Data\"\n    ...\n    // Compute internal gain based on temperature read from import file.\n    // result is 3000 W per degree temperature is above 60.\n    // Note gnPower can have hourly variability, but here varies daily.\n    GAIN gnPower = 3000 * max( 0, import(Example,\"Tdb\") - 60) / 3.412\n    ...\n</code></pre> <p>Notes</p> <ul> <li>As usual, IMPORTFILEs can be referenced before they are defined.  HOWEVER, imFreq is not known for forward-references to IMPORTFILEs and will be assumed to be subhour.  Errors (and no run) will result if the referencing import()s expect values at another imFreq.  Recommendation: locate IMPORTFILEs prior to associated imports() in the input file.</li> <li>Columns are referenced by 1-based index or column names (assuming file header is present).  In the example above, \"Tdb\" could be replaced by 3.</li> <li>Column names should be case-insensitive unique.  CSE issues a warning for each non-unique name found. Reference to a non-unique name in import()/importStr() is treated as an error (no run).</li> <li>Heading or data string values generally do not need to be quoted except for values that include comma(s).</li> </ul>"},{"location":"input-data/importfile/#imname","title":"imName","text":"<p>Name of IMPORTFILE object (for reference from Import()).</p> Units Legal Range Default Required Variability 63 characters none No constant"},{"location":"input-data/importfile/#imfilename","title":"imFileName","text":"<p>Type: string</p> <p>Gives path name of file to be read. If directory is specified, CSE first looks for the file the current directory and searches include paths specified by the -I command line parameter (if any).</p> Units Legal Range Default Required Variability file name, path optional none Yes constant"},{"location":"input-data/importfile/#imtitle","title":"imTitle","text":"<p>Type: string</p> <p>Title expected to be found on line 3 of the import file.  A warning is issued if a non-blank imTitle does not match the import file title.</p> Units Legal Range Default Required Variability Text string none No constant"},{"location":"input-data/importfile/#imfreq","title":"imFreq","text":"<p>Type: choice</p> <p>Specifies the interval at which CSE reads from the import file.  Data is read at the beginning of the indicated interval and buffered in memory for access in expressions via import() or importStr().</p> Units Legal Range Default Required Variability YEAR, MONTH, DAY, HOUR, or SUBHOUR none Yes constant"},{"location":"input-data/importfile/#imheader","title":"imHeader","text":"<p>Type: choice</p> <p>Indicates whether the import file include a 4 line header, as described above.  If NO, the import file should contain only comma-separated data rows and data items can be referenced only by 1-based column number.</p> Units Legal Range Default Required Variability YES NO YES No constant"},{"location":"input-data/importfile/#imbinary","title":"imBinary","text":"<p>Type: choice</p> <p>Adds the possibility to output the file as a binary option.</p> Units Legal Range Default Required Variability YES NO No No constant"},{"location":"input-data/importfile/#endimportfile","title":"endImportFile","text":"<p>Optionally indicates the end of the import file definition. Alternatively, the end of the import file definition can be indicated by END or by beginning another object.</p> Units Legal Range Default Required Variability none No constant <p>Related Probes:</p> <ul> <li>@importFile</li> <li>@impFileFldNames</li> </ul>"},{"location":"input-data/izxfer/","title":"IZXFER","text":"<p>IZXFER constructs an object that represents an interzone or zone/ambient heat transfer due to conduction and/or air transfer. The air transfer modeled by IZXFER transfers heat only; humidity transfer is not modeled as of July 2011. Note that SURFACE is the preferred way represent conduction between ZONEs.</p> <p>The AIRNET types are used in a multi-cell pressure balancing model that finds zone pressures that produce net 0 mass flow into each zone. The model operates in concert with the znType=CZM or znType=UZM to represent ventilation strategies. During each time step, the pressure balance is found for two modes that can be thought of as \u201cVentOff\u201d (or infiltration-only) and \u201cVentOn\u201d (or infiltration+ventilation). The zone model then determines the ventilation fraction required to hold the desired zone temperature (if possible). AIRNET modeling methods are documented in the CSE Engineering Documentation.</p> <p>Note that fan-driven types assume pressure-independent flow.  That is, the specified flow is included in the zone pressure balance but the modeled fan flow does not change with zone pressure. The assumption is that in realistic configurations, zone pressure will generally be close to ambient pressure.  Unbalanced fan ventilation in a zone without relief area will result in runtime termination due to excessively high or low pressure.</p>"},{"location":"input-data/izxfer/#izname","title":"izName","text":"<p>Optional name of interzone transfer; give after the word \"IZXFER\" if desired.</p> Units Legal Range Default Required Variability 63 characters none No constant"},{"location":"input-data/izxfer/#iznvtype","title":"izNVType","text":"<p>Type: choice</p> <p>Choice specifying the type of ventilation or leakage model to be used.</p> NONE No interzone ventilation ONEWAY Uncontrolled flow from izZn1 to izZn2 when izZn1 air temperature exceeds izZn2 air temperature (using ASHRAE high/low vent model). TWOWAY Uncontrolled flow in either direction (using ASHRAE high/low vent model). AIRNETIZ Single opening to another zone (using pressure balance AirNet model).  Flow is driven by buoyancy. AIRNETEXT Single opening to ambient (using pressure balance AirNet model).  Flow is driven by buoyancy and wind pressure. AIRNETHORIZ Horizontal (large) opening between two zones, used to represent e.g. stairwells.  Flow is driven by buoyancy; simultaneous up and down flow is modeled. AIRNETEXTFAN Fan from exterior to zone (flow either direction). AIRNETIZFAN Fan between two zones (flow either direction). AIRNETEXTFLOW Specified flow from exterior to zone (either direction). Behaves identically to AIRNETEXTFAN except no electricity is consumed and no fan heat is added to the air stream. AIRNETIZFLOW Specified flow between two zones (either direction). Behaves identically to AIRNETIZFAN except no electricity is consumed and no fan heat is added to the air stream. AIRNETHERV Heat or energy recovery ventilator. Supply and exhaust air are exchanged with the exterior with heat and/or moisture exchange between the air streams. Flow may or may not be balanced. AIRNETDOAS Air supplied from and/or exhausted to a centralized DOAS fans. <p>Note that optional inputs izTEx, izWEx, and izWindSpeed can override the outside conditions assumed for ivNVTypes that are connected to ambient (AIRNETEXT, AIRNETEXTFAN, AIRNETEXTFLOW, and AIRNETHERV).</p> Units Legal Range Default Required Variability choices above none No constant"},{"location":"input-data/izxfer/#izafcat","title":"izAFCat","text":"<p>Type: choice</p> <p>Choice indicating air flow category used only for recording air flow results to an AFMETER.  izAFCat has no effect for non-AIRNET IZXFERs.  izAFCat is not used unless the associated ZONE(s) specify znAFMtr.</p> <p>Choices are:</p> InfilEx Infiltration from ambient VentEx Natural ventilation from ambient FanEx Forced ventilation from ambient InfilUz Unconditioned Interzone infiltration VentUz Unconditioned Interzone natural ventilation FanUz Unconditioned Interzone forced ventilation InfilCz Conditioned Interzone infiltration VentCz Conditioned Interzone natural ventilation FanCz Conditioned Interzone forced ventilation DuctLk Duct leakage HVAC HVAC air <p>Default values for izAFCat are generally adequate except that natural ventilation IZXFERs are by default categorized as infiltration.  It is thus recommended that izAfCat be omitted except that ventilation IZXFERs (e.g. representing openable windows) should include izAfCat=VentEx (or VentIz).</p> Units Legal Range Default Required Variability choices above derived from IZXFER characteristics No constant"},{"location":"input-data/izxfer/#izzn1","title":"izZn1","text":"<p>Type: znName</p> <p>Name of primary zone. Flow rates \\(&gt;\\) 0 are into the primary zone.</p> Units Legal Range Default Required Variability name of a ZONE none Yes constant"},{"location":"input-data/izxfer/#izzn2","title":"izZn2","text":"<p>Type: znName</p> <p>Name of secondary zone.</p> Units Legal Range Default Required Variability name of a ZONE none required unless constant izNVType = AIRNETEXT, AIRNETEXTFAN, AIRNETEXTFLOW, or AIRNETHERV constant"},{"location":"input-data/izxfer/#izdoas","title":"izDOAS","text":"<p>Type: oaName</p> <p>Name of DOAS where air is supplied from (izVfMin &gt; 0), or exhausting to (izVfMin &lt; 0).</p> Units Legal Range Default Required Variability \u2014 name of a DOAS \u2014 when izNVType = AIRNETDOAS constant"},{"location":"input-data/izxfer/#izlinkedflowmult","title":"izLinkedFlowMult","text":"<p>Type: float</p> <p>Specifies a multiplier applied to air flow to/from any associated DOAS.  This supports use of a single modeled zone to represent multiple actual zones while preserving the total DOAS air flow and energy consumption.</p> <p>For example, consider a DOAS-linked IZXFER with izVfMin = 100 and izLinkedFlowMult = 5.  The zone specified by izZn1 receives 100 cfm while the DOAS specified by izDOAS is modeled as if the supply flow is 500 cfm.  Thus the DOAS behavior (fan energy use etc.) approximates that of a DOAS serving 5 zones, but only one zone is simulated.</p> <p>Note izLinkedFlowMult has no effect on the air flow to or from the zone specified by izZn1.</p> Units Legal Range Default Required Variability -- x \\(\\gt\\) 0 1 No constant <p>Give izHConst for a conductive transfer between zones. Give izNVType other than NONE and the following variables for a convective (air) transfer between the zones or between a zone and outdoors. Both may be given if desired. Not known to work properly as of July 2011</p>"},{"location":"input-data/izxfer/#izhconst","title":"izHConst","text":"<p>Type: float</p> <p>Conductance between zones.</p> Units Legal Range Default Required Variability Btu/<sup>o</sup>F x \\(\\ge\\) 0 0 No hourly"},{"location":"input-data/izxfer/#izalo","title":"izALo","text":"<p>Type: float</p> <p>Area of low or only vent (typically VentOff)</p> Units Legal Range Default Required Variability ft<sup>2</sup> x \\(\\ge\\) 0 0 No hourly"},{"location":"input-data/izxfer/#izahi","title":"izAHi","text":"<p>Type: float</p> <p>Additional vent area (high vent or VentOn). If used in AIRNET, izAHi &gt; izALo typically but this is not required.</p> Units Legal Range Default Required Variability ft<sup>2</sup> x \\(\\ge\\) 0 izALo No hourly"},{"location":"input-data/izxfer/#iztex","title":"izTEx","text":"<p>Type: float</p> <p>Alternative exterior air dry bulb temperature for this vent.  Allowed only with izNVTypes that use outdoor air (AIRNETEXT, AIRNETEXTFAN, AIRNETEXTFLOW, and AIRNETHERV).  If given, izTEx overrides the outdoor dry-bulb temperature read from the weather file or derived from design conditions.</p> <p>Caution: izTEx is not checked for reasonableness.</p> <p>One use of izTEx is in representation of leaks in surfaces adjacent to zones not being simulated.  \"Pseudo-interior\" surface leakage can be created as follows (where \"Z1\" is the name of the leak's zone and izALo and izHD are set to appropriate values) --</p> <pre><code> IZXFER RLF izNVTYPE=AirNetExt izZN1=\"Z1\" izALo=.1 izHD=10  izTEx=@zone[\"Z1\"].tzls izWEx=@zone[\"Z1\"].wzls\n</code></pre> <p>This will allow Z1's pressure to be realistic without inducing thermal loads that would occur if the leak source had outdoor conditions.</p> Units Legal Range Default Required Variability <sup>o</sup>F Outdoor dry-bulb No subhourly"},{"location":"input-data/izxfer/#izwex","title":"izWEx","text":"<p>Type: float</p> <p>Alternative exterior air humidity ratio seen by this vent. Allowed only with izNVTypes that use outdoor air (AIRNETEXT, AIRNETEXTFAN, AIRNETEXTFLOW, and AIRNETHERV).  If given, izWEx overrides the outdoor humidity ratio derived from weather file data or design conditions.</p> <p>Caution: izWEx is not checked against saturation -- there is no verification that the value provided is physically possible.</p> <p>See izTEx example just above.</p> Units Legal Range Default Required Variability \\(\\gt\\) 0 Outdoor humidity ratio No subhourly"},{"location":"input-data/izxfer/#izwindspeed","title":"izWindSpeed","text":"<p>Type: float</p> <p>Alternative windspeed seen by this vent.  Allowed only with izNVTypes that use outdoor air (AIRNETEXT, AIRNETEXTFAN, AIRNETEXTFLOW, and AIRNETHERV).  If given, izWindSpeed overrides the windspeed read from the weather file or derived from design conditions.</p> <p>No adjustments such as TOP windF or ZONE znWindFLkg are applied to izWindSpeed when it is used in derivation of wind-driven air flow.</p> <p>Note that izCpr must be non-0 for izWindSpeed to have any effect.</p> Units Legal Range Default Required Variability mph \\(\\ge\\) 0 Zone adjusted windspeed No subhourly"},{"location":"input-data/izxfer/#izl1","title":"izL1","text":"<p>Type: float</p> <p>Length or width of AIRNETHORIZ opening.</p> Units Legal Range Default Required Variability ft x \\(&gt;\\) 0 none if izNVType = AIRNETHORIZ constant"},{"location":"input-data/izxfer/#izl2","title":"izL2","text":"<p>Type: float</p> <p>Width or length of AIRNETHORIZ opening.</p> Units Legal Range Default Required Variability ft x \\(&gt;\\) 0 none if izNVType = AIRNETHORIZ constant"},{"location":"input-data/izxfer/#izstairangle","title":"izStairAngle","text":"<p>Type: float</p> <p>Stairway angle for AIRNETHORIZ opening. Use 90 for an open hole. Note that 0 prevents flow.</p> Units Legal Range Default Required Variability <sup>o</sup> degrees x \\(&gt;\\) 0 34 No constant"},{"location":"input-data/izxfer/#izhd","title":"izHD","text":"<p>Type: float</p> <p>Vent center-to-center height difference (for TWOWAY) or vent height above nominal 0 level (for AirNet types)</p> Units Legal Range Default Required Variability ft 0 No constant"},{"location":"input-data/izxfer/#iznveff","title":"izNVEff","text":"<p>Type: float</p> <p>Vent discharge coefficient.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1 0.8 No constant"},{"location":"input-data/izxfer/#izfanvfds","title":"izfanVfDs","text":"<p>Type: float</p> <p>Fan design or rated flow at rated pressure.  For AIRNETHERV, this is the net air flow into the zone, gross flow at the fan is derived using izEATR (see below).</p> Units Legal Range Default Required Variability cfm x \\(\\ge\\) 0 0 (no fan) If fan present constant"},{"location":"input-data/izxfer/#izcpr","title":"izCpr","text":"<p>Type: float</p> <p>Wind pressure coefficient (for AIRNETEXT).</p> Units Legal Range Default Required Variability x \\(\\ge\\) 0 0 No constant"},{"location":"input-data/izxfer/#izexp","title":"izExp","text":"<p>Type: float</p> <p>Opening exponent (for AIRNETEXT).</p> Units Legal Range Default Required Variability x \\(&gt;\\) 0 0.5 No constant"},{"location":"input-data/izxfer/#izvfmin","title":"izVfMin","text":"<p>Type: float</p> <p>Minimum volume flow rate (VentOff mode).</p> Units Legal Range Default Required Variability cfm x \\(\\ge\\) 0 izfanVfDs No subhourly"},{"location":"input-data/izxfer/#izvfmax","title":"izVfMax","text":"<p>Type: float</p> <p>Maximum volume flow rate (VentOn mode)</p> Units Legal Range Default Required Variability cfm x \\(\\ge\\) 0 izVfMin No subhourly"},{"location":"input-data/izxfer/#izasef","title":"izASEF","text":"<p>Type: float</p> <p>Apparent sensible effectiveness for AIRNETHERV ventilator.  ASEF is a commonly-reported HERV rating and is calculated as (supplyT - sourceT) / (returnT - sourceT).  This formulation includes fan heat (in supplyT), hence the term \"apparent\".  Ignored if izSRE is given.  CSE does not HRV exhaust-side condensation, so this model is approximate.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1 0 No subhourly"},{"location":"input-data/izxfer/#izsre","title":"izSRE","text":"<p>Type: float</p> <p>Sensible recovery efficiency (SRE) for AIRNETHERV ventilator.  Used as the sensible effectiveness in calculation of the supply air temperature.  Note that values of SRE greater than approximately 0.6 imply exhaust-side condensation under HVI rating conditions.  CSE does not adjust for these effects.  High values of izSRE will produce unrealistic results under mild outdoor conditions and/or dry indoor conditions.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1 0 No subhourly"},{"location":"input-data/izxfer/#izasre","title":"izASRE","text":"<p>Type: float</p> <p>Adjusted sensible recovery efficiency (ASRE) for AIRNETHERV ventilator.  The difference izASRE - izSRE is used to calculate fan heat added to the supply air stream.  See izSRE notes.  No effect when izSRE is 0.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) izSRE 0 No subhourly"},{"location":"input-data/izxfer/#izeatr","title":"izEATR","text":"<p>Type: float</p> <p>Exhaust air transfer ratio for AIRNETHERV ventilator.  NetFlow = (1 - EATR)*(grossFlow).</p> Units Legal Range Default Required Variability cfm 0 \\(\\le\\) x \\(\\le\\) 1 0 No subhourly"},{"location":"input-data/izxfer/#izlef","title":"izLEF","text":"<p>Type: float</p> <p>Latent heat recovery effectiveness for AIRNETHERV ventilator.  The default value (0) results in sensible-only heat recovery.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1 0 No subhourly"},{"location":"input-data/izxfer/#izrvfanheatf","title":"izRVFanHeatF","text":"<p>Type: float</p> <p>Fraction of fan heat added to supply air stream for AIRNETHERV ventilator.  Used only when when izSRE is 0 (that is, when izASEF specifies the sensible effectiveness).</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1 0 No subhourly"},{"location":"input-data/izxfer/#izvfexhrat","title":"izVfExhRat","text":"<p>Type: float</p> <p>Exhaust volume flow ratio for AIRNETHERV ventilator = (exhaust flow) / (supply flow).  Any value other than 1 indicates unbalanced flow that effects the zone pressure.</p> Units Legal Range Default Required Variability x \\(\\ge\\) 0 1 (balanced) No constant"},{"location":"input-data/izxfer/#izfanpress","title":"izfanPress","text":"<p>Type: float</p> <p>Design or rated fan pressure.</p> Units Legal Range Default Required Variability inches H<sub>2</sub>O x \\(&gt;\\) 0 0.3 No constant <p>Only one of izfanElecPwr, izfanEff, and izfanShaftBhp may be given: together with izfanVfDs and izfanPress, any one is sufficient for CSE to determine the others and to compute the fan heat contribution to the air stream.</p>"},{"location":"input-data/izxfer/#izfanelecpwr","title":"izfanElecPwr","text":"<p>Type: float</p> <p>Fan input power per unit air flow (at design flow and pressure).</p> Units Legal Range Default Required Variability W/cfm x \\(&gt;\\) 0 derived from izfanEff and izfanShaftBhp If izfanEff and izfanShaftBhp not present constant"},{"location":"input-data/izxfer/#izfaneff","title":"izfanEff","text":"<p>Type: float</p> <p>Fan efficiency at design flow and pressure, as a fraction.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1 derived from izfanShaftBhp if given, else 0.08 No constant"},{"location":"input-data/izxfer/#izfanshaftbhp","title":"izfanShaftBhp","text":"<p>Type: float</p> <p>Fan shaft brake horsepower at design flow and pressure.</p> Units Legal Range Default Required Variability bhp x \\(&gt;\\) 0 derived from izfanEff. No constant"},{"location":"input-data/izxfer/#izfancurvepy","title":"izfanCurvePy","text":"<p>Type: \\(k_0\\), \\(k_1\\), \\(k_2\\), \\(k_3\\), \\(x_0\\)</p> <p>\\(k_0\\) through \\(k_3\\) are the coefficients of a cubic polynomial for the curve relating fan relative energy consumption to relative air flow above the minimum flow \\(x_0\\). Up to five floats may be given, separated by commas. 0 is used for any omitted trailing values. The values are used as follows:</p> \\[z = k_0 + k_1 \\cdot (x - x_0)|  +  k_2 \\cdot (x - x_0)|^2 + k_3 \\cdot (x - x_0)|^3\\] <p>where:</p> <ul> <li>\\(x\\) is the relative fan air flow (as fraction of izfanVfDs; 0 \\(\\le\\) \\(x\\) \\(\\le\\) 1);</li> <li>\\(x_0\\) is the minimum relative air flow (default 0);</li> <li>\\((x - x_0)|\\) is the \"positive difference\", i.e. \\((x - x_0)\\) if \\(x &gt; x_0\\); else 0;</li> <li>\\(z\\) is the relative energy consumption.</li> </ul> <p>If \\(z\\) is not 1.0 for \\(x\\) = 1.0, a warning message is displayed and the coefficients are normalized by dividing by the polynomial's value for \\(x\\) = 1.0.</p> Units Legal Range Default Required Variability x \\(\\ge\\) 0 0, 1, 0, 0, 0 (linear) No constant"},{"location":"input-data/izxfer/#izfanmtr","title":"izFanMtr","text":"<p>Type: mtrName</p> <p>Name of meter, if any, to record energy used by supply fan. End use category used is specified by izFanEndUse (next).</p> Units Legal Range Default Required Variability name of a METER not recorded No constant"},{"location":"input-data/izxfer/#izfanenduse","title":"izFanEndUse","text":"<p>Type: choice</p> <p>End use to which fan energy is recorded (in METER specified by izFanMtr).  See METER for available end use choices.</p> Units Legal Range Default Required Variability end use choice Fan No constant"},{"location":"input-data/izxfer/#endizxfer","title":"endIZXFER","text":"<p>Optionally indicates the end of the interzone transfer definition.</p> Units Legal Range Default Required Variability none No constant <p>Related Probes:</p> <ul> <li>@izXfer</li> </ul>"},{"location":"input-data/layer/","title":"LAYER","text":"<p>LAYER constructs a subobject of class LAYER belonging to the current CONSTRUCTION. LAYER is not recognized except immediately following CONSTRUCTION or another LAYER. The members represent one layer (that optionally includes framing) within the CONSTRUCTION.</p> <p>The layers should be specified in inside to outside order.  A framed layer (lrFrmMat and lrFrmFrac given) is modeled by creating a homogenized material with weighted combined conductivity and volumetric heat capacity. Caution: it is generally preferable to model framed constructions using two separate surfaces (one with framing, one without). At most one framed layer (lrFrmMat and lrFrmFrac given) is allowed per construction.</p> <p>The layer thickness may be given by lrThk, or matThk of the material, or matThk of the framing material if any. The thickness must be specified at least one of these three places; if specified in more than one place and not consistent, an error message occurs.</p>"},{"location":"input-data/layer/#lrname","title":"lrName","text":"<p>Name of layer (follows \"LAYER\"). Required only if the LAYER is later referenced in another object, for example with LIKE or ALTER; however, we suggest naming all objects for clearer error messages and future flexibility.</p> Units Legal Range Default Required Variability 63 characters none No constant"},{"location":"input-data/layer/#lrmat","title":"lrMat","text":"<p>Type: matName</p> <p>Name of primary MATERIAL in layer.</p> Units Legal Range Default Required Variability name of a MATERIAL none Yes constant"},{"location":"input-data/layer/#lrthk","title":"lrThk","text":"<p>Type: float</p> <p>Thickness of layer.</p> Units Legal Range Default Required Variability ft x \\(&gt;\\) 0 Required if matThk not specified in referenced lrMat No constant"},{"location":"input-data/layer/#lrfrmmat","title":"lrFrmMat","text":"<p>Type: matName</p> <p>Name of framing MATERIAL in layer, if any. At most one layer with lrFrmMat is allowed per CONSTRUCTION. See caution above regarding framed-layer model.</p> Units Legal Range Default Required Variability name of a MATERIAL no framed layer No constant"},{"location":"input-data/layer/#lrfrmfrac","title":"lrFrmFrac","text":"<p>Type: float</p> <p>Fraction of layer that is framing. Must be specified if frmMat is specified. See caution above regarding framed-layer model.</p> Units Legal Range Default Required Variability 0 \\(\\leq\\) x \\(\\leq\\) 1 no framed layer Required if  lrFrmMat specified, else disallowed constant"},{"location":"input-data/layer/#endlayer","title":"endLayer","text":"<p>Optional end-of-LAYER indicator; LAYER definition may also be indicated by \"END\" or just starting the definition of another LAYER or other object.</p> <p>Related Probes:</p> <ul> <li>@layer</li> </ul>"},{"location":"input-data/loadmeter/","title":"LOADMETER","text":"<p>A LOADMETER object is a user-defined \"device\" that records heating and cooling loads as computed by CSE. The user defines LOADMETERs and assigns them to ZONEs and/or RSYSs (see ZONE znLoadMtr and RSYS rsLoadMtr).</p> <p>Loads are accumulated for subhour, hour, day, month, and annual intervals.  All values are in Btu.  Values &gt;0 indicated heat into the process or zone -- thus heating loads are &gt;0 and cooling loads are &lt;0.</p> <p>LOADMETER results must be reported using user-defined REPORTs or EXPORTs.  For example --</p> <pre><code>REPORT rpType=UDT rpFreq=Month rpDayBeg=Jan 1 rpDayEnd=Dec 31\n    REPORTCOL colHead=\"mon\" colVal=$Month colWid=3\n    REPORTCOL colHead=\"Heating\" colVal=@LoadMeter[ 1].M.qHtg colDec=0 colWid=10\n    REPORTCOL colHead=\"Cooling\" colVal=@LoadMeter[ 1].M.qClg colDec=0 colWid=10\n</code></pre>"},{"location":"input-data/loadmeter/#ldmtrname","title":"ldMtrName","text":"<p>Name of LOADMETER: required for assigning to ZONEs and RSYSs.</p> Units Legal Range Default Required Variability 63 characters none Yes constant"},{"location":"input-data/loadmeter/#lmtsubmeters","title":"lmtSubmeters","text":"<p>Type: list of up to 50 LOADMETERs</p> <p>A comma-separate list of LOADMETERs that are accumulated into this LOADMETER with optional multipliers (see lmtSubmeterMults).  Submeters facilitate flexible categorization of loads results.  In addition, use of lmtSubmeterMults allows load results from a representative model to be scaled and included in overall results.  For example, a typical zone could be used to represent 5 similar spaces.  The loads calculated for the typical zone could be assigned to a dedicated LOADMETER and that LOADMETER accumulated to a main LOADMETER with a multiplier of 5.  Rules --</p> <ul> <li>A LOADMETER cannot reference itself as a submeter.</li> <li>A given LOADMETER can be referenced only once in the lmtSubmeters list.</li> <li>Circular references are not allowed.</li> </ul> Units Legal Range Default Required Variability names of LOADMETERs No constant"},{"location":"input-data/loadmeter/#lmtsubmetermults","title":"lmtSubmeterMults","text":"<p>Type: list of up to 50 floats</p> <p>Submeter multipliers.</p> <p>A note re default values: if lmtSubmeterMults is omitted, all multipliers are defaulted to 1.  However, when lmtSubmeterMults is included, a multiplier value should be provided for each LOADMETER listed in lmtSubmeters since unspecified values are set to 0.</p> Units Legal Range Default Required Variability 1 No subhourly"},{"location":"input-data/loadmeter/#endloadmeter","title":"endLOADMETER","text":"<p>Indicates the end of the meter definition. Alternatively, the end of the meter definition can be indicated by the declaration of another object or by END.</p> Units Legal Range Default Required Variability none No constant <p>Related Probes:</p> <ul> <li>@loadmeter</li> </ul>"},{"location":"input-data/material/","title":"MATERIAL","text":"<p>MATERIAL constructs an object of class MATERIAL that represents a building material or component for later reference a from LAYER (see below). A MATERIAL so defined need not be referenced. MATERIAL properties are defined in a consistent set of units (all lengths in feet), which in some cases differs from units used in tabulated data. Note that the convective and air film resistances for the inside wall surface is defined within the SURFACE statements related to conductances.</p>"},{"location":"input-data/material/#matname","title":"matName","text":"<p>Name of material being defined; follows the word \"MATERIAL\".</p> Units Legal Range Default Required Variability 63 characters none Yes constant"},{"location":"input-data/material/#matthk","title":"matThk","text":"<p>Type: float</p> <p>Thickness of material. If specified, matThk indicates the discreet thickness of a component as used in construction assemblies. If omitted, matThk indicates that the material can be used in any thickness; the thickness is then specified in each LAYER using the material (see below).</p> Units Legal Range Default Required Variability ft x \\(&gt;\\) 0 none No constant"},{"location":"input-data/material/#matcond","title":"matCond","text":"<p>Type: float</p> <p>Conductivity of material. Note that conductivity is always stated for a 1 foot thickness, even when matThk is specified; if the conductance is known for a specific thickness, an expression can be used to derive matCond.</p> Units Legal Range Default Required Variability Btuh-ft/ft<sup>2</sup>-<sup>o</sup>F x \\(&gt;\\) 0 none Yes constant"},{"location":"input-data/material/#matcondt","title":"matCondT","text":"<p>Type: float</p> <p>Temperature at which matCond is rated. See matCondCT (next).</p> Units Legal Range Default Required Variability <sup>o</sup>F x \\(&gt;\\) 0 70 <sup>o</sup>F No constant"},{"location":"input-data/material/#matcondct","title":"matCondCT","text":"<p>Type: float</p> <p>Coefficient for temperature adjustment of matCond in the forward difference surface conduction model. Each hour (not subhour), the conductivity of layers using this material are adjusted as followslrCond = matCond * (1 + matCondCT*(T<sub>layer</sub> \u2013 matCondT))</p> Units Legal Range Default Required Variability <sup>o</sup>F<sup>-1</sup> 0 No constant <p>Note: A typical value of matCondCT for fiberglass batt insulation is 0.00418 F<sup>-1</sup></p>"},{"location":"input-data/material/#matspht","title":"matSpHt","text":"<p>Type: float</p> <p>Specific heat of material.</p> Units Legal Range Default Required Variability Btu/lb-<sup>o</sup>F x \\(\\ge\\) 0 0 (thermally massless) No constant"},{"location":"input-data/material/#matdens","title":"matDens","text":"<p>Type: float</p> <p>Density of material.</p> Units Legal Range Default Required Variability lb/ft<sup>3</sup> x \\(\\ge\\) 0 0 (massless) No constant"},{"location":"input-data/material/#matrnom","title":"matRNom","text":"<p>Type: float</p> <p>Nominal R-value per foot of material. Appropriate for insulation materials only and used for documentation only. If specified, the current material is taken to have a nominal R-value that contributes to the reported nominal R-value for a construction. As with matCond, matRNom is always stated for a 1 foot thickness, even when matThk is specified; if the nominal R-value is known for a specific thickness, an expression can be used to derive matRNom.</p> Units Legal Range Default Required Variability ft<sup>2</sup>-<sup>o</sup>F/Btuh x \\(&gt;\\) 0 none No constant"},{"location":"input-data/material/#endmaterial","title":"endMaterial","text":"<p>Optional to indicate the end of the material. Alternatively, the end of the material definition can be indicated by \"END\" or simply by beginning another object.</p> Units Legal Range Default Required Variability none No constant <p>Related Probes:</p> <ul> <li>@material</li> </ul>"},{"location":"input-data/meter/","title":"METER","text":"<p>A METER object is a user-defined \"device\" that records energy consumption of equipment as simulated by CSE. The user defines METERs with the desired names, then assigns energy uses of specific equipment to the desired meters using commands described under each equipment type's class description (AIRHANDLER, TERMINAL, etc.). Additional energy use from equipment not simulated by CSE (except optionally for its effect on heating and cooling loads) can also be charged to METERs (see GAIN). The data accumulated by meters can be reported at hourly, daily, monthly, and annual (run) intervals by using REPORTs and EXPORTs of type MTR.</p> <p>Meters account for energy use in the following pre-defined categories, called end uses. The abbreviations in parentheses are used in MTR report headings (and for gnMeter input, below). You also get a column for the net total on the meter (abbreviated \"Tot\").</p> Clg Cooling Htg Heating (includes heat pump compressor) HPBU Heat pump resistance heating (backup and defrost) DHW Domestic (service) hot water DHWBU Domestic (service) hot water heating backup (HPWH resistance) DHWMFL Domestic (service) hot water heating multi-family loop pumping and loss makeup FANC Fans, AC and cooling ventilation FANH Fans, heating FANV Fans, IAQ venting FAN Fans, other purposes AUX HVAC auxiliaries such as pumps PROC Process LIT Lighting RCP Receptacles EXT Exterior lighting REFR Refrigeration DISH Dishwashing DRY Clothes drying WASH Clothes washing COOK Cooking USER1 User-defined category 1 USER2 User-defined category 2 BT Battery charge power PV Photovoltaic power generation <p>The user has complete freedom over how many meters are defined and how equipment is assigned to them. At one extreme, a single meter \"Electricity\" could be defined and have all of electrical uses assigned to it. On the other hand, definition of separate meters \"Elect_Fan1\", \"Elect_Fan2\", and so forth allows accounting of the electricity use for individual pieces of equipment. Various groupings are possible: for example, in a building with several air handlers, one could separate the energy consumption of the fans from the coils, or one could separate the energy use by air handler, or both ways, depending on the information desired from the run.</p> <p>The members that assign energy use to meters include:</p> <ul> <li>GAIN: gnMeter, gnEndUse</li> <li>ZONE: xfanMtr</li> <li>IZXFER: izfanMtr</li> <li>RSYS: rsElecMtr, rsFuelMtr</li> <li>DHWSYS: wsElecMtr, wsFuelMtr</li> <li>DHWHEATER: whElectMtr, whFuelMtr</li> <li>DHWPUMP: wpElecMtr</li> <li>DHWLOOPPUMP: wlpElecMtr</li> <li>PVARRAY: pvElecMeter</li> <li>TERMINAL: tuhcMtr, tfanMtr</li> <li>AIRHANDLER: sfanMtr, rfanMtr, ahhcMtr, ahccMtr, ahhcAuxOnMtr, ahhcAuxOffMtr, ahhcAuxFullOnMtr, ahhcAuxOnAtAllMtr, ahccAuxOnMtr, ahccAuxOffMtr, ahccAuxFullOnMtr, ahccAuxOnAtAllMtr</li> <li>BOILER: blrMtr, blrpMtr, blrAuxOnMtr, blrAuxOffMtr, blrAuxFullOnMtr, blrAuxOnAtAllMtr</li> <li>CHILLER: chMtr, chppMtr, chcpMtr, chAuxOnMtr, chAuxOffMtr, chAuxFullOnMtr, chAuxOnAtAllMtr</li> <li>TOWERPLANT: tpMtr</li> </ul> <p>The end use can be specified by the user only for GAINs and PVARRAYs; in other cases it is hard-wired to Clg, Htg, FanC, FanH, FanV, Fan, or Aux as appropriate.</p>"},{"location":"input-data/meter/#mtrname","title":"mtrName","text":"<p>Name of meter: required for assigning energy uses to the meter elsewhere.</p> Units Legal Range Default Required Variability 63 characters none Yes constant"},{"location":"input-data/meter/#mtrdemandrate","title":"mtrDemandRate","text":"<p>Type: float</p> <p>DmdCost per Btu of demand, for a month.</p> Units Legal Range Default Required Variability N/A No constant"},{"location":"input-data/meter/#mtrrate","title":"mtrRate","text":"<p>Type: float</p> <p>Cost of energy use per Btu.</p> Units Legal Range Default Required Variability N/A No constant"},{"location":"input-data/meter/#mtrsubmeters","title":"mtrSubmeters","text":"<p>Type: list of up to 50 METERs</p> <p>A comma-separate list of METERs that are accumulated into this METER with optional multipliers (see mtrSubmeterMults).  Submeters facilitate flexible categorization of energy results.  In addition, use of mtrSubmeterMults allows energy results from a representative model to be scaled and included in overall results.  For example, a typical zone could be used to represent 5 similar spaces.  The energy uses of the typical zone could be assigned to a dedicated METER that is accumulated to a main METER with a multiplier of 5.  Rules --</p> <ul> <li>A METER cannot reference itself as a submeter.</li> <li>A given METER can be referenced only once in the mtrSubmeters list.</li> <li>Circular references are not allowed.</li> </ul> Units Legal Range Default Required Variability names of METERs No constant"},{"location":"input-data/meter/#mtrsubmetermults","title":"mtrSubmeterMults","text":"<p>Type: list of up to 50 floats</p> <p>Submeter multipliers. Use cases for multipliers include --</p> <ul> <li>Scaling results from portions of a model to approximate the behavior of multiple similar aspects (e.g. multiple floors in a high-rise building)</li> <li>Tracking energy use during selected time intervals; for example, peak-period energy use could be metered for certain hours via scheduled multipliers of 0 or 1.</li> </ul> <p>A note re default values: if mtrSubmeterMults is omitted, all multipliers are defaulted to 1.  However, when mtrSubmeterMults is included, a multiplier value should be provided for each METER listed in mtrSubmeters since unspecified values are set to 0.</p> Units Legal Range Default Required Variability 1 No hourly"},{"location":"input-data/meter/#endmeter","title":"endMeter","text":"<p>Indicates the end of the meter definition. Alternatively, the end of the meter definition can be indicated by the declaration of another object or by END.</p> Units Legal Range Default Required Variability none No constant <p>Related Probes:</p> <ul> <li>@meter</li> </ul>"},{"location":"input-data/performancemap/","title":"PERFORMANCEMAP","text":"<p>PERFORMANCEMAP defines a multiple-dimension table of values from which models can derive performance data via interpolation.  Subordinate PMGRIDAXIS and PMLOOKUPDATA allow input of performance maps of a range of dimensions and granularity.</p> <p>Following ASHRAE Standard 205 terminology, sets of \"grid\" values are the independent variables and sets of \"lookup\" values are the dependent variables.</p> <p>The following example defines a 2D map based on grid variables outdoor dry-bulb temperature and (arbitrary) compressor speed.  For each grid value combination, lookup values are provided for capacity ratio and COP.</p> <pre><code>PERFORMANCEMAP \"PMClg\"\n\n    PMGRIDAXIS \"ClgOutdoorDBT\" pmGXType=\"OutdoorDBT\" pmGXValues=60,82,95,115 pmGXRefValue=95\n    PMGRIDAXIS \"ClgSpeed\" pmGXType=\"Speed\" pmGXValues=1,2,3 pmGXRefValue=2\n\n    // Capacity ratio = net total capacity / net rated total capacity\n    PMLOOKUPDATA LUClgCapRat pmLUType = \"CapRat\" pmLUValues =\n      0.48, 1.13, 1.26,   // 60F at min, mid, max speed\n      0.42, 1.05, 1.17,   // 82F\n      0.39, 1.00, 1.12,   // 95F\n      0.34, 0.92, 1.04    // 115F\n\n    // COP = net total COP\n    PMLOOKUPDATA LUClgCOP pmLUType = \"COP\" pmLUValues =\n      14.22, 16.44, 15.00,  // 60F at min, mid, max speed\n      7.93,  7.59,  6.71,   // 82F\n      6.01,  5.58,  4.91,   // 95F\n      4.12,  3.82,  3.34    // 115F\n\nendPERFORMANCEMAP\n</code></pre> <p>At OutdoorDBT=95 and Speed=2, this performance map would yield CapRat=1.00 and COP=5.58.  At other (OutdoorDBT,Speed) combinations, suitable 2D interpolation is performed on each lookup variable.  Lookup variables are extrapolated outside of PMGRIDAXIS ranges; adequate axis ranges must be provided to avoid unrealistic extrapolation.</p>"},{"location":"input-data/performancemap/#pmname","title":"pmName","text":"<p>Name of performance map; given after the word \"PERFORMANCEMAP\".   Necessary to allow reference from e.g. RSYS.</p> Units Legal Range Default Required Variability 63 characters none Yes constant"},{"location":"input-data/performancemap/#endperformancemap","title":"endPERFORMANCEMAP","text":"<p>Optionally indicates the end of PERFORMANCEMAP definition.  It is good practice to include endPerformanceMap after the associated PMGRIDAXIS and PMLOOKDATA.</p> Units Legal Range Default Required Variability none No constant"},{"location":"input-data/performancemap/#pmgridaxis","title":"PMGRIDAXIS","text":"<p>Defines grid values for a single dimension of the parent (preceeding) PERFORMANCEMAP.</p> <p>The order of PMGRIDAXIS commands fixes the order of PMLOOKUPDATA values -- later PMGRIDAXIS dimensions vary more quickly (see example above).</p>"},{"location":"input-data/performancemap/#pmgxname","title":"pmGXName","text":"<p>Name of grid axis; optionally given after the word \"PMGRIDAXIS\".  Used in error messages.</p> Units Legal Range Default Required Variability 63 characters none No constant"},{"location":"input-data/performancemap/#pmgxtype","title":"pmGXType","text":"<p>Type: string</p> <p>Documents the dimension of the axis, for example \"OutdoorDBT\", \"Speed\", or \"AirFlow\".</p> Units Legal Range Default Required Variability at least 1 char none Yes constant"},{"location":"input-data/performancemap/#pmgxvalues","title":"pmGXValues","text":"<p>Type: float array</p> <p>1 to 10 comma-separated values specifying the data points of this axis.  Must be in strictly ascending order.</p> Units Legal Range Default Required Variability various none Yes constant"},{"location":"input-data/performancemap/#pmgxrefvalue","title":"pmGXRefValue","text":"<p>Type: float</p> <p>Defines the reference or nominal value of this PMGRIDAXIS.  For example, when defining temperature points for a typical air conditioner, pmGXRefValue=95 might be used, since AC capacity is rated at 95 F. </p> Units Legal Range Default Required Variability same as pmGXValues none Yes constant"},{"location":"input-data/performancemap/#endpmgridaxis","title":"endPMGRIDAXIS","text":"<p>Optionally indicates the end of PMGRIDAXIS definition.</p> Units Legal Range Default Required Variability none No constant"},{"location":"input-data/performancemap/#pmlookupdata","title":"PMLOOKUPDATA","text":"<p>pmLUName*</p> <p>Name of lookup data; optionally given after the word \"PMLOOKUPDATA\".  Used in error messages.</p> Units Legal Range Default Required Variability 63 characters none No constant"},{"location":"input-data/performancemap/#pmlutype","title":"pmLUType","text":"<p>Type: string</p> <p>Documents the current lookup value, e.g. \"COP\" or \"CapacityRatio\".</p> Units Legal Range Default Required Variability at least 1 char none Yes constant"},{"location":"input-data/performancemap/#pmluvalues","title":"pmLUValues","text":"<p>Type: float array</p> <p>Comma-separated values specifying the lookup data.  The number of values required is the product of the size of all PMGRIDAXISs in the current PEFORMANCEMAP.  In the example above, there are 4 OutdoorDBTs and 3 speeds, so 12 values must be provided.</p> Units Legal Range Default Required Variability various none Yes constant"},{"location":"input-data/performancemap/#endpmlookupdata","title":"endPMLOOKUPDATA","text":"<p>Optionally indicates the end of PMLOOKUPDATA definition.</p> Units Legal Range Default Required Variability none No constant"},{"location":"input-data/perimeter/","title":"PERIMETER","text":"<p>PERIMETER defines a subobject belonging to the current zone that represents a length of exposed edge of a (slab on grade) floor.</p>"},{"location":"input-data/perimeter/#prname","title":"prName","text":"<p>Optional name of perimeter.</p> Units Legal Range Default Required Variability 63 characters none No constant"},{"location":"input-data/perimeter/#prlen","title":"prLen","text":"<p>Type: float</p> <p>Length of exposed perimeter.</p> Units Legal Range Default Required Variability ft x \\(&gt;\\) 0 none Yes constant"},{"location":"input-data/perimeter/#prf2","title":"prF2","text":"<p>Type: float</p> <p>Perimeter conduction per unit length.</p> Units Legal Range Default Required Variability Btuh/ft-<sup>o</sup>F x \\(&gt;\\) 0 none Yes constant"},{"location":"input-data/perimeter/#endperimeter","title":"endPerimeter","text":"<p>Optionally indicates the end of the perimeter definition.</p> Units Legal Range Default Required Variability none No constant <p>Related Probes:</p> <ul> <li>@perimeter</li> <li>@xsurf</li> </ul>"},{"location":"input-data/pvarray/","title":"PVARRAY","text":"<p>PVARRAY describes a photovoltaic panel system. The algorithms are based on the PVWatts calculator.</p>"},{"location":"input-data/pvarray/#pvname","title":"pvName","text":"<p>Name of photovoltaic array. Give after the word PVARRAY.</p> Units Legal Range Default Required Variability 63 characters none No constant"},{"location":"input-data/pvarray/#pvelecmtr","title":"pvElecMtr","text":"<p>Type: choice</p> <p>Name of meter by which this PVARRAY's AC power out is recorded. Generated power is expressed as a negative value.</p> Units Legal Range Default Required Variability name of a METER none No constant"},{"location":"input-data/pvarray/#pvenduse","title":"pvEndUse","text":"<p>Type: choice</p> <p>Meter end use to which the PVARRAY's generated energy should be accumulated.</p> Clg Cooling Htg Heating (includes heat pump compressor) HPBU Heat pump resistance heating (backup and defrost) DHW Domestic (service) hot water DHWBU Domestic (service) hot water heating backup (HPWH resistance) DHWMFL Domestic (service) hot water heating multi-family loop pumping and loss makeup FANC Fans, AC and cooling ventilation FANH Fans, heating FANV Fans, IAQ venting FAN Fans, other purposes AUX HVAC auxiliaries such as pumps PROC Process LIT Lighting RCP Receptacles EXT Exterior lighting REFR Refrigeration DISH Dishwashing DRY Clothes drying WASH Clothes washing COOK Cooking USER1 User-defined category 1 USER2 User-defined category 2 BT Battery charge power PV Photovoltaic power generation Units Legal Range Default Required Variability Codes listed above PV No constant"},{"location":"input-data/pvarray/#pvdcsyssize","title":"pvDCSysSize","text":"<p>Type: float</p> <p>The rated photovoltaic system DC capacity/size as indicated by the nameplate.</p> Units Legal Range Default Required Variability kW x \\(\\geq\\) 0 none Yes constant"},{"location":"input-data/pvarray/#pvmoduletype","title":"pvModuleType","text":"<p>Type: choice</p> <p>Type of module to model. The module type determines the refraction index and temperature coefficient used in the simulation. Alternatively, the \"Custom\" module type may be used in conjunction with user-defined input for pvCoverRefrInd and pvTempCoeff.</p> Module Type pvCoverRefrInd pvTempCoeff Standard 1.3 -0.00206 Premium 1.3 -0.00194 ThinFilm 1.3 -0.00178 Custom User-defined User-defined Units Legal Range Default Required Variability Standard Premium ThinFilm Custom Standard No constant"},{"location":"input-data/pvarray/#pvcoverrefrind","title":"pvCoverRefrInd","text":"<p>Type: float</p> <p>The refraction index for the coating applied to the module cover. A value of 1.0 represents refraction through air. Coatings have higher refraction indexes that capture more solar at lower angles of incidence.</p> Units Legal Range Default Required Variability x \\(\\geq\\) 0 1.3 No constant"},{"location":"input-data/pvarray/#pvtempcoeff","title":"pvTempCoeff","text":"<p>Type: float</p> <p>The temperature coefficient how the efficiency of the module varies with the cell temperature. Values are typically negative.</p> Units Legal Range Default Required Variability 1/<sup>o</sup>F no restrictions -0.00206 No constant"},{"location":"input-data/pvarray/#pvarraytype","title":"pvArrayType","text":"<p>Type: choice</p> <p>The type of array describes mounting and tracking options. Roof mounted arrays have a higher installed nominal operating cell temperature (INOCT) of 120 <sup>o</sup>F compared to the default of 113 <sup>o</sup>F. Array self-shading is not currently calculated for adjacent rows of modules within an array.</p> Units Legal Range Default Required Variability FixedOpenRack, FixedRoofMount, OneAxisTracking, TwoAxisTracking FixedOpenRack No constant"},{"location":"input-data/pvarray/#pvtilt","title":"pvTilt","text":"<p>Type: float</p> <p>The tilt of the photovoltaic array from horizontal.  Values outside the range 0 to 360 are first normalized to that range. For one-axis tracking, defines the tilt of the rotation axis. Not used for two-axis tracking arrays.  Should be omitted if pvVertices is given.</p> Units Legal Range Default Required Variability degrees unrestricted from pvVertices (if given) else 0 No hourly <p>The following figures illustrate the use of both pvTilt and pvAzm for various configurations:</p> <p></p> <p></p> <p></p> <p></p>"},{"location":"input-data/pvarray/#pvazm","title":"pvAzm","text":"<p>Type: float</p> <p>Photovoltaic array azimuth (0 = north, 90 = east, etc.). If a value outside the range 0<sup>o</sup> \\(\\leq\\) x \\(&lt;\\) 360<sup>o</sup> is given, it is normalized to that range. For one-axis tracking, defines the azimuth of the rotation axis. Not used for two-axis tracking arrays. Should be omitted if pvVertices is given.</p> Units Legal Range Default Required Variability degrees unrestricted from pvVertices (if given) else 0 No hourly"},{"location":"input-data/pvarray/#pvvertices","title":"pvVertices","text":"<p>Type: list of up to 36 floats</p> <p>Vertices of an optional polygon representing the position and shape of the photovoltaic array.  The polygon is used to calculate the shaded fraction using an advanced shading model.  Only PVARRAYs and SHADEXs are considered in the advanced shading model -- PVARRAYs can be shaded by SHADEXs or other PVARRAYs.  If pvVertices is omitted, the PVARRAY is assumed to be unshaded at all times.  Advanced shading must be enabled via TOP exShadeModel.  Note that the polygon is used only for evaluating shading; array capacity is specified by pvDCSysSize (above).</p> <p>The values that follow pvVertices are a series of X, Y, and Z values for the vertices of the polygon using a coordinate system defined from a viewpoint facing north.  X and Y values convey east-west and north-south location respectively relative to an arbitrary origin (positive X value are to the east; positive Y values are to the north).  Z values convey height relative to the building 0 level and positive values are upward.</p> <p>The vertices are specified in counter-clockwise order when facing the receiving surface of the PVARRAY.  The number of values provided must be a multiple of 3.  The defined polygon must be planar and have no crossing edges.  When pvMounting=Building, the effective position of the polygon is modified in response to building rotation specified by TOP bldgAzm.</p> <p>For example, to specify a rectangular photovoltaic array that is 10 x 20 ft, tilted 45 degrees, and facing south --</p> <pre><code> pvVertices = 0, 0, 15,   20, 0, 15,  20, 7.07, 22.07,  0, 7.07, 22.07\n</code></pre> Units Legal Range Default Required Variability ft unrestricted no polygon 9, 12, 15, 18, 21, 24, 27, 30, 33, or 36 values constant"},{"location":"input-data/pvarray/#pvsif","title":"pvSIF","text":"<p>Type: float</p> <p>Shading Impact Factor (SIF) of the array used to represent the disproportionate impact on array output of partially shaded modules at the sub-array level. This impact is applied to the effective beam irradiance on the array:</p> <p>\\(\\(I_{poa,beam,eff} = \\max\\left(I_{poa,beam}\\cdot\\left(1-SIF\\cdot f_{sh}\\right),0\\right)\\)\\)</p> <p>where \\(f_{sh}\\) is the fraction of the array that is shaded.</p> <p>Default value is 1.2, which is representative of PV systems with sub-array microinverters or DC power optimizers. For systems without sub-array power electronics, values are closer to 2.0.</p> Units Legal Range Default Required Variability \u2014 x \\(\\geq\\) 1.0 1.2 No constant"},{"location":"input-data/pvarray/#pvmounting","title":"pvMounting","text":"<p>Type: choice</p> <p>Specified mounting location of this PVARRAY.  pvMounting=Site indicates the array position is not altered by building rotation via TOP bldgAzm, while PVARRAYs with pvMounting=Building are assumed to rotate with the building.</p> Units Legal Range Default Required Variability Building or Site Building No constant"},{"location":"input-data/pvarray/#pvgrndrefl","title":"pvGrndRefl","text":"<p>Type: float</p> <p>Ground reflectance used for calculating reflected solar incidence on the array.</p> Units Legal Range Default Required Variability 0 \\(&lt;\\) x \\(&lt;\\) 1.0 0.2 No hourly"},{"location":"input-data/pvarray/#pvdctoacratio","title":"pvDCtoACRatio","text":"<p>Type: float</p> <p>DC-to-AC ratio used to intentionally undersize the AC inverter. This is used to increase energy production in the beginning and end of the day despite the possibility of clipping peak sun hours.</p> Units Legal Range Default Required Variability x &gt; 0.0 1.2 No constant"},{"location":"input-data/pvarray/#pvinvertereff","title":"pvInverterEff","text":"<p>Type: float</p> <p>AC inverter efficiency at rated DC power.</p> Units Legal Range Default Required Variability 0 \\(&lt;\\) x \\(&lt;\\) 1.0 0.96 No constant"},{"location":"input-data/pvarray/#pvsyslosses","title":"pvSysLosses","text":"<p>Type: float</p> <p>Fraction of total DC energy lost. The total loss from a system is aggregated from several possible causes as illustrated below:</p> Loss Type Default Assumption Soiling 0.02 Shading 0 (handled explicitly) Snow 0 Mismatch 0 (shading mismatch handled explicitly [see pvSIF]) Wiring 0.02 Connections 0.005 Light-induced degradation 0.015 Nameplate rating 0.01 Age 0.05 (estimated 0.5% degradation over 20 years) Availability 0.03 Total 0.14 <p>Italic lines indicate differences from PVWatts assumptions.</p> Units Legal Range Default Required Variability 0 \\(&lt;\\) x \\(&lt;\\) 1.0 0.14 No hourly"},{"location":"input-data/pvarray/#endpvarray","title":"endPVARRAY","text":"<p>Optionally indicates the end of the PVARRAY definition. Alternatively, the end of the definition can be indicated by END or by beginning another object.</p> Units Legal Range Default Required Variability none No constant <p>Related Probes:</p> <ul> <li>@PVArray</li> </ul>"},{"location":"input-data/report/","title":"REPORT","text":"<p>REPORT generates a report object to specify output of specific textual information about the results of the run, the input data, the error messages, etc. The various report types available are enumerated in the description of rpType in this section, and may be described at greater length in Section 6.</p> <p>REPORTs are output by CSE to files, via the REPORTFILE object (previous section). After CSE has completed, you may print the report file(s), examine them with a text editor or by TYPEing, process them with another program, etc., as desired.</p> <p>REPORTs that you do not direct to a different file are written to the automatically-supplied \"Primary\" report file, whose file name is (by default) the input file name with the extension changed to .REP.</p> <p>Each report consists of a report header, one or more data rows, and a report footer. The header gives the report type (as specified with rpType, described below), the frequency (as specified with rpFreq), the month or date where appropriate, and includes headings for the report's columns where appropriate.</p> <p>Usually a report has one data row for each interval being reported. For example, a daily report has a row for each day, with the day of the month shown in the first column.</p> <p>The report footer usually contains a line showing totals for the rows in the report.</p> <p>The header-data-footer sequence is repeated as necessary. For example, a daily report extending over more than one month has a header-data-footer sequence for each month. The header shows the month name; the data rows show the day of the month; the footer contains totals for the month.</p> <p>In addition to the headers and footers of individual reports, the report file has (by default) page headers and footers, described in the preceding section.</p> <p>Default Reports: CSE generates the following reports by default for each run, in the order shown. They are output by default to the \"Primary\" report file. They may be ALTERed or DELETEd as desired, using the object names shown.</p> rpName rpType Additional members Err ERR eb ZEB rpFreq=MONTH; rpZone=SUM; Log LOG Inp INP <p>Any reports specified by the user and not assigned to another file appear in the Primary report file between the default reports \"eb\" and \"Log\", in the order in which the REPORT objects are given in the input file.</p> <p>Because of the many types of reports supported, the members required for each REPORT depend on the report type and frequency in a complex manner. When in doubt, testing is helpful: try your proposed REPORT specification; if it is incomplete or overspecified, CSE will issue specific error messages telling you what additional members are required or what inappropriate members have been given and why.</p>"},{"location":"input-data/report/#rpname","title":"rpName","text":"<p>Name of report. Give after the word REPORT.</p> Units Legal Range Default Required Variability 63 characters none No constant"},{"location":"input-data/report/#rpreportfile","title":"rpReportfile","text":"<p>Type: rfname</p> <p>Name of report file to which current report will be written. If omitted, if REPORT is within a REPORTFILE object, report will be written to that report file, or else to REPORTFILE \"Primary\", which (as described in previous section) is automatically supplied and by default uses the file name of the input file with the extension .REP.</p> Units Legal Range Default Required Variability name of a REPORTFILE current REPORTFILE, if any, else Primary No constant"},{"location":"input-data/report/#rptype","title":"rpType","text":"<p>Type: choice</p> <p>Choice indicating report type. Report types may be described at greater length, with examples, in Section 6.</p> ERR Error and warning messages. If there are any such messages, they are also displayed on the screen AND written to a file with the same name as the input file and extension .ERR. Furthermore, * *many error messages are repeated in the INP report. LOG Run 'log'. As of July 1992, contains only CSE version number; should be enhanced or deleted.?? INP Input echo: shows the portion of the input file used to specify this run. Does not repeat descriptions of objects left from prior runs in the same session when CLEAR is not used. Error and warning messages relating to specific lines of the input are repeated after or near the line to which they relate, prefixed with '?'. Lines not used due to a preprocessor #if command (Section 4.4.4) with a false expression are prefixed with a '0' in the leftmost column; all preprocessor command lines are prefixed with a '#' in that column. SUM Run summary. As of July 1992, NOT IMPLEMENTED: generates no  output and no error message. Should be defined and implemented, or else deleted??. ZDD Zone data dump. Detailed dump of internal simulation values, useful for verifying that your input is as desired. Should be made less cryptic (July 1992)??. Requires rpZone. ZST Zone statistics. Requires rpZone. ZEB Zone energy balance. Requires rpZone. MTR Meter report. Requires rpMeter. DHWMTR DHW meter report.  Requires rpDHWMeter AFMTR Air flow meter report.  Requires rpAFMeter UDT User-defined table. Data items are specified with REPORTCOL commands (next section). Allows creating almost any desired report by using CSE expressions to specify numeric or string values to tabulate; 'Probes' may be used in the expressions to access CSE internal data. Units Legal Range Default Required Variability see above none Yes constant <p>The next three members specify how frequently values are reported and the start and end dates for the REPORT. They are not allowed with rpTypes ERR, LOG, INP, SUM, and ZDD, which involve no time-varying data.</p>"},{"location":"input-data/report/#rpfreq","title":"rpFreq","text":"<p>Type: choice</p> <p>Report Frequency: specifies interval for generating rows of report data:</p> YEAR at run completion MONTH at end of each month (and at run completion if mid-month) DAY at end of each day HOUR at end of each hour HOURANDSUB at end of each subhour and at end of hour SUBHOUR at end of each subhour <p>rpFreq values of HOURANDSUB and SUBHOUR are not supported in some combinations with data selection of ALL or SUM.</p> <p>We recommend using HOURly and more frequent reports sparingly, to report on only a few typical or extreme days, or to explore a problem once it is known what day(s) it occurs on. Specifying such reports for a full-year run will generate a huge amount of output and cause extremely slow CSE execution.</p> Units Legal Range Default Required Variability choices above none per rpType constant"},{"location":"input-data/report/#rpdaybeg","title":"rpDayBeg","text":"<p>Type: date</p> <p>Initial day of period to be reported. Reports for which rpFreq = YEAR do not allow specification of rpDayBeg and rpDayEnd; for MONTH reports, these members default to include all months in the run; for DAY and shorter-interval reports, rpDayBeg is required and rpDayEnd defaults to rpDayBeg.</p> Units Legal Range Default Required Variability date first day of simulation if rpFreq = MONTH Required for rpTypes ZEB, ZST, MTR, AH, and UDT if rpFreq is DAY, HOUR, HOURANDSUB, or SUBHOUR constant"},{"location":"input-data/report/#rpdayend","title":"rpDayEnd","text":"<p>Type: date</p> <p>Final day of period to be reported, except for YEAR reports.</p> Units Legal Range Default Required Variability date last day of simulation if rpFreq= MONTH, else rpDayBeg No constant"},{"location":"input-data/report/#rpzone","title":"rpZone","text":"<p>Type: znName</p> <p>Name of ZONE for which a ZEB, ZST, or ZDD report is being requested. For rpType ZEB or ZST, you may use rpZone=SUM to obtain a report showing only the sum of the data for all zones, or rpZone=ALL to obtain a report showing, for each time interval, a row of data for each zone plus a sum-of-zones row.</p> Units Legal Range Default Required Variability name of a ZONE, ALL, SUM none Required for rpTypes ZDD, ZEB, and ZST. constant"},{"location":"input-data/report/#rpmeter","title":"rpMeter","text":"<p>Type: mtrName</p> <p>Specifies meter(s) to be reported, for rpType=MTR.</p> Units Legal Range Default Required Variability name of a METER, ALL, SUM none Required for rpType=MTR constant"},{"location":"input-data/report/#rpdhwmeter","title":"rpDHWMeter","text":"<p>Type: dhwMtrName</p> <p>Specifies DHW meter(s) to be reported, for rpType=DHWMTR.</p> Units Legal Range Default Required Variability name of a DHWMETER, ALL, SUM none Required for rpType=DHWMTR constant"},{"location":"input-data/report/#rpafmeter","title":"rpAFMeter","text":"<p>Type: afMtrName</p> <p>Specifies air flow meter(s) to be reported, for rpType=AFMTR.</p> Units Legal Range Default Required Variability name of a DHWMETER, ALL, SUM none Required for rpType=AFMTR constant"},{"location":"input-data/report/#rpah","title":"rpAh","text":"<p>Type: ahName</p> <p>Specifies air handler(s) to be reported, for rpType=AH, AHSIZE, or AHLOAD.</p> Units Legal Range Default Required Variability name of an AIRHANDLER, ALL, SUM none Required for rpType=AH, AHSIZE, or AHLOAD constant"},{"location":"input-data/report/#rptu","title":"rpTu","text":"<p>Type: tuName</p> <p>Specifies air handler(s) to be reported, for rpType=TUSIZE or TULOAD.</p> Units Legal Range Default Required Variability name of a TERMINAL, ALL, SUM none Required for rpType constant"},{"location":"input-data/report/#rpbtusf","title":"rpBtuSf","text":"<p>Type: float</p> <p>Scale factor to be used when reporting energy values. Internally, all energy values are represented in Btu. This member allows scaling to more convenient units for output. rpBtuSf is not shown in the output, so if you change it, be sure the readers of the report know the energy units being used. rpBtuSf is not applied in UDT reports, but column values can be scaled as needed with expressions.</p> Units Legal Range Default Required Variability any multiple of ten 1,000,000: energy reported in MBtu. No constant"},{"location":"input-data/report/#rpcond","title":"rpCond","text":"<p>Type: expression</p> <p>Conditional reporting flag. If given, report rows are printed only when value of expression is non-0. Permits selective reporting according to any condition that can be expressed as a CSE expression. Such conditional reporting can be used to shorten output and make it easy to find data of interest when you are only interested in the information under exceptional conditions, such as excessive zone temperature. Allowed with rpTypes ZEB, ZST, MTR, AH, and UDT.</p> Units Legal Range Default Required Variability any numeric expression 1 (reporting enabled) No subhour end of interval"},{"location":"input-data/report/#rpcpl","title":"rpCPL","text":"<p>Type: int</p> <p>Characters per line for a UDT (user-defined report). If widths specified in REPORTCOLs add up to more than this, a message occurs; if they total substantially less, additional whitespace is inserted between columns to make the report more readable. If rpCPL = -1, the report width determined based on required space with a single space between columns.  rpCPL=0 uses the Top level repCPL. rpCPL is not allowed if rpType is not UDT.</p> Units Legal Range Default Required Variability x \\(\\ge\\) -1 -1 (as wide as needed) No constant"},{"location":"input-data/report/#rptitle","title":"rpTitle","text":"<p>Type: string</p> <p>Title for use in report header of User-Defined report. Disallowed if rpType is not UDT.</p> Units Legal Range Default Required Variability User-defined Report No constant"},{"location":"input-data/report/#rpheader","title":"rpHeader","text":"<p>Type: choice</p> <p>Use NO to suppress the report header which gives the report type, zone, meter, or air handler being reported, time interval, column headings, etc. One reason to do this might be if you are putting only a single report in a report file and intend to later embed the report in a document or process it with some other program (but for the latter, see also EXPORT, below).</p> <p>Use with caution, as the header contains much of the identification of the data. For example, in an hourly report, only the hour of the day is shown in each data row; the day and month are shown in the header, which is repeated for each 24 data rows.</p> <p>See REPORTFILE member rfPageFmt, above, to control report FILE page headers and footers, as opposed to REPORT headers and footers.</p> Units Legal Range Default Required Variability YES, NO YES No constant"},{"location":"input-data/report/#rpfooter","title":"rpFooter","text":"<p>Type: choice</p> <p>Use NO to suppress the report footers. The report footer is usually a row which sums hourly data for the day, daily data for the month, or monthly data for the year. For a report with rpZone, rpMeter,or rpAh = ALL, the footer row shows sums for all zones, meters, or air handlers. Sometimes the footer is merely a blank line.</p> Units Legal Range Default Required Variability YES, NO YES No constant"},{"location":"input-data/report/#endreport","title":"endReport","text":"<p>Optionally indicates the end of the report definition. Alternatively, the end of the report definition can be indicated by END or by beginning another object.</p> Units Legal Range Default Required Variability none No constant <p>Related Probes:</p> <ul> <li>@report</li> </ul>"},{"location":"input-data/reportcol/","title":"REPORTCOL","text":"<p>Each REPORTCOL defines a single column of a User Defined Table (UDT) report. REPORTCOLs are not used with report types other than UDT.</p> <p>Use as many REPORTCOLs as there are values to be shown in each row of the user-defined report. The values will appear in columns, ordered from left to right in the order defined. Be sure to include any necessary values to identify the row, such as the day of month, hour of day, etc. CSE supplies NO columns automatically.</p>"},{"location":"input-data/reportcol/#colname","title":"colName","text":"<p>Name of REPORTCOL.</p> Units Legal Range Default Required Variability 63 characters none No constant"},{"location":"input-data/reportcol/#colreport","title":"colReport","text":"<p>Type: rpName</p> <p>Name of report to which current report column belongs. If REPORTCOL is given within a REPORT object, then colReport defaults to that report.</p> Units Legal Range Default Required Variability name of a REPORT current report, if any Unless in a REPORT constant"},{"location":"input-data/reportcol/#colval","title":"colVal","text":"<p>Type: expression</p> <p>Value to show in this column of report.</p> Units Legal Range Default Required Variability any numeric or string expression none Yes subhour /end interval"},{"location":"input-data/reportcol/#colhead","title":"colHead","text":"<p>Type: string</p> <p>Text used for column head.</p> Units Legal Range Default Required Variability colName or blank No constant"},{"location":"input-data/reportcol/#colgap","title":"colGap","text":"<p>Type: int</p> <p>Space between (to left of) column, in character positions. Allows you to space columns unequally, to emphasize relations among columns or to improve readability. If the total of the colGaps and colWids in the report's REPORTCOLs is substantially less than the REPORT's rpCPL (characters per line, see REPORT), CSE will insert additional spaces between columns. To suppress these spaces, use a smaller rpCPL or use rpCPL = -1.</p> Units Legal Range Default Required Variability x \\(\\ge\\) 0 1 No constant"},{"location":"input-data/reportcol/#colwid","title":"colWid","text":"<p>Type: int</p> <p>Column width.</p> Units Legal Range Default Required Variability x \\(\\ge\\) 0 10 No constant"},{"location":"input-data/reportcol/#coldec","title":"colDec","text":"<p>Type: int</p> <p>Number of digits after decimal point.</p> Units Legal Range Default Required Variability x \\(\\ge\\) 0 flexible format No constant"},{"location":"input-data/reportcol/#coljust","title":"colJust","text":"<p>Type: choice</p> <p>Specifies positioning of data within column:</p> Left Left justified Right Right justified"},{"location":"input-data/reportcol/#endreportcol","title":"endReportCol","text":"<p>Optionally indicates the end of the report column definition. Alternatively, the end of the report column definition can be indicated by END or by beginning another REPORTCOL or other object.</p> Units Legal Range Default Required Variability none No constant <p>Related Probes:</p> <ul> <li>@reportCol</li> </ul>"},{"location":"input-data/reportfile/","title":"REPORTFILE","text":"<p>REPORTFILE allows optional specification of different or additional files to receive CSE reports.</p> <p>By default, CSE generates several \"reports\" on each run showing the simulated HVAC energy use, the input statements specifying the run, any error or warning messages, etc. Different or additional reports can be specified using the REPORT object, described in Section 5.25, next.</p> <p>All CSE reports are written to text files as plain ASCII text. The files may be printed (on most printers other than postscript printers) by copying them to your printer with the COPY command. Since many built-in reports are over 80 characters wide; you may want to set your printer for \"compressed\" characters or a small font first. You may wish to examine the report file with a text editor or LIST program before printing it. (?? Improve printing discussion)</p> <p>By default, the reports are output to a file with the same name as the input file and extension .REP, in the same directory as the input file. By default, this file is formatted into pages, and overwrites any existing file of the same name without warning. CSE automatically generates a REPORTFILE object called \"Primary\" for this report file, as though the following input had been given:</p> <pre><code>    REPORTFILE \"Primary\"\n        rfFileName = &lt;inputFile&gt;.REP;\n        // other members defaulted: rfFileStat=OVERWRITE; rfPageFmt=NO.\n</code></pre> <p>Using REPORTFILE, you can specify additional report files. REPORTs specified within a REPORTFILE object definition are output by default to that file; REPORTs specified elsewhere may be directed to a specific report file with the REPORT member rpReportFile. Any number of REPORTFILEs and REPORTs may be used in a run or session. Any number of REPORTs can be directed to each REPORTFILE.</p> <p>Using ALTER (Section 4.5.1.2) with REPORTFILE, you can change the characteristics of the Primary report output file. For example:</p> <pre><code>    ALTER REPORTFILE Primary\n        rfPageFmt = NO;     // do not format into pages\n        rfFileStat = NEW;   // error if file exists\n</code></pre>"},{"location":"input-data/reportfile/#rfname","title":"rfName","text":"<p>Name of REPORTFILE object, given immediately after the word REPORTFILE. Note that this name, not the fileName of the report file, is used to refer to the REPORTFILE in REPORTs.</p> Units Legal Range Default Required Variability 63 characters none No constant"},{"location":"input-data/reportfile/#rffilename","title":"rfFileName","text":"<p>Type: path</p> <p>path name of file to be written. If no path is specified, the file is written in the current directory. The default extension is .REP.</p> Units Legal Range Default Required Variability file name, path and extension optional none Yes constant"},{"location":"input-data/reportfile/#rffilestat","title":"rfFileStat","text":"<p>Type: choice</p> <p>Choice indicating what CSE should do if the file specified by rfFileNamealready exists:</p> OVERWRITE Overwrite pre-existing file. NEW Issue error message if file exists at beginning of session. If there are several runs in session using same file, output from runs after the first will append. APPEND Append new output to present contents of existing file. <p>If the specified file does not exist, it is created and rfFileStat has no effect.</p> Units Legal Range Default Required Variability OVERWRITE, NEW, APPEND OVERWRITE No constant"},{"location":"input-data/reportfile/#rfpagefmt","title":"rfPageFmt","text":"<p>Type: Choice</p> <p>Choice controlling page formatting. Page formatting consists of dividing the output into pages (with form feed characters), starting a new page before each report too long to fit on the current page, and putting headers and footers on each page. Page formatting makes attractive printed output but is a distraction when examining the output on the screen and may inappropriate if you are going to further process the output with another program.</p> Yes Do page formatting in this report file. No Suppress page formatting. Output is continuous, uninterrupted by page headers and footers or large blank spaces. Units Legal Range Default Required Variability YES, NO No No constant <p>Unless page formatting is suppressed, the page formats for all report files are controlled by the TOP members repHdrL, repHdrR, repLPP, repTopM, repBotM,and repCPL, described in Section 5.1.</p> <p>Each page header shows the repHdrL and repHdrR text, if given.</p> <p>Each page footer shows the input file name, run serial number within session (see runSerial in Section 5.1), user-input runTitle (see Section 5.1), date and time of run, and page number in file.</p> <p>Vertical page layout is controlled by repLPP, repTopM, and repBotM (Section 5.1). The width of each header and footer is controlled by repCPL. Since many built-in reports are now over 80 columns wide, you may want to use repCPL=120 or repCPL=132 to make the headers and footers match the text better.</p> <p>In addition to report file page headers and footers, individual REPORTs have REPORT headers and footers related to the report content. These are described under REPORT, Section 5.25.</p>"},{"location":"input-data/reportfile/#endreportfile","title":"endReportFile","text":"<p>Optionally indicates the end of the report file definition. Alternatively, the end of the report file definition can be indicated by END or by beginning another object.</p> Units Legal Range Default Required Variability none No constant <p>Related Probes:</p> <ul> <li>@reportFile</li> </ul>"},{"location":"input-data/rsys/","title":"RSYS","text":"<p>RSYS constructs an object representing an air-based residential HVAC system.</p>"},{"location":"input-data/rsys/#rsname","title":"rsName","text":"<p>Optional name of HVAC system; give after the word \u201cRSYS\u201d if desired.</p> Units Legal Range Default Required Variability 63 characters none No constant"},{"location":"input-data/rsys/#rstype","title":"rsType","text":"<p>Type: choice</p> <p>Type of system.</p> rsType Description ACFURNACE Compressor-based cooling modeled per SEER and EER.  Fuel-fired heating. Primary heating input energy is accumulated to end use HTG of meter rsFuelMtr. ACPMFURNACE Compressor-based cooling modeled per PERFORMANCEMAP specified in rsPerfMapClg.  Fuel-fired heating. Primary heating input energy is accumulated to end use HTG of meter rsFuelMtr. ACRESISTANCE Compressor-based cooling and electric ('strip') heating. Cooling performance based on SEER and EER.  Primary heating input energy is accumulated to end use HTG of meter rsElecMtr. ACPMRESISTANCE Cooling based on PERFORMANCEMAP specified in rsPerfMapClg. Primary heating input energy is accumulated to end use HTG of meter rsElecMtr. ASHP Air-source heat pump (compressor-based heating and cooling). Primary (compressor) heating input energy is accumulated to end use HTG of meter rsElecMtr. Auxiliary and defrost heating input energy is accumulated to end use HPBU of meter rsElecMtr or meter rsFuelMtr (depending on rsTypeAuxH). ASHPKGROOM Packaged room air-source heat pump. ASHPHYDRONIC Air-to-water heat pump with hydronic distribution. Compressor performance is approximated using the air-to-air model with adjusted efficiencies. ASHPPM Air-to-air heat pump modeled per PERFORMANCMAPs specified via rsPerfMapHtg and rsPerfMapClg. WSHP Water-to-air heat pump. AC Compressor-based cooling; no heating. Required ratings are SEER and capacity and EER at 95 <sup>o</sup>F outdoor dry bulb. ACPM Compressor-based cooling modeled per PERFORMANCEMAP specified in rsPerfMapClg; no heating. ACPKGROOM Packaged compressor-based cooling; no heating. Required ratings are capacity and EER at 95 <sup>o</sup>F outdoor dry bulb. FURNACE Fuel-fired heating. Primary heating input energy is accumulated to end use HTG of meter rsFuelMtr. RESISTANCE Electric heating. Primary heating input energy is accumulated to end use HTG of meter rsElecMtr. ACPKGROOMFURNACE Packaged room cooling and (separate) furnace heating. ACPKGROOMRESISTANCE Packaged room cooling and electric resistance heating. COMBINEDHEATDHW Combined heating / DHW.  Use rsCHDHWSYS to specify the DHWSYS that provides hot water to the coil in this RSYS.  No cooling. ACCOMBINEDHEATDHW Compressor-based cooling; COMBINEDHEATDHW heating. ACPMCOMBINEDHEATDHW Compressor-based cooling modeled per PERFORMANCEMAP specified in rsPerfMapClg; COMBINEDHEATDHW heating. FANCOIL Coil-based heating and cooling.  No primary (fuel-using) equipment is modeled.  rsLoadMtr, rsHtgLoadMtr, and rsClgLoadMtr are typically used to record loads for linking to an external model. Units Legal Range Default Required Variability one of above choices ACFURNACE No constant"},{"location":"input-data/rsys/#rsdesc","title":"rsDesc","text":"<p>Type: string</p> <p>Text description of system, included as documentation in debugging reports such as those triggered by rsGeneratePerfMap=YES</p> Units Legal Range Default Required Variability string none No constant"},{"location":"input-data/rsys/#rsmodectrl","title":"rsModeCtrl","text":"<p>Type: choice</p> <p>Specifies systems heating/cooling availability during simulation.</p> OFF System is off (neither heating nor cooling is available) HEAT System can heat (assuming rsType can heat) COOL System can cool (assuming rsType can cool) AUTO System can either heat or cool (assuming rsType compatibility). First request by any zone served by this RSYS determines mode for the current time step. Units Legal Range Default Required Variability OFF, HEAT, COOL, AUTO AUTO No hourly"},{"location":"input-data/rsys/#rsgenerateperfmap","title":"rsGeneratePerfMap","text":"<p>Type: choice</p> <p>Generate performance map(s) for this RSYS. Comma-separated text is written to file PM_[rsName].csv. This is a debugging capability that is not necessarily maintained.  The format of the generated csv text file may change and is unrelated to the PERFORMANCEMAP input scheme used via rsPerfMapHtg and rsPerfMapClg.</p> Units Legal Range Default Required Variability YES, NO NO No constant"},{"location":"input-data/rsys/#rsfanty","title":"rsFanTy","text":"<p>Type: choice</p> <p>Specifies fan (blower) position relative to primary heating or cooling source (i.e. heat exchanger or heat pump coil for heating and AC coil for cooling).  The blower position determines where fan heat is added to the RSYS air stream and thus influences the coil entering air temperature.</p> Units Legal Range Default Required Variability BLOWTHRU, DRAWTHRU BLOWTHRU No constant"},{"location":"input-data/rsys/#rsfanmotty","title":"rsFanMotTy","text":"<p>Type: choice</p> <p>Specifies type of motor driving the fan (blower). This is used in the derivation of the coil-only cooling capacity for the RSYS.</p> PSC Permanent split capacitor BPM Brushless permanent magnet (aka ECM) Units Legal Range Default Required Variability PSC, BPM PSC No constant"},{"location":"input-data/rsys/#rsadjforfanht","title":"rsAdjForFanHt","text":"<p>Type: choice</p> <p>Fan heat adjustment with two options Yes or no. Yes: fanHtRtd derived from rsFanTy and removed from capacity and input values. No: no rated fan heat adjustments.</p>"},{"location":"input-data/rsys/#rselecmtr","title":"rsElecMtr","text":"<p>Type: mtrName</p> <p>Name of METER object, if any, by which system\u2019s electrical energy use is recorded (under appropriate end uses).</p> Units Legal Range Default Required Variability name of a METER none No constant"},{"location":"input-data/rsys/#rsfuelmtr","title":"rsFuelMtr","text":"<p>Type: mtrName</p> <p>Name of METER object, if any, by which system\u2019s fuel energy use is recorded (under appropriate end uses).</p> Units Legal Range Default Required Variability name of a METER none No constant"},{"location":"input-data/rsys/#rsloadmtr-rshtgloadmtr-rsclgloadmtr","title":"rsLoadMtr, rsHtgLoadMtr, rsClgLoadMtr","text":"<p>Type: ldMtrName</p> <p>Names of LOADMETER objects, if any, to which the system\u2019s heating and/or cooling loads are recorded.  Loads are the gross heating and cooling energy added to (or removed from) the air stream.  Fan heat, auxiliary heat, and duct losses are not included in loads values.</p> <p>rsLoadMtr accumulates both heating (&gt; 0) and cooling (&lt; 0) loads. rsHtgLoadMtr accumulates only heating loads.  rsClgLoadMtr accumulates only cooling loads.  This arrangement accomodates mixed heating and cooling source configurations.  For example, loads can be tracked appropriately in a building that has multiple cooling sources and a single heating source.</p> <p>rsLoadMtr should not specify the same LOADMETER as rsHtgLoadMtr or rsClgLoadMtr since this would result in double counting.</p> Units Legal Range Default Required Variability name of a LOADMETER none No constant"},{"location":"input-data/rsys/#rssrcsideloadmtr-rshtgsrcsideloadmtr-rsclgsrcsideloadmtr","title":"rsSrcSideLoadMtr, rsHtgSrcSideLoadMtr, rsClgSrcSideLoadMtr","text":"<p>Type: ldMtrName</p> <p>Name of LOADMETER objects, if any, to which the system\u2019s source-side heat transfers are recorded.  For DX systems, this is the outdoor coil heat transfer.  For other types, source-side values are the same as the indoor coil loads reported via rsLoadMtr.</p> <p>rsSrcSideLoadMtr accumulates both heating (&gt; 0) and cooling (&lt; 0) transfers. rsHtgSrcSideLoadMtr accumulates only heating transfers.  rsClgSrcSideLoadMtr accumulates only cooling transfers.  This arrangement accomodates mixed heating and cooling source configurations.</p> <p>rsSrcSideLoadMtr should not specify the same LOADMETER as rsHtgSrcSideLoadMtr or rsClgSrcSideLoadMtr since this would result in double counting.</p> Units Legal Range Default Required Variability Name of a LOADMETER No constant"},{"location":"input-data/rsys/#rschdhwsys","title":"rsCHDHWSYS","text":"<p>Type: dhwsysName</p> <p>DHWSYS hot water source for this RSYS, required when rsType is COMBINEDHEATDHW or ACCOMBINEDHEATDHW.  The specified DHWSYS must include a DHWHEATER of whType=ASHPX or RESISTANCEX.</p> Units Legal Range Default Required Variability Name of a DHWSYS none if combined heat/DHW constant"},{"location":"input-data/rsys/#rsafue","title":"rsAFUE","text":"<p>Type: float</p> <p>Heating Annual Fuel Utilization Efficiency (AFUE).</p> Units Legal Range Default Required Variability 0 \\(&lt;\\) x \\(\\le\\) 1 0.9 if furnace, 1.0 if resistance No constant"},{"location":"input-data/rsys/#rscaph","title":"rsCapH","text":"<p>Type: float</p> <p>Heating capacity, used when rsType is ACFURNACE, ACRESISTANCE, FURNACE, WSHP or RESISTANCE.</p> <p>If rsType=WSHP, rsCapH is at source fluid temperature = 68 <sup>o</sup>F.</p> Units Legal Range Default Required Variability Btu/hr AUTOSIZE or x \\(\\ge\\) 0 0 No constant"},{"location":"input-data/rsys/#rstddesh","title":"rsTdDesH","text":"<p>Type: float</p> <p>Nominal heating temperature rise (across system, not at zone) used during autosizing (when capacity is not yet known) and to derive heating air flow rate from heating capacity.</p> Units Legal Range Default Required Variability <sup>o</sup>F x \\(&gt;\\) 0 30 <sup>o</sup>F if heat pump else 50 <sup>o</sup>F No constant"},{"location":"input-data/rsys/#rsfxcaph","title":"rsFxCapH","text":"<p>Type: float</p> <p>Heating autosizing capacity factor. If AUTOSIZEd, rsCapH or rsCap47 is set to rsFxCapH \\(\\times\\) (peak design-day load). Peak design-day load is the heating capacity that holds zone temperature at the thermostat set point during the last substep of all hours of all design days.</p> Units Legal Range Default Required Variability x \\(&gt;\\) 0 1.4 No constant"},{"location":"input-data/rsys/#rsfanpwrh","title":"rsFanPwrH","text":"<p>Type: float</p> <p>Heating operating fan power. For most rsTypes, heating air flow is calculated from heating capacity and rsTdDesH.  The default value of rsFanPwrH is .365 W/cfm except 0.273 W/cfm is used when rsType=COMBINEDHEATDHW and rsType=ACCOMBINEDHEATDHW.</p> Units Legal Range Default Required Variability W/cfm x \\(\\ge\\) 0 see above No constant"},{"location":"input-data/rsys/#rshspf","title":"rsHSPF","text":"<p>Type: float</p> <p>For rsType=ASHP, Heating Seasonal Performance Factor (HSPF).</p> Units Legal Range Default Required Variability Btu/Wh x \\(&gt;\\) 0 none Yes if rsType=ASHP constant"},{"location":"input-data/rsys/#rscap47","title":"rsCap47","text":"<p>Type: float</p> <p>For rsType=ASHP, rated heating capacity at outdoor dry-bulb temperature = 47 <sup>o</sup>F.</p> <p>If rsType=ASHP and both rsCapC and rsCap47 are autosized, both are set to the larger consistent value using rsCapRat9547 (after application of rsFxCapH and rsFxCapC).</p> Units Legal Range Default Required Variability Btu/Wh AUTOSIZE or x \\(&gt;\\) 0 Calculated from rsCapC No constant"},{"location":"input-data/rsys/#rscap35","title":"rsCap35","text":"<p>Type: float</p> <p>For rsType=ASHP, rated heating capacity at outdoor dry-bulb temperature = 35 <sup>o</sup>F.  rsCap35 typically reflects reduced capacity due to reverse (cooling) heat pump operation for defrost.</p> Units Legal Range Default Required Variability Btu/Wh x \\(&gt;\\) 0 Calculated from rsCap47 and rsCap17 No constant"},{"location":"input-data/rsys/#rscap17","title":"rsCap17","text":"<p>Type: float</p> <p>For rsType=ASHP, rated heating capacity at outdoor dry-bulb temperature = 17 <sup>o</sup>F.</p> Units Legal Range Default Required Variability Btu/Wh x \\(&gt;\\) 0 Calculated from rsCap47 No constant"},{"location":"input-data/rsys/#rscop95","title":"rsCOP95","text":"<p>Type: float</p> <p>For rsType=ASHP, rated heating coefficient of performance at outdoor dry-bulb temperature = 95 <sup>o</sup>F.</p> Units Legal Range Default Required Variability x \\(&gt;\\) 0 Calculated from rsCap95 No constant"},{"location":"input-data/rsys/#rscop47","title":"rsCOP47","text":"<p>Type: float</p> <p>For rsType=ASHP, rated heating coefficient of performance at outdoor dry-bulb temperature = 47 <sup>o</sup>F. For rsType=WSHP, rated heating coefficient of performance at source fluid temperature = 68 <sup>o</sup>F.</p> Units Legal Range Default Required Variability x \\(&gt;\\) 0 Estimated from rsHSPF, rsCap47, and rsCap17 No constant"},{"location":"input-data/rsys/#rscop35","title":"rsCOP35","text":"<p>Type: float</p> <p>For rsType=ASHP, rated heating coefficient of performance at outdoor dry-bulb temperature = 35 <sup>o</sup>F.</p> Units Legal Range Default Required Variability x \\(&gt;\\) 0 Calculated from rsCap35, rsCap47, rsCap17, rsCOP47, and rsCOP17 No constant"},{"location":"input-data/rsys/#rscop17","title":"rsCOP17","text":"<p>Type: float</p> <p>For rsType=ASHP, rated heating coefficient of performance at outdoor dry-bulb temperature = 17 <sup>o</sup>F.</p> Units Legal Range Default Required Variability x \\(&gt;\\) 0 Calculated from rsHSPF, rsCap47, and rsCap17 No constant"},{"location":"input-data/rsys/#rscaprat1747","title":"rsCapRat1747","text":"<p>Type: float</p> <p>For rsType=ASHP, ratio of rsCAP17 over rsCAP47.</p> Units Legal Range Default Required Variability x \\(&gt;\\) 0 Based on HSPF or other correlations No Start of a run"},{"location":"input-data/rsys/#rsfchgh","title":"rsFChgH","text":"<p>Type: float</p> <p>For all heatpump types, heating compressor charge factor.  The heating gross (compressor only) COP is modified by rsFChgH to account for incorrect refrigerant charge.</p> Units Legal Range Default Required Variability x \\(&gt;\\) 0 1 (no effect) No constant"},{"location":"input-data/rsys/#rscaprat9547","title":"rsCapRat9547","text":"<p>Type: float</p> <p>Ratio of rsCAP95 to rsCAP47.  This ratio is used for inter-defaulting rsCap47 and rsCapC such that they have consistent values as is required given that a heat pump is a single device.  If not given, rsCapRat9547 is determined during calculations using the relationship cap95 = 0.98 * cap47 + 180 (derived via correlation of capacities of a set of real units).</p> Units Legal Range Default Required Variability x \\(&gt;\\) 0 See above No constant"},{"location":"input-data/rsys/#rscapratch","title":"rsCapRatCH","text":"<p>Type: float</p> <p>For WSHP only: ratio of rsCapC to rsCapH.  Used to derive capacity during autosizing or when only one capacity is specified.</p> Units Legal Range Default Required Variability .3 \\(\\leq\\) x \\(&lt;\\) 2 0.8 No Start of a run"},{"location":"input-data/rsys/#rsperfmaphtg","title":"rsPerfMapHtg","text":"<p>Type: performanceMapName</p> <p>Specifies the heating performance PERFORMANCEMAP for RSYSs having rsType=ASHPPM.  The PERFORMANCEMAP must have grid variables outdoor drybulb and compressor speed (in that order) and lookup values of net capacity ratios and COP.  See example in PERFORMANCEMAP.</p> Units Legal Range Default Required Variability Name of a PERFORMANCEMAP if rsType specifies a performance map model Start of a run"},{"location":"input-data/rsys/#rsperfmapclg","title":"rsPerfMapClg","text":"<p>Type: performanceMapName</p> <p>Specifies the cooling performance PERFORMANCEMAP for RSYSs having rsType=ASHPPM, ACPM, ACPMFURNACE, ACPMRESISTANCE, or ACPMCOMBINEDHEATDHW.  The PERFORMANCEMAP must have grid variables outdoor drybulb and compressor speed (in that order) and lookup values of net capacity ratios and COP.  See example in PERFORMANCEMAP.</p> Units Legal Range Default Required Variability Name of a PERFORMANCEMAP if rsType specifies a performance map model Start of a run"},{"location":"input-data/rsys/#rstypeauxh","title":"rsTypeAuxH","text":"<p>Type: choice</p> <p>For rsType=ASHP, type of auxiliary heat.  Auxiliary heating is used when heatpump capacity is insufficient to maintain zone temperature and during reverse-cycle defrost operation (if rsDefrostModel=REVCYCLEAUX).  If rsTypeAuxH=Furnace, energy use for auxiliary heat is accumulated to end use HPBU of meter rsFuelMtr (if specified).  If rsTypeAuxH=Resistance, energy use for auxiliary heat is accumulated to end use HPBU of meter rsElecMtr (if specified).</p> Choice Description NONE No auxiliary heat RESISTANCE Electric resistance (aka strip heat) FURNACE Fuel-fired Units Legal Range Default Required Variability See table above RESISTANCE No constant"},{"location":"input-data/rsys/#rsctrlauxh","title":"rsCtrlAuxH","text":"<p>Type: choice</p> <p>For rsType=ASHP, type of auxiliary heating control.</p> Choice Description LOCKOUT Compressor locked out if any auxiliary heating control CYCLE Compressor runs continuously and auxiliary cycles ALTERNATE Alternates between compressor and auxiliary Units Legal Range Default Required Variability See table above ALTERNATE if rsTypeAuxH=FURNACE else CYCLE No Start of a run"},{"location":"input-data/rsys/#rscapauxh","title":"rsCapAuxH","text":"<p>Type: float</p> <p>For rsType=ASHP, auxiliary heating capacity. If AUTOSIZEd, rsCapAuxH is set to the peak heating load evaluated at the heating design temperature (Top.heatDsTDbO).</p> Units Legal Range Default Required Variability Btu/hr AUTOSIZE or x \\(\\ge\\) 0 0 No constant"},{"location":"input-data/rsys/#rsafueauxh","title":"rsAFUEAuxH","text":"<p>Type: float</p> <p>For rsType=ASHP, auxiliary heat annualized fuel utilization efficiency.</p> Units Legal Range Default Required Variability x \\(&gt;\\) 0 0.9 if rsTypeAuxH=FURNACE else 1 No constant"},{"location":"input-data/rsys/#rsdefrostmodel","title":"rsDefrostModel","text":"<p>Type: choice</p> <p>Selects modeling options for ASHP outdoor coil defrosting when 17 <sup>o</sup>F &lt; TDbO &lt; 45 <sup>o</sup>F.  In this temperature range, heating capacity and/or efficiency are typically reduced due to frost accumulation on the outdoor coil.  </p> NONE Defrost is not modeled.  When 17 <sup>o</sup>F &lt; TDbO &lt; 45 <sup>o</sup>F, capacity and efficiency are determined by interpolation using unmodified 17 <sup>o</sup>F and 47 <sup>o</sup>F data. REVCYCLE Reverse compressor (cooling) operation.  Net capacity and efficiency is derived from rsCap17/rsCOP17 and rsCap35/rsCOP35 using linear interpolation.  Auxiliary heat is not modeled. REVCYCLEAUX Reverse compressor (cooling) operation with provision of sufficient auxiliary heat to make up the loss of heating capacity.  Auxiliary heating is typically used to prevent cold air delivery to zones during the defrost cycle. Units Legal Range Default Required Variability one of above choices REVCYCLEAUX No constant"},{"location":"input-data/rsys/#rsshrtarget","title":"rsSHRtarget","text":"<p>Type: float</p> <p>Nominal target for sensible heat ratio (for fancoil).</p> Units Legal Range Default Required Variability x \\(&gt;\\) 0 0.7 No subhour"},{"location":"input-data/rsys/#rsfxcapauxh","title":"rsFxCapAuxH","text":"<p>Type: float</p> <p>Auxiliary heating autosizing capacity factor. If AUTOSIZEd, rsCapAuxH is set to rsFxCapAuxH \\(\\times\\) (peak design-day load). Peak design-day load is the heating capacity that holds zone temperature at the thermostat set point during the last substep of all hours of all design days.</p> Units Legal Range Default Required Variability x \\(&gt;\\) 0 1 No constant"},{"location":"input-data/rsys/#rsseer","title":"rsSEER","text":"<p>Type: float</p> <p>Cooling rated Seasonal Energy Efficiency Ratio (SEER).</p> Units Legal Range Default Required Variability Btu/Wh x \\(&gt;\\) 0 none Yes constant"},{"location":"input-data/rsys/#rseer","title":"rsEER","text":"<p>Type: float</p> <p>Cooling Energy Efficiency Ratio (EER) at standard AHRI rating conditions (outdoor drybulb of 95 <sup>o</sup>F and entering air at 80 <sup>o</sup>F drybulb and 67 <sup>o</sup>F wetbulb). For rsType=WSHP, rated EER at fluid source temperature = 86 <sup>o</sup>F.</p> Units Legal Range Default Required Variability Btu/Wh x \\(&gt;\\) 0 Estimated from SEER unless WSHP Yes for WSHP else No constant"},{"location":"input-data/rsys/#rscapc","title":"rsCapC","text":"<p>Type: float</p> <p>Net cooling capacity at standard rating conditions (outdoor drybulb temperature = 95 <sup>o</sup>F for air source or fluid source temperature = 86 <sup>o</sup>F for water source).</p> <p>If rsType=ASHP and both rsCapC and rsCap47 are autosized, both are set to the larger consistent value using rsCapRat9547 (after application of rsFxCapH and rsFxCapC).</p> <p>If rsType=WSHP and both rsCapC and rsCapH are autosized, both are set to the larger consistent value using rsCapRatCH (after application of rsFxCapH and rsFxCapC).</p> Units Legal Range Default Required Variability Btu/hr AUTOSIZE or x \\(\\le\\) 0 (x \\(&gt;\\) 0 coverted to \\(&lt;\\) 0) none Yes if rsType includes cooling constant"},{"location":"input-data/rsys/#rstddesc","title":"rsTdDesC","text":"<p>Type: float</p> <p>Nominal cooling temperature fall (across system, not zone) used during autosizing (when capacity is not yet known).</p> Units Legal Range Default Required Variability <sup>o</sup>F x \\(&lt;\\) 0 -25 No constant"},{"location":"input-data/rsys/#rsfxcapc","title":"rsFxCapC","text":"<p>Type: float</p> <p>Cooling autosizing capacity factor. rsCapC is set to rsFxCapC \\(\\times\\) (peak design-day load). Peak design-day load is the cooling capacity that holds zone temperature at the thermostat set point during the last substep of all hours of all design days.</p> Units Legal Range Default Required Variability x \\(&gt;\\) 0 1.4 No constant"},{"location":"input-data/rsys/#rsfchgc-rsfchg","title":"rsFChgC, rsFChg","text":"<p>Type: float</p> <p>Cooling compressor charge factor.  The cooling gross (compressor only) COP is modified by rsFChgC to account for incorrect refrigerant charge.  Note: rsFChg is the prior name for this value and is supported for backwards compatibility.</p> Units Legal Range Default Required Variability x \\(&gt;\\) 0 1 (no effect) No constant"},{"location":"input-data/rsys/#rsvfperton","title":"rsVFPerTon","text":"<p>Type: float</p> <p>Standard air volumetric flow rate per nominal ton of cooling capacity.</p> Units Legal Range Default Required Variability cfm/ton 150 \\(\\le\\) x \\(\\le\\) 500 350 No constant"},{"location":"input-data/rsys/#rsfanpwrc","title":"rsFanPwrC","text":"<p>Type: float</p> <p>Cooling fan power.</p> Units Legal Range Default Required Variability W/cfm x \\(\\ge\\) 0 0.365 No constant"},{"location":"input-data/rsys/#rsashplockoutt","title":"rsASHPLockOutT","text":"<p>Type: float</p> <p>Source air dry-bulb temperature below which the air source heat pump compressor does not operate.</p> Units Legal Range Default Required Variability <sup>o</sup>F (no lockout) No hourly"},{"location":"input-data/rsys/#rscdh","title":"rsCdH","text":"<p>Type: float</p> <p>Heating cyclic degradation coefficient, valid only for compressor-based heating (heat pumps).</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 0.5 ASHPHYDRONIC: 0.25 ASHP: derived from rsHSPF No hourly"},{"location":"input-data/rsys/#rscdc","title":"rsCdC","text":"<p>Type: float</p> <p>Cooling cyclic degradation coefficient, valid for configurations having compressor-based cooling.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 0.5 0 No hourly"},{"location":"input-data/rsys/#rsfeffh","title":"rsFEffH","text":"<p>Type: float</p> <p>Heating efficiency factor.  At each time step, the heating efficiency is multiplied by rsFEffH.</p> Units Legal Range Default Required Variability x \\(&gt;\\) 0 1 No subhourly"},{"location":"input-data/rsys/#rsfeffauxhbackup","title":"rsFEffAuxHBackup","text":"<p>Type: float</p> <p>Backup auxiliary heating efficiency factor.  At each time step, the backup heating efficiency is multiplied by rsFEffAuxHBackup. Backup auxiliary heating is typically provided by electric resistance \"strip heat\" but may be provided by a furnace (see rsTypeAuxH).  If rsTypeAuxH is not \"none\", backup heat operates when air source heat pump compressor capacity is insufficient to meet heating load.  See also rsFEffAuxHDefrost.</p> Units Legal Range Default Required Variability x \\(&gt;\\) 0 1 No subhourly"},{"location":"input-data/rsys/#rsfeffauxhdefrost","title":"rsFEffAuxHDefrost","text":"<p>Type: float</p> <p>Defrost auxiliary heating efficiency factor.  At each time step, the defrost auxiliary heating efficiency is multiplied by rsFEffAuxHDefrost.  Defrost auxiliary heating is  typically provided by electric resistance \"strip heat\" but may be provided by a furnace (see rsTypeAuxH).  If rsDefrostModel=REVCYCLEAUX, defrost auxiliary heat operates during air source heat pump defrost mode.  Since defrost and backup heating are generally provided by the same equipment, rsFEffAuxHDefrost and rsFEffAuxHBackup are usually set to the same value, but separate inputs are available for special cases.</p> Units Legal Range Default Required Variability x \\(&gt;\\) 0 1 No subhourly"},{"location":"input-data/rsys/#rsfeffc","title":"rsFEffC","text":"<p>Type: float</p> <p>Cooling efficiency factor.  At each time step, the cooling efficiency is multiplied by rsEffC.</p> Units Legal Range Default Required Variability x \\(&gt;\\) 0 1 No subhourly"},{"location":"input-data/rsys/#rscapnomh","title":"rsCapNomH","text":"<p>Type: float</p> <p>Heating nominal capacity.  Provides type-independent probe source for RSYS heating capacity.  Daily variability is specified to support value changes during AUTOSIZEing.  Values set via input are typically constant.</p> Units Legal Range Default Required Variability Btu/hr x \\(\\ge\\) 0 no heating: 0 heat pump: rsCap47 (input or AUTOSIZEd) other: rsCapH (input or AUTOSIZEd) No daily"},{"location":"input-data/rsys/#rscapnomc","title":"rsCapNomC","text":"<p>Type: float</p> <p>Cooling nominal capacity.  Provides type-independent probe source for RSYS cooling capacity.  Daily variability is specified to support value changes during AUTOSIZEing.  Values set via input are typically constant.</p> Units Legal Range Default Required Variability Btu/hr x \\(\\ge\\) 0 no cooling: 0 other: rsCap95 (input or AUTOSIZEd) No daily"},{"location":"input-data/rsys/#rsdseh","title":"rsDSEH","text":"<p>Type: float</p> <p>Heating distribution system efficiency.  If given, (1-rsDSEH) of RSYS heating output is discarded.  Cannot be combined with more detailed DUCTSEG model.</p> Units Legal Range Default Required Variability 0 &lt; x &lt; 1 (use DUCTSEG model) No hourly"},{"location":"input-data/rsys/#rsdsec","title":"rsDSEC","text":"<p>Type: float</p> <p>Cooling distribution system efficiency.  If given, (1-rsDSEC) of RSYS cooling output is discarded.  Cannot be combined with more detailed DUCTSEG model.</p> Units Legal Range Default Required Variability 0 &lt; x &lt; 1 (use DUCTSEG model) No hourly"},{"location":"input-data/rsys/#rsoavtype","title":"rsOAVType","text":"<p>Type: choice</p> <p>Type of central fan integrated (CFI) outside air ventilation (OAV) included in this RSYS.  OAV systems use the central system fan to circulate outdoor air (e.g. for night ventilation).</p> <p>OAV cannot operate simultaneously with whole building ventilation (operable windows, whole house fans, etc.).  Availability of ventilation modes is controlled on an hourly basis via  Top ventAvail.</p> NONE No CFI ventilation capabilities FIXED Fixed-flow CFI (aka SmartVent). The specified rsOAVVfDs is used whenever the RSYS operates in OAV mode. VARIABLE Variable-flow CFI (aka NightBreeze). Flow rate is determined at midnight based on prior day's average dry-bulb temperature according to a control algorithm defined by the NightBreeze vendor. Units Legal Range Default Required Variability NONE, FIXED, VARIABLE none No constant"},{"location":"input-data/rsys/#rsoavvfds","title":"rsOAVVfDs","text":"<p>Type: float</p> <p>Design air volume flow rate when RSYS is operating in OAV mode.</p> Units Legal Range Default Required Variability cfm x \\(\\ge\\) 0 none if rsOAVType $ e$ NONE constant"},{"location":"input-data/rsys/#rsoavvfminf","title":"rsOAVVfMinF","text":"<p>Type: float</p> <p>Minimum air volume flow rate fraction when RSYS is operating in OAV mode.  When rsOAVType=VARIABLE, air flow rate is constrained to rsOAVVfMinF * rsOAVVfDs or greater.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1 0.2 No constant"},{"location":"input-data/rsys/#rsoavfanpwr","title":"rsOAVFanPwr","text":"<p>Type: float</p> <p>RSYS OAV-mode fan power.</p> Units Legal Range Default Required Variability W/cfm 0 &lt; x \\(\\le\\) 5 per rsOAVTYPE FIXED: rsFanPwrC VARIABLE: NightBreeze vendor curve based on rsOAVvfDs No constant"},{"location":"input-data/rsys/#rsoavtdbinlet","title":"rsOAVTDbInlet","text":"<p>Type: float</p> <p>OAV inlet (source) air temperature.  Supply air temperature at the zone is generally higher due to fan heat.  Duct losses, if any, also alter the supply air temperature.</p> Units Legal Range Default Required Variability <sup>o</sup>F x \\(\\ge\\) 0 Dry-bulb temperature from weather file No hourly"},{"location":"input-data/rsys/#rsoavtdiff","title":"rsOAVTdiff","text":"<p>Type: float</p> <p>OAV temperature differential.  When operating in OAV mode, the zone set point temperature is max( znTD, inletT+rsOAVTdiff).  Small values can result in inadvertent zone heating, due to fan heat.</p> Units Legal Range Default Required Variability <sup>o</sup>F x \\(&gt;\\) 0 5 <sup>o</sup>F No hourly"},{"location":"input-data/rsys/#rsoavreliefzn","title":"rsOAVReliefZn","text":"<p>Type: znName</p> <p>Name of zone to which relief air is directed during RSYS OAV operation, typically an attic zone.  Relief air flow is included in the target zone's pressure and thermal balance.</p> Units Legal Range Default Required Variability name of ZONE none if rsOAVType $ e$ NONE constant"},{"location":"input-data/rsys/#rsparelec","title":"rsParElec","text":"<p>Type: float</p> <p>Parasitic electrical power.  rsParElec is unconditionally accumulated to end use AUX of rsElecMtr (if specified) and has no other effect.</p> Units Legal Range Default Required Variability W 0 No hourly"},{"location":"input-data/rsys/#rsparfuel","title":"rsParFuel","text":"<p>Type: float</p> <p>Parasitic fuel use.  rsParFuel is unconditionally accumulated to end use AUX of sFuelMtr (if specified) and has no other effect.</p> Units Legal Range Default Required Variability Btuh 0 No hourly"},{"location":"input-data/rsys/#rsrhin","title":"rsRhIn","text":"<p>Type: float</p> <p>Entering air relative humidity (for model testing).</p> Units Legal Range Default Required Variability W/cfm 0 \\(\\le\\) x \\(\\le\\) 1 Derived from entering air state No constant"},{"location":"input-data/rsys/#rstdbout","title":"rsTdbOut","text":"<p>Type: float</p> <p>Air dry-bulb temperature at the outdoor portion of this system.</p> Units Legal Range Default Required Variability <sup>o</sup>F x \\(\\ge\\) 0 From weather file No hourly"},{"location":"input-data/rsys/#endrsys","title":"endRSYS","text":"<p>Optionally indicates the end of the RSYS definition.</p> Units Legal Range Default Required Variability none No constant <p>Related Probes:</p> <ul> <li>@rsys</li> <li>@RSYSRes (accumulated results)</li> </ul>"},{"location":"input-data/sgdist/","title":"SGDIST","text":"<p>SGDIST creates a subobject of the current window that distributes a specified fraction of that window's solar gain to a specified delayed model (massive) surface. Any remaining solar gain (all of the window's solar gain if no SGDISTs are given) is added to the air of the zone containing the window. A window may have up to three SGDISTs; an error occurs if more than 100% of the window's gain is distributed.</p> <p>Via members sgFSO and sgFSC, the fraction of the insolation distributed to the surface can be made dependent on whether the zone's shades are open or closed (see ZONE member znSC).</p>"},{"location":"input-data/sgdist/#sgname","title":"sgName","text":"<p>Name of solar gain distribution (follows \"SGDIST\" if given).</p> Units Legal Range Default Required Variability 63 characters none No constant"},{"location":"input-data/sgdist/#sgsurf","title":"sgSurf","text":"<p>Type: sfName</p> <p>Name of surface to which gain is targeted.</p> <p>If there is more than surface with the specified name: if one of the surfaces is in the current zone, it is used; otherwise, an error message is issued.</p> <p>The specified surface must be modeled with the Delayed model. If gain is targeted to a Quick model surface, a warning message is issued and the gain is redirected to the air of the associated zone.</p> Units Legal Range Default Required Variability name of a SURFACE none Yes constant"},{"location":"input-data/sgdist/#sgside","title":"sgSide","text":"<p>Type: choice</p> <p>Designates the side of the surface to which the gain is to be targeted:</p> INTERIOR Apply gain to interior of surface EXTERIOR Apply gain to exterior of surface Units Legal Range Default Required Variability INTERIOR, EXTERIOR Side of surface in zone containing window; or INTERIOR if both sides are in zone containing window. Yes constant"},{"location":"input-data/sgdist/#sgfso","title":"sgFSO","text":"<p>Type: float</p> <p>Fraction of solar gain directed to specified surface when the owning window's interior shading is in the open position (when the window's zone's shade closure (znSC) is 0).</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1,and sum of window's sgFSO's \\(\\le\\) 1 none Yes monthly-hourly"},{"location":"input-data/sgdist/#sgfsc","title":"sgFSC","text":"<p>Type: float</p> <p>Fraction of solar gain directed to specified surface when the owning window's interior shading is in the closed position. If the zone's shades are partly closed (znSC between 0 and 1), a proportional fraction between sgFSO and sgFSC is used.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1, and sum of window's sgFSC's \\(\\le\\) 1 sgFSO No monthly-hourly"},{"location":"input-data/sgdist/#endsgdist","title":"endSGDist","text":"<p>Optionally indicates the end of the solar gain distribution definition. Alternatively, the end of the solar gain distribution definition can be indicated by END or by just beginning another object.</p> Units Legal Range Default Required Variability none No constant <p>Related Probes:</p> <ul> <li>@sgdist</li> </ul>"},{"location":"input-data/shade/","title":"SHADE","text":"<p>SHADE constructs a subobject associated with the current WINDOW that represents fixed shading devices (overhangs and/or fins). A window may have at most one SHADE and only windows in vertical surfaces may have SHADEs. A SHADE can describe an overhang, a left fin, and/or a right fin; absence of any of these is specified by omitting or giving 0 for its depth. SHADE geometry can vary on a monthly basis, allowing modeling of awnings or other seasonal shading strategies.</p>"},{"location":"input-data/shade/#shname","title":"shName","text":"<p>Name of shade; follows the word \"SHADE\" if given.</p> Units Legal Range Default Required Variability 63 characters none No constant"},{"location":"input-data/shade/#ohdepth","title":"ohDepth","text":"<p>Type: float</p> <p>Depth of overhang (from plane of window to outside edge of overhang). A zero value indicates no overhang.</p> Units Legal Range Default Required Variability ft x \\(\\ge\\) 0 0 No monthly-hourly"},{"location":"input-data/shade/#ohdistup","title":"ohDistUp","text":"<p>Type: float</p> <p>Distance from top of window to bottom of overhang.</p> Units Legal Range Default Required Variability ft x \\(\\ge\\) 0 0 No monthly-hourly"},{"location":"input-data/shade/#ohexl","title":"ohExL","text":"<p>Type: float</p> <p>Distance from left edge of window (as viewed from the outside) to the left end of the overhang.</p> Units Legal Range Default Required Variability ft x \\(\\ge\\) 0 0 No monthly-hourly"},{"location":"input-data/shade/#ohexr","title":"ohExR","text":"<p>Type: float</p> <p>Distance from right edge of window (as viewed from the outside) to the right end of the overhang.</p> Units Legal Range Default Required Variability ft x \\(\\ge\\) 0 0 No monthly-hourly"},{"location":"input-data/shade/#ohflap","title":"ohFlap","text":"<p>Type: float</p> <p>Height of flap hanging down from outer edge of overhang.</p> Units Legal Range Default Required Variability ft x \\(\\ge\\) 0 0 No monthly-hourly"},{"location":"input-data/shade/#lfdepth","title":"lfDepth","text":"<p>Type: float</p> <p>Depth of left fin from plane of window. A zero value indicates no fin.</p> Units Legal Range Default Required Variability ft x \\(\\ge\\) 0 0 No monthly-hourly"},{"location":"input-data/shade/#lftopup","title":"lfTopUp","text":"<p>Type: float</p> <p>Vertical distance from top of window to top of left fin.</p> Units Legal Range Default Required Variability ft x \\(\\ge\\) 0 0 No monthly-hourly"},{"location":"input-data/shade/#lfdistl","title":"lfDistL","text":"<p>Type: float</p> <p>Distance from left edge of window to left fin.</p> Units Legal Range Default Required Variability ft x \\(\\ge\\) 0 0 No monthly-hourly"},{"location":"input-data/shade/#lfbotup","title":"lfBotUp","text":"<p>Type: float</p> <p>Vertical distance from bottom of window to bottom of left fin.</p> Units Legal Range Default Required Variability ft x \\(\\ge\\) 0 0 No monthly-hourly"},{"location":"input-data/shade/#rfdepth","title":"rfDepth","text":"<p>Type: float</p> <p>Depth of right fin from plane of window. A 0 value indicates no fin.</p> Units Legal Range Default Required Variability ft x \\(\\ge\\) 0 0 No monthly-hourly"},{"location":"input-data/shade/#rftopup","title":"rfTopUp","text":"<p>Type: float</p> <p>Vertical distance from top of window to top of right fin.</p> Units Legal Range Default Required Variability ft x \\(\\ge\\) 0 0 No monthly-hourly"},{"location":"input-data/shade/#rfdistr","title":"rfDistR","text":"<p>Type: float</p> <p>Distance from right edge of window to right fin.</p> Units Legal Range Default Required Variability ft x \\(\\ge\\) 0 0 No monthly-hourly"},{"location":"input-data/shade/#rfbotup","title":"rfBotUp","text":"<p>Type: float</p> <p>Vertical distance from bottom of window to bottom of right fin.</p> Units Legal Range Default Required Variability ft x \\(\\ge\\) 0 0 No monthly-hourly"},{"location":"input-data/shade/#endshade","title":"endShade","text":"<p>Optional to indicate the end of the SHADE definition. Alternatively, the end of the shade definition can be indicated by END or the declaration of another object.</p> Units Legal Range Default Required Variability none No constant <p>Related Probes:</p> <ul> <li>@shade</li> </ul>"},{"location":"input-data/shadex/","title":"SHADEX","text":"<p>SHADEX describes an object that shades other building surfaces using an advanced shading model.  Advanced shading calculations are provided only for PVARRAYs. Advanced shading must be enabled via Top exShadeModel.</p>"},{"location":"input-data/shadex/#sxname","title":"sxName","text":"<p>Name of photovoltaic array. Give after the word SHADEX.</p> Units Legal Range Default Required Variability 63 characters none No constant"},{"location":"input-data/shadex/#sxmounting","title":"sxMounting","text":"<p>Type: choice</p> <p>Specifies the mounting location of the shade.  sxMounting=Site indicates the SHADEX position is fixed and is not modified if the building is rotated.  The position of SHADEXs with sxMounting=Building are modified to include the effect of building rotation specified via Top bldgAzm</p> Units Legal Range Default Required Variability Building or Site Site No constant"},{"location":"input-data/shadex/#sxvertices","title":"sxVertices","text":"<p>Type: list of up to 36 floats</p> <p>Vertices of a polygon representing the shape of the shading object.</p> <p>The values that follow sxVertices are a series of X, Y, and Z values for the vertices of the polygon. The coordinate system is defined from a viewpoint facing north.  X and Y values convey east-west and north-south location respectively relative to an arbitrary origin (positive X value are to the east; positive Y values are to the north).  Z values convey height relative to the building 0 level and positive values are upward.</p> <p>The vertices are specified in counter-clockwise order when facing the shading object from the south.  The number of values provided must be a multiple of 3.  The defined polygon must be planar and have no crossing edges.  When sxType=Building, the effective position of the polygon reflects building rotation specified by TOP bldgAzm.</p> <p>For example, to specify a rectangular shade \"tree\" that is 10 x 40 ft, facing south, and 100 ft to the south of the nominal building origin --</p> <pre><code>sxVertices = 5, -100, 0,   15, -100, 0,  15, -100, 40,  5, -100, 40\n</code></pre> Units Legal Range Default Required Variability ft unrestricted none 9, 12, 15, 18, 21, 24, 27, 30, 33 or 36 values constant"},{"location":"input-data/shadex/#endshadex","title":"endSHADEX","text":"<p>Optionally indicates the end of the SHADEX definition. Alternatively, the end of the definition can be indicated by END or by beginning another object.</p> Units Legal Range Default Required Variability none No constant <p>Related Probes:</p> <ul> <li>@SHADEX</li> </ul>"},{"location":"input-data/surface/","title":"SURFACE","text":"<p>Surface constructs a ZONE subobject of class SURFACE that represents a surrounding or interior surface of the zone. Internally, SURFACE generates a QUICK surface (U-value only), a DELAYED (massive) surface (using the finite-difference mass model), interzone QUICK surface, or interzone DELAYED surface, as appropriate for the specified construction and exterior conditions.</p>"},{"location":"input-data/surface/#sfname","title":"sfName","text":"<p>Name of surface; give after the word SURFACE.</p> Units Legal Range Default Required Variability 63 characters none No constant"},{"location":"input-data/surface/#sftype","title":"sfType","text":"<p>Type: choice</p> <p>Type of surface:</p> FLOOR Surface defines part or all of the 'bottom' of the zone; it is horizontal with inside facing up. The outside of the surface is not adjacent to the current zone. WALL Surface defines a 'side' of the zone; its outside is not adjacent to the current zone. CEILING Surface defines part or all of the 'top' of the zone with the inside facing down. The outside of the surface is not adjacent to the current zone. <p>sfType is used extensively for default determination and input checking, but does not have any further internal effect. The Floor, Wall, and Ceiling choices identify surfaces that form boundaries between the zone and some other condition.</p> Units Legal Range Default Required Variability FLOOR WALL CEILING none Yes constant"},{"location":"input-data/surface/#sfarea","title":"sfArea","text":"<p>Type: float</p> <p>Gross area of surface. (CSE computes the net area for simulation by subtracting the areas of any windows and doors in the surface.).</p> Units Legal Range Default Required Variability ft<sup>2</sup> x \\(&gt;\\) 0 none Yes constant"},{"location":"input-data/surface/#sftilt","title":"sfTilt","text":"<p>Type: float</p> <p>Surface tilt from horizontal. Values outside the range 0 to 360 are first normalized to that range. The default and allowed range depend on sfType, as follows:</p> sfType = FLOOR sfTilt=180, default = 180 (fixed value) sfType = WALL 60 \\(&lt;\\) sfTilt \\(&lt;\\) 180, default = 90 sfType = CEILING 0 \\(\\leq\\) sfTilt \\(\\leq\\) 60, default = 0 Units Legal Range Default Required Variability degrees Dependent upon sfType. See above. Dependent upon sfType. See above. No constant"},{"location":"input-data/surface/#sfazm","title":"sfAzm","text":"<p>Type: float</p> <p>Azimuth of surface with respect to znAzm. The azimuth used in simulating a surface is bldgAzm + znAzm + sfAzm; the surface is rotated if any of those are changed. Values outside the range 0 to 360 are normalized to that range. Required for non-horizontal surfaces.</p> Units Legal Range Default Required Variability degrees unrestricted none Required if sfTilt \\(\\neq\\) 0 and sfTilt \\(\\neq\\) 180 constant"},{"location":"input-data/surface/#sfmodel","title":"sfModel","text":"<p>Type: choice</p> <p>Provides user control over how CSE models conduction for this surface.</p> QUICK Surface is modeled using a simple conductance. Heat capacity effects are ignored. Either sfCon or sfU (next) can be specified. DELAYED, DELAYED_HOUR, DELAYED_SUBHOUR Surface is modeled using a multi-layer finite difference technique that represents heat capacity effects. If the time constant of the surface is too short to accurately simulate, a warning message is issued and the Quick model is used. The program cannot use the finite difference model if sfU rather than sfCon is specified. AUTO Program selects Quick or the appropriate Delayed automatically according to the time constant of the surface (if sfU is specified, Quick is selected). FD (or FORWARD_DIFFERENCE) Selects the forward difference model (used with short time steps and the CZM/UZM zone model). KIVA Uses a two-dimensional finite difference model to simulate heat flow through foundation surfaces. Units Legal Range Default Required Variability \u2014 QUICK, DELAYED, DELAYED_HOUR, DELAYED_SUBOUR, AUTO, 2D_FND AUTO No constant <p>Either sfU or sfCon must be specified, but not both.</p>"},{"location":"input-data/surface/#sfu","title":"sfU","text":"<p>Type: float</p> <p>Surface U-value (NOT including surface (air film) conductances). For surfaces for which no heat capacity is to be modeled, allows direct entry of U-value without defining a CONSTRUCTION.</p> Units Legal Range Default Required Variability Btuh/ft<sup>2</sup>-<sup>o</sup>F x \\(&gt;\\) 0 Determined from sfCon if sfCon not given and if sfExCnd is not GROUND constant"},{"location":"input-data/surface/#sfcon","title":"sfCon","text":"<p>Type: conName</p> <p>Name of CONSTRUCTION of the surface.</p> Units Legal Range Default Required Variability Name of a CONSTRUCTION none if sfU not given and if sfExCnd is not GROUND constant <p>Note: When sfExCnd is GROUND, sfCon may be omitted to indicate:</p> <ul> <li>exposed earth (when sfType is FLOOR), or</li> <li>bare foundation wall (when sfType is WALL) -- the foundation wall </li> </ul>"},{"location":"input-data/surface/#sflthkf","title":"sfLThkF","text":"<p>Type: float</p> <p>Sublayer thickness adjustment factor for FORWARD_DIFFERENCE conduction model used with sfCon surfaces.  Material layers in the construction are divided into sublayers as needed for numerical stability.  sfLThkF allows adjustment of the thickness criterion used for subdivision.  A value of 0 prevents subdivision; the default value (0.5) uses layers with conservative thickness equal to half of an estimated safe value.  Fewer (thicker) sublayers improves runtime at the expense of accurate representation of rapid changes.</p> Units Legal Range Default Required Variability x \\(\\ge\\) 0 0.5 No constant"},{"location":"input-data/surface/#sfexcnd","title":"sfExCnd","text":"<p>Type: choice</p> <p>Specifies the thermal conditions assumed at surface exterior, and at exterior of any subobjects (windows or doors) belonging to current surface. The conditions accounted for are dry bulb temperature and incident solar radiation.</p> AMBIENT Exterior surface is exposed to the 'weather' as read from the weather file. Solar gain is calculated using solar geometry, sfAzm, sfTilt, and sfExAbs. SPECIFIEDT Exterior surface is exposed to solar radiation as in AMBIENT, but the dry bulb temperature is calculated with a user specified function (sfExT). sfExAbs can be set to 0 to eliminate solar effects. ADJZN Exterior surface is exposed to another zone, whose name is specified by sfAdjZn. Solar gain is 0 unless gain is targeted to the surface with SGDIST below. GROUND The surface is in contact with the ground. Details of the two-dimensional foundation design are defined by sfFnd. Only floor and wall surfaces may use this option. ADIABATIC Exterior surface heat flow is 0. Thermal storage effects of delayed surfaces are modeled."},{"location":"input-data/surface/#sfexabs","title":"sfExAbs","text":"<p>Type: float</p> <p>Surface exterior absorptivity.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1 0.5 Required if sfExCnd = AMBIENT or sfExCnd = SPECIFIEDT monthly-hourly"},{"location":"input-data/surface/#sfinabs","title":"sfInAbs","text":"<p>Type: float</p> <p>Surface interior solar absorptivity.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1 sfType = CEILING, 0.2; sfType = WALL, 0.6; sfType = FLOOR, 0.8 No monthly-hourly"},{"location":"input-data/surface/#sfexepslw","title":"sfExEpsLW","text":"<p>Type: float</p> <p>Surface exterior long wave (thermal) emittance.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1 0.9 No constant"},{"location":"input-data/surface/#sfinepslw","title":"sfInEpsLW","text":"<p>Type: float</p> <p>Surface interior long wave (thermal) emittance.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1 0.9 No constant"},{"location":"input-data/surface/#sfext","title":"sfExT","text":"<p>Type: float</p> <p>Exterior air temperature.</p> Units Legal Range Default Required Variability <sup>o</sup>F unrestricted none Required if sfExCnd = SPECIFIEDT hourly"},{"location":"input-data/surface/#sfadjzn","title":"sfAdjZn","text":"<p>Type: znName</p> <p>Name of adjacent zone; used only when sfExCnd is ADJZN. Can be the same as the current zone.</p> Units Legal Range Default Required Variability name of a ZONE none Required whensfExCnd = ADJZN constant"},{"location":"input-data/surface/#sfgrndrefl","title":"sfGrndRefl","text":"<p>Type: float</p> <p>Ground reflectivity for this surface.</p> Units Legal Range Default Required Variability fraction 0 \\(\\leq\\) x \\(\\leq\\) 1 grndRefl No Monthly - Hourly"},{"location":"input-data/surface/#sfinh","title":"sfInH","text":"<p>Type: float</p> <p>Inside surface (air film) conductance. Ignored for sfModel = Forward_Difference. Default depends on the surface type.</p> sfType = FLOOR or CEILING 1.32 other 1.5 Units Legal Range Default Required Variability Btuh/ft<sup>2</sup>-<sup>o</sup>F x \\(&gt;\\) 0 See above No constant"},{"location":"input-data/surface/#sfexh","title":"sfExH","text":"<p>Type: float</p> <p>Outside combined surface (air film) conductance. Ignored for sfModel = Forward_Difference. The default value is dependent upon the exterior conditions:</p> sfExCnd = AMBIENT dflExH (Top-level member, described above) sfExCnd = SPECIFIEDT dflExH (described above) sfExCnd = ADJZN 1.5 sfExCnd = ADIABATIC not applicable Units Legal Range Default Required Variability Btuh/ft<sup>2</sup>-<sup>o</sup>F x \\(&gt;\\) 0 see above No constant <p>When sfModel = Forward_Difference, several models are available for calculating inside and outside surface convective coefficients.  Inside surface faces can be exposed only to zone conditions. Outside faces may be exposed either to ambient conditions or zone conditions, based on sfExCnd.  Only UNIFIED and INPUT are typically used.  The other models were used during CSE development for comparison.  For details, see CSE Engineering Documentation.</p> Model Exposed to ambient Exposed to zone UNIFIED default CSE model default CSE model INPUT hc = sfExHcMult hc = sfxxHcMult AKBARI Akbari model n/a WALTON Walton model n/a WINKELMANN Winkelmann model n/a DOE2 DOE2 model n/a MILLS n/a Mills model ASHRAE n/a ASHRAE handbook values TARP n/a TARP model"},{"location":"input-data/surface/#sfexhcmodel","title":"sfExHcModel","text":"<p>Type: choice</p> <p>Selects the model used for exterior surface convection when sfModel = Forward_Difference.</p> Units Legal Range Default Required Variability choices above UNIFIED No constant"},{"location":"input-data/surface/#sfexhclchar","title":"sfExHcLChar","text":"<p>Type: float</p> <p>Characteristic length of surface, used in derivation of forced exterior convection coefficients in some models when outside surface is exposed to ambient.  See sfExHcModel.</p> Units Legal Range Default Required Variability ft x \\(&gt;\\) 0 10 No constant"},{"location":"input-data/surface/#sfexhcmult","title":"sfExHcMult","text":"<p>Type: float</p> <p>Exterior convection coefficient adjustment factor.  When sfExHcModel=INPUT, hc=sfExHcMult.  For other sfExHcModel choices, the model-derived hc is multiplied by sfExHcMult.</p> Units Legal Range Default Required Variability x \\(\\ge\\) 0 1 No subhourly"},{"location":"input-data/surface/#sfexrf","title":"sfExRf","text":"<p>Type: float</p> <p>Exterior surface roughness factor.  Used only when surface is exposed to ambient (i.e. with wind exposure).  Typical values:</p> Roughness Index sfExRf Example 1 (very rough) 2.17 Stucco 2 (rough) 1.67 Brick 3 (medium rough) 1.52 Concrete 4 (Medium smooth) 1.13 Clear pine 5 (Smooth) 1.11 Smooth plaster 6 (Very Smooth) 1 Glass Units Legal Range Default Required Variability sfExHcModel = WINKELMANN: 1.66 else 2.17 No constant"},{"location":"input-data/surface/#sfinhcmodel","title":"sfInHcModel","text":"<p>Type: choice</p> <p>Selects the model used for the inside (zone) surface convection when sfModel = Forward_Difference.</p> Units Legal Range Default Required Variability choices above (see sfExHcModel) UNIFIED No constant"},{"location":"input-data/surface/#sfinhcmult","title":"sfInHcMult","text":"<p>Type: float</p> <p>Interior convection coefficient adjustment factor.  When sfInHcModel=INPUT, hc=sfInHcMult.  For other sfInHcModel choices, the model-derived hc is multiplied by sfInHcMult.  When sfInHcModel=UNIFIED, natural (buoyancy-driven) and forced convection coefficient values are combined according to TOP inHcCombinationMethod, then sfInHcMult is applied.</p> Units Legal Range Default Required Variability x \\(\\ge\\) 0 1 No subhourly"},{"location":"input-data/surface/#sfinhcfrccoeffs","title":"sfInHcFrcCoeffs","text":"<p>Type: float array</p> <p>Specifies 3 coefficients for an alternative inside surface forced convection model (applicable only for sfInHCModel=UNIFIED).  When given, the inside surface forced convection coefficient for this surface is derived as follows:</p> <pre><code>  hcFrc = hConvF * (sfInHcFrcCoeffs[ 1] + scInHcFrcCoeffs[ 2] * ACH ^ sfInHcFrcCoeffs[ 3])\n</code></pre> <p>where hConvF is the convection adjustment factor (derived from elevation, see Top hConvMod) and ACH is the zone air change rate per hour from the prior simulation step (including heat pump water heater evaporator air flow).  This formulation is dangerously flexible, so caution is advised when selecting coefficient values.</p> <p>The default hcFrc value (used when sfInHcFrCoeff is not provided) is hConvF * znHcFrcF * ACH ^ 0.8.</p> Units Legal Range Default Required Variability Btuh/ft<sup>2</sup>-<sup>o</sup>F see above No subhourly <p>The items below give values associated with CSE's model for below grade surfaces (sfExCnd=GROUND).  See CSE Engineering Documentation for technical details.</p>"},{"location":"input-data/surface/#sffnd","title":"sfFnd","text":"<p>Type: fdName</p> <p>Name of FOUNDATION applied to ground-contact Floor SURFACEs; used only for Floor SURFACEs when sfExCnd is GROUND.</p> Units Legal Range Default Required Variability \u2014 Name of a Foundation none whensfExCnd = GROUND and sfType = Floor constant"},{"location":"input-data/surface/#sffndfloor","title":"sfFndFloor","text":"<p>Type: sfName</p> <p>Name of adjacent ground-contact Floor SURFACE; used only for Wall SURFACEs when sfExCnd is GROUND.</p> Units Legal Range Default Required Variability \u2014 Name of a Surface none whensfExCnd = GROUND and sfType = Wall constant"},{"location":"input-data/surface/#sfheight","title":"sfHeight","text":"<p>Type: float</p> <p>Needed for foundation wall height, otherwise ignored. Maybe combine with sfDepthBG?</p> Units Legal Range Default Required Variability ft x \\(&gt;\\) 0 none when sfType is WALL and sfExtCnd is GROUND constant"},{"location":"input-data/surface/#sfexpperim","title":"sfExpPerim","text":"<p>Type: float</p> <p>Exposed perimeter of foundation floors.</p> Units Legal Range Default Required Variability ft x \\(\\geq\\) 0 none when sfType is FLOOR, sfFnd is set, and sfExtCnd is GROUND constant"},{"location":"input-data/surface/#sfdepthbg","title":"sfDepthBG","text":"<p>Type: float</p> <p>Note: sfDepthBG is used as part of the simple ground model, which is no longer supported. Use sfHeight with sfFnd instead.</p> <p>Depth below grade of surface.  For walls, sfDepthBG is measured to the lower edge.  For floors, sfDepthBG is measured to the bottom face.</p> Units Legal Range Default Required Variability ft x \\(\\ge\\) 0 none No constant <p>Note: The following data members are part of the simple ground model, which is no longer supported. Use sfFnd instead.</p>"},{"location":"input-data/surface/#sfexctgrnd-sfexctadbavg07-sfexctadbavg14-sfexctadbavg31-sfexctadbavgyr","title":"sfExCTGrnd, sfExCTaDbAvg07, sfExCTaDbAvg14, sfExCTaDbAvg31, sfExCTaDbAvgYr","text":"<p>Type: float</p> <p>Conductances from outside face of surface to the weather file ground temperature and the moving average outdoor dry-bulb temperatures for 7, 14, 31, and 365 days.</p> Units Legal Range Default Required Variability Btuh/ft<sup>2</sup>-<sup>o</sup>F x \\(\\ge\\) 0 see above No constant"},{"location":"input-data/surface/#sfexrcongrnd","title":"sfExRConGrnd","text":"<p>Type: float</p> <p>Resistance overall construction resistance.  TODO: full documentation.</p> Units Legal Range Default Required Variability x \\(\\ge\\) 0 none No constant"},{"location":"input-data/surface/#endsurface","title":"endSURFACE","text":"<p>Optional to indicates the end of the surface definition. Alternatively, the end of the surface definition can be indicated by END, or by beginning another SURFACE or other object definition. If used, should follow the definitions of the SURFACE's subobjects -- DOORs, WINDOWs, SHADEs, SGDISTs, etc.</p> Units Legal Range Default Required Variability none No constant <p>Related Probes:</p> <ul> <li>@surface</li> <li>@xsurf</li> <li>@mass</li> </ul>"},{"location":"input-data/terminal/","title":"TERMINAL","text":"<p>TERMINAL constructs an object to represent equipment that transfers energy to or from the current zone from a local heating device (coil, etc.) and/or one AIRHANDLER. A terminal serves a zone (and, internally, is owned by a zone). Up to three terminals can be defined for each zone.</p> <p>A terminal can have local heating capability, using a simulated reheat coil, baseboard heater, etc. and/or air heating/cooling capability, using a simulated variable air volume (VAV) box connected to an AIRHANDLER (Section 0). Since a TERMINAL can only connect to a single air handler, use two terminals per zone to model systems where separate air handlers supply hot and cool air (dual duct). If a local heat capability utilizes the air flow (e.g. a reheat coil), model it in the terminal connected to the air handler; if a local heat capability is independent of air flow (e.g. electric baseboard heaters), it doesn't matter whether you model it with a separate terminal.</p> <p>Each capability can be set output, in which the output is constant or determined by external conditions such as in an outdoor reset baseboard situation or set temperature, in which the output is modulated to maintain the zone temperature at a set point. Set temperature operation is established by giving the setpoint for the capability (tuTLh, tuTH, tuTC); set output operation is established by specifying the local heat output (tuQMnLh) or air flow (tuVfMn) without specifying a setpoint.</p> <p>Hourly variable expressions may be used as desired to schedule setpoints and flow limits. Figure 1 shows [need sentence describing the figure.]</p> <p></p> <p>Air handler diagram</p>"},{"location":"input-data/terminal/#tuname","title":"tuName","text":"<p>Optional name of terminal; follows the word \"TERMINAL\" if given.</p> Units Legal Range Default Required Variability 63 characters No constant"},{"location":"input-data/terminal/#terminal-local-heating","title":"TERMINAL Local Heating","text":"<p>These commands establish the TERMINAL's local heating capability and determine whether it operates in set output or set temperature fashion. Additional details of the local heating mechanism are given with commands described below under terminal heating coil.</p> <p>Either tuTLh or tuQMnLh must be given to establish the TERMINAL's local heat capability:</p>"},{"location":"input-data/terminal/#tutlh","title":"tuTLh","text":"<p>Type: float</p> <p>Local heating thermostat setpoint. Hourly expression may be used to schedule as desired. Giving this implies set temperature local heat from this terminal; omitting implies no local heat or, if tuQMnLh is given, set output local heat.</p> Units Legal Range Default Required Variability <sup>o</sup>F x \\(&gt;\\) 0 no thermostat control No hourly"},{"location":"input-data/terminal/#tuqmnlh","title":"tuQMnLh","text":"<p>Type: float</p> <p>Minimum local heat output or set local heat output. If tuTLh is given, this is the minimum output, used when the thermostat is not calling for (local) heat. If tuTLh is not given, giving tuQMnLh implies set output local heat and specifies the set output level. An hourly expression may be used to schedule as desired.</p> Units Legal Range Default Required Variability Btuh x \\(\\ge\\) 0 0 if tuTLh given else no local heat For set output local heat hourly <p>The next three items are allowed only for thermostat controlled local heating (tuTLh given):</p>"},{"location":"input-data/terminal/#tuqmxlh","title":"tuQMxLh","text":"<p>Type: float</p> <p>Maximum desired power, used when thermostat is calling for heat continuously, subject to coil capacity, and to HEATPLANT limitations where pertinent (see tuhcCaptRat description). If tuQMxLh is less than minimum power (tuQMnLh), the latter is used, effectively disabling setpoint control.</p> Units Legal Range Default Required Variability Btuh x \\(\\ge\\) 0 Yes, if tuTLh given hourly"},{"location":"input-data/terminal/#tuprilh","title":"tuPriLh","text":"<p>Type: int</p> <p>Setpoint priority: when there is more than one capability with the same setpoint, that with the highest priority (lowest value) is used first. The defaults for tuPriLh (100) and tuPriH (1) cause maximum air heat to be used before local heat, if both are present and the setpoints are the same. Two or more equal setpoints with equal priorities in the ZONE cause an error, even if in different TERMINALs.</p> Units Legal Range Default Required Variability x \\(&gt;\\) 0 100 No constant"},{"location":"input-data/terminal/#tulhneedsflow","title":"tuLhNeedsFlow","text":"<p>Type: choice</p> YES local heat being modeled requires terminal air flow (e.g. reheat coil). Local heat is then disabled when there is zero air flow through the terminal (when simulated VAV damper set to 0 flow, or when air handler fan and terminal fan both off) NO no local heat or does not require air flow (e.g. baseboard heaters). Units Legal Range Default Required Variability YES, NO NO No constant"},{"location":"input-data/terminal/#terminal-air-heating-and-cooling","title":"TERMINAL Air Heating and Cooling","text":"<p>These commands establish whether the TERMINAL has air capability (heat, cool, or both), and whether the capability operates in set temperature mode (tuTH and/or tuTLh given) or set output mode (tuVfMn given without tuTH and tuTLh). They further establish the setpoints, flow limits, leakages, and losses.</p> <p>Caution should be exercised in using air heat and air cooling in the same terminal. The supply air for both comes from the same air handler; it is up to you to make sure the terminal only calls for heat when the air handler is blowing hot air and only calls for cooling when the air handler is blowing cold air. This is done by carefully coordinating the variable expressions for terminal air heating and cooling setpoints (tuTH and tuTC here) and the air handler supply temperature setpoint (AIRHANDLER ahTsSp, Section 0).</p> <p>Note: To autosize air flows for a constant volume terminal, use the following</p> <pre><code>AUTOSIZE tuVfMxC\nAUTOSIZE tuVfMxH\nAUTOSIZE tuVfMn\ntuVfMxHC = SAME\n</code></pre>"},{"location":"input-data/terminal/#tuah","title":"tuAh","text":"<p>Type: ahName</p> <p>Name of air handler supplying this terminal.</p> Units Legal Range Default Required Variability name of an AIRHANDLER If omitted, terminal has no air heating nor cooling capability. No constant <p>If both of the following (tuTH and tuTC) are specified, be careful not to accidentally permit the heating setpoint to be active when the air handler is blowing cold air, or vice versa. CSE's simulated thermostats and VAV boxes are at least as dumb as their real counterparts; if the thermostat calls for heat, the VAV damper will open even if the supply air is colder than the zone. To schedule deactivation of the air heating or cooling capability, schedule an extreme setpoint, such as 1 for heating or 199 for cooling.</p> <p>Giving neither tuTH nor tuTC implies that the terminal has no set temperature air capability; it will then have set output air capability if tuVfMn is given.</p>"},{"location":"input-data/terminal/#tuth","title":"tuTH","text":"<p>Type: float</p> <p>Air heating thermostat set point; implies set temperature air capability. May be scheduled as desired with an hourly expression; to disable set temperature operation at certain times (as when air handler is scheduled to supply cold air), schedule a low temperature such as 1.</p> Units Legal Range Default Required Variability <sup>o</sup>F x \\(\\ge\\) 0 No thermostat-controlled air heating No hourly"},{"location":"input-data/terminal/#tutc","title":"tuTC","text":"<p>Type: float</p> <p>Air cooling thermostat set point; implies set temperature air capability. May be scheduled as desired; to disable at certain times, schedule an extreme temperature such as 199.</p> Units Legal Range Default Required Variability <sup>o</sup>F x \\(\\ge\\) 0 No thermostat-controlled air cooling No hourly"},{"location":"input-data/terminal/#tuvfds","title":"tuVfDs","text":"<p>Type: float</p> <p>Design air flow rate. (\"Vf\" in member names stands for \"Volumetric Flow\", to emphasize that flow is specified by volume at actual air temperature (cfm), not by mass (lb/hr), nor heat capacity (Btuh/F), etc.)</p> <p>The design air flow rate is used to apportion the available cfm among the terminals when the total flow demand of the terminals exceeds the air handler's supply fan capacity; it is unimportant (but may nevertheless be required) if the total of the tuVfMx's of the terminals on the air handler is not greater than the air handler's fan capacity including overrun.</p> <p>CSE will default tuVfDs to the largest of tuVfMn, tuVfMxH, and tuVfMxC unless a variable expression is given for any of them. Thus, you must given tuVfDs only when a variable minimum or maximum flow is used, or when you wish to override the default cfm apportionment under fan overload conditions.</p> Units Legal Range Default Required Variability cfm x \\(\\ge\\) 0 largest of tuVfMn, tuVfMxH, and tuVfMxC if all are constant Yes, if tuVfmn, tuVfmxH, or tuVfMxC is variable hourly"},{"location":"input-data/terminal/#tufxvfhc","title":"tuFxVfHC","text":"<p>Type: float</p> <p>Sizing factor for autosized terminal air flows.  Default value (1.1) specifies 10% oversizing.</p> Units Legal Range Default Required Variability x \\(\\ge\\) 0 1.1 No constant"},{"location":"input-data/terminal/#tuvfmxhc","title":"tuVfMxHC","text":"<p>Type: choice</p> <p>Determines autosizing strategy for heating and cooling air flows.</p> SAME tuVfMxH and tuVfMxC are set to the larger of the autosized values DIFFERENT tuVfMxH and tuVfMxC are autosized independently Units Legal Range Default Required Variability choices above Different No constant"},{"location":"input-data/terminal/#tuvfmn","title":"tuVfMn","text":"<p>Type: float</p> <p>Minimum terminal air flow rate or set output air flow rate. An hourly expression may be used to schedule the minimum or set output flow as desired.</p> <p>If neither tuTH nor tuTC is given, giving tuVfMn implies set output air capability for the terminal; the tvVfMn value is the set output cfm.</p> <p>If either setpoint (tuTH or tuTC) is given, tuVfMn is the cfm used when the thermostat is not calling for heat nor cold; it might be non-0, for example, to meet ventilation requirements. If tuVfMn is larger than tuVfMxH (when heating) or tuVfMxC (when cooling), it overrules them; thus a minimum (e.g. ventilation) requirement need not be considered in formulating expressions for the maximum flows.</p> Units Legal Range Default Required Variability cfm AUTOSIZE or x \\(\\ge\\) 0 if tuTH or tuTC given, else no air heat/cool For set output air operation hourly"},{"location":"input-data/terminal/#tuvfmxh","title":"tuVfMxH","text":"<p>Type: float</p> <p>Maximum heating air flow rate, subject to air handler limitations. This terminal flow is used when the thermostat is calling for heat continuously. Hourly schedulable. If not greater than tuVfMn, the latter flow is used, thus disabling thermostat control.</p> Units Legal Range Default Required Variability cfm AUTOSIZE or x \\(\\ge\\) 0 none If tuTH given hourly"},{"location":"input-data/terminal/#tuvfmxc","title":"tuVfMxC","text":"<p>Type: float</p> <p>Maximum cooling air flow rate, before air handler limitations, used when the thermostat is calling for cooling continuously. tuVfMn overrides if larger.</p> Units Legal Range Default Required Variability cfm AUTOSIZE or x \\(\\ge\\) 0 none If tuTC given hourly"},{"location":"input-data/terminal/#tupric","title":"tuPriC","text":"<p>Type: int</p> <p>Cool setpoint priority. The lowest numbered priority is used first when there are equal setpoints in a zone; equal heat or cool setpoints with equal priority in same ZONE (even if on different TERMINALs) constitute an error.</p> Units Legal Range Default Required Variability x \\(&gt;\\) 0 1 No constant"},{"location":"input-data/terminal/#tuprih","title":"tuPriH","text":"<p>Type: int</p> <p>Heat setpoint priority. Lowest numbered priority is used first when there are equal setpoints in a zone. Default for tuPriLh is larger, so that by default local heat is not used unless maximum air heat is insufficient, when both local heat and air heat are present in zone and have same setpoint.</p> Units Legal Range Default Required Variability x \\(&gt;\\) 0 1 No constant"},{"location":"input-data/terminal/#tusrleak","title":"tuSRLeak","text":"<p>Type: float</p> <p>Leakage of supply air to return, increasing supply volume and return temperature. Note that this is a fraction of current cfm, whereas air handler leak (before VAV dampers) is a fraction of maximum cfm. TfanOffLeak is added to this if terminal has a fan that is not running (future, 7-92).</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1 0.05 No constant"},{"location":"input-data/terminal/#tusrloss","title":"tuSRLoss","text":"<p>Type: float</p> <p>Supply air to return plenum heat loss as a fraction of supply air to return air temperature difference. Not allowed if return is ducted (no plenum).</p> <p>NOT IMPLEMENTED as of July 1992 -- Plenums are unimplemented.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1 0.1 No constant"},{"location":"input-data/terminal/#terminal-heating-coil","title":"TERMINAL Heating Coil","text":"<p>These members are disallowed if terminal has no local heating capability, that is, if neither tuTLh nor tuQMnLh is given.</p>"},{"location":"input-data/terminal/#tuhctype","title":"tuhcType","text":"<p>Type: choice</p> <p>Local heating coil type:</p> ELECTRIC Electric coil or heater, including separate heaters such as electric baseboards. 100% efficient; rated capacity always available. HW Hot water coil, using hot water from amHEATPLANT. Available capacity may be limited by HEATPLANT total capacity as well as by coil rated capacity. Units Legal Range Default Required Variability ELECTRIC (future: HW) ELECTRIC, or NONE if no local heat No constant"},{"location":"input-data/terminal/#tuhccaptrat","title":"tuhcCaptRat","text":"<p>Type: float</p> <p>Rated capacity of the heating coil. The coil will never supply more heat than its capacity, even if tuQMxLh and/or tuQMnLh is greater. For an ELECTRIC coil, the capacity is always the rated capacity. For an HW coil, the capacity is the rated capacity when the HEATPLANT can supply it; when the total heat demanded from the HEATPLANT by all the HW coils in TERMINALs and AIRHANDLERs exceeds the HEATPLANT's capacity, CSE reduces the capacities of all HW coils proportionately until the plant is not overloaded.</p> Units Legal Range Default Required Variability Btu/hr AUTOSIZE or x \\(\\gt\\) 0 none Yes constant"},{"location":"input-data/terminal/#tuhcfxcap","title":"tuhcFxCap","text":"<p>Type: float</p> <p>Capacity factor for autosized terminal heating coil.  Default value (1.1) specifies 10% oversizing.</p> Units Legal Range Default Required Variability x \\(\\ge\\) 0 1.1 No constant"},{"location":"input-data/terminal/#tuhcmtr","title":"tuhcMtr","text":"<p>Type: mtrName</p> <p>Name of meter, if any, which accumulates input energy for this coil. End use category used is \"Htg\". Not allowed when tuhcType is HW, as the energy for an HW coil comes through a HEATPLANT; the input energy is accumulated to a meter by the HEATPLANT.</p> Units Legal Range Default Required Variability name of a METER not recorded No constant"},{"location":"input-data/terminal/#tuhcheatplant","title":"tuhcHeatplant","text":"<p>Type: heatplantName</p> <p>Name of HEATPLANT for HW coil; disallowed for other coil types.</p> Units Legal Range Default Required Variability name of a HEATPLANT none If tuhcType is HW constant"},{"location":"input-data/terminal/#terminal-fan","title":"TERMINAL Fan","text":"<p>Presence of a terminal fan is indicated by specifying a tfanType value other than NONE.</p> <p>Terminal fans are NOT IMPLEMENTED as of July 1992.</p>"},{"location":"input-data/terminal/#tfantype","title":"tfanType","text":"<p>Type: choice</p> <p>Choice of:</p> NONE No fan in this TERMINAL (default); input for other terminal fan members disallowed. SERIES Fan runs whenever scheduled ON (see tfanSched, next); if VAV cfm &lt; terminal fan cfm (tfanVfDs), the additional flow comes from the return air. PARALLEL Fan runs when scheduled ON (see tfanSched) and terminal's simulated VAV cfm is less than tfanVfDs plus tuVfMn ?? plus tuVfMn??. Terminal fan cfm is added to VAV cfm from AIRHANDLER to get cfm to ZONE. Units Legal Range Default Required Variability NONE, SERIES, PARALLEL none Yes, if fan present constant"},{"location":"input-data/terminal/#tfansched","title":"tfanSched","text":"<p>Type: choice</p> <p>Terminal fan schedule. May be scheduled with an hourly variable expression.</p> OFF fan does not run ON fan may run HEATING fan may run when local heat is in use VAV fan may run when AIRHANDLER supply fan is on or when doing setback headting and ssCtrl is ZONE_HEAT or BOTH (future). <p>A series fan (see tfanType) runs whenever on; a parallel fan runs only enough to keep terminal cfm at terminal minimum plus fan cfm; thus it may not run at all when the VAV flow from the AIRHANDLER is sufficient.</p> Units Legal Range Default Required Variability OFF, ON, HEATING, VAV none Yes (if fan present) hourly"},{"location":"input-data/terminal/#tfanoffleak","title":"tfanOffLeak","text":"<p>Type: float</p> <p>Backdraft leakage when terminal fan off., as a fraction of tfanVfDs.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1 0.1 if fan present No constant"},{"location":"input-data/terminal/#tfanvfds","title":"tfanVfDs","text":"<p>Type: float</p> <p>Terminal fan design flow rate. To specify .x times zone or terminal cfm, use a CSE expression.</p> Units Legal Range Default Required Variability cfm x \\(\\le\\) 0 none Yes (if fan present) constant"},{"location":"input-data/terminal/#tfanpress","title":"tfanPress","text":"<p>Type: float</p> <p>Terminal fan external static pressure.</p> Units Legal Range Default Required Variability inches H2O x \\(\\ge\\) 0 0.3 No constant"},{"location":"input-data/terminal/#tfaneff","title":"tfanEff","text":"<p>Type: float</p> <p>Terminal fan/motor/drive combined efficiency.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1 0.08 No constant"},{"location":"input-data/terminal/#tfancurvepy","title":"tfanCurvePy","text":"<p>Type: k0, k1, k2, k3, x0</p> <p>k0 through k3 are the coefficients of a cubic polynomial for the curve relating fan relative energy consumption to relative air flow above the minimum flow x0. Up to five floats may be given, separated by commas. 0 is used for any omitted trailing values. The values are used as follows:</p> \\[z  =  k_0  +  k_1 \\cdot (x - x_0)|  +  k_2 \\cdot (x - x_0)|^2  +  k_3 \\cdot (x - x_0)|^3\\] <p>where:</p> <ul> <li>\\(x\\) is the relative fan air flow (as fraction of tfanVfDs; 0 \\(\\le\\) x \\(\\le\\) 1);</li> <li>\\(x_0\\) is the minimum relative air flow (default 0);</li> <li>\\((x - x_0)|\\) is the \"positive difference\", i.e. \\((x - x_0)\\) if \\(x &gt; x_0\\); else 0;</li> <li>\\(z\\) is the relative energy consumption.</li> </ul> <p>If \\(z\\) is not 1.0 for \\(x\\) = 1.0, a warning message is displayed and the coefficients are normalized by dividing by the polynomial's value for \\(x\\) = 1.0.</p> Units Legal Range Default Required Variability 0, 1, 0, 0, 0 (linear) No constant"},{"location":"input-data/terminal/#tfanmtr","title":"tfanMtr","text":"<p>Type: mtrName</p> <p>Name of meter, if any, which is to record energy used by this terminal fan. The \"fans\" category is used.</p> Units Legal Range Default Required Variability name of a METER not recorded No constant"},{"location":"input-data/terminal/#endterminal","title":"endTerminal","text":"<p>Optional to indicates the end of terminal definition. Alternatively, the end of the door definition can be indicated by END or by beginning another object.</p> Units Legal Range Default Required Variability x \\(\\ge\\) 0 none No constant <p>Related Probes:</p> <ul> <li>@terminal</li> <li>@zhx</li> </ul>"},{"location":"input-data/top-members/","title":"TOP Members","text":"<p>The top-level data items (TOP members) control the simulation process or contain data that applies to the modeled building as a whole. No statement is used to begin or create the TOP object; these statements can be given anywhere in the input (they do, however, terminate any other objects being specified -- ZONEs, REPORTs, etc.).</p>"},{"location":"input-data/top-members/#top-general-data-items","title":"TOP General Data Items","text":""},{"location":"input-data/top-members/#domainsim","title":"doMainSim","text":"<p>Type: choice</p> <p>Specifies whether the simulation is performed when a Run command is encountered. See also doAutoSize.</p> Units Legal Range Default Required Variability NO, YES YES No constant"},{"location":"input-data/top-members/#begday","title":"begDay","text":"<p>Type: date</p> <p>Date specifying the beginning day of the simulation performed when a Run command is encountered. See further discussion under endDay (next).</p> Units Legal Range Default Required Variability date Jan 1 No constant"},{"location":"input-data/top-members/#endday","title":"endDay","text":"<p>Type: date</p> <p>Date specifying the ending day of the simulation performed when a Run command is encountered.</p> <p>The program simulates 365 days at most. If begDay and endDay are the same, 1 day is simulated. If begDay precedes endDay in calendar sequence, the simulation is performed normally and covers begDay through endDay inclusive. If begDay follows endDay in calendar sequence, the simulation is performed across the year end, with Jan 1 immediately following Dec 31.</p> Units Legal Range Default Required Variability date Dec 31 No constant"},{"location":"input-data/top-members/#jan1dow","title":"jan1DoW","text":"<p>Type: choice</p> <p>Day of week on which January 1 falls.  jan1DoW is used in the calculation of the day of the week.</p> <p>Note that \"warm-up\" days (see wuDays) occur before the start day specified by begDay.  Thus \"warm-up\" days are often in the prior year.  In order to preserve the day-of-week sequence, the effective jan1DoW is shifted back by one day during prior-year warmup.</p> Units Legal Range Default Required Variability SUN, MON, TUE, WED, THU, FRI, SAT THU No constant"},{"location":"input-data/top-members/#workdaymask","title":"workDayMask","text":"<p>Type: int TODO</p> Units Legal Range Default Required Variability constant"},{"location":"input-data/top-members/#wudays","title":"wuDays","text":"<p>Type: int</p> <p>Number of \"warm-up\" days used to initialize the simulator. Simulator initialization is required because thermal mass temperatures are set to arbitrary values at the beginning of the simulation. Actual mass temperatures must be established through simulation of a few days before thermal loads are accumulated. Heavier buildings require more warm-up; the default values are adequate for conventional construction.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 365 7 No constant"},{"location":"input-data/top-members/#nsubsteps","title":"nSubSteps","text":"<p>Type: int</p> <p>Number of subhour steps used per hour in the simulation. 4 is the time-honored value for models using CNE zones. A value of 30 is typically for CSE zone models.</p> Units Legal Range Default Required Variability x \\(&gt;\\) 0 4 No constant"},{"location":"input-data/top-members/#nsubhrticks","title":"nSubhrTicks","text":"<p>Type: int</p> <p>Number of subhour ticks used per nSubSteps for DHWSYS simulation.</p> <p>Note: This input is currently used only for experimental purposes.</p> Units Legal Range Default Required Variability x \\(&gt;\\) 0 60/nSubSteps No constant"},{"location":"input-data/top-members/#tol","title":"tol","text":"<p>Type: float</p> <p>Endtest convergence tolerance for internal iteration in CNE models (no effect for CSE models) Small values for the tolerance cause more accurate simulations but slower performance. The user may wish to use a high number during the initial design process (to quicken the runs) and then lower the tolerance for the final design (for better accuracy). Values other than .001 have not been explored.</p> Units Legal Range Default Required Variability x \\(&gt;\\) 0 0.001 No constant"},{"location":"input-data/top-members/#humtolf","title":"humTolF","text":"<p>Type: float</p> <p>Specifies the convergence tolerance for humidity calculations in CNE models (no effect in for CSE models), relative to the tolerance for temperature calculations. A value of .0001 says that a humidity difference of .0001 is about as significant as a temperature difference of one degree. Note that this is multiplied internally by \"tol\"; to make an overall change in tolerances, change \"tol\" only.</p> Units Legal Range Default Required Variability x \\(\\ge\\) 0 0.0001 No constant"},{"location":"input-data/top-members/#ebtolmon","title":"ebTolMon","text":"<p>Type: float</p> <p>Monthly energy balance error tolerance for internal consistency checks. Smaller values are used for testing the internal consistency of the simulator; values somewhat larger than the default may be used to avoid error messages when it is desired to continue working despite a moderate degree of internal inconsistency.</p> Units Legal Range Default Required Variability x \\(&gt;\\) 0 0.0001 No constant"},{"location":"input-data/top-members/#ebtolday","title":"ebTolDay","text":"<p>Type: float</p> <p>Daily energy balance error tolerance.</p> Units Legal Range Default Required Variability x \\(&gt;\\) 0 0.0001 No constant"},{"location":"input-data/top-members/#ebtolhour","title":"ebTolHour","text":"<p>Type: float</p> <p>Hourly energy balance error tolerance.</p> Units Legal Range Default Required Variability x \\(&gt;\\) 0 0.0001 No constant"},{"location":"input-data/top-members/#ebtolsubhr","title":"ebTolSubhr","text":"<p>Type: float</p> <p>Sub-hourly energy balance error tolerance.</p> Units Legal Range Default Required Variability x \\(&gt;\\) 0 0.0001 No constant"},{"location":"input-data/top-members/#unmettztol","title":"unMetTzTol","text":"<p>Type: float</p> <p>Zone temperature unmet load tolerance.  At the end of each subhour, if a conditioned zone temperature is more than unMetTzTol below the current heating setpoint or more than unMetTzTol above the current cooling setpoint, \"unmet load\" time is accumulated.</p> Units Legal Range Default Required Variability <sup>o</sup>F x \\(\\geq\\) 0 1 <sup>o</sup>F No constant"},{"location":"input-data/top-members/#unmettztolwarnhrs","title":"unMetTzTolWarnHrs","text":"<p>Type: float</p> <p>Unmet load warning threshold.  A warning message is issued for each zone having more than unMetTzTolWarnHrs unmet heating or cooling loads.</p> Units Legal Range Default Required Variability hr x \\(\\geq\\) 0 150 No constant"},{"location":"input-data/top-members/#grndmindim","title":"grndMinDim","text":"<p>Type: float</p> <p>The minimum cell dimension used in the two-dimensional finite difference calculations for FOUNDATIONs.</p> Units Legal Range Default Required Variability ft x \\(&gt;\\) 0 0.066 No constant"},{"location":"input-data/top-members/#grndmaxgrthcoeff","title":"grndMaxGrthCoeff","text":"<p>Type: float</p> <p>The maximum ratio of growth between neighboring cells in the direction away from the near-field area of interest. Used in the two-dimensional finite difference calculations for FOUNDATIONs.</p> Units Legal Range Default Required Variability x \\(\\geq\\) 1.0 1.5 No constant"},{"location":"input-data/top-members/#grndtimestep","title":"grndTimeStep","text":"<p>Type: choice</p> <p>Allows the user to choose whether to calculate foundation conduction on hourly or subhourly intervals. Hourly intervals require less overall computation time, but with less accuracy.</p> Units Legal Range Default Required Variability HOURLY, SUBHOURLY HOURLY No constant"},{"location":"input-data/top-members/#hummeth","title":"humMeth","text":"<p>Type: choice</p> <p>Developmental zone humidity computation method choice for CNE models (no effect for CSE models).</p> ROB Rob's backward difference method. Works well within limitations of backward difference approach. PHIL Phil's central difference method. Should be better if perfectedcoma but initialization at air handler startup is unresolved*coma and ringing has been observed. Units Legal Range Default Required Variability ROB, PHIL ROB No constant"},{"location":"input-data/top-members/#dflexh","title":"dflExH","text":"<p>Type: float</p> <p>Default exterior surface (air film) conductance used for opaque and glazed surfaces exposed to ambient conditions in the absence of explicit specification.</p> Units Legal Range Default Required Variability Btuh/ft<sup>2</sup>-<sup>o</sup>F x \\(&gt;\\) 0 2.64 No constant"},{"location":"input-data/top-members/#bldgazm","title":"bldgAzm","text":"<p>Type: float</p> <p>Reference compass azimuth (0 = north, 90 = east, etc.). All zone orientations (and therefore surface orientations) are relative to this value, so the entire building can be rotated by changing bldgAzm only. If a value outside the range 0<sup>o</sup> \\(\\leq\\) x \\(&lt;\\) 360<sup>o</sup> is given, it is normalized to that range.</p> Units Legal Range Default Required Variability <sup>o</sup> (degrees) unrestricted 0 No constant"},{"location":"input-data/top-members/#elevation","title":"elevation","text":"<p>Type: float</p> <p>Elevation of the building site. Used internally for the computation of barometric pressure and air density of the location.</p> Units Legal Range Default Required Variability ft x \\(\\ge\\) 0 0 (sea level) No constant"},{"location":"input-data/top-members/#runtitle","title":"runTitle","text":"<p>Type: string</p> <p>Run title for the simulation. Appears in report footers, export headers, and in the title lines to the INP, LOG, and ERR built-in reports (these appear by default in the primary report file; the ERR report also appears in the error message file, if one is created).</p> Units Legal Range Default Required Variability 63 characters blank (no title No constant"},{"location":"input-data/top-members/#runserial","title":"runSerial","text":"<p>Type: int</p> <p>Run serial number for the simulation. Increments on each run in a session; appears in report footers. </p> Units Legal Range Default Required Variability 0 \\(\\leq\\) x \\(\\leq\\) 999 0 No constant"},{"location":"input-data/top-members/#top-daylight-saving-time-items","title":"TOP Daylight Saving Time Items","text":"<p>Daylight savings starts by default at 2:00 a.m. of the second Sunday in March. Internally, hour 3 (2:00-3:00 a.m.) is skipped and reports for this day show only 23 hours. Daylight savings ends by default at 2:00 a.m. of the first Sunday of November; for this day 25 hours are shown on reports. CSE fetches weather data using standard time but uses daylight savings time to calculate variable expressions (and thus all schedules).</p>"},{"location":"input-data/top-members/#dt","title":"DT","text":"<p>Type: choice</p> <p>Whether Daylight Savings Time is to be used for the current run.</p> Units Legal Range Default Required Variability YES, NO YES No constant"},{"location":"input-data/top-members/#dtbegday","title":"DTbegDay","text":"<p>Type: date</p> <p>Start day for daylight saving time (assuming DT=Yes)</p> Units Legal Range Default Required Variability date second Sunday in March No constant"},{"location":"input-data/top-members/#dtendday","title":"DTendDay","text":"<p>Type: date</p> <p>End day for daylight saving time (assuming DT=Yes)</p> Units Legal Range Default Required Variability date first Sunday in November No constant"},{"location":"input-data/top-members/#top-model-control-items","title":"TOP Model Control Items","text":""},{"location":"input-data/top-members/#ventavail","title":"ventAvail","text":"<p>Type: choice</p> <p>Indicates availability of outdoor ventilation strategies.  CSE cannot model simultaneously-operating alternative ventilation strategies.  For example, an RSYS central fan integrated (CFI) OAV system is never modeled while whole house fan ventilation is available.  ventAvail controls which ventilation mode, if any, is available for the current hour.  Note that mode availability means that the strategy could operate but may not operate due to other control assumptions.</p> Choice Ventilation Strategy Available NONE None WHOLEBUILDING IZXFER (window and whole-house fan) RSYSOAV RSYS central fan integrated (CFI) outside air ventilation (OAV) <p>As noted, ventAvail is evaluated hourly, permitting flexible control strategy modeling.  The following example specifies that RSYSOAV (CFI) ventilation is available when the seven day moving average temperature is above 68 <sup>o</sup>F, otherwise whole building ventilation is available between 7 and 11 PM, otherwise no ventilation.</p> <pre><code>ventAvail = (@weather.taDbAvg07 &gt; 68)    ? RSYSOAV\n          : ($hour &gt;= 19 &amp;&amp; $hour &lt;= 23) ? WHOLEBUILDING\n          :                                NONE\n</code></pre> Units Legal Range Default Required Variability Choices above WHOLEBUILDING No hourly"},{"location":"input-data/top-members/#exshademodel","title":"exShadeModel","text":"<p>Type: choice</p> <p>Specifies advanced exterior shading model used to evaluate shading of PVARRAYs by SHADEXs or other PVARRAYs.  Advanced shading is not implemented for building surfaces and this setting has no effect on walls or windows.</p> Choice Effect PENUMBRA Calculate shading using the Penumbra model NONE Disable advanced shading calculations Units Legal Range Default Required Variability Choices above PENUMBRA No constant"},{"location":"input-data/top-members/#slrinterpmeth","title":"slrInterpMeth","text":"<p>Type: choice</p> <p>Solar interpolation method.</p> Choice CSE TRNSYS Units Legal Range Default Required Variability See table above CSE No constant"},{"location":"input-data/top-members/#antolabs","title":"ANTolAbs","text":"<p>Type: float</p> <p>AirNet absolute convergence tolerance. Ideally, calculated zone air pressures should be such that the net air flow into each zone is 0 -- that is, there should be a perfect mass balance.  The iterative AirNet solution techniques are deemed converged when netAirMassFlow &lt; max( ANTolAbs, ANTolRel*totAirMassFlow).</p> Units Legal Range Default Required Variability lbm/sec x \\(&gt;\\) 0 0.00125 (about 1 cfm) No constant"},{"location":"input-data/top-members/#antolrel","title":"ANTolRel","text":"<p>Type: float</p> <p>AirNet relative convergence tolerance.  See AnTolAbs just above.</p> Units Legal Range Default Required Variability x \\(&gt;\\) 0 0.0001 No constant"},{"location":"input-data/top-members/#anpresswarn","title":"ANPressWarn","text":"<p>Type: float</p> <p>AirNet pressure warning threshold. A warning message is issued when the absolute value of the AirNet-calculated zone pressure exceeds ANPressWarn.  Note the default for ANPressWarn conservatively large. 10 lb/ft2 is about 500 pascals -- a pressure that is probably impossible in a building.  The intent of this value is to alert the user to incorrect modeling inputs while avoiding excessive messages.</p> Units Legal Range Default Required Variability lb/ft2 x \\(\\gt\\) 0 10 No constant"},{"location":"input-data/top-members/#anpresserr","title":"ANPressErr","text":"<p>Type: float</p> <p>AirNet pressure error threshold.  The simulation terminates with a message if the absolute value of any AirNet-calculated zone pressure exceeds ANPressErr.  Note the default value for ANPressErr is physically unrealistic. 30 lb/ft2 is about 1500 pascals -- a pressure that would never be possible in a building.  The intent of this value is to prevent simulation crashes due to numerical errors in AirNet calculations.</p> Units Legal Range Default Required Variability lb/ft2 x \\(\\gt\\) 0 30 No constant <p>The ASHWAT complex fenestration model used when WINDOW wnModel=ASHWAT yields several heat transfer results that are accurate over local ranges of conditions.  Several values control when these value are recalculated.  If any of the specified values changes more than the associated threshold, a full ASHWAT calculation is triggered.  Otherwise, prior results are used.  ASHWAT calculations are computationally expensive and conditions often change only incrementally between time steps.</p>"},{"location":"input-data/top-members/#awtrigt","title":"AWTrigT","text":"<p>Type: float</p> <p>ASHWAT temperature change threshold -- full calculation is triggered by a change of either indoor or outdoor environmental (combined air and radiant) temperature that exceeds AWTrigT.</p> Units Legal Range Default Required Variability <sup>o</sup>F x \\(&gt;\\) 0 1 No constant"},{"location":"input-data/top-members/#awtrigslr","title":"AWTrigSlr","text":"<p>Type: float</p> <p>ASHWAT solar change threshold -- full calculation is triggered by a fractional change of incident solar radiation that exceeds AWTrigSlr.</p> Units Legal Range Default Required Variability x \\(&gt;\\) 0 0.05 No constant"},{"location":"input-data/top-members/#awtrigh","title":"AWTrigH","text":"<p>Type: float</p> <p>ASHWAT convection coefficient change threshold -- full calculation is triggered by a fractional change of inside surface convection coefficient that exceeds AWTrigH.</p> Units Legal Range Default Required Variability x \\(&gt;\\) 0 0.1 No constant"},{"location":"input-data/top-members/#top-weather-data-items","title":"TOP Weather Data Items","text":"<p>The following system variables (4.6.4) are determined from the weather file for each simulated hour:</p> $radBeam beam irradiance on tracking surface (integral for hour, Btu/ft<sup>2</sup>). $radDiff diffuse irradiance on a horizontal surface (integral for hour, Btu/ft<sup>2</sup>). $tDbO dry bulb temp (<sup>o</sup>F). $tWbO wet bulb temp (<sup>o</sup>F). $wO humidity ratio $windDirDeg wind direction (degrees, NOT RADIANS; 0=N, 90=E). $windSpeed wind speed (mph). <p>The following are the terms determined from the weather file for internal use, and can be referenced with the probes shown.</p> <pre><code>    @Top.depressWbWet bulb depression (F).\n\n    @Top.windSpeedSquaredWind speed squared (mph2).\n</code></pre>"},{"location":"input-data/top-members/#wfname","title":"wfName","text":"<p>Type: string</p> <p>Weather file path name for simulation. The file should be in the current directory, in the directory CSE.EXE was read from, or in a directory on the operating system PATH.  Weather file formats supported are CSW, EPW, and ET1.  Only full-year weather files are supported.</p> <p>Note: Backslash (\\) characters in path names must be doubled to work properly (e.g. \"\\\\wthr\\\\mywthr.epw\").  Forward slash (/) may be used in place of backslash without doubling.</p> Units Legal Range Default Required Variability file name,path optional none Yes constant"},{"location":"input-data/top-members/#skymodel","title":"skyModel","text":"<p>Type: choice</p> <p>Selects sky model used to determine relative amounts of direct and diffuse irradiance.</p> ISOTROPIC traditional isotropic sky model ANISOTROPIC Hay anisotropic model Units Legal Range Default Required Variability choices above ANISOTROPIC No constant"},{"location":"input-data/top-members/#skymodellw","title":"skyModelLW","text":"<p>Type: choice</p> <p>Selects the model used to derive sky temperature used in long-wave (thermal) radiant heat exchange calculations for SURFACEs exposed to ambient conditions.  See the RACM alorithms documentation for technical details.</p> Choice Description DEFAULT Default: tSky from weather file if available else Berdahl-Martin BERDAHLMARTIN Berdahl-Martin (tSky depends on dew point, cloud cover, and hour) DRYBULB tSky = dry-bulb temperature (for testing) BLAST Blast model (tSky depends on dry-bulb) IRHORIZ Derives tSky from horizonal infrared data from the weather file (available on some EPW files only).  Caution: minimal error checking!  Missing weather file IR values are not handled correctly. Units Legal Range Default Required Variability choices above DEFAULT No constant <p>The reference temperature and humidity are used to calculate a humidity ratio assumed in air specific heat calculations. The small effect of changing humidity on the specific heat of air is generally ignored in the interests of speed, but the user can control the humidity whose specific heat is used through the refTemp and refRH inputs.</p>"},{"location":"input-data/top-members/#reftemp","title":"refTemp","text":"<p>Type: float</p> <p>Reference temperature (see above paragraph).</p> Units Legal Range Default Required Variability <sup>o</sup>F x \\(\\ge\\) 0 60<sup>o</sup> No constant"},{"location":"input-data/top-members/#refrh","title":"refRH","text":"<p>Type: float</p> <p>Reference relative humidity (see above).</p> Units Legal Range Default Required Variability 0 \\(\\leq\\) x \\(\\leq\\) 1 0.6 No constant"},{"location":"input-data/top-members/#grndrefl","title":"grndRefl","text":"<p>Type: float</p> <p>Global ground reflectivity, used except where other value specified with sfGrndRefl or wnGrndRefl. This reflectivity is used in computing the reflected beam and diffuse radiation reaching the surface in question. It is also used to calculate the solar boundary conditions for the exterior grade surface in two-dimensional finite difference calculations for FOUNDATIONs.</p> Units Legal Range Default Required Variability 0 \\(\\leq\\) x \\(\\leq\\) 1 0.2 No Monthly-Hourly <p>The following values modify weather file data, permitting varying the simulation without making up special weather files. For example, to simulate without the effects of wind, use windF = 0; to halve the effects of diffuse solar radiation, use radDiffF = 0.5. Note that the default values for windSpeedMin and windF result in modification of weather file wind values unless other values are specified.</p>"},{"location":"input-data/top-members/#grndemit","title":"grndEmit","text":"<p>Type: float</p> <p>Long-wave emittance of the exterior grade surface used in two-dimensional finite difference calculations for FOUNDATIONs.</p> Units Legal Range Default Required Variability 0.0 \\(\\le\\) x \\(\\le\\) 1.0 0.8 No constant"},{"location":"input-data/top-members/#grndrf","title":"grndRf","text":"<p>Ground surface roughness. Used for convection and wind speed corrections in two-dimensional finite difference calculations for FOUNDATIONs.</p> Units Legal Range Default Required Variability ft x \\(\\geq\\) 0.0 0.1 No constant"},{"location":"input-data/top-members/#windspeedmin","title":"windSpeedMin","text":"<p>Type: float</p> <p>Minimum value for wind speed</p> Units Legal Range Default Required Variability mph x \\(\\ge\\) 0 0.5 No constant"},{"location":"input-data/top-members/#windf","title":"windF","text":"<p>Type: float</p> <p>Wind Factor: multiplier for wind speeds read from weather file. windF is applied after windSpeedMin. Note that windF does not effect infiltration rates calculated by the Sherman-Grimsrud model (see e.g. ZONE.infELA). However, windF does modify AirNet flows (see IZXFER).</p> Units Legal Range Default Required Variability x \\(\\ge\\) 0 0.25 No constant"},{"location":"input-data/top-members/#terrainclass","title":"terrainClass","text":"<p>Type: int</p> <p>Specifies characteristics of ground terrain in the project region.</p> 1 ocean or other body of water with at least 5 km unrestricted expanse 2 flat terrain with some isolated obstacles (buildings or trees well separated) 3 rural areas with low buildings, trees, etc. 4 urban, industrial, or forest areas 5 center of large city Units Legal Range Default Required Variability 1 \\(\\leq\\) x \\(\\leq\\) 5 4 No constant"},{"location":"input-data/top-members/#radbeamf","title":"radBeamF","text":"<p>Type: float</p> <p>Multiplier for direct normal (beam) irradiance</p> Units Legal Range Default Required Variability x \\(\\ge\\) 0 1 No constant"},{"location":"input-data/top-members/#raddifff","title":"radDiffF","text":"<p>Type: float</p> <p>Multiplier for diffuse horizonal irradiance.</p> Units Legal Range Default Required Variability x \\(\\ge\\) 0 1 No constant"},{"location":"input-data/top-members/#hconvmod","title":"hConvMod","text":"<p>Type: choice</p> <p>Enable/disable convection convective coefficient pressure modification factor.</p> \\[0.24 + 0.76 \\cdot P_{Location}/P_{SeaLevel}\\] Units Legal Range Default Required Variability YES, NO YES No constant"},{"location":"input-data/top-members/#inhccombinationmethod","title":"inHcCombinationMethod","text":"<p>Type: choice</p> <p>Selects the method for combining inside face (zone-facing) forced and natural (buoyancy-driven) convection coefficients for surfaces using the UNIFIED convection model.  This is a development aid not typically used in production runs.</p> Method hcComb SUM hcNat + hcFrc QUADRATURE sqrt(hcNat^2 + hcFrc^2) WEIGHTED hcNat when ACH&lt;0.5hcFrc when ACH&gt;3.0else weighted combination Units Legal Range Default Required Variability choices above SUM No constant"},{"location":"input-data/top-members/#soildiff","title":"soilDiff","text":"<p>Type: float</p> <p>Note: soilDiff is used as part of the simple ground model, which is no longer supported. Use soilCond, soilSpHt, and SoilDens instead.</p> <p>Soil diffusivity, used in derivation of ground temperature.  CSE calculates a ground temperature at 10 ft depth for each day of the year using dry-bulb temperatures from the weather file and soilDiff.  Ground temperature is used in heat transfer calculations for SURFACEs with sfExCnd=GROUND.  Note: derivation of mains water temperature for DHW calculations involves a ground temperature based on soil diffusivity = 0.025 and does not use this soilDiff.</p> Units Legal Range Default Required Variability ft<sup>2</sup>/hr x \\(&gt;\\) 0 0.025 No constant"},{"location":"input-data/top-members/#soilcond","title":"soilCond","text":"<p>Type: float</p> <p>Soil conductivity. Used in two-dimensional finite difference calculations for FOUNDATIONs.</p> Units Legal Range Default Required Variability Btuh-ft/ft<sup>2</sup>-<sup>o</sup>F x \\(&gt;\\) 0 1.0 No constant"},{"location":"input-data/top-members/#soilspht","title":"soilSpHt","text":"<p>Type: float</p> <p>Soil specific heat. Used in two-dimensional finite difference calculations for FOUNDATIONs.</p> Units Legal Range Default Required Variability Btu/lb-<sup>o</sup>F x \\(&gt;\\) 0 0.1 No constant"},{"location":"input-data/top-members/#soildens","title":"soilDens","text":"<p>Type: float</p> <p>Soil density. Used in two-dimensional finite difference calculations for FOUNDATIONs.</p> Units Legal Range Default Required Variability lb/ft<sup>3</sup> x \\(&gt;\\) 0 115 No constant"},{"location":"input-data/top-members/#farfieldwidth","title":"farFieldWidth","text":"<p>Type: float</p> <p>Far-field width. Distance from foundation to the lateral, zero-flux boundary condition. Used in two-dimensional finite difference calculations for FOUNDATIONs.</p> Units Legal Range Default Required Variability ft x \\(&gt;\\) 0 130 No constant"},{"location":"input-data/top-members/#deepgrndcnd","title":"deepGrndCnd","text":"<p>Type: choice</p> <p>Deep-ground boundary condition type. Choices are WATERTABLE (i.e., a defined temperature) or ZEROFLUX.</p> Units Legal Range Default Required Variability \u2014 WATERTABLE, ZEROFLUX ZEROFLUX No constant"},{"location":"input-data/top-members/#deepgrnddepth","title":"deepGrndDepth","text":"<p>Type: float</p> <p>Deep-ground depth. Distance from exterior grade to the deep-ground boundary. Used in two-dimensional finite difference calculations for FOUNDATIONs.</p> Units Legal Range Default Required Variability ft x \\(&gt;\\) 0 130 No constant"},{"location":"input-data/top-members/#deepgrndt","title":"deepGrndT","text":"<p>Type: float</p> <p>Deep-ground temperature. Used when deepGrndCnd=WATERTABLE.</p> Units Legal Range Default Required Variability F x \\(&gt;\\) 0 Annual average drybulb temperature No hourly"},{"location":"input-data/top-members/#top-tdv-time-dependent-value-items","title":"TOP TDV (Time Dependent Value) Items","text":"<p>CSE supports an optional comma-separated (CSV) text file that provides hourly TDV values for electricity and fuel.  TDV values are read along with the weather file and the values merged with weather data.  Several daily statistics are calculated for use via probes.  The file has no other effect on the simulation.  Only full-year TDV files are supported.</p> <p>The format of a TDV file is the same as an IMPORTFILE with the proviso that the 4 line header is not optional and certain header items must have specified values.  In the following table, non-italic items must be provided as shown (with optional quotes).</p> Line Contents Notes 1 TDV Data (TDV/Btu), runNumber,   runNumber is not checked 2 timestamp                       optionally in quotes accessible via @TOP.TDVFileTimeStamp 3 title, hour                     title (in quotes if it contains commas) accessible via @TOP.TDVFileTitle 4 tdvElec, tdvFuel                  comma separated column names (optionally in quotes) not checked 5 .. valElec,valFuel               comma separated numerical values (8760 or 8784 rows) tdvElec is always in column 1, tdvFuel always in column 2 column names in row 4 do not determine order <p>Example TDV file --</p> <pre><code>    \"TDV Data (TDV/Btu)\",\"001\"\n    \"Wed 14-Dec-16  12:30:29 pm\"\n    \"BEMCmpMgr 2019.0.0 RV (758), CZ12, Fuel NatGas\", Hour\n    \"tdvElec\",\"tdvFuel\"\n    7.5638,2.2311\n    7.4907,2.2311\n    7.4478,2.2311\n    7.4362,2.2311\n    7.5255,2.2311\n    7.5793,2.2311\n    7.6151,2.2311\n    7.6153,2.2311\n    7.5516,2.2311\n    (... continues for 8760 or 8784 data lines ...)\n</code></pre> <p>Note: additional columns can be included and are ignored.</p> <p>The table below shows probes available for accessing TDV data in expressions.  Except as noted, daily values are updated based on standard time, so they may be inaccurate by small amounts when daylight savings time is in effect.</p> Probe Variability Description @Weather.tdvElec Hour current hour electricity TDV @Weather.tdvFuel Hour current hour fuel TDV @Weather.tdvElecPk Day current day peak electricity TDV (includes future hours).  Updated at hour 23 during daylight savings. @Weather.tdvElecAvg Day current day average electricity TDV (includes future hours) @Weather.tdvElecPvPk Day previous day peak electricity TDV @Weather.tdvElecAvg01 Day previous day average electricity TDV @weather.tdvElecHrRank[] Day hour ranking of TDVElec values.  tdvElecHrRank[ 1] is the hour having the highest TDVElec, tdvElecHrRank[ 2] is the next highest, etc. The hour values are adjusted when dayight savings time is in effect, so they remain consistent with system variable $hour. @weatherFile.tdvFileTimeStamp Constant TDV file timestamp (line 2 of header) @weatherFile.tdvFileTitle Constant TDV file title (line 3 of header) @Top.tdvFName Constant TDV file full path"},{"location":"input-data/top-members/#tdvfname","title":"TDVfName","text":"<p>Type: string</p> <p>Note: Backslash (\\) characters in path names must be doubled to work properly (e.g. \"\\\\data\\\\mytdv.tdv\").  Forward slash (/) may be used in place of backslash without doubling.</p> Units Legal Range Default Required Variability file name, path optional (no TDV file) No constant"},{"location":"input-data/top-members/#top-report-data-items","title":"TOP Report Data Items","text":"<p>These items are used in page-formatted report output files. See REPORTFILE, Section 5.245.21, and REPORT, Section 5.25.</p>"},{"location":"input-data/top-members/#rephdrl","title":"repHdrL","text":"<p>Type: string</p> <p>Report left header. Appears at the upper left of each report page unless page formatting (rfPageFmt) is OFF. If combined length of repHdrL and repHdrR is too large for the page width, one or both will be truncated.</p> Units Legal Range Default Required Variability none No constant"},{"location":"input-data/top-members/#rephdrr","title":"repHdrR","text":"<p>Type: string</p> <p>Report right header. Appears at the upper right of each report page unless page formatting (rfPageFmt) is OFF. If combined length of repHdrL and repHdrR is too large for the page width, one or both will be truncated.</p> Units Legal Range Default Required Variability none No constant"},{"location":"input-data/top-members/#replpp","title":"repLPP","text":"<p>Type: int</p> <p>Total lines per page to be assumed for reports. Number of lines used for text (including headers and footers) is repLPP - repTopM - repBotM.</p> Units Legal Range Default Required Variability lines x \\(\\ge\\) 50 66 No constant"},{"location":"input-data/top-members/#reptopm","title":"repTopM","text":"<p>Type: int</p> <p>Number of lines to be skipped at the top of each report page (prior to header).</p> Units Legal Range Default Required Variability lines 0 \\(\\geq\\) x \\(\\geq\\) 12 3 No constant"},{"location":"input-data/top-members/#repbotm","title":"repBotM","text":"<p>Type: int</p> <p>Number of lines reserved at the bottom of each report page. repBotM determines the position of the footer on the page (blank lines after the footer are not actually written).</p> Units Legal Range Default Required Variability lines 0 \\(\\geq\\) x \\(\\geq\\) 12 3 No constant"},{"location":"input-data/top-members/#repcpl","title":"repCPL","text":"<p>Type: int</p> <p>Characters per line for report headers and footers, user defined reports, and error messages. CSE writes simple ASCII files and assumes a fixed (not proportional) spaced printer font. Many of the built-in reports now (July 1992) assume a line width of 132 columns.</p> Units Legal Range Default Required Variability characters 78 \\(\\leq\\) x \\(\\leq\\) 132 78 No constant"},{"location":"input-data/top-members/#reptestpfx","title":"repTestPfx","text":"<p>Type: string</p> <p>Report test prefix. Appears at beginning of report lines that are expected to differ from prior runs. This is useful for \"hiding\" lines from text comparison utilities in automated testing schemes. Note: the value specified with command line -x takes precedence over this input.</p> Units Legal Range Default Required Variability none No constant"},{"location":"input-data/top-members/#top-autosizing","title":"TOP Autosizing","text":""},{"location":"input-data/top-members/#doautosize","title":"doAutoSize","text":"<p>Type: choice</p> <p>Controls invocation of autosizing phase prior to simulation.</p> Units Legal Range Default Required Variability YES, NO NO, unless AUTOSIZE commands in input No constant"},{"location":"input-data/top-members/#ausztol","title":"auszTol","text":"<p>Type: float</p> <p>Autosize tolerance.  Sized capacity results are deemed final when successive design day calculations produce results within auszTol of the prior iteration.</p> Units Legal Range Default Required Variability .005 No constant"},{"location":"input-data/top-members/#heatdstdbo","title":"heatDsTDbO","text":"<p>Type: float</p> <p>Heating outdoor dry bulb design temperature used for autosizing heating equipment.</p> Units Legal Range Default Required Variability <sup>o</sup>F none No hourly"},{"location":"input-data/top-members/#heatdstwbo","title":"heatDsTWbO","text":"<p>Type: float</p> <p>Heating outdoor design dry bulb temperature used for autosizing heating equipment.</p> Units Legal Range Default Required Variability <sup>o</sup>F x \\(\\ge\\) 0 derived assuming RH=.7 No hourly <p>CSE provides 3 mutually-exclusive methods for specifying cooling design conditions.  Each resulting design day is simulated repeatedly until results (e.g. equipment capacities) converge to stable values.  Multiple days are typically used to ensure the a range of temperatures and sun positions are considered.</p> <ul> <li>Design conditions.  One or more DESCONDs are specified.  DESCOND data is used to generate 24 hour design day weather data.</li> <li>Design days (from weather file).  One or more dates are specified.  Actual days from the weather file are simulated.</li> <li>Monthly design data.  Deprecated method using conditions found in ET1 format weather files.</li> </ul>"},{"location":"input-data/top-members/#cooldscond","title":"coolDsCond","text":"<p>Type: list of up to 12 DESCONDs</p> <p>Specifies cooling design conditions for cooling autosizing.  A comma-separated list of up to 12 DESCOND names can be provided.  Each day will be simulated repeatedly using weather conditions generated from DESCOND values.</p> Units Legal Range Default Required Variability name of DESCOND none No constant"},{"location":"input-data/top-members/#cooldsday","title":"coolDsDay","text":"<p>Type: list of up to 12 days</p> <p>Specifies cooling design days for cooling autosizing.  Each day will be simulated repeatedly using weather file conditions for that day.</p> Units Legal Range Default Required Variability dates none No constant"},{"location":"input-data/top-members/#cooldsmo","title":"coolDsMo","text":"<p>Type: list of up to 12 months</p> <p>Deprecated method for specifying design days for cooling autosizing.  Design conditions are taken from ET1 weather file header, however, the limited availale ET1 files do not contain design condition information.</p> Units Legal Range Default Required Variability months none No constant"},{"location":"input-data/top-members/#top-debug-reporting","title":"TOP Debug Reporting","text":""},{"location":"input-data/top-members/#verbose","title":"verbose","text":"<p>Type: int</p> <p>Controls verbosity of screen remarks. Most possible remarks are generated during autosizing of CNE models. Little or no effect in CSE models. TODO: document options</p> Units Legal Range Default Required Variability 0 - 5 1 No constant <p>The following dbgPrintMask values provide bitwise control of addition of semi-formated internal results to the run report file. The values and format of debugging reports are modified as required for testing purposes. </p>"},{"location":"input-data/top-members/#dbgprintmaskc","title":"dbgPrintMaskC","text":"<p>Type: int</p> <p>Constant portion of debug reporting control.</p> Units Legal Range Default Required Variability 0 No constant"},{"location":"input-data/top-members/#dbgprintmask","title":"dbgPrintMask","text":"<p>Type: int</p> <p>Hourly portion of debug reporting control (generally an expression that evaluates to non-0 only on days or hours of interest).</p> Units Legal Range Default Required Variability 0 No hourly"},{"location":"input-data/top-members/#dbgflag","title":"dbgFlag","text":"<p>Type: int</p> <p>Allows passing an input value to ad-hoc debugging code.  No permanent use; no impact on results.</p> Units Legal Range Default Required Variability 0 No subhourly"},{"location":"input-data/top-members/#docoverage","title":"doCoverage","text":"<p>Type: choice</p> <p>Enables expression code coverage reporting.  Development aid.</p> Units Legal Range Default Required Variability NO, YES NO No constant <p>Related Probes:</p> <ul> <li>@top</li> <li>@weatherFile</li> <li>@weather</li> <li>@weatherNextHour</li> </ul>"},{"location":"input-data/towerplant/","title":"TOWERPLANT","text":"<p>A TOWERPLANT object simulates a group of cooling towers which operate together to cool water for one or more CHILLERs and/or HPLOOP heat exchangers. There can be more than one TOWERPLANT in a simulation. Each CHILLER or hploop heat exchanger contains a pump (the \"heat rejection pump\") to circulate water through its associated TOWERPLANT. The circulating water is cooled by evaporation and conduction to the air; cooling is increased by operating fans in the cooling towers as necessary. These fans are the only energy consuming devices simulated in the TOWERPLANT.</p> <p>The TOWERPLANT models the leaving water temperature as a function of the entering water temperature, flow, outdoor air temperature, and humidity. The fans are operated as necessary to achieve a specified leaving water temperature setpoint, or as close to it as achievable.</p> <p>Two methods of staging the cooling tower fans in a TOWERPLANT are supported: \"TOGETHER\", under which all the tower fans operate together, at the same speed or cycling on and off at once, and \"LEAD\", in which a single \"lead\" tower's fan modulates for fine control of leaving water temperature, and as many additional towers fans as necessary operate at fixed speed. The water flows through all towers even when their fans are off; sometimes this will cool the water below setpoint with no fans operating.</p> <p>All the towers in a TOWERPLANT are identical, except that under LEAD staging, the towers other than the lead tower have one-speed fans. The group of towers can thus be described by giving the description of one tower, the number of towers, and the type of staging to be used. All of this information is given by TOWERPLANT members, so there is no need for individual TOWER objects.</p> <p>There is no provision for scheduling a TOWERPLANT: it operates whenever the heat rejection pump in one or more of its associated CHILLERs or HPLOOP heat exchangers operates. However, the setpoint for the water leaving the TOWERPLANT is hourly schedulable.</p>"},{"location":"input-data/towerplant/#towerplantname","title":"towerplantName","text":"<p>Name of TOWERPLANT object, given immediately after the word TOWERPLANT to begin the object's input. The name is used to refer to the TOWERPLANT in COOLPLANTs and HPLOOPs.</p> Units Legal Range Default Required Variability 63 characters Yes constant"},{"location":"input-data/towerplant/#tptssp","title":"tpTsSp","text":"<p>Type: float</p> <p>Setpoint temperature for water leaving towers.</p> Units Legal Range Default Required Variability <sup>o</sup>F x &gt; 0 85 No hourly"},{"location":"input-data/towerplant/#tpmtr","title":"tpMtr","text":"<p>Type: name of a METER</p> <p>METER object by which TOWERPLANT's fan input energy is to be recorded, in category \"Aux\". If omitted, energy use is not recorded, and thus cannot be reported. Towerplants have no modeled input energy other than for their fans (the heat rejection pumps are part of the CHILLER and HPLOOP objects).</p> Units Legal Range Default Required Variability name of a METER none No constant"},{"location":"input-data/towerplant/#tpstg","title":"tpStg","text":"<p>Type: choice</p> <p>How tower fans are staged to meet the load:</p> TOGETHER All fans operate at the same speed or cycle on and off together. LEAD A single \"Lead\" tower's fan is modulated as required and as many additional fans as necessary run at their (single) full speed. <p>Whenever the heat rejection pump in a CHILLER or HPLOOP heat exchanger is on, the water flows through all towers in the TOWERPLANT, regardless of the number of fans operating.</p> Units Legal Range Default Required Variability TOGETHER, LEAD TOGETHER No constant"},{"location":"input-data/towerplant/#ctn","title":"ctN","text":"<p>Type: integer</p> <p>Number of towers in the TOWERPLANT.</p> Units Legal Range Default Required Variability x &gt; 0 1 No constant"},{"location":"input-data/towerplant/#cttype","title":"ctType","text":"<p>Type: choice</p> <p>Cooling tower fan control type: ONESPEED, TWOSPEED, or VARIABLE. This applies to all towers under TOGETHER staging. For LEAD staging, ctType applies only to the lead tower; additional towers have ONESPEED fans.</p> Units Legal Range Default Required Variability ONESPEED, TWOSPEED, VARIABLE ONESPEED No constant"},{"location":"input-data/towerplant/#ctlospd","title":"ctLoSpd","text":"<p>Type: float</p> <p>Low speed for TWOSPEED fan, as a fraction of full speed cfm.</p> Units Legal Range Default Required Variability 0 &lt; x \\(\\le\\) 1 0.5 No constant <p>Note: full speed fan cfm is given by ctVfDs, below.</p> <p>The rest of the input variables apply to each tower in the group; the towers are identical except for the single-speed fan on non-lead towers when tpStg is LEAD.</p> <p>The following two inputs permit computation of the tower fan electrical energy consumption:</p>"},{"location":"input-data/towerplant/#ctshaftbhp","title":"ctShaftBhp","text":"<p>Type: float</p> <p>Shaft brake horsepower of each tower fan motor.</p> <p>The default value is the sum of the rejected (condenser) heats (including pump heat) at design conditions of the most powerful stage of each connected COOLPLANT, plus the design capacity of each connected HPLOOP heat exchanger, all divided by 290,000 and by the number of cooling towers in the TOWERPLANT.</p> Units Legal Range Default Required Variability Bhp x &gt; 0 (sum of loads)/290000/cTn No constant"},{"location":"input-data/towerplant/#ctmoteff","title":"ctMotEff","text":"<p>Type: float</p> <p>Motor (and drive, if any) efficiency for tower fans.</p> Units Legal Range Default Required Variability x &gt; 0 .88 No constant <p>The next four items specify the coefficients of polynomial curves relating fan power consumption to average speed (cfm) for the various fan types. For the non-variable speed cases CSE uses linear polynomials of the form</p> \\[p = a + b \\cdot \\text{spd}\\] <p>where p is the power consumption as a fraction of full speed power consumption, and spd is the average speed as a fraction of full speed. The linear relationship reflects the fact that the fans cycle to match partial loads. A non-0 value may be given for the constant part a to reflect start-stop losses. For the two speed fan, separate polynomials are used for low and high speed operation; the default coefficients assume power input varies with the cube of speed, that is, at low speed (ctLoSpd) the relative power input is ctLoSpd3. For the variable speed case a cubic polynomial is used.</p> <p>For each linear polynomial, two float expressions are given, separated by a comma. The first expression is the constant, a. The second expression is the coefficient of the average speed, b. Except for ctFcLo, a and b should add up to 1, to make the relative power consumption 1 when spd is 1; otherwise, CSE will issue a warning message and normalize them.</p>"},{"location":"input-data/towerplant/#ctfcone","title":"ctFcOne","text":"<p>Type: a, b</p> <p>Coefficients of linear fan power consumption polynomial \\(p = a + b \\cdot \\text{spd}\\) for ONESPEED fan. For the one-speed case, the relative average speed spd is the fraction of the time the fan is on.</p> Units Legal Range Default Required Variability a + b = 1.0 0, 1 No constant"},{"location":"input-data/towerplant/#ctfclo","title":"ctFcLo","text":"<p>Type: a, b</p> <p>Coefficients of linear fan power consumption polynomial \\(p = a + b \\cdot \\text{spd}\\) for low speed of TWOSPEED fan, when spd \\(\\le\\) ctLoSpd.</p> Units Legal Range Default Required Variability a + b = 1.0 0, ctLoSpd<sup>2</sup> No constant"},{"location":"input-data/towerplant/#ctfchi","title":"ctFcHi","text":"<p>Type: a, b</p> <p>Coefficients of linear fan power consumption polynomial \\(p = a + b \\cdot \\text{spd}\\) for high speed of TWOSPEED fan, when spd &gt; ctLoSpd.</p> Units Legal Range Default Required Variability a + b = 1.0 -ctLoSpd<sup>2</sup> - ctLoSpd, ctLoSpd<sup>2</sup> + ctLoSpd + 1 No constant"},{"location":"input-data/towerplant/#ctfcvar","title":"ctFcVar","text":"<p>Type: a, b, c, d</p> <p>For VARIABLE speed fan, four float values for coefficients of cubic fan power consumption polynomial of the form \\(p = a + b \\cdot \\text{spd} + c \\cdot \\text{spd}^2 + d \\cdot \\text{spd}^3\\).</p> Units Legal Range Default Required Variability a + b + c + d = 1.0 0, 0, 0, 1 No constant <p>The next six items specify the tower performance under one set of conditions, the \"design conditions\". The conditions should be chosen to be representative of full load operating conditions.</p>"},{"location":"input-data/towerplant/#ctcapds","title":"ctCapDs","text":"<p>Type: float</p> <p>Design capacity: amount of heat extracted from water under design conditions by one tower.</p> <p>The default value is the sum of the rejected (condenser) heats (including pump heat) at design conditions of the most powerful stage of each connected COOLPLANT, plus the design capacity of each connected HPLOOP heat exchanger, all divided by the number of towers.</p> Units Legal Range Default Required Variability Btuh x $ eq$ 0 (sum of loads)/ctN No constant"},{"location":"input-data/towerplant/#ctvfds","title":"ctVfDs","text":"<p>Type: float</p> <p>Design air flow, per tower; also the fan full-speed cfm specification.</p> <p>The default value is the sum of the loads (computed as for ctCapDs, just above) divided by 51, divided by the number of cooling towers.</p> Units Legal Range Default Required Variability cfm x &gt; 0 (sum of loads)/51/ctN No constant"},{"location":"input-data/towerplant/#ctgpmds","title":"ctGpmDs","text":"<p>Type: float</p> <p>Design water flow, per tower.</p> <p>The default is the sum of the flows of the connected heat rejection pumps, using the largest stage for COOLPLANTs, divided by the number of towers.</p> Units Legal Range Default Required Variability gpm x &gt; 0 (sum of pumps)/ctN No constant"},{"location":"input-data/towerplant/#cttdbods","title":"ctTDbODs","text":"<p>Type: float</p> <p>Design outdoor drybulb temperature (needed to convert ctVfDs from cfm to lb/hr).</p> Units Legal Range Default Required Variability <sup>o</sup>F x &gt; 0 93.5 No constant"},{"location":"input-data/towerplant/#cttwbods","title":"ctTWbODs","text":"<p>Type: float</p> <p>Design outdoor wetbulb temperature.</p> Units Legal Range Default Required Variability <sup>o</sup>F x &gt; 0 78 No constant"},{"location":"input-data/towerplant/#cttwods","title":"ctTwoDs","text":"<p>Type: float</p> <p>Design leaving water temperature.</p> Units Legal Range Default Required Variability <sup>o</sup>F x &gt; 0 85 No constant <p>The following six items allow optional specification of tower performance under another set of conditions, the \"off design\" conditions. If given, they allow CSE to compute the tower's relation between flows and heat transfer; in this case, ctK (below) may not be given.</p>"},{"location":"input-data/towerplant/#ctcapod","title":"ctCapOd","text":"<p>Type: float</p> <p>Off-design capacity, per tower.</p> Units Legal Range Default Required Variability Btuh x $ eq$ 0 (sum of loads)/ctN No constant"},{"location":"input-data/towerplant/#ctvfod","title":"ctVfOd","text":"<p>Type: float</p> <p>Off-design air flow, per tower. Must differ from design air flow; thus ctVfDs and ctVfOd cannot both be defaulted if off-design conditions are being given. The off-design air and water flows must be chosen so that maOd/mwOd \\(\\neq\\) maDs/mwDs.</p> Units Legal Range Default Required Variability cfm x &gt; 0; x $ eq$ ctVfDs (sum of loads)/51/ctN No constant"},{"location":"input-data/towerplant/#ctgpmod","title":"ctGpmOd","text":"<p>Type: float</p> <p>Off-design water flow, per tower. Must differ from design water flow; thus, both cannot be defaulted if off-design conditions are being given. Value must be chosen so that maOd/mwOd \\(\\neq\\) maDs/mwDs.</p> Units Legal Range Default Required Variability gpm x &gt; 0; x $ eq$ ctGpmDs (sum of pumps)/ctN No constant"},{"location":"input-data/towerplant/#cttdbood","title":"ctTDbOOd","text":"<p>Type: float</p> <p>Off-design outdoor drybulb temperature.</p> Units Legal Range Default Required Variability <sup>o</sup>F x &gt; 0 93.5 No constant"},{"location":"input-data/towerplant/#cttwbood","title":"ctTWbOOd","text":"<p>Type: float</p> <p>Off-design outdoor wetbulb temperature.</p> Units Legal Range Default Required Variability <sup>o</sup>F x &gt; 0 78 No constant"},{"location":"input-data/towerplant/#cttwood","title":"ctTwoOd","text":"<p>Type: float</p> <p>Off-design leaving water temperature.</p> Units Legal Range Default Required Variability <sup>o</sup>F x &gt; 0 85 No constant <p>The following item allows explicit specification of the relationship between flows and heat transfer, when the preceding \"off design\" inputs are not given. If omitted, it will be computed from the \"off design\" inputs if given, else the default value of 0.4 will be used.</p>"},{"location":"input-data/towerplant/#ctk","title":"ctK","text":"<p>Type: float</p> <p>Optional. Exponent in the formula</p> \\[\\text{ntuA} = k \\cdot (mwi/ma)^{ctK}\\] <p>where ntuA is the number of transfer units on the air side, mwi and ma are the water and air flows respectively, and k is a constant.</p> Units Legal Range Default Required Variability 0 &lt; x &lt; 1 from \"Od\" members if given, else 0.4 No constant"},{"location":"input-data/towerplant/#ctstkflfr","title":"ctStkFlFr","text":"<p>Type: float</p> <p>Fraction of air flow which occurs when tower fan is off, due to stack effect (convection). Cooling due to this air flow occurs in all towers whenever the water flow is on, and may, by itself, cool the water below the setpoint tpTsSp. Additional flow, when fan is on, is proportional to fan speed.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1 .18 No constant <p>The following items allow CSE to compute the effect of makeup water on the leaving water temperature.</p>"},{"location":"input-data/towerplant/#ctbldn","title":"ctBldn","text":"<p>Type: float</p> <p>Blowdown rate: fraction of inflowing water that is bled from the sump down the drain, to reduce the buildup of impurities that don't evaporate.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1 .01 No constant"},{"location":"input-data/towerplant/#ctdrft","title":"ctDrft","text":"<p>Type: float</p> <p>Drift rate: fraction of inflowing water that is blown out of tower as droplets without evaporating.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1 0 No constant"},{"location":"input-data/towerplant/#cttwm","title":"ctTWm","text":"<p>Type: float</p> <p>Temperature of makeup water from mains, used to replace water lost by blowdown, drift, and evaporation. Blowdown and drift are given by the preceding two inputs; evaporation is computed.</p> Units Legal Range Default Required Variability <sup>o</sup>F x &gt; 0 60 No constant"},{"location":"input-data/towerplant/#endtowerplant","title":"endTowerplant","text":"<p>Optionally indicates the end of the TOWERPLANT definition. Alternatively, the end of the definition can be indicated by END or by beginning another object.</p> <p>Related Probes:*</p> <ul> <li>@towerPlant</li> </ul>"},{"location":"input-data/window/","title":"WINDOW","text":"<p>WINDOW defines a subobject belonging to the current SURFACE that represents one or more identical windows. The azimuth, tilt, and exterior conditions of the window are the same as those of the surface to which it belongs. The total window area (wnHt \\(\\cdot\\) wnWid \\(\\cdot\\) wnMult) is deducted from the gross surface area. A surface may have any number of windows.</p> <p>Windows may optionally have operable interior shading that reduces the overall shading coefficient when closed.</p>"},{"location":"input-data/window/#wnname","title":"wnName","text":"<p>Name of window: follows the word \"WINDOW\" if given.</p> Units Legal Range Default Required Variability 63 characters none No constant"},{"location":"input-data/window/#wnheight","title":"wnHeight","text":"<p>Type: float</p> <p>Overall height of window (including frame).</p> Units Legal Range Default Required Variability ft x \\(&gt;\\) 0 none Yes constant"},{"location":"input-data/window/#wnwidth","title":"wnWidth","text":"<p>Type: float</p> <p>Overall width of window (including frame).</p> Units Legal Range Default Required Variability ft x \\(&gt;\\) 0 none Yes constant"},{"location":"input-data/window/#wnarea","title":"wnArea","text":"<p>Type: float</p> <p>Overall area of window (including frame).</p> Units Legal Range Default Required Variability ft<sup>2</sup> x \\(&gt;\\) 0 wnHeight * wnWidth No constant"},{"location":"input-data/window/#wnmult","title":"wnMult","text":"<p>Type: float</p> <p>Area multiplier; can be used to represent multiple identical windows.</p> Units Legal Range Default Required Variability x \\(&gt;\\) 0 1 No constant"},{"location":"input-data/window/#wnmodel","title":"wnModel","text":"<p>Type: choice</p> <p>Selects window model</p> Units Legal Range Default Required Variability SHGC, ASHWAT SHGC No constant"},{"location":"input-data/window/#wngt","title":"wnGt","text":"<p>Type: choice</p> <p>GLAZETYPE for window. Provides many defaults for window properties as cited below.</p>"},{"location":"input-data/window/#wnu","title":"wnU","text":"<p>Type: float</p> <p>Window conductance (U-factor without surface films, therefore not actually a U-factor but a C-factor).</p> <p>Preferred Approach: To use accurately with standard winter rated U-factor from ASHRAE or NFRC enter as:</p> <pre><code>    wnU = (1/((1/U-factor)-0.85)\n</code></pre> <p>Where 0.85 is the sum of the interior (0.68) and exterior (0.17) design air film resistances assumed for rating window U-factors. Enter wnInH (usually 1.5=1/0.68) instead of letting it default. Enter the wnExH or let it default. It is important to use this approach if the input includes gnFrad for any gain term. Using approach 2 below will result in an inappropriate internal gain split at the window.</p> <p>Approach 2. Enter wnU=U-factor and let the wnInH and wnExH default. Tnormally this approach systematically underestimates the window U-factor because it adds the wnExfilm resistance to 1/U-factor thereby double counting the exterior film resistance. This approach will also yield incorrect results for gnFrad internal gain since the high wnInH will put almost all the gain back in the space.</p> Units Legal Range Default Required Variability Btuh/ft<sup>2</sup>-<sup>o</sup>F x \\(&gt;\\) 0 none Yes constant"},{"location":"input-data/window/#wnunfrc","title":"wnUNFRC","text":"<p>Type: float</p> <p>Fenestration system (including frame) U-factor evaluated at NFRC heating conditions.</p> Units Legal Range Default Required Variability Btuh/ft<sup>2</sup>-<sup>o</sup>F x \\(&gt;\\) 0 gtUNFRC Required when wnModel = ASHWAT constant"},{"location":"input-data/window/#wnexepslw","title":"wnExEpsLW","text":"<p>Type: float</p> <p>Window exterior long wave (thermal) emittance.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1 0.84 No constant"},{"location":"input-data/window/#wninepslw","title":"wnInEpsLW","text":"<p>Type: float</p> <p>Window interior long wave (thermal) emittance.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1 0.84 No constant"},{"location":"input-data/window/#wninh","title":"wnInH","text":"<p>Type: float</p> <p>Window interior surface (air film) conductance.</p> <p>Preferred Approach: Enter the appropriate value for each window, normally:</p> <pre><code>    wnInH = 1.5\n\n    where 1.5 = 1/0.68 the standard ASHRAE value.\n</code></pre> <p>The large default value of 10,000 represents a near-0 resistance, for the convenience of those who wish to include the interior surface film in wnU according to approach 2 above.</p> Units Legal Range Default Required Variability Btuh/ft<sup>2</sup>-<sup>o</sup>F x \\(&gt;\\) 0 10000 No constant"},{"location":"input-data/window/#wnexh","title":"wnExH","text":"<p>Type: float</p> <p>Window exterior surface (air film) conductance.</p> Units Legal Range Default Required Variability Btuh/ft<sup>2</sup>-<sup>o</sup>F x \\(&gt;\\) 0 same as owning surface No constant <p>Several models are available for calculating inside and outside surface convective coefficients.  Inside surface faces can be exposed only to zone conditions. Outside faces may be exposed either to ambient conditions or zone conditions, based on wnExCnd.  Only UNIFIED and INPUT are typically used.  The other models were used during CSE development for comparison.  For details, see CSE Engineering Documentation.</p> Model Exposed to ambient Exposed to zone UNIFIED default CSE model default CSE model INPUT hc = wnExHcMult hc = wnxxHcMult AKBARI Akbari model n/a WALTON Walton model n/a WINKELMANN Winkelmann model n/a MILLS n/a Mills model ASHRAE n/a ASHRAE handbook values"},{"location":"input-data/window/#wnexhcmodel","title":"wnExHcModel","text":"<p>Type: choice</p> <p>Selects the model used for exterior surface convection.</p> Units Legal Range Default Required Variability choices above UNIFIED No constant"},{"location":"input-data/window/#wnexhclchar","title":"wnExHcLChar","text":"<p>Type: float</p> <p>Characteristic length of surface, used in derivation of forced exterior convection coefficients in some models when outside face is exposed to ambient (i.e. to wind).</p> Units Legal Range Default Required Variability ft x \\(&gt;\\) 0 10 No constant"},{"location":"input-data/window/#wnexhcmult","title":"wnExHcMult","text":"<p>Type: float</p> <p>Exterior convection coefficient adjustment factor.  When wnExHcModel=INPUT, hc=wnExHcMult.  For other wnExHcModel choices, the model-derived hc is multiplied by wnExHcMult.</p> Units Legal Range Default Required Variability x \\(\\ge\\) 0 1 No subhourly"},{"location":"input-data/window/#wninhcmodel","title":"wnInHcModel","text":"<p>Type: choice</p> <p>Selects the model used for the inside (zone) surface convection when wnModel = Forward_Difference.</p> Units Legal Range Default Required Variability choices above (see wnExHcModel) UNIFIED No constant"},{"location":"input-data/window/#wninhcmult","title":"wnInHcMult","text":"<p>Type: float</p> <p>Interior convection coefficient adjustment factor.  When wnInHcModel=INPUT, hc=wnInHcMult.  For other wnInHcModel choices, the model-derived hc is multiplied by wnInHcMult.</p> Units Legal Range Default Required Variability x \\(\\ge\\) 0 1 No subhourly"},{"location":"input-data/window/#wninhcfrccoeffs","title":"wnInHcFrcCoeffs","text":"<p>Type: float array</p> <p>Specifies 3 coefficients for an alternative inside surface forced convection model (applicable only for wnInHCModel=UNIFIED).  When given, the inside surface forced convection coefficient for this surface is derived as follows:</p> <pre><code>  hcFrc = hConvF * (wnInHcFrcCoeffs[ 1] + wnInHcFrcCoeffs[ 2] * ACH ^ wnInHcFrcCoeffs[ 3])\n</code></pre> <p>where hConvF is the convection adjustment factor (derived from elevation, see Top hConvMod) and ACH is the zone air change rate per hour from the prior simulation step (including heat pump water heater evaporator air flow).  This formulation is dangerously flexible, so caution is advised when selecting coefficient values.</p> <p>The default hcFrc value (used when wnInHcFrCoeff is not provided) is hConvF * znHcFrcF * ACH ^ 0.8.</p> Units Legal Range Default Required Variability Btuh/ft<sup>2</sup>-<sup>o</sup>F inherited from parent surface No subhourly"},{"location":"input-data/window/#wnshgc","title":"wnSHGC","text":"<p>Type: float</p> <p>Rated Solar Heat Gain Coefficient (SHGC) for the window assembly.</p> Units Legal Range Default Required Variability fraction 0 &lt; x &lt; 1 gtSHGC No constant"},{"location":"input-data/window/#wnfmult","title":"wnFMult","text":"<p>Type: float</p> <p>Frame area multiplier = areaGlaze / areaAssembly</p> Units Legal Range Default Required Variability fraction 0 &lt; x &lt; 1 gtFMult or 1 No constant"},{"location":"input-data/window/#wnsmso","title":"wnSMSO","text":"<p>Type: float</p> <p>SHGC multiplier with shades open. Overrides gtSMSO.</p> Units Legal Range Default Required Variability fraction 0 \\(\\leq\\) x \\(\\leq\\) 1 gtSMSO or 1 No Monthly - Hourly"},{"location":"input-data/window/#wnsmsc","title":"wnSMSC","text":"<p>Type: float</p> <p>SHGC multiplier with shades closed. Overrides gtSMSC</p> Units Legal Range Default Required Variability fraction 0 \\(\\leq\\) x \\(\\leq\\) 1 wnSMSO or gtSMSC No Monthly - Hourly"},{"location":"input-data/window/#wnnglz","title":"wnNGlz","text":"<p>Type: int</p> <p>Number of glazings in the window (bare glass only, not including any interior or exterior shades).</p> Units Legal Range Default Required Variability 0 \\(&lt;\\) x \\(\\leq\\) 4 gtNGLZ Required when wnModel = ASHWAT constant"},{"location":"input-data/window/#wnexshd","title":"wnExShd","text":"<p>Type: choice</p> <p>Exterior shading type (ASHWAT only).</p> Units Legal Range Default Required Variability NONE, INSCRN gtExShd No constant"},{"location":"input-data/window/#wninshd","title":"wnInShd","text":"<p>Type: choice</p> <p>Interior shade type (ASHWAT only).</p> Units Legal Range Default Required Variability NONE, DRAPEMED gtInShd No constant"},{"location":"input-data/window/#wndirtloss","title":"wnDirtLoss","text":"<p>Type: float</p> <p>Glazing dirt loss factor.</p> Units Legal Range Default Required Variability fraction 0 \\(\\leq\\) x \\(\\leq\\) 1 none No constant"},{"location":"input-data/window/#wngrndrefl","title":"wnGrndRefl","text":"<p>Type: float</p> <p>Ground reflectivity for this window.</p> Units Legal Range Default Required Variability fraction 0 \\(\\leq\\) x \\(\\leq\\) 1 sfGrndRefl No Monthly - Hourly"},{"location":"input-data/window/#wnvfskydf","title":"wnVfSkyDf","text":"<p>Type: float</p> <p>View factor from this window to sky for diffuse radiation. For the shading effects of an overhang, a wnVfSkyDf value smaller than the default would be used</p> Units Legal Range Default Required Variability fraction 0 \\(\\leq\\) x \\(\\leq\\) 1 0.5 - 0.5 cos(tilt) = .5 for vertical surface No Monthly - Hourly"},{"location":"input-data/window/#wnvfgrnddf","title":"wnVfGrndDf","text":"<p>Type: float</p> <p>View factor from this window to ground for diffuse radiation. For the shading effects of a fin(s), both wnVfSkyDf and wnVfGrndDf would be used.</p> Units Legal Range Default Required Variability fraction 0 \\(\\leq\\) x \\(\\leq\\) 1 0.5 + 0.5 .5 for vertical surface No Monthly - Hourly"},{"location":"input-data/window/#endwindow","title":"endWINDOW","text":"<p>Optionally indicates the end of the window definition. Alternatively, the end of the window definition can be indicated by END or the declaration of another object. END or endWindow, if used, should follow any subobjects of the window (SHADEs and/or SGDISTs).</p> Units Legal Range Default Required Variability none No constant <p>Related Probes:</p> <ul> <li>@window</li> <li>@xsurf</li> </ul>"},{"location":"input-data/zone/","title":"ZONE","text":"<p>ZONE constructs an object of class ZONE, which describes an area of the building to be modeled as having a uniform condition. ZONEs are large, complex objects and can have many subobjects that describe associated surfaces, shading devices, HVAC equipment, etc.</p>"},{"location":"input-data/zone/#zone-general-members","title":"ZONE General Members","text":""},{"location":"input-data/zone/#znname","title":"znName","text":"<p>Name of zone. Enter after the word ZONE; no \"=\" is used.</p> Units Legal Range Default Required Variability 63 characters none Yes constant"},{"location":"input-data/zone/#znmodel","title":"znModel","text":"<p>Type: choice</p> <p>Selects model for zone.</p> CNE Older central difference model based on original CALPAS methods.  Not fully supported and not suitable for current compliance applications. CZM Conditioned zone model. Forward-difference, short time step methods are used. UZM Unconditioned zone model. Identical to CZM except heating and cooling are not supported. Typically used for attics, garages, and other ancillary spaces. Units Legal Range Default Required Variability choices above CNE No constant"},{"location":"input-data/zone/#znarea","title":"znArea","text":"<p>Type: float</p> <p>Nominal zone floor area.</p> Units Legal Range Default Required Variability ft<sup>2</sup> x \\(&gt;\\) 0 none Yes constant"},{"location":"input-data/zone/#znvol","title":"znVol","text":"<p>Type: float</p> <p>Nominal zone volume.</p> Units Legal Range Default Required Variability ft<sup>3</sup> x \\(&gt;\\) 0 none Yes constant"},{"location":"input-data/zone/#znazm","title":"znAzm","text":"<p>Type: float</p> <p>Zone azimuth with respect to bldgAzm. All surface azimuths are relative to znAzm, so that the zone can be rotated by changing this member only. Values outside the range 0<sup>o</sup> to 360<sup>o</sup> are normalized to that range.</p> Units Legal Range Default Required Variability degrees unrestricted 0 No constant"},{"location":"input-data/zone/#znfloorz","title":"znFloorZ","text":"<p>Type: float</p> <p>Nominal zone floor height relative to arbitrary 0 level. Used re determination of vent heights </p> Units Legal Range Default Required Variability ft unrestricted 0 No constant"},{"location":"input-data/zone/#znceilinght","title":"znCeilingHt","text":"<p>Type: float</p> <p>Nominal zone ceiling height relative to zone floor (typically 8 \u2013 10 ft).</p> Units Legal Range Default Required Variability ft x \\(&gt;\\) 0 znVol / znArea No constant"},{"location":"input-data/zone/#zneavez","title":"znEaveZ","text":"<p>Type: float</p> <p>Nominal eave height above ground level. Used re calculation of local surface wind speed. This in turn influences outside convection coefficients in some surface models and wind-driven air leakage.</p> Units Legal Range Default Required Variability ft x \\(&gt;\\) 0 znFloorZ + infStories*8 No constant"},{"location":"input-data/zone/#zncair","title":"znCAir","text":"<p>Type: float</p> <p>Zone \"air\" heat capacity: represents heat capacity of air, furniture, \"light\" walls, and everything in zone except surfaces having heat capacity (that is, non-QUICK surfaces).</p> Units Legal Range Default Required Variability Btu/<sup>o</sup>F x \\(\\geq\\) 0 3.5 * znArea No constant"},{"location":"input-data/zone/#znhcairx","title":"znHcAirX","text":"<p>Type: float</p> <p>Zone air exchange rate used in determination of interior surface convective coefficients.  This item is generally used only for model testing.</p> Units Legal Range Default Required Variability ACH x \\(&gt;\\) 0 as modeled No subhourly"},{"location":"input-data/zone/#znhcfrcf","title":"znHcFrcF","text":"<p>Type: float</p> <p>Zone surface forced convection factor.  Default interior surface convective transfer is modeled as a combination of forced and natural convection.  hcFrc = znHcFrcF * ACH^.8, where ACH = znHcAirX + heat pump water heater evaporator air exchange rate  See CSE Engineering Documentation.</p> Units Legal Range Default Required Variability Btuh/ft<sup>2</sup>-<sup>o</sup>F .2 .2 No hourly"},{"location":"input-data/zone/#znhiratio","title":"znHIRatio","text":"<p>Type: float</p> <p>Zone hygric inertia ratio.  In zone moisture balance calculations, the effective dry-air mass = znHIRatio * (zone dry air mass).  This enhancement can be used to represente the moisture storage capacity of zone surfaces and contents.</p> Units Legal Range Default Required Variability x \\(&gt;\\) 0 1 No constant"},{"location":"input-data/zone/#znsc","title":"znSC","text":"<p>Type: float</p> <p>Zone shade closure. Determines insolation through windows (see WINDOW members wnSCSO and wnSCSC) and solar gain distribution: see SGDIST members sgFSO and sgFSC. 0 represents shades open; 1 represents shades closed; intermediate values are allowed. An hourly variable CSE expression may be used to schedule shade closure as a function of weather, time of year, previous interval HVAC use or zone temperature, etc.</p> Units Legal Range Default Required Variability 0 \\(\\leq\\) x \\(\\leq\\) 1 1 when cooling was used in previous hour, else 0 No hourly"},{"location":"input-data/zone/#znth","title":"znTH","text":"<p>Type: float</p> <p>Heating set point used (and required) when znModel=CZM and zone has no terminals.</p> Units Legal Range Default Required Variability <sup>o</sup>F 0 &lt; znTH &lt; znTC none Per above subhourly"},{"location":"input-data/zone/#zntd","title":"znTD","text":"<p>Type: float</p> <p>Desired set point (temperature maintained with ventilation if possible) for znModel=CZM.  Must be specified when zone ventilation is active.  </p> Units Legal Range Default Required Variability <sup>o</sup>F x &gt; 0; znTH &lt; znTD &lt; znTC none if venting subhourly"},{"location":"input-data/zone/#zntc","title":"znTC","text":"<p>Type: float</p> <p>Cooling set point used (and required) when znModel=CZM and zone has no terminals.</p> Units Legal Range Default Required Variability <sup>o</sup>F 0 &lt; znTC &gt; znTH none Per above subhourly <p>znModel = CZM zone heating and cooling is provided either via an RSYS HVAC system, by \"magic\" heat transfers specified by znQxxx items, or via TERMINAL (s).  One of these must be defined.</p>"},{"location":"input-data/zone/#znrsys","title":"znRSys","text":"<p>Type: rsysName</p> <p>Name of RSYS providing heating, cooling, and optional central fan integrated ventilation to this zone.</p> Units Legal Range Default Required Variability RSYS name (no RSYS) No constant"},{"location":"input-data/zone/#znqmxh","title":"znQMxH","text":"<p>Type: float</p> <p>Heating capacity at current conditions</p> Units Legal Range Default Required Variability Btuh x \\(\\geq\\) 0 none No hourly"},{"location":"input-data/zone/#znqmxhrated","title":"znQMxHRated","text":"<p>Type: float</p> <p>Rated heating capacity</p> Units Legal Range Default Required Variability Btuh x \\(\\geq\\) 0 none No constant"},{"location":"input-data/zone/#znqmxc","title":"znQMxC","text":"<p>Type: float</p> <p>Cooling capacity at current conditions</p> Units Legal Range Default Required Variability Btuh x \\(\\leq\\) 0 none No hourly"},{"location":"input-data/zone/#znqmxcrated","title":"znQMxCRated","text":"<p>Type: float</p> <p>Rated cooling capacity</p> Units Legal Range Default Required Variability Btuh x \\(\\leq\\) 0 none No constant"},{"location":"input-data/zone/#zone-infiltration","title":"ZONE Infiltration","text":"<p>The following control a simplified air change plus leakage area model. The Sherman-Grimsrud model is used to derive air flow rate from leakage area and this rate is added to the air changes specified with infAC. Note that TOP.windF does not modify calculated infiltration rates, since the Sherman-Grimsrud model uses its own modifiers. See also AirNet models available via IZXFER.</p>"},{"location":"input-data/zone/#infac","title":"infAC","text":"<p>Type: float</p> <p>Zone infiltration air changes per hour.</p> Units Legal Range Default Required Variability 1/hr x \\(\\geq\\) 0 0.5 No hourly"},{"location":"input-data/zone/#infela","title":"infELA","text":"<p>Type: float</p> <p>Zone effective leakage area (ELA).</p> Units Legal Range Default Required Variability in<sup>2</sup> x \\(\\geq\\) 0 0.0 No hourly"},{"location":"input-data/zone/#infshld","title":"infShld","text":"<p>Type: int</p> <p>Zone local shielding class, used in derivation of local wind speed for ELA infiltration model, wind-driven AirNet leakage, and exterior surface coefficients. infShld values are --</p> 1 no obstructions or local shielding 2 light local shielding with few obstructions 3 moderate local shielding, some obstructions within two house heights 4 heavy shielding, obstructions around most of the perimeter 5 very heavy shielding, large obstructions surrounding the perimeter within two house heights Units Legal Range Default Required Variability 1 \\(\\leq\\) x \\(\\leq\\) 5 3 No constant"},{"location":"input-data/zone/#infstories","title":"infStories","text":"<p>Type: int</p> <p>Number of stories in zone, used in ELA model.</p> Units Legal Range Default Required Variability 1 \\(\\leq\\) x \\(\\leq\\) 3 1 No constant"},{"location":"input-data/zone/#znwindflkg","title":"znWindFLkg","text":"<p>Type: float</p> <p>Wind speed modifier factor.  The weather file wind speed is multiplied by this factor to yield a local wind speed for use in infiltration and convection models.</p> Units Legal Range Default Required Variability x \\(\\geq\\) 0 derived from znEaveZ and infShld No constant"},{"location":"input-data/zone/#znafmtr","title":"znAFMtr","text":"<p>Type: afMtrName</p> <p>Name of an AFMETER object, if any, to which zone AirNet air flows are recorded.  ZnAFMtr defines a pressure boundary for accounting purposes.  Multiple zones having the same AFMETER are treated as a single volume -- interzone flows within that volume are not recorded.  For example, to obtain \"building total\" flow data, a common AFMETER could be assigned to several conditioned zones but not to adjacent unconditioned zones such as attic spaces.</p> Units Legal Range Default Required Variability name of an AFMETER not recorded No constant"},{"location":"input-data/zone/#znloadmtr","title":"znLoadMtr","text":"<p>Type: ldMtrName</p> <p>Name of a LOADMETER object, if any, to which zone heating and cooling loads are recorded.</p> Units Legal Range Default Required Variability name of a LOADMETER not recorded No constant"},{"location":"input-data/zone/#zone-exhaust-fan","title":"ZONE Exhaust Fan","text":"<p>Presence of an exhaust fan in a zone is indicated by specifying a non-zero design flow value (xfanVfDs).</p> <p>Zone exhaust fan model implementation is incomplete as of July, 2011. The current code calculates energy use but does not account for the effects of air transfer on room heat balance. IZXFER provides a more complete implementation.</p>"},{"location":"input-data/zone/#xfanfon","title":"xfanFOn","text":"<p>Type: float</p> <p>Exhaust fan on fraction. On/off control assumed, so electricity requirement is proportional to run time.</p> Units Legal Range Default Required Variability fraction 0 \\(\\leq\\) x \\(\\leq\\) 1 1 No hourly <p>Example: The following would run an exhaust fan 70% of the time between 8 AM and 5 PM:</p> <pre><code>    xfanFOn = select( (\\$hour &gt;= 7 &amp;&amp; \\$hour &lt; 5), .7,\n                                          default, 0 );\n</code></pre>"},{"location":"input-data/zone/#xfanvfds","title":"xfanVfDs","text":"<p>Type: float</p> <p>Exhaust fan design flow; 0 or not given indicates no fan.</p> Units Legal Range Default Required Variability cfm x \\(\\geq\\) 0 0, no fan If fan present constant"},{"location":"input-data/zone/#xfanpress","title":"xfanPress","text":"<p>Type: float</p> <p>Exhaust fan external static pressure.</p> Units Legal Range Default Required Variability inches 0.05 \\(\\leq\\) x \\(\\leq\\) 1.0 0.3 No constant <p>Only one of xfanElecPwr, xfanEff, and xfanShaftBhp may be given: together with xfanVfDs and xfanPress, any one is sufficient for CSE to detemine the others and to compute the fan heat contribution to the air stream.</p>"},{"location":"input-data/zone/#xfanelecpwr","title":"xfanElecPwr","text":"<p>Type: float</p> <p>Fan input power per unit air flow (at design flow and pressure).</p> Units Legal Range Default Required Variability W/cfm x \\(&gt;\\) 0 derived from xfanEff If xfanEff and xfanShaftBhp not present constant"},{"location":"input-data/zone/#xfaneff","title":"xfanEff","text":"<p>Type: float</p> <p>Exhaust fan/motor/drive combined efficiency.</p> Units Legal Range Default Required Variability fraction 0 \\(\\leq\\) x \\(\\leq\\) 1 0.08 No constant"},{"location":"input-data/zone/#xfanshaftbhp","title":"xfanShaftBhp","text":"<p>Type: float</p> <p>Fan shaft power at design flow and pressure.</p> Units Legal Range Default Required Variability BHP x \\(&gt;\\) 0 derived from xfanElecPwr and xfanVfDs If xfanElecPwr not present constant"},{"location":"input-data/zone/#xfanmtr","title":"xfanMtr","text":"<p>Type: mtrName</p> <p>Name of METER object, if any, by which fan's energy use is recorded (under end use category \"fan\").</p> Units Legal Range Default Required Variability name of a METER not recorded No constant"},{"location":"input-data/zone/#endzone","title":"endZone","text":"<p>Indicates the end of the zone definition. Alternatively, the end of the zone definition can be indicated by the declaration of another object or by \"END\". If END or endZone is used, it should follow the definitions of the ZONE's subobjects such as GAINs, SURFACEs, TERMINALs, etc.</p> Units Legal Range Default Required Variability none No constant <p>Related Probes:</p> <ul> <li>@zone</li> <li>@znRes (accumulated results)</li> </ul>"},{"location":"probe-definitions/","title":"Probe definitions","text":""},{"location":"probe-definitions/AFMETER/","title":"AFMETER","text":"<p>title: AFMETER ---</p> <ul> <li>results: average cfm std air</li> <li>0 = airflow in (+)</li> <li>1 = airflow out (-)</li> <li>for each interval (member here), usage by end use (substruct member):</li> <li>CAUTION: ordered for subscripting by IVLCH-1.</li> </ul> Name Type Variability Description/Comments Y[index] Array [2] run (aka year or annual) AFMTR_IVL Name Type Variability Description/Comments Y[index].count number End of run # of accums Name Type Variability Description/Comments Y[index].total number End of run <ul> <li>total of following specific categories</li> <li>code assumes amt_total is 1st float</li> <li>Use by airflow category (C_AFCAT_xxx)</li> <li>CAUTION: order of members MATCHES DTAFCAT</li> <li>for subscripting (in cgcomp,cgresult.cpp) by category</li> </ul> Y[index].unknown number End of run unknown (= AFCAT 0, no associated choice) Y[index].infEx number End of run air flow by category Y[index].vntEx number End of run Y[index].fanEx number End of run Y[index].infUz number End of run Y[index].vntUz number End of run Y[index].fanUz number End of run Y[index].infCz number End of run Y[index].vntCz number End of run Y[index].fanCz number End of run Y[index].ductLk number End of run Y[index].hvac number End of run M[index] Array [2] month AFMTR_IVL Name Type Variability Description/Comments M[index].count number Unknown # of accums Name Type Variability Description/Comments M[index].total number Unknown <ul> <li>total of following specific categories</li> <li>code assumes amt_total is 1st float</li> <li>Use by airflow category (C_AFCAT_xxx)</li> <li>CAUTION: order of members MATCHES DTAFCAT</li> <li>for subscripting (in cgcomp,cgresult.cpp) by category</li> </ul> M[index].unknown number Unknown unknown (= AFCAT 0, no associated choice) M[index].infEx number Unknown air flow by category M[index].vntEx number Unknown M[index].fanEx number Unknown M[index].infUz number Unknown M[index].vntUz number Unknown M[index].fanUz number Unknown M[index].infCz number Unknown M[index].vntCz number Unknown M[index].fanCz number Unknown M[index].ductLk number Unknown M[index].hvac number Unknown D[index] Array [2] day AFMTR_IVL Name Type Variability Description/Comments D[index].count number End of day # of accums Name Type Variability Description/Comments D[index].total number End of day <ul> <li>total of following specific categories</li> <li>code assumes amt_total is 1st float</li> <li>Use by airflow category (C_AFCAT_xxx)</li> <li>CAUTION: order of members MATCHES DTAFCAT</li> <li>for subscripting (in cgcomp,cgresult.cpp) by category</li> </ul> D[index].unknown number End of day unknown (= AFCAT 0, no associated choice) D[index].infEx number End of day air flow by category D[index].vntEx number End of day D[index].fanEx number End of day D[index].infUz number End of day D[index].vntUz number End of day D[index].fanUz number End of day D[index].infCz number End of day D[index].vntCz number End of day D[index].fanCz number End of day D[index].ductLk number End of day D[index].hvac number End of day H[index] Array [2] hour AFMTR_IVL Name Type Variability Description/Comments H[index].count number End of hour # of accums Name Type Variability Description/Comments H[index].total number End of hour <ul> <li>total of following specific categories</li> <li>code assumes amt_total is 1st float</li> <li>Use by airflow category (C_AFCAT_xxx)</li> <li>CAUTION: order of members MATCHES DTAFCAT</li> <li>for subscripting (in cgcomp,cgresult.cpp) by category</li> </ul> H[index].unknown number End of hour unknown (= AFCAT 0, no associated choice) H[index].infEx number End of hour air flow by category H[index].vntEx number End of hour H[index].fanEx number End of hour H[index].infUz number End of hour H[index].vntUz number End of hour H[index].fanUz number End of hour H[index].infCz number End of hour H[index].vntCz number End of hour H[index].fanCz number End of hour H[index].ductLk number End of hour H[index].hvac number End of hour S[index] Array [2] subhour AFMTR_IVL Name Type Variability Description/Comments S[index].count number End of subhour # of accums Name Type Variability Description/Comments S[index].total number End of subhour <ul> <li>total of following specific categories</li> <li>code assumes amt_total is 1st float</li> <li>Use by airflow category (C_AFCAT_xxx)</li> <li>CAUTION: order of members MATCHES DTAFCAT</li> <li>for subscripting (in cgcomp,cgresult.cpp) by category</li> </ul> S[index].unknown number End of subhour unknown (= AFCAT 0, no associated choice) S[index].infEx number End of subhour air flow by category S[index].vntEx number End of subhour S[index].fanEx number End of subhour S[index].infUz number End of subhour S[index].vntUz number End of subhour S[index].fanUz number End of subhour S[index].infCz number End of subhour S[index].vntCz number End of subhour S[index].fanCz number End of subhour S[index].ductLk number End of subhour S[index].hvac number End of subhour"},{"location":"probe-definitions/Battery/","title":"Battery","text":"<p>title: Battery ---</p> Name Type Variability Description/Comments meter TI input time meter for system electricity production useUsrChg choice:NOYES Start of run <ul> <li>YES: user specifies charge request;</li> <li>NO (default): calculate charge request via</li> <li>default strategy</li> </ul> controlAlg BATCTRLALGVC Start of hour <ul> <li>control algorithm choice</li> <li>_DEFAULT: per bt_chgReq</li> <li>_TDVPEAKSAVE: strive to reduce demand during peak TDV hours</li> </ul> maxCap FLOAT_GEZ Start of run maximum (usable) battery capacity in kWh initSOE number Start of run initial state of energy (0 &lt;= SOE &lt;= 1) initCycles FLOAT_GEZ Start of run initial number of cycles on battery (&gt;= 0) chgEff FRAC_GZ Start of hour battery efficiency while charging dschgEff FRAC_GZ Start of hour battery efficiency while discharging (Fraction) maxChgPwr FLOAT_GEZ Start of hour maximum allowable charging power (kW) maxDschgPwr FLOAT_GEZ Start of hour maximum discharge power (kW) chgReq number End of hour battery charge request (kW) +=charge;-=discharge soeBegIvl number Start of hour battery SOE at beginning of interval loadSeen number End of hour <ul> <li>the adjusted load seen by the battery for current hour (kW)</li> <li>= net power from bt_meter (including PV)</li> <li>0 if bt_meter not specified</li> </ul> soe number Post-calc phase of hour <ul> <li>battery state of energy (SOE) (0 &lt;= SOE &lt;= 1)</li> <li>represents the end of interval SOE.</li> </ul> soelh number Start of hour battery state of energy (SOE) at end of prior hour cycles FLOAT_GEZ Post-calc phase of hour accumulated battery cycles cycleslh FLOAT_GEZ Start of hour accumulated battery cycles, end of prior hour energy FLOAT_GEZ Post-calc phase of hour current amount of energy in battery (kWh) energylh FLOAT_GEZ Start of hour <ul> <li>amount of energy in battery (kWh)</li> <li>at end of prior hour</li> </ul>"},{"location":"probe-definitions/DESCOND/","title":"DESCOND","text":"<p>title: DESCOND ---</p> Name Type Variability Description/Comments doy DOY input time calc date for this DESCOND (1-365) Name Type Variability Description/Comments DB number input time design dry-bulb temp, F MCDBR number input time coincident daily db range, F MCWB number input time coincident wet-bulb temp, F MCWBR number input time <ul> <li>coincident daily wb range, F</li> <li>if omitted, constant dewpoint limited by saturation</li> </ul> wndSpd FLOAT_GEZ input time wind speed, mph <ul> <li>parameters for ASHRAE clear sky model</li> <li>if taub/d provided, ebn/edh derived else reverse</li> <li>if all 0, solar is 0 all hours</li> </ul> Name Type Variability Description/Comments tauB FLOAT_GEZ input time beam tau tauD FLOAT_GEZ input time diffuse tau ebnSlrNoon FLOAT_GEZ input time solar noon beam normal, Btuh/ft2 edhSlrNoon FLOAT_GEZ input time solar noon diffuse horiz, Btuh/ft2"},{"location":"probe-definitions/DHWDayUse/","title":"DHWDayUse","text":"<p>title: DHWDayUse ---</p> Name Type Variability Description/Comments mult FLOAT_GEZ Start of hour <ul> <li>multiplier applied to all child [DHWUSE][dhwuse] [wuFlows][wuflow]</li> <li>note FLOAT (not integer)</li> </ul> <ul> <li>runtime (see wdu_RunInit()): range of ss values</li> <li>for [DHWUSEs][dhwuse] belonging to this [DHWDAYUSE][dhwdayuse]</li> <li>Typically all [DHWUSEs][dhwuse] in range will be</li> <li>children of this [DHWDAYUSE][dhwdayuse], but not guaranteed.</li> <li>ownership should be checked within loops.</li> </ul> Name Type Variability Description/Comments wuSsBeg number Start of run initial ss wuSsEnd number Start of run last ss+1 wuCount number Start of run count of child DHWUSEs"},{"location":"probe-definitions/DHWHeatRec/","title":"DHWHeatRec","text":"<p>title: DHWHeatRec ---</p> Name Type Variability Description/Comments mult SI_GEZ input time <ul> <li>multiplier</li> <li>modeled as wr_mult identical heat recovery devices</li> </ul> hwEndUse choice:DHWEU input time <ul> <li>end use source for this device</li> <li>as of 12-18, only supports C_DHWEUCH_SHOWER</li> </ul> type choice:DWHRTY input time <ul> <li>type: C_DWHRTYCH_</li> <li>_HORIZ or _VERT: effectiveness adjusted per CASE regressions</li> <li>depending on flows and temps, same model for both</li> <li>_SETEF: wr_effRated used w/o modification (testing aid)</li> </ul> nFXDrain SI_GEZ input time <ul> <li>number of fixtures (of type wr_hwEndUse) draining</li> <li>via this [DHWHEATREC][dhwheatrec]</li> </ul> nFXCold SI_GEZ input time <ul> <li>number of fixtures (of type wr_hwEndUse) draining</li> <li>via this [DHWHEATREC][dhwheatrec] with cold source = this [DHWHEATREC][dhwheatrec]</li> <li>default = wr_nFXDrain</li> <li>if &lt; wr_nFXDrain, remainder have cold source = mains</li> <li>Note: wr_feedsWH = No and wr_nFXCold=0 is illegal</li> </ul> feedsWH choice:NOYES input time <ul> <li>iff C_NOYESCH_YES, potable output is plumbed to water heater</li> <li>cold water inlet</li> </ul> Name Type Variability Description/Comments effRated number Start of hour rated effectiveness (generally CSA rating value) Name Type Variability Description/Comments tdInDiff FLOAT_GEZ Start of hour <ul> <li>drain-side inlet water temp drop from fixture mixed temp, F</li> <li>tdIn = tFxMix - tdInDiff;  default = 4.6 F</li> </ul> Name Type Variability Description/Comments tdInWarmup FLOAT_GEZ Start of hour <ul> <li>drain-side inlet temp during warmup portion of draw</li> <li>default = 65.</li> </ul> Name Type Variability Description/Comments eff number End of subhour effectiveness under current conditions tpO number End of subhour most recent potable-side output temp, F vp number End of subhour most recent potable-side flow, gpm"},{"location":"probe-definitions/DHWHeater/","title":"DHWHeater","text":"<p>title: DHWHeater ---</p> Name Type Variability Description/Comments mult FLOAT_GEZ Start of run <ul> <li>count of identical water heaters (default 1)</li> <li>models as if repeated identical input</li> <li>non-integral values allowed re sizing methods</li> </ul> heatSrc choice:WHHEATSRC input time <ul> <li>heat source</li> <li>C_WHHEATSRCCH_ELRES: electric resistance</li> <li>_FUEL: fuel-fired burner</li> <li>_ASHP: air source heat pump (T24DHW.DLL model)</li> <li>_ASHPX: air source heat pump (Ecotope HPWH)</li> <li>_ELRESX: electric resistance (Ecotope HPWH)</li> </ul> type choice:WHTYPE input time <ul> <li>heater type</li> <li>C_WHTYPECH_STRGSML, _STRGLRG, _INSTSML, _INSTLRG,</li> <li>_INSTUEF, _BUILTUP</li> </ul> desc ANAME input time probe-able description text fcn number Start of run function of this DHWHEATER per whfcnXXX enum Name Type Variability Description/Comments ashpTy choice:WHASHPTY input time <ul> <li>air source heat pump (HPWH) type, required iff wh_heatSrc=ASHPX, else ignored</li> <li>C_WHASHPTYCH_xxx, etc</li> </ul> resTy choice:WHRESTY input time <ul> <li>resistance heater type, used iff wh_heatSrc=_ELRESX, else ignored</li> <li>C_WHRESTYCH_xxx, etc</li> <li>documentation only (9-2021)</li> </ul> znTi TI input time <ul> <li>[DHWHEATER][dhwheater] location zone re tank loss</li> <li>0 iff wh_tEx being used</li> <li>heat losses go to half to zone air / half radiant</li> </ul> tEx number Start of subhour <ul> <li>surrounding temperature, F for tank loss</li> <li>when wh_tEx set</li> <li>- wh_znTi ignored</li> <li>- heat loss discarded</li> </ul> ashpSrcZnTi TI input time <ul> <li>ASHP source zone</li> <li>0 iff wh_ashpTSrc being used</li> <li>input heat removed from zone air</li> </ul> ashpTSrc number Start of subhour <ul> <li>ASHP source temperature, F</li> <li>when wh_ashpTSrc set</li> <li>- wh_ashpSrcZnTi ignored</li> <li>- heat transfer ignored</li> </ul> ashpResUse FLOAT_GZ input time <ul> <li>resistance heat parameter for</li> <li>Ecotope HPWH model iff C_WHASHPTYCH_GENERIC</li> <li>default = 7.22, units / meaning unknown</li> </ul> tankTInit[index] FLOAT_GZ Array [DIM_DHWTANKTINIT] Start of run <ul> <li>initial tank layer temperatures for HPWH types, F (12 values)</li> <li>[0]=bottom layer / [11]=top layer</li> <li>HPWH tank model layer temps initialized at beginning of warmup</li> <li>(not reinitialized at beg of simulation)</li> <li>[0]=bottom layer / [11]=top layer</li> </ul> tankCount FLOAT_GZ Start of run <ul> <li># of storage tanks per [DHWHEATER][dhwheater], re built-up [whType][whtype]=Builtup (default=1)</li> <li>note does *not* reflect wh_mult (wh_mult=2, wh_tankCount=3 -&gt; 6 tanks)</li> </ul> heatingCap FLOAT_GZ Start of run <ul> <li>Nominal heating capacity, Btuh</li> <li>available only for limited HPWH types</li> </ul> vol FLOAT_GEZ Start of run <ul> <li>total storage vol, gal (actual, not rated; not per tank)</li> <li>HPWH types: sets vol (default from preset)</li> <li>other types: documentation only (default 50)</li> </ul> volRunning FLOAT_GZ input time <ul> <li>running storage volume = vol above aquastat, gal</li> <li>HPWH compressor types: determines reqd total volume based on</li> <li>aquastat position; see HPWHLINK::hw_DeriveVolFromVolRunning()</li> </ul> UA FLOAT_GEZ Start of run <ul> <li>HPWH-type total UA, Btuh/F (not per tank)</li> <li>default from HPWH preset</li> </ul> insulR FLOAT_GZ Start of run <ul> <li>HPWH-type tank insulation resistance, hr-F/Btuh</li> <li>default from preset or wh_UA and wh_vol</li> </ul> inHtSupply number input time <ul> <li>fractional tank height of supply inlet (0=bottom, 1=top)</li> <li>default 0, HPWH models only</li> </ul> inHtLoopRet number input time <ul> <li>fractional tank height of loop return inlet(s) (0=bottom, 1=top)</li> <li>default 0, HPWH models only</li> </ul> EF FLOAT_GZ input time rated energy factor LDEF FLOAT_GZ input time load-dependent energy factor UEF FLOAT_GZ input time <ul> <li>rated uniform energy factor</li> <li>re C_WHTYPECH_INSTUEF</li> </ul> ratedFlow FLOAT_GZ input time max rated flow per UEF test, gpm annualFuel FLOAT_GEZ input time annual fuel use per UEF method, therms/yr annualElec FLOAT_GEZ input time annual electricity use per UEF method, kWh/yr Name Type Variability Description/Comments cycLossFuel number Start of run derived startup fuel use (=cyclic loss) for INSTUEF, Btu/cycle cycLossElec number Start of run <ul> <li>derived startup electricity use (=cyclic loss) for INSTUEF, Btu/cycle</li> <li>unused in revised model, 5-25-2017</li> </ul> maxFlowX number Start of run derived max flow for INSTUEF, gal-F/tick maxInpX number Start of run input at max flow, Btu/tick Name Type Variability Description/Comments eff FLOAT_GZ input time efficiency (aka recovery efficiency) SBL FLOAT_GEZ input time standby loss, Btuh pilotPwr FLOAT_GEZ Start of hour <ul> <li>pilot light power, Btuh</li> <li>included in wh_inFuel</li> </ul> parElec FLOAT_GEZ Start of hour parasitic electric use, W tHWOutNoMix number End of subhour <ul> <li>most recent unmodified hot water temp, F</li> <li>HPWH-only at tick end</li> <li>does NOT include XBU</li> </ul> tHWOut number End of subhour <ul> <li>average hot water temp, F (at water heater)</li> <li>HPWH: as delivered by model (subhr average of tick calls)</li> <li>includes XBU: wh_tHWOut &gt;= [DHWSYS][dhwsys].ws_tUse</li> <li>other: [DHWSYS][dhwsys].ws_tUse</li> </ul> stbyTicks number Start of subhour <ul> <li>time since last draw, for HPWH and INSTUEF, ticks</li> <li>re startup (cyclic) loss model</li> </ul> Name Type Variability Description/Comments loadCFwdF FLOAT_GEZ input time <ul> <li>load carry-forward allowed (user input frac of capacity)</li> <li>= approx # of hours [DHWHEATER][dhwheater] is allowed to meet</li> <li>load that is unmet on 1 min basis</li> <li>default = 1; only for C_WHTYPECH_INSTUEF</li> </ul> loadCFwdMax DBL input time <ul> <li>max load carry-forward energy (from wh_loadCFwdF), Btu</li> <li>any excess load met via wh_qXBU</li> </ul> loadCFwd DBL Start of subhour <ul> <li>current load carry forward, Btu</li> <li>see wh_InstUEFDoSubhr()</li> </ul> nTickFullLoad number End of subhour INSTUEF: current subhour equiv full load ticks (fractional) nColdStarts DBL Start of subhour INSTUEF: current subhour # of cold startups Name Type Variability Description/Comments effSh FLOAT_GZ End of subhour <ul> <li>current subhour efficiency, used to support former hourly</li> <li>models within tick calcs</li> <li>unset (= 0) for full tick models (HPWH and INSTUEF)</li> </ul> Name Type Variability Description/Comments operElec number Start of run <ul> <li>electrical power during operation at rating conditions, Btuh</li> <li>never input, derived for INSTUEF</li> </ul> stbyElec FLOAT_GEZ Start of run <ul> <li>electrical power during standby, W</li> <li>default=4, used for INSTUEF</li> </ul> Name Type Variability Description/Comments resHtPwr FLOAT_GEZ input time <ul> <li>upper element resistance heating power, W</li> <li>used for some models only</li> <li>default = 4500</li> </ul> resHtPwr2 FLOAT_GEZ input time <ul> <li>lower element resistance heating power, W</li> <li>default = wh_resHtPwr</li> </ul> Name Type Variability Description/Comments HPWH <ul> <li>interface to Ecotope HPWH detailed heat pump model</li> <li>also used for resistance electric heaters</li> </ul> HPWHLINK Name Type Variability Description/Comments HPWH.HSCount number End of subhour # of HPWH heatsources in use for current config HPWH.tEx number End of subhour tank surround temp, F HPWH.tASHPSrc number End of subhour temp of heat pump air source, F Name Type Variability Description/Comments HPWH.nQTXNodes number End of subhour <ul> <li># of tank 1/12s used in hw_qTX extra tank heat</li> <li>corresponds to nodes for HPWH default 12 node setup</li> </ul> Name Type Variability Description/Comments HPWH.fMixUse number End of subhour <ul> <li>factor for draw adjustment re HPWH setpoint &gt; [DHWSYS][dhwsys]::ws_tUse</li> <li>Some HPWHs (e.g. SANCO2) have fixed (high) setpoints</li> <li>draws are reduced to balance load at ws_tUse.</li> </ul> HPWH.fMixRL number End of subhour <ul> <li>factor for loop return flow adjustment re HPWH setpoint &gt; [DHWSYS][dhwsys]::ws_tUse</li> <li>Some HPWHs (e.g. SANCO2) have fixed (high) setpoints</li> <li>Loop return flow is reduced to balance load at ws_tUse.</li> </ul> Name Type Variability Description/Comments HPWH.inElec[index] DBL Array [2] End of subhour <ul> <li>current subhr HPWH electricity use, kWh</li> <li>[0]=primary(=compressor or non-HP resistance) + misc</li> <li>[1]=resistance backup (iff HP) (not including hw_HPWHxBU)</li> </ul> HPWH.heatAdded[index] DBL Array [2] End of subhour <ul> <li>current subhr HPWH heat added to water, kWh</li> <li>[0]=primary(=compressor or non-HP resistance)</li> <li>[1]=resistance backup (iff HP) (not including hw_HPWHxBU)</li> </ul> HPWH.tOut DBL End of subhour <ul> <li>last tick HPWH outlet temp, C</li> <li>0 if no draw</li> </ul> HPWH.tOutCHDHW DBL End of subhour <ul> <li>last tick output temp available to CHDHW, F</li> <li>0 if no draw</li> </ul> HPWH.HPWHxBU number End of subhour <ul> <li>current subhr HPWH add'l backup resistance heat, Btu</li> <li>output water heated to ws_tUse iff HPWH output temp &lt; ws_tUse</li> </ul> HPWH.qEnv DBL End of subhour <ul> <li>current subhr heat removed by HPWH from environment, kWh</li> <li>+ = to water heater; for 1 [DHWHEATER][dhwheater] (no wh_mult)</li> </ul> HPWH.qLoss DBL End of subhour <ul> <li>current subhr HPWH standby losses, kWh.  + = to surround</li> <li>for 1 [DHWHEATER][dhwheater] (no wh_mult)</li> </ul> HPWH.qHW DBL End of subhour <ul> <li>current subhr HPWH total delivered hot water heating, kWh.  always &gt;= 0</li> <li>for 1 [DHWHEATER][dhwheater] (no wh_mult)</li> <li>calc'd from flows and temp diffs (unlike hw_heatAdded)</li> <li>includes heat to [DHWLOOP][dhwloop] and CHDHW, does not include hw_HPWHxBU</li> </ul> HPWH.qTX DBL End of subhour current subhr extra heat tank heat added, kWh (not Btu) Name Type Variability Description/Comments HPWH.tankHCNominal number End of subhour <ul> <li>nominal HPWH tank heat content, kWh (at 40 C)</li> <li>used as normalizing factor for energy balance checks</li> </ul> HPWH.tankHCBeg DBL End of subhour current step beginning tank heat content, kWh HPWH.tankHCEnd DBL End of subhour current step end tank heat content, kWh Name Type Variability Description/Comments HPWH.tHWOutF DBL End of subhour current substep working total re calc of hw_tHWOut HPWH.nzDrawCount number End of subhour current substep # of draws &gt; 0 HPWH.tHWOut number End of subhour <ul> <li>average hot water temp, F (at water heater)</li> <li>includes XBU: hw_tHWOut &gt;= ws_tUse</li> <li>calc'd at substep end only</li> </ul> Name Type Variability Description/Comments HPWH.bWriteCSV number End of subhour write HPWH debugging CSV iff nz Name Type Variability Description/Comments HPWH.qBal DBL End of subhour current step HPWH heat balance, kWh (s/b 0) HPWH.balErrCount number End of subhour annual count of energy balance errors HPWH.balErrMax DBL End of subhour maximum substep energy balance error for run, kWh Name Type Variability Description/Comments qXBU number End of subhour <ul> <li>current step HPWH add'l backup resistance heat, Btu</li> <li>output water heated to ws_tUse iff HPWH output temp &lt; ws_tUse</li> </ul> qEnv DBL End of subhour <ul> <li>current step heat removed by HPWH from environment, Btu</li> <li>+ = to water heater; for 1 [DHWHEATER][dhwheater] (no wh_mult)</li> </ul> qLoss DBL End of subhour <ul> <li>current step HPWH standby losses, Btu.  + = to surround</li> <li>for 1 [DHWHEATER][dhwheater] (no wh_mult)</li> </ul> qHW number End of subhour <ul> <li>current step hot water heating, Btu.  always &gt;= 0</li> <li>for 1 [DHWHEATER][dhwheater] (no wh_mult)</li> <li>DHW+[DHWLOOP][dhwloop]+CHDHW; does not include wh_qXBU</li> </ul> nzDrawCount number End of subhour current substep # of draws &gt; 0 Name Type Variability Description/Comments totHARL DBL End of hour <ul> <li>cumulative (year to date) recovery load at heater, Btu</li> <li>= SUM( HARL) (includes losses, solar etc)</li> <li>for single heater (wh_mult not applied)</li> </ul> hrCount number End of hour <ul> <li># of hourly values included in wh_totHARL</li> <li>re calc of avg</li> </ul> totOut DBL End of hour <ul> <li>cumulative (year to date) total heat delivered to hot water, Btu</li> <li>includes wh_qXBU</li> </ul> Name Type Variability Description/Comments fAdjElec FLOAT_GEZ Start of subhour <ul> <li>electricity use adjustment factor</li> <li>applied to all electricity use (primary, BU, XBU)</li> <li>default 1</li> </ul> fAdjFuel FLOAT_GEZ Start of subhour <ul> <li>fuel use adjment factor</li> <li>applied to fuel use</li> <li>default 1</li> </ul> <ul> <li>energy inputs for current subhour, Btu</li> <li>subhour results accumulated here</li> <li>for single WH (wh_mult / ws_mult not applied)</li> </ul> Name Type Variability Description/Comments inElecSh number End of subhour <ul> <li>primary electricity (including wh_parElec) (note not kWh)</li> <li>for HPWH, includes compressor + misc (not resistance)</li> </ul> inElecBUSh number End of subhour <ul> <li>backup electricity (&gt;0 only for HPWH resistance heat)</li> <li>(does not include wh_inElecXBUSh)</li> </ul> inElecXBUSh number End of subhour XBU \"extra\" backup (reheating to maintain ws_tUse) inFuelSh number End of subhour fuel (including wh_pilotPwr) <ul> <li>energy inputs for current hour, Btu</li> <li>set from analogous subhour values</li> <li>for single WH (wh_mult / ws_mult not applied)</li> </ul> Name Type Variability Description/Comments inElec number End of hour <ul> <li>primary electricity (including wh_parElec) (note not kWh)</li> <li>for HPWH, includes compressor + misc (not resistance)</li> </ul> inElecBU number End of hour <ul> <li>backup electricity (&gt;0 only for HPWH resistance heat)</li> <li>(does not include wh_inElecXBU)</li> </ul> inElecXBU number End of hour XBU \"extra\" backup (reheating to maintain ws_tUse) inFuel number End of hour fuel (including wh_pilotPwr) <p>annual total energy inputs, Btu (check figures)</p> Name Type Variability Description/Comments inElecTot DBL End of run annual total electricity, Btu inFuelTot DBL End of run annual total fuel, Btu Name Type Variability Description/Comments elecMtri TI input time meter for system electricity use (default = parent ws_elecMtri) fuelMtri TI input time meter for system fuel use (default = parent ws_fuelMtri) xBUEndUse choice:ENDUSE input time <ul> <li>wh_elecMtri end use for separate accounting of wh_HPWHxBU</li> <li>default = none (include wh_HPWHxBU in end use dhwBU)</li> </ul> Name Type Variability Description/Comments unMetSh number End of hour <ul> <li>count of subhrs in this hour</li> <li>when wh_tHWOut &lt; wh_tUse</li> <li>HPWH only?</li> </ul> unMetHrs number End of run <ul> <li>annual count of hrs having any wh_unMetSh</li> <li>HPWH only?</li> </ul> balErrCount number End of subhour <ul> <li>annual count of energy balance errors</li> <li>HPWH only?</li> </ul> Name Type Variability Description/Comments tInlet number End of hour <ul> <li>hour avg inlet temp, F</li> <li>reflects solar, DWHR, mixdown, ...</li> </ul> draw number End of hour <ul> <li>hour total draw seen by this [DHWHEATER][dhwheater], gal</li> <li>check figure</li> </ul>"},{"location":"probe-definitions/DHWLoop/","title":"DHWLoop","text":"<p>title: DHWLoop ---</p> Name Type Variability Description/Comments mult number input time multiplier: number of identical loops wlpCount number Start of run total # of child DHWLOOPPUMPs flow FLOAT_GEZ Start of hour current loop recirculation max flow, gpm runF FLOAT_GEZ Start of hour current hour recirculation operation fraction tIn1 FLOAT_GZ Start of hour entering temperature at 1st DHWLOOPSEG fUA FLOAT_GZ input time <ul> <li>UA adjustment factor for child [DHWLOOPSEGs][dhwloopseg]</li> <li>fudge factor re imperfect insulation</li> </ul> lossMakeupPwr FLOAT_GEZ Start of hour <ul> <li>loss makeup heating (electrical) power, W</li> <li>represents heater that makes up for HRLL losses</li> <li>re central HPWH systems</li> </ul> lossMakeupEff FLOAT_GZ Start of hour loss makeup heating efficiency elecMtri TI input time <ul> <li>meter for loop electricity use (default = parent ws_elecMtri)</li> <li>loss makeup [DHWLOOPPUMP][dhwlooppump] electricity accumulated to end use dhwMFL</li> </ul> segTotals <ul> <li>Aggregated totals for all child [DHWLOOPSEGs][dhwloopseg]</li> <li>count, len, vol, exArea, UA</li> <li>values DO NOT reflect wl_mult</li> </ul> SEGTOTS Name Type Variability Description/Comments segTotals.count DBL Start of run # of segments included in totals segTotals.len DBL Start of run length, ft segTotals.vol DBL Start of run volume, gal segTotals.exArea DBL Start of run outside surface area (at insulation surface), ft2 segTotals.UA DBL Start of run fluid-to-surround loss, Btuh/F-hr branchTotals <ul> <li>Aggregated totals for all child [DHWLOOPBRANCHs][dhwloopbranch]</li> <li>count, len, vol, exArea, UA</li> <li>values DO NOT reflect wl_mult</li> </ul> SEGTOTS Name Type Variability Description/Comments branchTotals.count DBL Start of run # of segments included in totals branchTotals.len DBL Start of run length, ft branchTotals.vol DBL Start of run volume, gal branchTotals.exArea DBL Start of run outside surface area (at insulation surface), ft2 branchTotals.UA DBL Start of run fluid-to-surround loss, Btuh/F-hr volRL number End of hour <ul> <li>current hour volume returned to water heater, gal</li> <li>(reflects wl_mult)</li> <li>reduced by loss makeup</li> </ul> qLiqLP number End of hour heat added to liquid by DHWLOOPPUMP(s), Btu HRLL number End of hour <ul> <li>current hour loop seg pipe losses, Btu</li> <li>(reflects wl_mult and reduction by wl_lossMakeupPwr)</li> </ul> HRLLnet number End of hour <ul> <li>wl_HRLL adjusted for pump by pump heat and</li> <li>wl_lossMakeUp, Btu (reflects wl_mult)</li> </ul> HRBL number End of hour <ul> <li>current hour branch pipe loss, Btu</li> <li>(reflects wl_mult)</li> </ul> t24WL number End of hour <ul> <li>current hour branch waste loss volume, gal</li> <li>per T24DHW model; reflects wl_mult</li> <li>info only: associated energy is included in wl_HRBL</li> </ul> tRL number End of hour <ul> <li>current hour average return temp, F</li> <li>derived from flow, loss, and wl_qLiqLP</li> <li>can be &gt; wl_tIn1</li> <li>may not be same as ps_tOut of last segment</li> </ul>"},{"location":"probe-definitions/DHWLoopBranch/","title":"DHWLoopBranch","text":"<p>title: DHWLoopBranch ---</p> Name Type Variability Description/Comments len FLOAT_GEZ input time segment length, ft size FLOAT_GZ input time <ul> <li>nominal pipe size (diameter), in</li> <li>pipe actual OD = ps_size + 0.125</li> </ul> insulK FLOAT_GZ input time insulation conductivity, Btuh-ft/ft2-F insulThk FLOAT_GEZ input time insulation thickness, in exH FLOAT_GZ input time combined exterior surface coefficient, Btuh/ft2-F Name Type Variability Description/Comments absSlr number Start of subhour solar (SW) absorptance, dimless awAbsSlr DBL Start of subhour <ul> <li>area-weighted solar absorptance</li> <li>= sb_absSlr * area / zn_surfASlr</li> <li>exterior surf outside: always 0</li> <li>windows inside: TBD 12-8-10</li> <li>ducts: always 0</li> </ul> epsLW number Start of subhour thermal (LW) emittance zi TI Start of subhour adjacent zone idx, 0 if exposed to ambient F DBL Start of subhour solar (short wave) fraction ?  TODO: NOT USED? as of 4-2012 Fp DBL Start of subhour <ul> <li>\"view factor\" to zone radiant temp, dimless.  Includes Oppenheim surface conductance.</li> <li>aka \"F-prime\" in CZM documentation.</li> </ul> Name Type Variability Description/Comments frRad DBL Start of subhour re radiant to radiant temp (room radiant node or sky) fSky DBL Start of subhour \"view factor\" to radiant surround at sky temp fAir DBL Start of subhour \"view factor\" to radiant surround at air temp (ground, horizon) Name Type Variability Description/Comments hcNat FLOAT_GEZ End of subhour surface natural convection coefficient, Btuh/ft2-F hcFrc FLOAT_GEZ End of subhour surface forced (wind) convection coefficient, Btuh/ft2-F hcMult FLOAT_GEZ End of subhour surface convection coefficient multiplier, dimless hxa FLOAT_GEZ End of subhour overall coeff to sb_txa = sb_hcMult*(sb_hcNat + sb_hcFrc), Btuh/ft2-F hxr FLOAT_GEZ End of subhour <ul> <li>surface (linearized) radiative coefficient, Btuh/ft2-F</li> <li>= coupling to sb_txr</li> </ul> hxtot number End of subhour sb_hxa + sb_hxr uRat DBL End of subhour <ul> <li>ratio uC/(sb_hxa + sb_hxr + uC)</li> <li>= 1/(1 + rC*(sb_hxa + sb_hxr))</li> <li>where uC = surface-to-surface conductance</li> <li>rC = 1/uC</li> <li>but: duct model outside surf to duct air</li> </ul> Name Type Variability Description/Comments fRat DBL End of subhour <ul> <li>sb_hxtot * sb_uRat, Btuh/ft2-F</li> <li>= overall conductance not including other side</li> <li>surface resistances</li> <li>(ducts: overall conductance from duct air to sb_txe)</li> </ul> cx DBL End of subhour air/radiant coupling due to this surface, Btuh/ft2-F Name Type Variability Description/Comments sgTarg solar gain target: bm, df gain from insolation SGTARG Name Type Variability Description/Comments sgTarg.bm DBL End of subhour beam sgTarg.df DBL End of subhour diffuse sgTarg.tot DBL End of subhour total sg DBL End of subhour absorbed solar total, Btuh (NOT Btuh/ft2), summed from sb_sgTarg Name Type Variability Description/Comments tSrf number End of subhour most recently calculated surface temp, F tSrfls number Start of subhour <ul> <li>last step surface temp, F</li> <li>copied from sb_tSrf at step end</li> <li>not *e (available for probing)</li> </ul> qrAbs DBL End of subhour <ul> <li>total absorbed radiant heat gain at surface, Btuh/ft2 (+ = into surface)</li> <li>= (sb_sg + sb_rIg)/area</li> </ul> txa number End of subhour <ul> <li>adjacent air temp, F (from prior step)</li> <li>inside: prior step zone tz</li> <li>outside: current step ambient dry bulb temp</li> </ul> txr number End of subhour <ul> <li>adjacent radiant temp, F</li> <li>inside: prior step zone tr</li> <li>outside: current step sky temp</li> </ul> txe number End of subhour <ul> <li>adjacent environmental temp, F</li> <li>combined sb_txa and sb_txr; simplifies calcs in some cases</li> <li>set but unused? for inside</li> <li>set/used for ASHWAT outside</li> </ul> w DBL End of subhour <ul> <li>adjacent air humidity ratio if known (else 0)</li> <li>used re duct leakage</li> </ul> qSrf DBL End of subhour <ul> <li>conduction into surface, Btuh/ft2</li> <li>updated at end of timestep</li> </ul> Name Type Variability Description/Comments pPS PIPESEGP Start of subhour pointer to parent PIPESEG Name Type Variability Description/Comments exCnd choice:EXCND input time adjacent cond: adiabatic/ambient/specT/adjZn. exT number Start of hour surround temperature, F Name Type Variability Description/Comments totals <ul> <li>segment totals (re st_Accum() to parents)</li> <li>also retains vol, UA, exArea used in calcs</li> </ul> SEGTOTS Name Type Variability Description/Comments totals.count DBL Start of run # of segments included in totals totals.len DBL Start of run length, ft totals.vol DBL Start of run volume, gal totals.exArea DBL Start of run outside surface area (at insulation surface), ft2 totals.UA DBL Start of run fluid-to-surround loss, Btuh/F-hr fRhoCpX FLOAT_GZ Start of run <ul> <li>fluid volumetric heat flow factor, Btuh/gpm-F</li> <li>initialized for water, code otherwise general</li> </ul> fvf number End of hour fluid volumetric flow rate, gpm (note: not ft3/hr) tIn number End of hour current hour inlet fluid temp, F tOut number End of hour current hour outlet fluid temp, F PLWF number End of hour current hour heat loss when flowing, Btu PLCD number End of hour current hour standing (noflow) heat loss, Btu PL number End of hour ps_PLWF + ps_PLCD Name Type Variability Description/Comments mult number input time <ul> <li># of identical branches</li> <li>(note non-integral values allowed)</li> </ul> fUA FLOAT_GEZ input time <ul> <li>UA adjustment factor for this branch</li> <li>fudge factor re imperfect insulation</li> </ul> fWaste FLOAT_GEZ Start of hour waste fraction flow FLOAT_GEZ Start of hour <ul> <li>assumed flow during use, gpm</li> <li>current hour losses, Btu for one branch (no wb_mult)</li> </ul> HBUL number End of hour ... when water in use HBWL number End of hour ... waste loss t24WL number End of hour ... waste loss volume, gal"},{"location":"probe-definitions/DHWLoopHeater/","title":"DHWLoopHeater","text":"<p>title: DHWLoopHeater ---</p> Name Type Variability Description/Comments mult FLOAT_GEZ Start of run <ul> <li>count of identical water heaters (default 1)</li> <li>models as if repeated identical input</li> <li>non-integral values allowed re sizing methods</li> </ul> heatSrc choice:WHHEATSRC input time <ul> <li>heat source</li> <li>C_WHHEATSRCCH_ELRES: electric resistance</li> <li>_FUEL: fuel-fired burner</li> <li>_ASHP: air source heat pump (T24DHW.DLL model)</li> <li>_ASHPX: air source heat pump (Ecotope HPWH)</li> <li>_ELRESX: electric resistance (Ecotope HPWH)</li> </ul> type choice:WHTYPE input time <ul> <li>heater type</li> <li>C_WHTYPECH_STRGSML, _STRGLRG, _INSTSML, _INSTLRG,</li> <li>_INSTUEF, _BUILTUP</li> </ul> desc ANAME input time probe-able description text fcn number Start of run function of this DHWHEATER per whfcnXXX enum Name Type Variability Description/Comments ashpTy choice:WHASHPTY input time <ul> <li>air source heat pump (HPWH) type, required iff wh_heatSrc=ASHPX, else ignored</li> <li>C_WHASHPTYCH_xxx, etc</li> </ul> resTy choice:WHRESTY input time <ul> <li>resistance heater type, used iff wh_heatSrc=_ELRESX, else ignored</li> <li>C_WHRESTYCH_xxx, etc</li> <li>documentation only (9-2021)</li> </ul> znTi TI input time <ul> <li>[DHWHEATER][dhwheater] location zone re tank loss</li> <li>0 iff wh_tEx being used</li> <li>heat losses go to half to zone air / half radiant</li> </ul> tEx number Start of subhour <ul> <li>surrounding temperature, F for tank loss</li> <li>when wh_tEx set</li> <li>- wh_znTi ignored</li> <li>- heat loss discarded</li> </ul> ashpSrcZnTi TI input time <ul> <li>ASHP source zone</li> <li>0 iff wh_ashpTSrc being used</li> <li>input heat removed from zone air</li> </ul> ashpTSrc number Start of subhour <ul> <li>ASHP source temperature, F</li> <li>when wh_ashpTSrc set</li> <li>- wh_ashpSrcZnTi ignored</li> <li>- heat transfer ignored</li> </ul> ashpResUse FLOAT_GZ input time <ul> <li>resistance heat parameter for</li> <li>Ecotope HPWH model iff C_WHASHPTYCH_GENERIC</li> <li>default = 7.22, units / meaning unknown</li> </ul> tankTInit[index] FLOAT_GZ Array [DIM_DHWTANKTINIT] Start of run <ul> <li>initial tank layer temperatures for HPWH types, F (12 values)</li> <li>[0]=bottom layer / [11]=top layer</li> <li>HPWH tank model layer temps initialized at beginning of warmup</li> <li>(not reinitialized at beg of simulation)</li> <li>[0]=bottom layer / [11]=top layer</li> </ul> tankCount FLOAT_GZ Start of run <ul> <li># of storage tanks per [DHWHEATER][dhwheater], re built-up [whType][whtype]=Builtup (default=1)</li> <li>note does *not* reflect wh_mult (wh_mult=2, wh_tankCount=3 -&gt; 6 tanks)</li> </ul> heatingCap FLOAT_GZ Start of run <ul> <li>Nominal heating capacity, Btuh</li> <li>available only for limited HPWH types</li> </ul> vol FLOAT_GEZ Start of run <ul> <li>total storage vol, gal (actual, not rated; not per tank)</li> <li>HPWH types: sets vol (default from preset)</li> <li>other types: documentation only (default 50)</li> </ul> volRunning FLOAT_GZ input time <ul> <li>running storage volume = vol above aquastat, gal</li> <li>HPWH compressor types: determines reqd total volume based on</li> <li>aquastat position; see HPWHLINK::hw_DeriveVolFromVolRunning()</li> </ul> UA FLOAT_GEZ Start of run <ul> <li>HPWH-type total UA, Btuh/F (not per tank)</li> <li>default from HPWH preset</li> </ul> insulR FLOAT_GZ Start of run <ul> <li>HPWH-type tank insulation resistance, hr-F/Btuh</li> <li>default from preset or wh_UA and wh_vol</li> </ul> inHtSupply number input time <ul> <li>fractional tank height of supply inlet (0=bottom, 1=top)</li> <li>default 0, HPWH models only</li> </ul> inHtLoopRet number input time <ul> <li>fractional tank height of loop return inlet(s) (0=bottom, 1=top)</li> <li>default 0, HPWH models only</li> </ul> EF FLOAT_GZ input time rated energy factor LDEF FLOAT_GZ input time load-dependent energy factor UEF FLOAT_GZ input time <ul> <li>rated uniform energy factor</li> <li>re C_WHTYPECH_INSTUEF</li> </ul> ratedFlow FLOAT_GZ input time max rated flow per UEF test, gpm annualFuel FLOAT_GEZ input time annual fuel use per UEF method, therms/yr annualElec FLOAT_GEZ input time annual electricity use per UEF method, kWh/yr Name Type Variability Description/Comments cycLossFuel number Start of run derived startup fuel use (=cyclic loss) for INSTUEF, Btu/cycle cycLossElec number Start of run <ul> <li>derived startup electricity use (=cyclic loss) for INSTUEF, Btu/cycle</li> <li>unused in revised model, 5-25-2017</li> </ul> maxFlowX number Start of run derived max flow for INSTUEF, gal-F/tick maxInpX number Start of run input at max flow, Btu/tick Name Type Variability Description/Comments eff FLOAT_GZ input time efficiency (aka recovery efficiency) SBL FLOAT_GEZ input time standby loss, Btuh pilotPwr FLOAT_GEZ Start of hour <ul> <li>pilot light power, Btuh</li> <li>included in wh_inFuel</li> </ul> parElec FLOAT_GEZ Start of hour parasitic electric use, W tHWOutNoMix number End of subhour <ul> <li>most recent unmodified hot water temp, F</li> <li>HPWH-only at tick end</li> <li>does NOT include XBU</li> </ul> tHWOut number End of subhour <ul> <li>average hot water temp, F (at water heater)</li> <li>HPWH: as delivered by model (subhr average of tick calls)</li> <li>includes XBU: wh_tHWOut &gt;= [DHWSYS][dhwsys].ws_tUse</li> <li>other: [DHWSYS][dhwsys].ws_tUse</li> </ul> stbyTicks number Start of subhour <ul> <li>time since last draw, for HPWH and INSTUEF, ticks</li> <li>re startup (cyclic) loss model</li> </ul> Name Type Variability Description/Comments loadCFwdF FLOAT_GEZ input time <ul> <li>load carry-forward allowed (user input frac of capacity)</li> <li>= approx # of hours [DHWHEATER][dhwheater] is allowed to meet</li> <li>load that is unmet on 1 min basis</li> <li>default = 1; only for C_WHTYPECH_INSTUEF</li> </ul> loadCFwdMax DBL input time <ul> <li>max load carry-forward energy (from wh_loadCFwdF), Btu</li> <li>any excess load met via wh_qXBU</li> </ul> loadCFwd DBL Start of subhour <ul> <li>current load carry forward, Btu</li> <li>see wh_InstUEFDoSubhr()</li> </ul> nTickFullLoad number End of subhour INSTUEF: current subhour equiv full load ticks (fractional) nColdStarts DBL Start of subhour INSTUEF: current subhour # of cold startups Name Type Variability Description/Comments effSh FLOAT_GZ End of subhour <ul> <li>current subhour efficiency, used to support former hourly</li> <li>models within tick calcs</li> <li>unset (= 0) for full tick models (HPWH and INSTUEF)</li> </ul> Name Type Variability Description/Comments operElec number Start of run <ul> <li>electrical power during operation at rating conditions, Btuh</li> <li>never input, derived for INSTUEF</li> </ul> stbyElec FLOAT_GEZ Start of run <ul> <li>electrical power during standby, W</li> <li>default=4, used for INSTUEF</li> </ul> Name Type Variability Description/Comments resHtPwr FLOAT_GEZ input time <ul> <li>upper element resistance heating power, W</li> <li>used for some models only</li> <li>default = 4500</li> </ul> resHtPwr2 FLOAT_GEZ input time <ul> <li>lower element resistance heating power, W</li> <li>default = wh_resHtPwr</li> </ul> Name Type Variability Description/Comments HPWH <ul> <li>interface to Ecotope HPWH detailed heat pump model</li> <li>also used for resistance electric heaters</li> </ul> HPWHLINK Name Type Variability Description/Comments HPWH.HSCount number End of subhour # of HPWH heatsources in use for current config HPWH.tEx number End of subhour tank surround temp, F HPWH.tASHPSrc number End of subhour temp of heat pump air source, F Name Type Variability Description/Comments HPWH.nQTXNodes number End of subhour <ul> <li># of tank 1/12s used in hw_qTX extra tank heat</li> <li>corresponds to nodes for HPWH default 12 node setup</li> </ul> Name Type Variability Description/Comments HPWH.fMixUse number End of subhour <ul> <li>factor for draw adjustment re HPWH setpoint &gt; [DHWSYS][dhwsys]::ws_tUse</li> <li>Some HPWHs (e.g. SANCO2) have fixed (high) setpoints</li> <li>draws are reduced to balance load at ws_tUse.</li> </ul> HPWH.fMixRL number End of subhour <ul> <li>factor for loop return flow adjustment re HPWH setpoint &gt; [DHWSYS][dhwsys]::ws_tUse</li> <li>Some HPWHs (e.g. SANCO2) have fixed (high) setpoints</li> <li>Loop return flow is reduced to balance load at ws_tUse.</li> </ul> Name Type Variability Description/Comments HPWH.inElec[index] DBL Array [2] End of subhour <ul> <li>current subhr HPWH electricity use, kWh</li> <li>[0]=primary(=compressor or non-HP resistance) + misc</li> <li>[1]=resistance backup (iff HP) (not including hw_HPWHxBU)</li> </ul> HPWH.heatAdded[index] DBL Array [2] End of subhour <ul> <li>current subhr HPWH heat added to water, kWh</li> <li>[0]=primary(=compressor or non-HP resistance)</li> <li>[1]=resistance backup (iff HP) (not including hw_HPWHxBU)</li> </ul> HPWH.tOut DBL End of subhour <ul> <li>last tick HPWH outlet temp, C</li> <li>0 if no draw</li> </ul> HPWH.tOutCHDHW DBL End of subhour <ul> <li>last tick output temp available to CHDHW, F</li> <li>0 if no draw</li> </ul> HPWH.HPWHxBU number End of subhour <ul> <li>current subhr HPWH add'l backup resistance heat, Btu</li> <li>output water heated to ws_tUse iff HPWH output temp &lt; ws_tUse</li> </ul> HPWH.qEnv DBL End of subhour <ul> <li>current subhr heat removed by HPWH from environment, kWh</li> <li>+ = to water heater; for 1 [DHWHEATER][dhwheater] (no wh_mult)</li> </ul> HPWH.qLoss DBL End of subhour <ul> <li>current subhr HPWH standby losses, kWh.  + = to surround</li> <li>for 1 [DHWHEATER][dhwheater] (no wh_mult)</li> </ul> HPWH.qHW DBL End of subhour <ul> <li>current subhr HPWH total delivered hot water heating, kWh.  always &gt;= 0</li> <li>for 1 [DHWHEATER][dhwheater] (no wh_mult)</li> <li>calc'd from flows and temp diffs (unlike hw_heatAdded)</li> <li>includes heat to [DHWLOOP][dhwloop] and CHDHW, does not include hw_HPWHxBU</li> </ul> HPWH.qTX DBL End of subhour current subhr extra heat tank heat added, kWh (not Btu) Name Type Variability Description/Comments HPWH.tankHCNominal number End of subhour <ul> <li>nominal HPWH tank heat content, kWh (at 40 C)</li> <li>used as normalizing factor for energy balance checks</li> </ul> HPWH.tankHCBeg DBL End of subhour current step beginning tank heat content, kWh HPWH.tankHCEnd DBL End of subhour current step end tank heat content, kWh Name Type Variability Description/Comments HPWH.tHWOutF DBL End of subhour current substep working total re calc of hw_tHWOut HPWH.nzDrawCount number End of subhour current substep # of draws &gt; 0 HPWH.tHWOut number End of subhour <ul> <li>average hot water temp, F (at water heater)</li> <li>includes XBU: hw_tHWOut &gt;= ws_tUse</li> <li>calc'd at substep end only</li> </ul> Name Type Variability Description/Comments HPWH.bWriteCSV number End of subhour write HPWH debugging CSV iff nz Name Type Variability Description/Comments HPWH.qBal DBL End of subhour current step HPWH heat balance, kWh (s/b 0) HPWH.balErrCount number End of subhour annual count of energy balance errors HPWH.balErrMax DBL End of subhour maximum substep energy balance error for run, kWh Name Type Variability Description/Comments qXBU number End of subhour <ul> <li>current step HPWH add'l backup resistance heat, Btu</li> <li>output water heated to ws_tUse iff HPWH output temp &lt; ws_tUse</li> </ul> qEnv DBL End of subhour <ul> <li>current step heat removed by HPWH from environment, Btu</li> <li>+ = to water heater; for 1 [DHWHEATER][dhwheater] (no wh_mult)</li> </ul> qLoss DBL End of subhour <ul> <li>current step HPWH standby losses, Btu.  + = to surround</li> <li>for 1 [DHWHEATER][dhwheater] (no wh_mult)</li> </ul> qHW number End of subhour <ul> <li>current step hot water heating, Btu.  always &gt;= 0</li> <li>for 1 [DHWHEATER][dhwheater] (no wh_mult)</li> <li>DHW+[DHWLOOP][dhwloop]+CHDHW; does not include wh_qXBU</li> </ul> nzDrawCount number End of subhour current substep # of draws &gt; 0 Name Type Variability Description/Comments totHARL DBL End of hour <ul> <li>cumulative (year to date) recovery load at heater, Btu</li> <li>= SUM( HARL) (includes losses, solar etc)</li> <li>for single heater (wh_mult not applied)</li> </ul> hrCount number End of hour <ul> <li># of hourly values included in wh_totHARL</li> <li>re calc of avg</li> </ul> totOut DBL End of hour <ul> <li>cumulative (year to date) total heat delivered to hot water, Btu</li> <li>includes wh_qXBU</li> </ul> Name Type Variability Description/Comments fAdjElec FLOAT_GEZ Start of subhour <ul> <li>electricity use adjustment factor</li> <li>applied to all electricity use (primary, BU, XBU)</li> <li>default 1</li> </ul> fAdjFuel FLOAT_GEZ Start of subhour <ul> <li>fuel use adjment factor</li> <li>applied to fuel use</li> <li>default 1</li> </ul> <ul> <li>energy inputs for current subhour, Btu</li> <li>subhour results accumulated here</li> <li>for single WH (wh_mult / ws_mult not applied)</li> </ul> Name Type Variability Description/Comments inElecSh number End of subhour <ul> <li>primary electricity (including wh_parElec) (note not kWh)</li> <li>for HPWH, includes compressor + misc (not resistance)</li> </ul> inElecBUSh number End of subhour <ul> <li>backup electricity (&gt;0 only for HPWH resistance heat)</li> <li>(does not include wh_inElecXBUSh)</li> </ul> inElecXBUSh number End of subhour XBU \"extra\" backup (reheating to maintain ws_tUse) inFuelSh number End of subhour fuel (including wh_pilotPwr) <ul> <li>energy inputs for current hour, Btu</li> <li>set from analogous subhour values</li> <li>for single WH (wh_mult / ws_mult not applied)</li> </ul> Name Type Variability Description/Comments inElec number End of hour <ul> <li>primary electricity (including wh_parElec) (note not kWh)</li> <li>for HPWH, includes compressor + misc (not resistance)</li> </ul> inElecBU number End of hour <ul> <li>backup electricity (&gt;0 only for HPWH resistance heat)</li> <li>(does not include wh_inElecXBU)</li> </ul> inElecXBU number End of hour XBU \"extra\" backup (reheating to maintain ws_tUse) inFuel number End of hour fuel (including wh_pilotPwr) <p>annual total energy inputs, Btu (check figures)</p> Name Type Variability Description/Comments inElecTot DBL End of run annual total electricity, Btu inFuelTot DBL End of run annual total fuel, Btu Name Type Variability Description/Comments elecMtri TI input time meter for system electricity use (default = parent ws_elecMtri) fuelMtri TI input time meter for system fuel use (default = parent ws_fuelMtri) xBUEndUse choice:ENDUSE input time <ul> <li>wh_elecMtri end use for separate accounting of wh_HPWHxBU</li> <li>default = none (include wh_HPWHxBU in end use dhwBU)</li> </ul> Name Type Variability Description/Comments unMetSh number End of hour <ul> <li>count of subhrs in this hour</li> <li>when wh_tHWOut &lt; wh_tUse</li> <li>HPWH only?</li> </ul> unMetHrs number End of run <ul> <li>annual count of hrs having any wh_unMetSh</li> <li>HPWH only?</li> </ul> balErrCount number End of subhour <ul> <li>annual count of energy balance errors</li> <li>HPWH only?</li> </ul> Name Type Variability Description/Comments tInlet number End of hour <ul> <li>hour avg inlet temp, F</li> <li>reflects solar, DWHR, mixdown, ...</li> </ul> draw number End of hour <ul> <li>hour total draw seen by this [DHWHEATER][dhwheater], gal</li> <li>check figure</li> </ul>"},{"location":"probe-definitions/DHWLoopPump/","title":"DHWLoopPump","text":"<p>title: DHWLoopPump ---</p> Name Type Variability Description/Comments mult number input time <ul> <li>count of identical DHW pumps (default 1)</li> <li>models as if repeated identical input</li> </ul> Name Type Variability Description/Comments elecMtri TI input time meter for pump electricity use (default = parent ws_elecMtri) Name Type Variability Description/Comments pwr FLOAT_GEZ Start of hour pump power, W liqHeatF number Start of hour <ul> <li>fraction of wp_pwr added to liquid stream</li> <li>remainder is discarded</li> <li>used only for [DHWLOOPPUMP][dhwlooppump]</li> </ul> <p>energy inputs for current hour, Btu</p> Name Type Variability Description/Comments inElec number End of hour <ul> <li>electricity (note not kWh)</li> <li>for 1 pump (no wp_mult)</li> </ul>"},{"location":"probe-definitions/DHWLoopSeg/","title":"DHWLoopSeg","text":"<p>title: DHWLoopSeg ---</p> Name Type Variability Description/Comments len FLOAT_GEZ input time segment length, ft size FLOAT_GZ input time <ul> <li>nominal pipe size (diameter), in</li> <li>pipe actual OD = ps_size + 0.125</li> </ul> insulK FLOAT_GZ input time insulation conductivity, Btuh-ft/ft2-F insulThk FLOAT_GEZ input time insulation thickness, in exH FLOAT_GZ input time combined exterior surface coefficient, Btuh/ft2-F Name Type Variability Description/Comments absSlr number Start of subhour solar (SW) absorptance, dimless awAbsSlr DBL Start of subhour <ul> <li>area-weighted solar absorptance</li> <li>= sb_absSlr * area / zn_surfASlr</li> <li>exterior surf outside: always 0</li> <li>windows inside: TBD 12-8-10</li> <li>ducts: always 0</li> </ul> epsLW number Start of subhour thermal (LW) emittance zi TI Start of subhour adjacent zone idx, 0 if exposed to ambient F DBL Start of subhour solar (short wave) fraction ?  TODO: NOT USED? as of 4-2012 Fp DBL Start of subhour <ul> <li>\"view factor\" to zone radiant temp, dimless.  Includes Oppenheim surface conductance.</li> <li>aka \"F-prime\" in CZM documentation.</li> </ul> Name Type Variability Description/Comments frRad DBL Start of subhour re radiant to radiant temp (room radiant node or sky) fSky DBL Start of subhour \"view factor\" to radiant surround at sky temp fAir DBL Start of subhour \"view factor\" to radiant surround at air temp (ground, horizon) Name Type Variability Description/Comments hcNat FLOAT_GEZ End of subhour surface natural convection coefficient, Btuh/ft2-F hcFrc FLOAT_GEZ End of subhour surface forced (wind) convection coefficient, Btuh/ft2-F hcMult FLOAT_GEZ End of subhour surface convection coefficient multiplier, dimless hxa FLOAT_GEZ End of subhour overall coeff to sb_txa = sb_hcMult*(sb_hcNat + sb_hcFrc), Btuh/ft2-F hxr FLOAT_GEZ End of subhour <ul> <li>surface (linearized) radiative coefficient, Btuh/ft2-F</li> <li>= coupling to sb_txr</li> </ul> hxtot number End of subhour sb_hxa + sb_hxr uRat DBL End of subhour <ul> <li>ratio uC/(sb_hxa + sb_hxr + uC)</li> <li>= 1/(1 + rC*(sb_hxa + sb_hxr))</li> <li>where uC = surface-to-surface conductance</li> <li>rC = 1/uC</li> <li>but: duct model outside surf to duct air</li> </ul> Name Type Variability Description/Comments fRat DBL End of subhour <ul> <li>sb_hxtot * sb_uRat, Btuh/ft2-F</li> <li>= overall conductance not including other side</li> <li>surface resistances</li> <li>(ducts: overall conductance from duct air to sb_txe)</li> </ul> cx DBL End of subhour air/radiant coupling due to this surface, Btuh/ft2-F Name Type Variability Description/Comments sgTarg solar gain target: bm, df gain from insolation SGTARG Name Type Variability Description/Comments sgTarg.bm DBL End of subhour beam sgTarg.df DBL End of subhour diffuse sgTarg.tot DBL End of subhour total sg DBL End of subhour absorbed solar total, Btuh (NOT Btuh/ft2), summed from sb_sgTarg Name Type Variability Description/Comments tSrf number End of subhour most recently calculated surface temp, F tSrfls number Start of subhour <ul> <li>last step surface temp, F</li> <li>copied from sb_tSrf at step end</li> <li>not *e (available for probing)</li> </ul> qrAbs DBL End of subhour <ul> <li>total absorbed radiant heat gain at surface, Btuh/ft2 (+ = into surface)</li> <li>= (sb_sg + sb_rIg)/area</li> </ul> txa number End of subhour <ul> <li>adjacent air temp, F (from prior step)</li> <li>inside: prior step zone tz</li> <li>outside: current step ambient dry bulb temp</li> </ul> txr number End of subhour <ul> <li>adjacent radiant temp, F</li> <li>inside: prior step zone tr</li> <li>outside: current step sky temp</li> </ul> txe number End of subhour <ul> <li>adjacent environmental temp, F</li> <li>combined sb_txa and sb_txr; simplifies calcs in some cases</li> <li>set but unused? for inside</li> <li>set/used for ASHWAT outside</li> </ul> w DBL End of subhour <ul> <li>adjacent air humidity ratio if known (else 0)</li> <li>used re duct leakage</li> </ul> qSrf DBL End of subhour <ul> <li>conduction into surface, Btuh/ft2</li> <li>updated at end of timestep</li> </ul> Name Type Variability Description/Comments pPS PIPESEGP Start of subhour pointer to parent PIPESEG Name Type Variability Description/Comments exCnd choice:EXCND input time adjacent cond: adiabatic/ambient/specT/adjZn. exT number Start of hour surround temperature, F Name Type Variability Description/Comments totals <ul> <li>segment totals (re st_Accum() to parents)</li> <li>also retains vol, UA, exArea used in calcs</li> </ul> SEGTOTS Name Type Variability Description/Comments totals.count DBL Start of run # of segments included in totals totals.len DBL Start of run length, ft totals.vol DBL Start of run volume, gal totals.exArea DBL Start of run outside surface area (at insulation surface), ft2 totals.UA DBL Start of run fluid-to-surround loss, Btuh/F-hr fRhoCpX FLOAT_GZ Start of run <ul> <li>fluid volumetric heat flow factor, Btuh/gpm-F</li> <li>initialized for water, code otherwise general</li> </ul> fvf number End of hour fluid volumetric flow rate, gpm (note: not ft3/hr) tIn number End of hour current hour inlet fluid temp, F tOut number End of hour current hour outlet fluid temp, F PLWF number End of hour current hour heat loss when flowing, Btu PLCD number End of hour current hour standing (noflow) heat loss, Btu PL number End of hour ps_PLWF + ps_PLCD Name Type Variability Description/Comments ty choice:DHWLSEGTY input time type: C_DHWLSEGTYCH_SUP / _RET wbCount number Start of run <ul> <li>total # of child [DHWLOOPBRANCHs][dhwloopbranch]</li> <li>note: may be non-integer</li> </ul> fNoDraw number Start of hour fraction of hour when there is no draw LL number End of hour <ul> <li>current hour loop loss, Btu</li> <li>= ps_PL - loss attributed to draw flow</li> </ul> Name Type Variability Description/Comments BL number End of hour current hour child DHWLOOPBRANCH losses, Btu t24WL number End of hour <ul> <li>current hour child [DHWLOOPBRANCH][dhwloopbranch] waste loss volume, gal</li> <li>associated energy is in wg_BL</li> </ul>"},{"location":"probe-definitions/DHWMETER/","title":"DHWMETER","text":"<p>title: DHWMETER ---</p> <ul> <li>results: accumulated water use for this meter (record subscript),</li> <li>for each interval (member here), usage by end use (substruct member):</li> <li>CAUTION: ordered for subscripting by IVLCH-1.</li> </ul> Name Type Variability Description/Comments Y run (aka year or annual) DHWMTR_IVL Name Type Variability Description/Comments Y.total number End of run <ul> <li>total of following specific end uses.  Code assumes precedes them.</li> <li>Use by purpose (end use), water use, gal:</li> <li>CAUTION: order of members MATCHES DTDHWEUCH choices (cndtypes.def)</li> <li>for subscripting (in cnguts,cgresult.cpp) by end use -1:</li> </ul> Y.unknown number End of run unknown (= DHWENDUSE 0, no associated choice) Y.faucet number End of run faucet use Y.shower number End of run shower Y.bath number End of run bath Y.cwashr number End of run clothes washer Y.dwashr number End of run dish washer M month's use DHWMTR_IVL Name Type Variability Description/Comments M.total number Unknown <ul> <li>total of following specific end uses.  Code assumes precedes them.</li> <li>Use by purpose (end use), water use, gal:</li> <li>CAUTION: order of members MATCHES DTDHWEUCH choices (cndtypes.def)</li> <li>for subscripting (in cnguts,cgresult.cpp) by end use -1:</li> </ul> M.unknown number Unknown unknown (= DHWENDUSE 0, no associated choice) M.faucet number Unknown faucet use M.shower number Unknown shower M.bath number Unknown bath M.cwashr number Unknown clothes washer M.dwashr number Unknown dish washer D day's use DHWMTR_IVL Name Type Variability Description/Comments D.total number End of day <ul> <li>total of following specific end uses.  Code assumes precedes them.</li> <li>Use by purpose (end use), water use, gal:</li> <li>CAUTION: order of members MATCHES DTDHWEUCH choices (cndtypes.def)</li> <li>for subscripting (in cnguts,cgresult.cpp) by end use -1:</li> </ul> D.unknown number End of day unknown (= DHWENDUSE 0, no associated choice) D.faucet number End of day faucet use D.shower number End of day shower D.bath number End of day bath D.cwashr number End of day clothes washer D.dwashr number End of day dish washer H hour's use DHWMTR_IVL Name Type Variability Description/Comments H.total number End of hour <ul> <li>total of following specific end uses.  Code assumes precedes them.</li> <li>Use by purpose (end use), water use, gal:</li> <li>CAUTION: order of members MATCHES DTDHWEUCH choices (cndtypes.def)</li> <li>for subscripting (in cnguts,cgresult.cpp) by end use -1:</li> </ul> H.unknown number End of hour unknown (= DHWENDUSE 0, no associated choice) H.faucet number End of hour faucet use H.shower number End of hour shower H.bath number End of hour bath H.cwashr number End of hour clothes washer H.dwashr number End of hour dish washer Name Type Variability Description/Comments prior <ul> <li>prior year,month,day,hour,subhr results, available throughout interval</li> <li>CAUTION: code assumes prior and curr arranged so can offset from curr to prior. eg in cnguts.cpp.</li> </ul> DHWMTR_SUB <ul> <li>results: accumulated water use for this meter (record subscript),</li> <li>for each interval (member here), usage by end use (substruct member):</li> <li>CAUTION: ordered for subscripting by IVLCH-1.</li> </ul> Name Type Variability Description/Comments prior.Y run (aka year or annual) DHWMTR_IVL Name Type Variability Description/Comments prior.Y.total number Start of run <ul> <li>total of following specific end uses.  Code assumes precedes them.</li> <li>Use by purpose (end use), water use, gal:</li> <li>CAUTION: order of members MATCHES DTDHWEUCH choices (cndtypes.def)</li> <li>for subscripting (in cnguts,cgresult.cpp) by end use -1:</li> </ul> prior.Y.unknown number Start of run unknown (= DHWENDUSE 0, no associated choice) prior.Y.faucet number Start of run faucet use prior.Y.shower number Start of run shower prior.Y.bath number Start of run bath prior.Y.cwashr number Start of run clothes washer prior.Y.dwashr number Start of run dish washer prior.M month's use DHWMTR_IVL Name Type Variability Description/Comments prior.M.total number Unknown <ul> <li>total of following specific end uses.  Code assumes precedes them.</li> <li>Use by purpose (end use), water use, gal:</li> <li>CAUTION: order of members MATCHES DTDHWEUCH choices (cndtypes.def)</li> <li>for subscripting (in cnguts,cgresult.cpp) by end use -1:</li> </ul> prior.M.unknown number Unknown unknown (= DHWENDUSE 0, no associated choice) prior.M.faucet number Unknown faucet use prior.M.shower number Unknown shower prior.M.bath number Unknown bath prior.M.cwashr number Unknown clothes washer prior.M.dwashr number Unknown dish washer prior.D day's use DHWMTR_IVL Name Type Variability Description/Comments prior.D.total number Start of day <ul> <li>total of following specific end uses.  Code assumes precedes them.</li> <li>Use by purpose (end use), water use, gal:</li> <li>CAUTION: order of members MATCHES DTDHWEUCH choices (cndtypes.def)</li> <li>for subscripting (in cnguts,cgresult.cpp) by end use -1:</li> </ul> prior.D.unknown number Start of day unknown (= DHWENDUSE 0, no associated choice) prior.D.faucet number Start of day faucet use prior.D.shower number Start of day shower prior.D.bath number Start of day bath prior.D.cwashr number Start of day clothes washer prior.D.dwashr number Start of day dish washer prior.H hour's use DHWMTR_IVL Name Type Variability Description/Comments prior.H.total number Start of hour <ul> <li>total of following specific end uses.  Code assumes precedes them.</li> <li>Use by purpose (end use), water use, gal:</li> <li>CAUTION: order of members MATCHES DTDHWEUCH choices (cndtypes.def)</li> <li>for subscripting (in cnguts,cgresult.cpp) by end use -1:</li> </ul> prior.H.unknown number Start of hour unknown (= DHWENDUSE 0, no associated choice) prior.H.faucet number Start of hour faucet use prior.H.shower number Start of hour shower prior.H.bath number Start of hour bath prior.H.cwashr number Start of hour clothes washer prior.H.dwashr number Start of hour dish washer"},{"location":"probe-definitions/DHWPump/","title":"DHWPump","text":"<p>title: DHWPump ---</p> Name Type Variability Description/Comments mult number input time <ul> <li>count of identical DHW pumps (default 1)</li> <li>models as if repeated identical input</li> </ul> Name Type Variability Description/Comments elecMtri TI input time meter for pump electricity use (default = parent ws_elecMtri) Name Type Variability Description/Comments pwr FLOAT_GEZ Start of hour pump power, W liqHeatF number Start of hour <ul> <li>fraction of wp_pwr added to liquid stream</li> <li>remainder is discarded</li> <li>used only for [DHWLOOPPUMP][dhwlooppump]</li> </ul> <p>energy inputs for current hour, Btu</p> Name Type Variability Description/Comments inElec number End of hour <ul> <li>electricity (note not kWh)</li> <li>for 1 pump (no wp_mult)</li> </ul>"},{"location":"probe-definitions/DHWSYS/","title":"DHWSYS","text":"<p>title: DHWSYS ---</p> Name Type Variability Description/Comments calcMode choice:WSCALCMODE input time calculation mode centralDHWSYSi TI input time <ul> <li>index of central (parent) [DHWSYS][dhwsys], 0 if none</li> <li>child [DHWSYSs][dhwsys] specify unit-specfic draws only</li> <li>but have no heaters etc</li> </ul> Name Type Variability Description/Comments mult FLOAT_GEZ input time <ul> <li>multiplier: model as ws_mult identical systems</li> <li>fractional values supported</li> </ul> elecMtri TI input time meter for system electricity use fuelMtri TI input time meter for system fuel use <ul> <li>energy inputs for current hour, Btuh</li> <li>NOTE: values DO NOT include [DHWHEATER][dhwheater] use</li> </ul> Name Type Variability Description/Comments inElec number End of hour electricity (note not kWh) inFuel number End of hour fuel (for generality, always 0?) Name Type Variability Description/Comments swTi TI input time <ul> <li>[DHWSOLARSYS][dhwsolarsys] providing preheated water to this system</li> <li>0 iff no solar connected</li> </ul> qSlr number End of hour <ul> <li>hour total water heating energy provided by</li> <li>[DHWSOLARSYS][dhwsolarsys] (not via ws_SSF), Btu</li> </ul> SSFAnnualSolar DBL End of run <ul> <li>Annual solar heat added (numerator to calculate SSF), Btu</li> <li>= SUM( ws_qSlr)</li> </ul> SSFAnnualReq DBL End of run Annual heat required (denominator to calculate SSF), Btu SSFAnnual number End of run Annual solar savings fraction Name Type Variability Description/Comments tInlet number End of hour <ul> <li>current hour cold water inlet temp for this [DHWSYS][dhwsys], F</li> <li>user expression or default Wthr.d.wd_tMains</li> <li>Not modified by solar and/or [DHWHEATREC][dhwheatrec]</li> </ul> tInletTest number Start of subhour <ul> <li>current subhour cold water inlet temp for this [DHWSYS][dhwsys], F</li> <li>CAUTION: ws_tInletTest is for testing and model validation only</li> <li>Not fully integrated with full model; (probably) ignores any [DHWSOLARSYS][dhwsolarsys] and [DHWHEATREC][dhwheatrec] impacts</li> </ul> tInletX number End of hour <ul> <li>hour average adjusted cold water temp, F</li> <li>reflects solar and/or [DHWHEATREC][dhwheatrec]</li> </ul> hwUse FLOAT_GEZ Start of hour <ul> <li>current hour hot water use (at fixtures), gal</li> <li>(scheduled input, does NOT include [DHWDAYUSE][dhwdayuse] draws)</li> </ul> hwUseTest FLOAT_GEZ Start of subhour <ul> <li>current subhour additional hot water use (at fixtures), gal/subhour</li> <li>added at tick level to other draws</li> <li>CAUTION: ws_hwUseTest is for testing and model validation only</li> <li>Not integrated with solar, heat recovery, etc.</li> </ul> tRLTest FLOAT_GEZ Start of subhour <ul> <li>current subour [DHWLOOP][dhwloop] return temp, F</li> <li>overwrites calculated loop return temp, if any</li> <li>CAUTION: ws_tRLTest is for testing and model validation only</li> </ul> volRLTest FLOAT_GEZ Start of subhour <ul> <li>current subour recirc loop flow, gal (per subhr)</li> <li>overwrites calculated loop flow, if any</li> <li>CAUTION: ws_volRLTest is for testing and model validation only</li> </ul> iTk0DWHR number End of hour 1st tick with possible DWHR iTkNDWHR number End of hour last+1 tick with possible DWHR qDWHR number End of hour hour all DHWHEATREC total heat to fixtures and water heaters, Btu qDWHRWH number End of hour hour all DHWHEATREC total heat to water heater(s), Btu <p>DHWMTRs -- accumulates H/D/M/Y water use with ws_mult</p> Name Type Variability Description/Comments WHhwMtri TI input time DHWMTR for hot water use at water heater(s) (= ws_whUse), gal FXhwMtri TI input time DHWMTR for hot water use at fixtures (= ws_fxUseMix), gal <p>mixed and hot water use for this DHWSYS (w/o ws_mult)</p> Name Type Variability Description/Comments whUseNoHR number End of hour <ul> <li>current hour virtual hot water use w/o heat recovery, gal</li> <li>re verification / accounting of DWHR results</li> </ul> fxUseMix current hour total (mixed) water use at fixtures, gal DHWMTR_IVL Name Type Variability Description/Comments fxUseMix.total number End of hour <ul> <li>total of following specific end uses.  Code assumes precedes them.</li> <li>Use by purpose (end use), water use, gal:</li> <li>CAUTION: order of members MATCHES DTDHWEUCH choices (cndtypes.def)</li> <li>for subscripting (in cnguts,cgresult.cpp) by end use -1:</li> </ul> fxUseMix.unknown number End of hour unknown (= DHWENDUSE 0, no associated choice) fxUseMix.faucet number End of hour faucet use fxUseMix.shower number End of hour shower fxUseMix.bath number End of hour bath fxUseMix.cwashr number End of hour clothes washer fxUseMix.dwashr number End of hour dish washer fxUseMixTot[index] DBL Array [NDHWENDUSESXPP] End of run annual total (mixed) water use at fixtures by end use, gal fxUseMixLH prior hour total (mixed) water use at fixtures, gal DHWMTR_IVL Name Type Variability Description/Comments fxUseMixLH.total number Start of hour <ul> <li>total of following specific end uses.  Code assumes precedes them.</li> <li>Use by purpose (end use), water use, gal:</li> <li>CAUTION: order of members MATCHES DTDHWEUCH choices (cndtypes.def)</li> <li>for subscripting (in cnguts,cgresult.cpp) by end use -1:</li> </ul> fxUseMixLH.unknown number Start of hour unknown (= DHWENDUSE 0, no associated choice) fxUseMixLH.faucet number Start of hour faucet use fxUseMixLH.shower number Start of hour shower fxUseMixLH.bath number Start of hour bath fxUseMixLH.cwashr number Start of hour clothes washer fxUseMixLH.dwashr number Start of hour dish washer whUse <ul> <li>current hour hot water use by end use (at ws_tUse), gal</li> <li>water heater out = fixture hot in</li> <li>Also frequently assumed water heater in = water heater out</li> <li>BUT this is only approx due to e.g. mixdown and XBU.</li> </ul> DHWMTR_IVL Name Type Variability Description/Comments whUse.total number End of hour <ul> <li>total of following specific end uses.  Code assumes precedes them.</li> <li>Use by purpose (end use), water use, gal:</li> <li>CAUTION: order of members MATCHES DTDHWEUCH choices (cndtypes.def)</li> <li>for subscripting (in cnguts,cgresult.cpp) by end use -1:</li> </ul> whUse.unknown number End of hour unknown (= DHWENDUSE 0, no associated choice) whUse.faucet number End of hour faucet use whUse.shower number End of hour shower whUse.bath number End of hour bath whUse.cwashr number End of hour clothes washer whUse.dwashr number End of hour dish washer whUseTot[index] DBL Array [NDHWENDUSESXPP] End of run annual total hot water use by end use (at ws_tUse), gal <ul> <li>draw and load sizing info derived during C_WSCALCMODECH_PRERUN (only)</li> <li>copied to assocated input records in ws_DoEndPreRun()</li> <li>thus avail for use in sizing expressions during C_WSCALCMODECH_SIM input</li> <li>&gt;&gt; no direct uses in calcs &lt;&lt;</li> </ul> Name Type Variability Description/Comments drawMaxDur number input time draw duration window, hr (user input, default 4) drawMax number input time largest draw total in any conseq ws_drawMaxDur hrs, gal Name Type Variability Description/Comments loadMaxDur number input time load duration window, hr (user input, default 12) loadMax number input time largest load total in any conseq ws_loadMaxDur hrs, Btu <p>EcoSizer sizing algorithm</p> Name Type Variability Description/Comments tSetpointDes number input time <ul> <li>design (sizing) set point temp, F (constant)</li> <li>default = ws_tUse</li> </ul> tInletDes number input time <ul> <li>design (sizing) cold water inlet temp, F</li> <li>default = annual min mains temp</li> </ul> ashpTSrcDes number End of run <ul> <li>design (sizing) HPWH source air temperature, F</li> <li>default = heating design temp</li> </ul> heatingCapDesTopN[index] number Array [NDHWSIZEDAYS] End of run <ul> <li>top N design heating capacities</li> <li>[ 0] = largest</li> </ul> heatingCapDes number input time <ul> <li>design heating capacity, Btuh</li> <li>= ws_heatingCapDesTopN[ 6] or as changed</li> <li>defaults from EcoSizer at end of prerun if not input</li> <li>No direct use, must be passed to [DHWHEATER][dhwheater] via [ALTER][alter]</li> </ul> volRunningDes FLOAT_GZ input time <ul> <li>design running volume, gal</li> <li>= active volume (above aquastat)</li> <li>full tank volume derived from running volume</li> <li>in HPWHLINK::hw_DeriveVolFromVolRunning</li> <li>defaults from EcoSizer at end of prerun if not input</li> <li>No direct use, must be passed to [DHWHEATER][dhwheater] via [ALTER][alter]</li> </ul> fxDes FLOAT_GZ input time <ul> <li>DHW design excess size factor, default 1</li> <li>Applied if/when ws_heatingCapDes and/or ws_volRunningDes</li> <li>are defaulted from EcoSizer at end of prerun.</li> <li>No effect if those values are input.</li> </ul> Name Type Variability Description/Comments tUse number Start of run <ul> <li>hot water use temp, F</li> <li>= temp of water delivered to fixtures or DHWLOOP(s)</li> <li>default = 120 F</li> </ul> tUseTest number Start of subhour <ul> <li>current subhour test hot water use temp, F</li> <li>CAUTION: ws_tUseTest is for testing and model validation only</li> <li>Not consistently applied for a heater types</li> </ul> Name Type Variability Description/Comments tSetpoint number Start of hour <ul> <li>[DHWHEATER][dhwheater] set point (for all [DHWHEATERs][dhwheater] using HPWH model), F</li> <li>default = ws_tUse</li> </ul> tSetpointLH number Start of hour <ul> <li>[DHWLOOPHEATER][dhwloopheater] set point (for all child [DHWLOOPHEATERs][dhwloopheater] using HPWH model), F</li> <li>default = ws_tUse</li> </ul> drMethod DHWDRMETH Start of run <ul> <li>DHW demand response control method</li> <li>C_DHWDRMETH_NONE, C_DHWDRMETH_SCHED, C_DHWDRMETH_SOC</li> </ul> drSignal DHWDRSIG Start of hour DHW demand response control signal drStatusHPWH number End of hour <ul> <li>DHW demand response HPWHsim base drStatus for hour</li> <li>used iff ws_drSignal == C_DHWDRMETH_SCHED</li> <li>may be modified at subhour or tick ivl</li> </ul> targetSoC FRAC_GZ Start of hour <ul> <li>target state of charge (SoC)</li> <li>used iff ws_drSignal == C_DHWDRMETH_SOC</li> </ul> Name Type Variability Description/Comments tOutPrimLT number End of subhour <ul> <li>primary water heater outlet temp, F</li> <li>for HPWH only, re [DHWLOOPHEATER][dhwloopheater] entering temp</li> <li>best estimate from prior 1-min tick</li> </ul> dayUsei TI Start of day idx of DHWDAYUSE dayUseName CULSTR Start of day name of DHWDAYUSE (resolved at runtime) childDHWDAYUSEFlag number Start of run nz iff at least one child DHWSYS has specified ws_dayUseName parElec FLOAT_GEZ Start of hour <ul> <li>electrical parasitic power, W</li> <li>for e.g. unmodeled recirculation pumps</li> </ul> SDLM FLOAT_GZ input time <ul> <li>standard distribution loss multiplier</li> <li>see ACM AppE Eqn RE-5</li> </ul> DSM FLOAT_GZ input time distribution system multiplier (AppE table RE-2) SSF FLOAT_GEZ Start of hour <ul> <li>user input solar savings fraction</li> <li>valid range 0 - 0.99, see code</li> <li>approximates savings by modifyng inlet water temp</li> <li>not allowed (and set 0) when [DHWSOLARSYS][dhwsolarsys] is specified</li> </ul> WF FLOAT_GEZ Start of hour <ul> <li>waste factor applied to ws_hwUse and [DHWUSEs][dhwuse]</li> <li>default=1.  CEC procedures use 0.9 for</li> <li>systems having within unit recirc.</li> </ul> drawCount[index] number Array [NDHWENDUSESPP] End of hour <ul> <li>(approx) total # of draws in run (generally full year) by end use</li> <li>draws spanning midnight double counted</li> <li>draws with same eventID counted individually</li> <li>[ 0]: total (including unknown end use)</li> <li>[ 1..]: per C_DHWEUCH_xxx</li> </ul> drawsPerDay[index] number Array [NDHWENDUSESPP] Start of run Name Type Variability Description/Comments drawDurF[index] FLOAT_GEZ Array [NDHWENDUSESPP] End of hour <ul> <li>water heater draw duration factors by end use</li> <li>accounts for warm-up waste and pipe losses for [DHWDAYUSE][dhwdayuse] draws</li> <li>factor = actual draw duration / nominal draw duration</li> <li>[ 0] = unknown end use ([DHWUSEs][dhwuse] w/o wu_hwEndUse) (*not* ws_hwUse)</li> <li>[1 ..] = per C_DHWEUCH_xxx</li> </ul> branchModel choice:DHWBRANCHMODEL input time <ul> <li>branch model selection</li> <li>_T24DHW: prior ACM App-B</li> <li>_DRAWWASTE: draw duration increase per ws_drawWaste</li> <li>_DAYWASTE: draw duration increase per ??</li> </ul> drawWaste[index] number Array [NDHWENDUSESPP] Start of hour <ul> <li>water waste per draw, gal</li> <li>converts to time added to draw duration</li> <li>[ 0] unknown end use</li> <li>[ 1..] = per C_DHWEUCH_xxx</li> </ul> dayWasteDrawF[index] number Array [NDHWENDUSESPP] input time <ul> <li>relative draw for day waste scheme</li> <li>[ 0] unknown end use</li> <li>[ 1..] = per C_DHWEUCH_xxx</li> </ul> dayWasteVol FLOAT_GEZ input time base daily total draw waste, gal/day dayWasteBranchVolF FLOAT_GEZ input time <ul> <li>additional daily draw waste, discards/day</li> <li>[DHWLOOPBRANCH][dhwloopbranch] volume multiplier</li> </ul> dayWaste FLOAT_GEZ Start of run <ul> <li>daily draw waste, gal/day</li> <li>ws_dayWasteVol + ws_dayWasteBranchVolF * (total [DHWLOOPBRANCH][dhwloopbranch] volume)</li> </ul> dayWasteScale FLOAT_GEZ End of run Name Type Variability Description/Comments childDHWSYSCount FLOAT_GEZ Start of run <ul> <li># of child [DHWSYSs][dhwsys] iff central system (else 0)</li> <li>note may not be integral</li> </ul> whCount FLOAT_GEZ Start of run <ul> <li># of (primary) [DHWHEATERs][dhwheater] serving this [DHWSYS][dhwsys]</li> <li>= SUM( [DHWHEATER][dhwheater].wh_mult) (possibly non-integral)</li> </ul> wlhCount FLOAT_GEZ Start of run <ul> <li># of [DHWLOOPHEATERs][dhwloopheater] in this [DHWSYS][dhwsys]</li> <li>= SUM( [DHWLOOPHEATER][dhwloopheater].wh_mult) (possibly non-integral?)</li> </ul> whCountUseTS FLOAT_GEZ Start of run <ul> <li># of [DHWHEATERs][dhwheater] serving this [DHWSYS][dhwsys] that respond to ws_tSetpoint</li> <li>used for re \"ignore\" msg(s)</li> </ul> wlhCountUseTS FLOAT_GEZ Start of run <ul> <li># of [DHWLOOPHEATERs][dhwloopheater] serving this [DHWSYS][dhwsys] that respond to ws_tSetpointLH</li> <li>used for re \"ignore\" msg(s)</li> </ul> wtCount number Start of run # of child DHWTANKs wpCount number Start of run # of child DHWPUMPs wlCount number Start of run # of child DHWLOOPs (aka NLOOPk) CHDHWCount number Start of run # of combined heat/DHW RSYS systems served configChecked number Start of run <ul> <li>set non-0 when configuration has been checked (see ws_Init())</li> <li>WHY: reduces info message when &gt;1 [RUN][run]</li> <li>side effect: does not re-check after [ALTER][alter]</li> </ul> Name Type Variability Description/Comments loopSegTotals aggregated totals, all child loop segments SEGTOTS Name Type Variability Description/Comments loopSegTotals.count DBL Start of run # of segments included in totals loopSegTotals.len DBL Start of run length, ft loopSegTotals.vol DBL Start of run volume, gal loopSegTotals.exArea DBL Start of run outside surface area (at insulation surface), ft2 loopSegTotals.UA DBL Start of run fluid-to-surround loss, Btuh/F-hr Name Type Variability Description/Comments branchTotals aggregated totals, all child branches SEGTOTS Name Type Variability Description/Comments branchTotals.count DBL Start of run # of segments included in totals branchTotals.len DBL Start of run length, ft branchTotals.vol DBL Start of run volume, gal branchTotals.exArea DBL Start of run outside surface area (at insulation surface), ft2 branchTotals.UA DBL Start of run fluid-to-surround loss, Btuh/F-hr Name Type Variability Description/Comments wrCount number Start of run total child DHWHEATRECs wrFeedWHCount number Start of run <ul> <li>count of child [DHWHEATRECs][dhwheatrec] that provide</li> <li>feed (cold) water to [DHWHEATERs][dhwheater]</li> <li>[DHWHEATRECs][dhwheatrec] may feed fixtures or WH or both</li> </ul> wrFxDrainCount number Start of run count of fixture drains feeding (possibly shared) DHWHEATRECs fxCount[index] SI_GEZ Array [NDHWENDUSESPP] Start of run <ul> <li>end-use count of fixtures served by this [DHWSYS][dhwsys]</li> <li>non-central: user input, default 1</li> <li>central: derived from child [DHWSYSs][dhwsys]</li> <li>used re allocation of shared loads</li> </ul> <ul> <li>Load sharing -- support of multiple [DHWSYSs][dhwsys] in single unit</li> <li>draws are distributed among [DHWSYSs][dhwsys] having suitable fixtures</li> <li>aka \"deal-em-out\" algorithm</li> </ul> Name Type Variability Description/Comments loadShareDHWSYSi TI input time index of DHWSYS with which this DHWSYS shares load loadShareCount[index] number Array [NDHWENDUSESPP] Start of run <ul> <li># of [DHWSYSs][dhwsys] sharing group load by end use</li> <li>([ 0] = # of [DHWSYSs][dhwsys] in group)</li> <li>NOT effected by ws_mult.</li> <li>All [DHWSYSs][dhwsys] in group have same ws_loadShareCounts</li> </ul> loadShareWS0[index] number Array [NDHWENDUSESPP] End of day <ul> <li>re allocation of shared load</li> <li>idx for ws_eventID=0 by end use, set daily based on jDay</li> </ul> Name Type Variability Description/Comments drawCSV choice:NOYES input time <ul> <li>iff C_NOYESCH_YES, write tick-level draw data to</li> <li>_&lt;[DHWSYS][dhwsys].name&gt;_draws.csv</li> </ul> Name Type Variability Description/Comments HHWO number End of hour current total recovery load (at water heater), Btu DLM number End of hour distribution loss multiplier (calc'd) volRL number End of hour current hour all-DHWLOOP return volume, gal tRL number End of hour current hour all-DHWLOOP return temp, F HRBL number End of hour current hour all-DHWLOOPBRANCH losses, Btu t24WL number End of hour <ul> <li>current hour all-[DHWLOOPBRANCH][dhwloopbranch] waste loss volume, gal</li> <li>per T24DHW branch model</li> <li>info only: associated energy is included in ws_HRBL</li> </ul> t24WLTot DBL End of run annual total ws_t24WL, gal Name Type Variability Description/Comments volCHDHW number End of subhour current subhour all-RSYS combined heat/DHW (CHDHW) draw, gal tRCHDHW number End of subhour current subhour average combined heat/DHW (CHDHW) return temp, F CHDHWHtgFractSH number End of subhour <ul> <li>current subhour fraction of [DHWSYS][dhwsys] output that</li> <li>supplied CHDHW load(s)</li> </ul> CHDHWHtgFractAvg number End of subhour <ul> <li>fraction of [DHWSYS][dhwsys] output that supplied CHDHW load(s)</li> <li>averaged over last ws_CHDHWHistoryHours hours</li> </ul> Name Type Variability Description/Comments HRDL number End of hour <ul> <li>current hour recirculation loss, Btu</li> <li>= ws_HRBL + [DHWLOOPSEG][dhwloopseg] losses</li> <li>(adjusted re [DHWLOOP][dhwloop] wl_lossMakeupPwr)</li> </ul> HJLsh number End of subhour current subhour jacket losses (from DHWTANKs), Btu HJL number End of hour hour total jacket losses (from DHWTANKs), Btu HARL number End of hour hour total adjusted recovery load, Btu"},{"location":"probe-definitions/DHWSYSRES/","title":"DHWSYSRES","text":"<p>title: DHWSYSRES ---</p> Name Type Variability Description/Comments wsr_ebErrCount number End of hour <ul> <li>count of short-interval energy balance errors</li> <li>re limiting excessive msgs; see ::cgenbal()</li> </ul> <ul> <li>results: accumulated values for paired [DHWSYS][dhwsys] for each interval</li> <li>CAUTION: ordered for subscripting by IVLCH-1</li> </ul> Name Type Variability Description/Comments Y run (aka year or annual) DHWSYSRES_IVL <ul> <li>energy (not fuel) exchanges with water, Btu</li> <li>values are for associated [DHWSYS][dhwsys] (wh_mult(s) included, ws_mult not included)</li> <li>CAUTION: code relies on mbr order, change with care</li> </ul> Name Type Variability Description/Comments Y.qOutDHW number End of run hot water energy delivered to fixtures, Btu (&gt;=0, + = from DHWSYS) Y.qOutHtg number End of run space heating (CHDHW) energy delivered, Btu (&gt;=0, + = from DHWSYS) Y.qLossMisc number End of run misc non-loop losses, Btu (DHWTANK losses, T24DHW branch losses, &lt;= 0) Y.qLossLoop number End of run DHWLOOP/DHWLOOPBRANCH losses, Btu (+ = to DHWSYS, typically &lt;= 0) Y.qDWHR number End of run heat added via drain water heat recovery (DWHR), Btu (+ = to DHWSYS, &gt;= 0) Y.qSSF number End of run implied energy contribution from ws_SSF, Btu (+ = to DHWSYS, &gt;= 0) Y.qSolar number End of run DHWSOLARSYS contribution, Btu (+ = to DHWSYS, &gt;= 0) Y.qPrimary[index] number Array [2] End of run <ul> <li>[DHWHEATER][dhwheater] [0] or [DHWLOOPHEATER][dhwloopheater] [1] primary heat added, Btu</li> <li>(compressor, burner, resistance; + = to [DHWSYS][dhwsys], &gt;= 0)</li> </ul> Y.qAux[index] number Array [2] End of run <ul> <li>[DHWHEATER][dhwheater] [0] or [DHWLOOPHEATER][dhwloopheater] [1] in-tank aux heat added, Btu</li> <li>(HPWH types only, + = to [DHWSYS][dhwsys], &gt;= 0)</li> </ul> Y.qLoss[index] number Array [2] End of run <ul> <li>[DHWHEATER][dhwheater] [0] or [DHWLOOPHEATER][dhwloopheater] [1] tank loss, Btu</li> <li>(HPWH types only, + = to [DHWSYS][dhwsys], typically &lt;= 0)</li> </ul> Y.qStorage[index] number Array [2] End of run <ul> <li>[DHWHEATER][dhwheater] [0] or [DHWLOOPHEATER][dhwloopheater] [1] change in tank heat content, Btu</li> <li>(HPWH types only, + = increase in tank temp)</li> </ul> Y.qError[index] number Array [2] End of run <ul> <li>[DHWHEATER][dhwheater] [0] or [DHWLOOPHEATER][dhwloopheater] [1] HPWH internal heat balance error, Btu</li> <li>included in DHWSYSRES balance to hide HPWH unbalance</li> <li>pending investigation 5/2022</li> </ul> Y.qXBUDHW number End of run extra backup heating allocated to DHW, Btu (+ = to DHWSYS, &gt;= 0) Y.qXBUHtg number End of run extra backup heating allocated to space heating, Btu (+ = to DHWSYS, &gt;= 0) Y.qBal number End of run <ul> <li>sum of energy flows, Btu = (qOutDHW + qOutHtg) - Sum( everything else)</li> <li>s/b 0; &gt;=0 means more output than input</li> </ul> M month's use DHWSYSRES_IVL <ul> <li>energy (not fuel) exchanges with water, Btu</li> <li>values are for associated [DHWSYS][dhwsys] (wh_mult(s) included, ws_mult not included)</li> <li>CAUTION: code relies on mbr order, change with care</li> </ul> Name Type Variability Description/Comments M.qOutDHW number Unknown hot water energy delivered to fixtures, Btu (&gt;=0, + = from DHWSYS) M.qOutHtg number Unknown space heating (CHDHW) energy delivered, Btu (&gt;=0, + = from DHWSYS) M.qLossMisc number Unknown misc non-loop losses, Btu (DHWTANK losses, T24DHW branch losses, &lt;= 0) M.qLossLoop number Unknown DHWLOOP/DHWLOOPBRANCH losses, Btu (+ = to DHWSYS, typically &lt;= 0) M.qDWHR number Unknown heat added via drain water heat recovery (DWHR), Btu (+ = to DHWSYS, &gt;= 0) M.qSSF number Unknown implied energy contribution from ws_SSF, Btu (+ = to DHWSYS, &gt;= 0) M.qSolar number Unknown DHWSOLARSYS contribution, Btu (+ = to DHWSYS, &gt;= 0) M.qPrimary[index] number Array [2] Unknown <ul> <li>[DHWHEATER][dhwheater] [0] or [DHWLOOPHEATER][dhwloopheater] [1] primary heat added, Btu</li> <li>(compressor, burner, resistance; + = to [DHWSYS][dhwsys], &gt;= 0)</li> </ul> M.qAux[index] number Array [2] Unknown <ul> <li>[DHWHEATER][dhwheater] [0] or [DHWLOOPHEATER][dhwloopheater] [1] in-tank aux heat added, Btu</li> <li>(HPWH types only, + = to [DHWSYS][dhwsys], &gt;= 0)</li> </ul> M.qLoss[index] number Array [2] Unknown <ul> <li>[DHWHEATER][dhwheater] [0] or [DHWLOOPHEATER][dhwloopheater] [1] tank loss, Btu</li> <li>(HPWH types only, + = to [DHWSYS][dhwsys], typically &lt;= 0)</li> </ul> M.qStorage[index] number Array [2] Unknown <ul> <li>[DHWHEATER][dhwheater] [0] or [DHWLOOPHEATER][dhwloopheater] [1] change in tank heat content, Btu</li> <li>(HPWH types only, + = increase in tank temp)</li> </ul> M.qError[index] number Array [2] Unknown <ul> <li>[DHWHEATER][dhwheater] [0] or [DHWLOOPHEATER][dhwloopheater] [1] HPWH internal heat balance error, Btu</li> <li>included in DHWSYSRES balance to hide HPWH unbalance</li> <li>pending investigation 5/2022</li> </ul> M.qXBUDHW number Unknown extra backup heating allocated to DHW, Btu (+ = to DHWSYS, &gt;= 0) M.qXBUHtg number Unknown extra backup heating allocated to space heating, Btu (+ = to DHWSYS, &gt;= 0) M.qBal number Unknown <ul> <li>sum of energy flows, Btu = (qOutDHW + qOutHtg) - Sum( everything else)</li> <li>s/b 0; &gt;=0 means more output than input</li> </ul> D day's use DHWSYSRES_IVL <ul> <li>energy (not fuel) exchanges with water, Btu</li> <li>values are for associated [DHWSYS][dhwsys] (wh_mult(s) included, ws_mult not included)</li> <li>CAUTION: code relies on mbr order, change with care</li> </ul> Name Type Variability Description/Comments D.qOutDHW number End of day hot water energy delivered to fixtures, Btu (&gt;=0, + = from DHWSYS) D.qOutHtg number End of day space heating (CHDHW) energy delivered, Btu (&gt;=0, + = from DHWSYS) D.qLossMisc number End of day misc non-loop losses, Btu (DHWTANK losses, T24DHW branch losses, &lt;= 0) D.qLossLoop number End of day DHWLOOP/DHWLOOPBRANCH losses, Btu (+ = to DHWSYS, typically &lt;= 0) D.qDWHR number End of day heat added via drain water heat recovery (DWHR), Btu (+ = to DHWSYS, &gt;= 0) D.qSSF number End of day implied energy contribution from ws_SSF, Btu (+ = to DHWSYS, &gt;= 0) D.qSolar number End of day DHWSOLARSYS contribution, Btu (+ = to DHWSYS, &gt;= 0) D.qPrimary[index] number Array [2] End of day <ul> <li>[DHWHEATER][dhwheater] [0] or [DHWLOOPHEATER][dhwloopheater] [1] primary heat added, Btu</li> <li>(compressor, burner, resistance; + = to [DHWSYS][dhwsys], &gt;= 0)</li> </ul> D.qAux[index] number Array [2] End of day <ul> <li>[DHWHEATER][dhwheater] [0] or [DHWLOOPHEATER][dhwloopheater] [1] in-tank aux heat added, Btu</li> <li>(HPWH types only, + = to [DHWSYS][dhwsys], &gt;= 0)</li> </ul> D.qLoss[index] number Array [2] End of day <ul> <li>[DHWHEATER][dhwheater] [0] or [DHWLOOPHEATER][dhwloopheater] [1] tank loss, Btu</li> <li>(HPWH types only, + = to [DHWSYS][dhwsys], typically &lt;= 0)</li> </ul> D.qStorage[index] number Array [2] End of day <ul> <li>[DHWHEATER][dhwheater] [0] or [DHWLOOPHEATER][dhwloopheater] [1] change in tank heat content, Btu</li> <li>(HPWH types only, + = increase in tank temp)</li> </ul> D.qError[index] number Array [2] End of day <ul> <li>[DHWHEATER][dhwheater] [0] or [DHWLOOPHEATER][dhwloopheater] [1] HPWH internal heat balance error, Btu</li> <li>included in DHWSYSRES balance to hide HPWH unbalance</li> <li>pending investigation 5/2022</li> </ul> D.qXBUDHW number End of day extra backup heating allocated to DHW, Btu (+ = to DHWSYS, &gt;= 0) D.qXBUHtg number End of day extra backup heating allocated to space heating, Btu (+ = to DHWSYS, &gt;= 0) D.qBal number End of day <ul> <li>sum of energy flows, Btu = (qOutDHW + qOutHtg) - Sum( everything else)</li> <li>s/b 0; &gt;=0 means more output than input</li> </ul> H hour's use DHWSYSRES_IVL <ul> <li>energy (not fuel) exchanges with water, Btu</li> <li>values are for associated [DHWSYS][dhwsys] (wh_mult(s) included, ws_mult not included)</li> <li>CAUTION: code relies on mbr order, change with care</li> </ul> Name Type Variability Description/Comments H.qOutDHW number End of hour hot water energy delivered to fixtures, Btu (&gt;=0, + = from DHWSYS) H.qOutHtg number End of hour space heating (CHDHW) energy delivered, Btu (&gt;=0, + = from DHWSYS) H.qLossMisc number End of hour misc non-loop losses, Btu (DHWTANK losses, T24DHW branch losses, &lt;= 0) H.qLossLoop number End of hour DHWLOOP/DHWLOOPBRANCH losses, Btu (+ = to DHWSYS, typically &lt;= 0) H.qDWHR number End of hour heat added via drain water heat recovery (DWHR), Btu (+ = to DHWSYS, &gt;= 0) H.qSSF number End of hour implied energy contribution from ws_SSF, Btu (+ = to DHWSYS, &gt;= 0) H.qSolar number End of hour DHWSOLARSYS contribution, Btu (+ = to DHWSYS, &gt;= 0) H.qPrimary[index] number Array [2] End of hour <ul> <li>[DHWHEATER][dhwheater] [0] or [DHWLOOPHEATER][dhwloopheater] [1] primary heat added, Btu</li> <li>(compressor, burner, resistance; + = to [DHWSYS][dhwsys], &gt;= 0)</li> </ul> H.qAux[index] number Array [2] End of hour <ul> <li>[DHWHEATER][dhwheater] [0] or [DHWLOOPHEATER][dhwloopheater] [1] in-tank aux heat added, Btu</li> <li>(HPWH types only, + = to [DHWSYS][dhwsys], &gt;= 0)</li> </ul> H.qLoss[index] number Array [2] End of hour <ul> <li>[DHWHEATER][dhwheater] [0] or [DHWLOOPHEATER][dhwloopheater] [1] tank loss, Btu</li> <li>(HPWH types only, + = to [DHWSYS][dhwsys], typically &lt;= 0)</li> </ul> H.qStorage[index] number Array [2] End of hour <ul> <li>[DHWHEATER][dhwheater] [0] or [DHWLOOPHEATER][dhwloopheater] [1] change in tank heat content, Btu</li> <li>(HPWH types only, + = increase in tank temp)</li> </ul> H.qError[index] number Array [2] End of hour <ul> <li>[DHWHEATER][dhwheater] [0] or [DHWLOOPHEATER][dhwloopheater] [1] HPWH internal heat balance error, Btu</li> <li>included in DHWSYSRES balance to hide HPWH unbalance</li> <li>pending investigation 5/2022</li> </ul> H.qXBUDHW number End of hour extra backup heating allocated to DHW, Btu (+ = to DHWSYS, &gt;= 0) H.qXBUHtg number End of hour extra backup heating allocated to space heating, Btu (+ = to DHWSYS, &gt;= 0) H.qBal number End of hour <ul> <li>sum of energy flows, Btu = (qOutDHW + qOutHtg) - Sum( everything else)</li> <li>s/b 0; &gt;=0 means more output than input</li> </ul> S subhour's use DHWSYSRES_IVL <ul> <li>energy (not fuel) exchanges with water, Btu</li> <li>values are for associated [DHWSYS][dhwsys] (wh_mult(s) included, ws_mult not included)</li> <li>CAUTION: code relies on mbr order, change with care</li> </ul> Name Type Variability Description/Comments S.qOutDHW number End of subhour hot water energy delivered to fixtures, Btu (&gt;=0, + = from DHWSYS) S.qOutHtg number End of subhour space heating (CHDHW) energy delivered, Btu (&gt;=0, + = from DHWSYS) S.qLossMisc number End of subhour misc non-loop losses, Btu (DHWTANK losses, T24DHW branch losses, &lt;= 0) S.qLossLoop number End of subhour DHWLOOP/DHWLOOPBRANCH losses, Btu (+ = to DHWSYS, typically &lt;= 0) S.qDWHR number End of subhour heat added via drain water heat recovery (DWHR), Btu (+ = to DHWSYS, &gt;= 0) S.qSSF number End of subhour implied energy contribution from ws_SSF, Btu (+ = to DHWSYS, &gt;= 0) S.qSolar number End of subhour DHWSOLARSYS contribution, Btu (+ = to DHWSYS, &gt;= 0) S.qPrimary[index] number Array [2] End of subhour <ul> <li>[DHWHEATER][dhwheater] [0] or [DHWLOOPHEATER][dhwloopheater] [1] primary heat added, Btu</li> <li>(compressor, burner, resistance; + = to [DHWSYS][dhwsys], &gt;= 0)</li> </ul> S.qAux[index] number Array [2] End of subhour <ul> <li>[DHWHEATER][dhwheater] [0] or [DHWLOOPHEATER][dhwloopheater] [1] in-tank aux heat added, Btu</li> <li>(HPWH types only, + = to [DHWSYS][dhwsys], &gt;= 0)</li> </ul> S.qLoss[index] number Array [2] End of subhour <ul> <li>[DHWHEATER][dhwheater] [0] or [DHWLOOPHEATER][dhwloopheater] [1] tank loss, Btu</li> <li>(HPWH types only, + = to [DHWSYS][dhwsys], typically &lt;= 0)</li> </ul> S.qStorage[index] number Array [2] End of subhour <ul> <li>[DHWHEATER][dhwheater] [0] or [DHWLOOPHEATER][dhwloopheater] [1] change in tank heat content, Btu</li> <li>(HPWH types only, + = increase in tank temp)</li> </ul> S.qError[index] number Array [2] End of subhour <ul> <li>[DHWHEATER][dhwheater] [0] or [DHWLOOPHEATER][dhwloopheater] [1] HPWH internal heat balance error, Btu</li> <li>included in DHWSYSRES balance to hide HPWH unbalance</li> <li>pending investigation 5/2022</li> </ul> S.qXBUDHW number End of subhour extra backup heating allocated to DHW, Btu (+ = to DHWSYS, &gt;= 0) S.qXBUHtg number End of subhour extra backup heating allocated to space heating, Btu (+ = to DHWSYS, &gt;= 0) S.qBal number End of subhour <ul> <li>sum of energy flows, Btu = (qOutDHW + qOutHtg) - Sum( everything else)</li> <li>s/b 0; &gt;=0 means more output than input</li> </ul>"},{"location":"probe-definitions/DHWSolarCollector/","title":"DHWSolarCollector","text":"<p>title: DHWSolarCollector ---</p> Name Type Variability Description/Comments mult FLOAT_GZ input time multiplier (for multiple panels). Default 1. multLR FLOAT_GZ End of run last run multiplier, re probing in chained runs <p>Collector</p> Name Type Variability Description/Comments area FLOAT_GZ input time SRCC collector area, ft2 tilt ANGLE input time Array tilt, radians (input as degrees) azm ANGLE input time Array azimuth, radians (input as degrees) testFRUL number input time SRCC test (rated) slope, Btuh/F-ft2 testFRTA FLOAT_GZ input time SRCC test (rated) intercept testMassFlow FLOAT_GZ input time collector loop SRCC rating mass flow rate, lb/h-ft2 oprMassFlow FLOAT_GZ input time collector loop operating mass flow rate, lb/h-ft2 kta60 number input time <ul> <li>incidence angle modifier at 60 deg (from SRCC rating)</li> <li>default 0.72</li> <li>&lt;= 0: IAM not applied</li> </ul> Name Type Variability Description/Comments piping collector piping info (length, insul, UA, ...) PIPERUN Name Type Variability Description/Comments piping.len FLOAT_GEZ Start of run segment length, ft piping.size FLOAT_GZ Start of run <ul> <li>nominal pipe size (diameter), in</li> <li>pipe actual OD = ps_size + 0.125</li> </ul> piping.insulK FLOAT_GZ Start of run insulation conductivity, Btuh-ft/ft2-F piping.insulThk FLOAT_GEZ Start of run insulation thickness, in piping.exH FLOAT_GZ Start of run combined exterior surface coefficient, Btuh/ft2-F Name Type Variability Description/Comments piping.count DBL Start of run # of segments included in totals piping.len DBL Start of run length, ft piping.vol DBL Start of run volume, gal piping.exArea DBL Start of run outside surface area (at insulation surface), ft2 piping.UA DBL Start of run fluid-to-surround loss, Btuh/F-hr Name Type Variability Description/Comments piping.beta number Start of subhour temperature loss (1 - approach-to-surround) factor pipingTEx number End of hour collector piping surround temp <p>derived constants</p> Name Type Variability Description/Comments areaTot FLOAT_GZ Start of run total area, ft2 (=sc_area*sc_mult) flowCorrection number Start of run <ul> <li>flow correction factor</li> <li>sc_oprFRxx = sc_testFRxx * sc_flowCorrection</li> </ul> oprFRUL number Start of run operating (flow-corrected) collector slope, Btuh/F-ft2 oprFRTA FLOAT_GZ Start of run operating (flow-corrected) collector intercept oprMCp number Start of run operating heat capacity flow rate, Btuh/F (not per ft2) oprVolFlow number Start of run <ul> <li>nominal collector loop volume flow rate, gpm (not gpm/ft2)</li> <li>derived from sc_oprMassFlow</li> </ul> b0 number Start of run <ul> <li>incidence angle modifier coefficient</li> <li>(derived from sc_Kta60)</li> </ul> ktaDS number Start of run <ul> <li>tau-alpha modifier (kta) for sky diffuse radiation</li> <li>(constant, depends on sc_tilt only)</li> </ul> ktaDG number Start of run <ul> <li>tau-alpha modifier (kta) ground-reflected diffuse radiation</li> <li>(constant, depends on sc_tilt only)</li> </ul> <p>Calculated values</p> Name Type Variability Description/Comments incA number End of hour beam angle of incidence, radians (PI/2 if no beam) ktaDB number End of hour tau-alpha modifier (kta) for beam (varies by hour) <ul> <li>plane of array irradiance, Btu/ft2</li> <li>adjusted by sc_ktaXX if incidence angle modifier (IAM) active</li> </ul> Name Type Variability Description/Comments poaRadDB number End of hour beam poaRadDS number End of hour diffuse from sky poaRadDG number End of hour diffuse from ground poaRadTot number End of hour total poaRadIAM number End of hour <ul> <li>component-weighted IAM factor</li> <li>= sc_poaRadTot / radTot_unadjusted</li> </ul> <p>Pump</p> Name Type Variability Description/Comments pumpPwr FLOAT_GEZ Start of run pump power, W tickPumpQ number Start of run pump input energy per tick, Btu pumpLiqHeatF number Start of run <ul> <li>fraction of sc_pumpPwr added to liquid stream</li> <li>remainder is discarded</li> </ul> pumpDT number Start of run fluid temp increase due to pump, F pumpOnDeltaT number Start of run <ul> <li>temperature difference between the</li> <li>tank and collector outlet where pump</li> <li>turns on, F</li> </ul> pumpOffDeltaT number Start of run <ul> <li>temperature difference between the</li> <li>tank and collector outlet where pump</li> <li>turns off, F</li> </ul> <ul> <li>this hour linear coefficients</li> <li>tOutlet = sc_tOutletM*tSup + sc_tOutletB</li> <li>eff = sc_effM*tSup + sc_effB</li> </ul> Name Type Variability Description/Comments tOutletM number End of hour tOutletB number End of hour effM number End of hour effB number End of hour Name Type Variability Description/Comments tInlet number End of subhour tick inlet temp, F (at tank / before to-collector piping) eff number End of hour fraction of incident heat added to the fluid tickQFluid number End of subhour tick heat added to the fluid, Btu hrQFluid number End of hour hour total heat added to fluid, Btu totQFluid DBL End of run run total sc_qFluid total, Btu tOutletP number End of hour <ul> <li>tick potential outlet temp, F</li> <li>used to determine if collector should run</li> </ul> tOutlet number End of hour tick outlet temp, F (at tank / after from-collector piping) Name Type Variability Description/Comments tickVol number End of subhour volume moved during this tick, gal tickOp number End of subhour nz iff pump is operating during prior tick Name Type Variability Description/Comments pumpInElec number End of hour actual electricity use (note not kWh)"},{"location":"probe-definitions/DHWSolarSys/","title":"DHWSolarSys","text":"<p>title: DHWSolarSys ---</p> Name Type Variability Description/Comments elecMtri TI input time meter for pump and parasitic electricity use endUse choice:ENDUSE input time end use of pump energy. defaults to \"DHW\" parElec FLOAT_GEZ Start of hour parasitic electricity use, W Name Type Variability Description/Comments wsCount number Start of run <ul> <li># of [DHWSYSs][dhwsys] supplied by this [DHWSOLARSYS][dhwsolarsys]</li> <li>(re detection of orphan [DHWSOLARSYSs][dhwsolarsys])</li> </ul> Name Type Variability Description/Comments scAreaTot number Start of run total of child DHWSOLARCOLLECTORS, ft2 scCount number Start of run <ul> <li># of child DHWSOLARCOLLECTORS (not necessarily # of panels)</li> <li>= SUM( sc_mult)</li> </ul> <p>Tank</p> Name Type Variability Description/Comments tank interface to Ecotope HPWH model (used as tank) HPWHLINK Name Type Variability Description/Comments tank.HSCount number End of subhour # of HPWH heatsources in use for current config tank.tEx number End of subhour tank surround temp, F tank.tASHPSrc number End of subhour temp of heat pump air source, F Name Type Variability Description/Comments tank.nQTXNodes number End of subhour <ul> <li># of tank 1/12s used in hw_qTX extra tank heat</li> <li>corresponds to nodes for HPWH default 12 node setup</li> </ul> Name Type Variability Description/Comments tank.fMixUse number End of subhour <ul> <li>factor for draw adjustment re HPWH setpoint &gt; [DHWSYS][dhwsys]::ws_tUse</li> <li>Some HPWHs (e.g. SANCO2) have fixed (high) setpoints</li> <li>draws are reduced to balance load at ws_tUse.</li> </ul> tank.fMixRL number End of subhour <ul> <li>factor for loop return flow adjustment re HPWH setpoint &gt; [DHWSYS][dhwsys]::ws_tUse</li> <li>Some HPWHs (e.g. SANCO2) have fixed (high) setpoints</li> <li>Loop return flow is reduced to balance load at ws_tUse.</li> </ul> Name Type Variability Description/Comments tank.inElec[index] DBL Array [2] End of subhour <ul> <li>current subhr HPWH electricity use, kWh</li> <li>[0]=primary(=compressor or non-HP resistance) + misc</li> <li>[1]=resistance backup (iff HP) (not including hw_HPWHxBU)</li> </ul> tank.heatAdded[index] DBL Array [2] End of subhour <ul> <li>current subhr HPWH heat added to water, kWh</li> <li>[0]=primary(=compressor or non-HP resistance)</li> <li>[1]=resistance backup (iff HP) (not including hw_HPWHxBU)</li> </ul> tank.tOut DBL End of subhour <ul> <li>last tick HPWH outlet temp, C</li> <li>0 if no draw</li> </ul> tank.tOutCHDHW DBL End of subhour <ul> <li>last tick output temp available to CHDHW, F</li> <li>0 if no draw</li> </ul> tank.HPWHxBU number End of subhour <ul> <li>current subhr HPWH add'l backup resistance heat, Btu</li> <li>output water heated to ws_tUse iff HPWH output temp &lt; ws_tUse</li> </ul> tank.qEnv DBL End of subhour <ul> <li>current subhr heat removed by HPWH from environment, kWh</li> <li>+ = to water heater; for 1 [DHWHEATER][dhwheater] (no wh_mult)</li> </ul> tank.qLoss DBL End of subhour <ul> <li>current subhr HPWH standby losses, kWh.  + = to surround</li> <li>for 1 [DHWHEATER][dhwheater] (no wh_mult)</li> </ul> tank.qHW DBL End of subhour <ul> <li>current subhr HPWH total delivered hot water heating, kWh.  always &gt;= 0</li> <li>for 1 [DHWHEATER][dhwheater] (no wh_mult)</li> <li>calc'd from flows and temp diffs (unlike hw_heatAdded)</li> <li>includes heat to [DHWLOOP][dhwloop] and CHDHW, does not include hw_HPWHxBU</li> </ul> tank.qTX DBL End of subhour current subhr extra heat tank heat added, kWh (not Btu) Name Type Variability Description/Comments tank.tankHCNominal number End of subhour <ul> <li>nominal HPWH tank heat content, kWh (at 40 C)</li> <li>used as normalizing factor for energy balance checks</li> </ul> tank.tankHCBeg DBL End of subhour current step beginning tank heat content, kWh tank.tankHCEnd DBL End of subhour current step end tank heat content, kWh Name Type Variability Description/Comments tank.tHWOutF DBL End of subhour current substep working total re calc of hw_tHWOut tank.nzDrawCount number End of subhour current substep # of draws &gt; 0 tank.tHWOut number End of subhour <ul> <li>average hot water temp, F (at water heater)</li> <li>includes XBU: hw_tHWOut &gt;= ws_tUse</li> <li>calc'd at substep end only</li> </ul> Name Type Variability Description/Comments tank.bWriteCSV number End of subhour write HPWH debugging CSV iff nz Name Type Variability Description/Comments tank.qBal DBL End of subhour current step HPWH heat balance, kWh (s/b 0) tank.balErrCount number End of subhour annual count of energy balance errors tank.balErrMax DBL End of subhour maximum substep energy balance error for run, kWh tankVol FLOAT_GZ Start of run <ul> <li>tank volume, gal</li> <li>default: 1.5 gal/ft2 collector area</li> </ul> tankUA FLOAT_GEZ Start of run <ul> <li>tank water-to-air UA, Btuh/F</li> <li>default: derived from sw_tankVol and sw_tankInsulR</li> </ul> tankInsulR FLOAT_GZ Start of run <ul> <li>total tank insulation resistance, hr-F/Btuh</li> <li>= built-in + exterior wrap</li> </ul> tankZnTi TI input time <ul> <li>Tank location zone re tank loss</li> <li>0 iff sw_tankTEx being used</li> <li>heat losses go to half to zone air / half radiant</li> </ul> tankTEx number Start of hour <ul> <li>surrounding temperature, F for tank loss</li> <li>when sw_tankTEx set</li> <li>- sw_tankZnTi ignored</li> <li>- heat loss discarded</li> </ul> tankTAvg number End of hour hour average tank temp, F (check figure) tankQLoss number End of hour <ul> <li>current hour's total tank loss, Btu</li> <li>for 1 tank (sw_mult)</li> </ul> tankHXEff number Start of hour tank heat exchanger effectiveness tankTHxLimit FLOAT_GZ input time <ul> <li>tank temp limit, F; collector heat</li> <li>discarded when sw_tankTHx &gt; sw_tankTHxLimit</li> <li>default = 180 F</li> </ul> overHeatTkCount number End of hour <ul> <li># of ticks in this hour when collector did not run</li> <li>due to swtankTHx &gt; sw_tankTHxLimit</li> </ul> Name Type Variability Description/Comments tickVol number End of subhour current tick draw to DHWSYSs, gal tickVolT number End of subhour current tick (vol * inlet temp), gal-F tickTankTOutlet number End of subhour current tick tank outlet temp Name Type Variability Description/Comments drawVol number End of hour current hour total draw, gal tankQGain number End of hour current hour total gain from solar HX (all collectors), Btu tankQGainTot DBL End of run sw_tankQGain annual total, Btu tankTInlet number End of hour tank inlet temperature, F tankTOutlet number End of hour current hour average tank outlet temperature, F tankTHx number End of hour <ul> <li>nominal tank heat exchange temp, F</li> <li>= avg of bottom several tank node temps</li> <li>used re heat exchange from collector loop</li> </ul> totOut number End of hour <ul> <li>current hour total [DHWSOLARSYS][dhwsolarsys] output, Btu</li> <li>= heat delivered to primary heater</li> </ul> <p>Collector Fluid</p> Name Type Variability Description/Comments scFluidSpHt FLOAT_GZ input time collector working fluid specific heat, Btu/lbm-F scFluidDens FLOAT_GZ input time collector working fluid density, lb/ft3 scFluidVHC FLOAT_GZ Start of run <ul> <li>collector working fluid volumetric heat capacity, Btu/gal-F</li> <li>derived from sw_scFluidSpHt and scFluidDens</li> </ul> scTInlet number End of hour mixed collector inlet temperature, F scTOutlet number End of hour mixed collector outlet temperature, F <p>annual results</p> Name Type Variability Description/Comments overHeatHrCount number End of run <ul> <li>number of hours during which collector did not</li> <li>run (for 1 tick or more)</li> <li>due to swtankTHx &gt; sw_tankTHxLimit</li> </ul> SSFAnnual number End of run <ul> <li>annual solar savings fraction</li> <li>derived from all [DHWSYSs][dhwsys] served</li> </ul>"},{"location":"probe-definitions/DHWTank/","title":"DHWTank","text":"<p>title: DHWTank ---</p> Name Type Variability Description/Comments mult number input time <ul> <li>count of identical DHW tanks (default 1)</li> <li>models as if repeated identical input</li> </ul> UA FLOAT_GEZ input time <ul> <li>tank water-to-air UA, Btuh/F</li> <li>default: derived from wt_vol and wt_insulR</li> </ul> vol FLOAT_GEZ input time tank volume, gal insulR FLOAT_GZ input time <ul> <li>total tank insulation resistance, hr-F/Btuh</li> <li>= built-in + exterior wrap</li> </ul> tTank number Start of hour <ul> <li>assumed tank water temperature, F</li> <li>default = [DHWSYS][dhwsys] ws_tUse</li> </ul> znTi TI input time <ul> <li>[DHWTANK][dhwtank] location zone re tank loss</li> <li>0 iff wt_tEx being used</li> <li>heat losses go to half to zone air / half radiant</li> </ul> tEx number Start of hour <ul> <li>surrounding temperature, F for tank loss</li> <li>when wt_tEx set</li> <li>- wt_znTi ignored</li> <li>- heat loss discarded</li> </ul> xLoss number Start of hour <ul> <li>other tank temp-independent losses, Btuh</li> <li>for e.g. T24 fitting losses</li> </ul> qLossSh number End of subhour current subhr loss rate, Btuh qLoss number End of hour <ul> <li>current hour's total loss, Btu</li> <li>for 1 tank (no wt_mult)</li> </ul>"},{"location":"probe-definitions/DHWUse/","title":"DHWUse","text":"<p>title: DHWUse ---</p> Name Type Variability Description/Comments hwEndUse choice:DHWEU input time <ul> <li>hot water end use</li> <li>0 = unknown</li> <li>C_DHWEUCH_FAUCET, _SHOWER, _BATH, _CWASHR, _DWASHR</li> </ul> eventID SI_GEZ input time <ul> <li>user-defined index that identifies [DHWUSEs][dhwuse] belonging to a single</li> <li>event (e.g. all [DHWUSEs][dhwuse] of a clotheswasher cycle).</li> <li>Used re allocation of [DHWUSEs][dhwuse] to multiple water heaters.</li> <li>Input values are *at fixture*</li> </ul> start FLOAT_GEZ Start of hour draw starting hour of day, 0 - 23.999 dur FLOAT_GEZ Start of hour flow duration, min flow FLOAT_GEZ Start of hour mixed flow rate, gpm hotF number Start of hour <ul> <li>fraction hot water, default = 1</li> <li>input value used iff wu_temp NOT given</li> </ul> temp FLOAT_GZ Start of hour <ul> <li>use temperature, F.  If given,</li> <li>hot water draw is calculated assuming</li> <li>cold water mixing (mains or from heat rec)</li> </ul> heatRecEF FLOAT_GEZ Start of hour <ul> <li>heat recovery effectiveness</li> <li>re local drain water heat exchange</li> <li>Must be 0 for C_DHWEUCH_SHOWER if [DHWSYS][dhwsys] has [DHWHEATREC][dhwheatrec].</li> <li>Checked at runtime only since [DHWDAYUSE][dhwdayuse] use by [DHWSYS][dhwsys]</li> <li>can change daily.</li> </ul> drawSeqN number Start of run <ul> <li>sequence number of draw by ws_hwEndUse</li> <li>assigned at runtime, see wdu_RunInit()</li> <li>used re random assignment of draws to [DHWHEATRECs][dhwheatrec]</li> </ul>"},{"location":"probe-definitions/DUCTSEGRes/","title":"DUCTSEGRes","text":"<p>title: DUCTSEGRes ---</p> Name Type Variability Description/Comments Y run results, aka year or annual DUCTSEGRES_IVL_SUB Name Type Variability Description/Comments Y.n number End of run <ul> <li>number of intervals added together in this one (divisor for averages)</li> <li>(maintained but unused)</li> </ul> <ul> <li>float members: qhCond is first, xx is last (see code)</li> <li>heating values when rsmHEAT, cooling otherwise (rsmCOOL or rsmOAV)</li> <li>+ = out of duct</li> </ul> Name Type Variability Description/Comments Y.qhCond ENERGY End of run heating conduction, Btu Y.qhLeakSen ENERGY End of run heating leakage sensible, Btu Y.qhTotSen ENERGY End of run heating total sensible, Btu Name Type Variability Description/Comments Y.qcCond ENERGY End of run cooling conduction, Btu Y.qcLeakSen ENERGY End of run cooling leakage sensible, Btu Y.qcTotSen ENERGY End of run cooling total sensible, Btu Y.qcLeakLat ENERGY End of run cooling leakage latent, Btu M month DUCTSEGRES_IVL_SUB Name Type Variability Description/Comments M.n number Unknown <ul> <li>number of intervals added together in this one (divisor for averages)</li> <li>(maintained but unused)</li> </ul> <ul> <li>float members: qhCond is first, xx is last (see code)</li> <li>heating values when rsmHEAT, cooling otherwise (rsmCOOL or rsmOAV)</li> <li>+ = out of duct</li> </ul> Name Type Variability Description/Comments M.qhCond ENERGY Unknown heating conduction, Btu M.qhLeakSen ENERGY Unknown heating leakage sensible, Btu M.qhTotSen ENERGY Unknown heating total sensible, Btu Name Type Variability Description/Comments M.qcCond ENERGY Unknown cooling conduction, Btu M.qcLeakSen ENERGY Unknown cooling leakage sensible, Btu M.qcTotSen ENERGY Unknown cooling total sensible, Btu M.qcLeakLat ENERGY Unknown cooling leakage latent, Btu D day DUCTSEGRES_IVL_SUB Name Type Variability Description/Comments D.n number End of day <ul> <li>number of intervals added together in this one (divisor for averages)</li> <li>(maintained but unused)</li> </ul> <ul> <li>float members: qhCond is first, xx is last (see code)</li> <li>heating values when rsmHEAT, cooling otherwise (rsmCOOL or rsmOAV)</li> <li>+ = out of duct</li> </ul> Name Type Variability Description/Comments D.qhCond ENERGY End of day heating conduction, Btu D.qhLeakSen ENERGY End of day heating leakage sensible, Btu D.qhTotSen ENERGY End of day heating total sensible, Btu Name Type Variability Description/Comments D.qcCond ENERGY End of day cooling conduction, Btu D.qcLeakSen ENERGY End of day cooling leakage sensible, Btu D.qcTotSen ENERGY End of day cooling total sensible, Btu D.qcLeakLat ENERGY End of day cooling leakage latent, Btu H hour. DUCTSEGRES_IVL_SUB Name Type Variability Description/Comments H.n number End of hour <ul> <li>number of intervals added together in this one (divisor for averages)</li> <li>(maintained but unused)</li> </ul> <ul> <li>float members: qhCond is first, xx is last (see code)</li> <li>heating values when rsmHEAT, cooling otherwise (rsmCOOL or rsmOAV)</li> <li>+ = out of duct</li> </ul> Name Type Variability Description/Comments H.qhCond ENERGY End of hour heating conduction, Btu H.qhLeakSen ENERGY End of hour heating leakage sensible, Btu H.qhTotSen ENERGY End of hour heating total sensible, Btu Name Type Variability Description/Comments H.qcCond ENERGY End of hour cooling conduction, Btu H.qcLeakSen ENERGY End of hour cooling leakage sensible, Btu H.qcTotSen ENERGY End of hour cooling total sensible, Btu H.qcLeakLat ENERGY End of hour cooling leakage latent, Btu S subhour, aka subStep or sub-time-step DUCTSEGRES_IVL_SUB Name Type Variability Description/Comments S.n number End of subhour <ul> <li>number of intervals added together in this one (divisor for averages)</li> <li>(maintained but unused)</li> </ul> <ul> <li>float members: qhCond is first, xx is last (see code)</li> <li>heating values when rsmHEAT, cooling otherwise (rsmCOOL or rsmOAV)</li> <li>+ = out of duct</li> </ul> Name Type Variability Description/Comments S.qhCond ENERGY End of subhour heating conduction, Btu S.qhLeakSen ENERGY End of subhour heating leakage sensible, Btu S.qhTotSen ENERGY End of subhour heating total sensible, Btu Name Type Variability Description/Comments S.qcCond ENERGY End of subhour cooling conduction, Btu S.qcLeakSen ENERGY End of subhour cooling leakage sensible, Btu S.qcTotSen ENERGY End of subhour cooling total sensible, Btu S.qcLeakLat ENERGY End of subhour cooling leakage latent, Btu"},{"location":"probe-definitions/DuctSeg/","title":"DuctSeg","text":"<p>title: DuctSeg ---</p> Name Type Variability Description/Comments ty choice:DUCTTY input time type: C_DUCTTYCH_RET / _SUP Name Type Variability Description/Comments absSlr number Start of subhour solar (SW) absorptance, dimless awAbsSlr DBL Start of subhour <ul> <li>area-weighted solar absorptance</li> <li>= sb_absSlr * area / zn_surfASlr</li> <li>exterior surf outside: always 0</li> <li>windows inside: TBD 12-8-10</li> <li>ducts: always 0</li> </ul> epsLW number Start of subhour thermal (LW) emittance zi TI Start of subhour adjacent zone idx, 0 if exposed to ambient F DBL Start of subhour solar (short wave) fraction ?  TODO: NOT USED? as of 4-2012 Fp DBL Start of subhour <ul> <li>\"view factor\" to zone radiant temp, dimless.  Includes Oppenheim surface conductance.</li> <li>aka \"F-prime\" in CZM documentation.</li> </ul> Name Type Variability Description/Comments frRad DBL Start of subhour re radiant to radiant temp (room radiant node or sky) fSky DBL Start of subhour \"view factor\" to radiant surround at sky temp fAir DBL Start of subhour \"view factor\" to radiant surround at air temp (ground, horizon) Name Type Variability Description/Comments hcNat FLOAT_GEZ End of subhour surface natural convection coefficient, Btuh/ft2-F hcFrc FLOAT_GEZ End of subhour surface forced (wind) convection coefficient, Btuh/ft2-F hcMult FLOAT_GEZ End of subhour surface convection coefficient multiplier, dimless hxa FLOAT_GEZ End of subhour overall coeff to sb_txa = sb_hcMult*(sb_hcNat + sb_hcFrc), Btuh/ft2-F hxr FLOAT_GEZ End of subhour <ul> <li>surface (linearized) radiative coefficient, Btuh/ft2-F</li> <li>= coupling to sb_txr</li> </ul> hxtot number End of subhour sb_hxa + sb_hxr uRat DBL End of subhour <ul> <li>ratio uC/(sb_hxa + sb_hxr + uC)</li> <li>= 1/(1 + rC*(sb_hxa + sb_hxr))</li> <li>where uC = surface-to-surface conductance</li> <li>rC = 1/uC</li> <li>but: duct model outside surf to duct air</li> </ul> Name Type Variability Description/Comments fRat DBL End of subhour <ul> <li>sb_hxtot * sb_uRat, Btuh/ft2-F</li> <li>= overall conductance not including other side</li> <li>surface resistances</li> <li>(ducts: overall conductance from duct air to sb_txe)</li> </ul> cx DBL End of subhour air/radiant coupling due to this surface, Btuh/ft2-F Name Type Variability Description/Comments sgTarg solar gain target: bm, df gain from insolation SGTARG Name Type Variability Description/Comments sgTarg.bm DBL End of subhour beam sgTarg.df DBL End of subhour diffuse sgTarg.tot DBL End of subhour total sg DBL End of subhour absorbed solar total, Btuh (NOT Btuh/ft2), summed from sb_sgTarg Name Type Variability Description/Comments tSrf number End of subhour most recently calculated surface temp, F tSrfls number Start of subhour <ul> <li>last step surface temp, F</li> <li>copied from sb_tSrf at step end</li> <li>not *e (available for probing)</li> </ul> qrAbs DBL End of subhour <ul> <li>total absorbed radiant heat gain at surface, Btuh/ft2 (+ = into surface)</li> <li>= (sb_sg + sb_rIg)/area</li> </ul> txa number End of subhour <ul> <li>adjacent air temp, F (from prior step)</li> <li>inside: prior step zone tz</li> <li>outside: current step ambient dry bulb temp</li> </ul> txr number End of subhour <ul> <li>adjacent radiant temp, F</li> <li>inside: prior step zone tr</li> <li>outside: current step sky temp</li> </ul> txe number End of subhour <ul> <li>adjacent environmental temp, F</li> <li>combined sb_txa and sb_txr; simplifies calcs in some cases</li> <li>set but unused? for inside</li> <li>set/used for ASHWAT outside</li> </ul> w DBL End of subhour <ul> <li>adjacent air humidity ratio if known (else 0)</li> <li>used re duct leakage</li> </ul> qSrf DBL End of subhour <ul> <li>conduction into surface, Btuh/ft2</li> <li>updated at end of timestep</li> </ul> Name Type Variability Description/Comments pDS DUCTSEGP Start of subhour pointer to parent DUCTSEG Name Type Variability Description/Comments exArea FLOAT_GEZ input time <ul> <li>exterior heat transfer surface area, ft2 (outside of insulation)</li> <li>if input, flat area-only model is used, many inputs have no effect</li> <li>if NOT input, round ducts assumed</li> </ul> Name Type Variability Description/Comments diam FLOAT_GZ input time duct diameter (w/o insulation), ft len FLOAT_GEZ input time total length (all branches), ft branchLen FLOAT_GZ Start of run average branch length, ft branchCount SI_GZ input time # of branches branchCFA FLOAT_GZ input time <ul> <li>floor area served per per branch, ft2</li> <li>used re default ds_branchCount</li> </ul> airVelDs FLOAT_GZ input time <ul> <li>design air velocity, fpm</li> <li>re flow-based sizing</li> </ul> Name Type Variability Description/Comments inArea FLOAT_GEZ input time <ul> <li>interior surface area, ft2</li> <li>= inside wetted area / duct surf area w/o insulation</li> <li>(duct wall thickness assumed negligible)</li> </ul> Name Type Variability Description/Comments insulR FLOAT_GEZ input time rated insulation resistance, ft2-F/Btuh insulMati TI input time insulation material, 0 if none Name Type Variability Description/Comments insulKA DBL Start of run constants for insul conductivity: kInsul = kA + kB*T insulKB DBL Start of run insulThk FLOAT_GEZ Start of run insulation actual thickness, ft insulThkEff number Start of run <ul> <li>effective insulation thickness, ft</li> <li>includes outside/inside geometry effects</li> <li>derived from input or estimated; can be 0</li> </ul> RconvIn DBL Start of phase <ul> <li>inside surfce convection resistance, ft2-F/Btuh</li> <li>based on *exterior* area (i.e. value to be used in series with</li> <li>effective duct insulation resistance; typ value = 0.4</li> </ul> Rduct DBL End of hour <ul> <li>total resistance from duct air to exterior surface of insulation</li> <li>(not including exterior surface conductances), ft2-F/Btuh</li> <li>based on *exterior* (exposed) area</li> <li>updated hourly re temp-dependent insul conductivity</li> <li>Never 0 assuming rs_RconvIn &gt; 0</li> </ul> Uduct DBL End of hour 1/ds_Rduct Name Type Variability Description/Comments insulREff number End of hour <ul> <li>effective insulation resistance, ft2-F/Btuh</li> <li>includes all adjustments for geometry and temperatures</li> </ul> Name Type Variability Description/Comments exCnd choice:EXCND input time adjacent cond: adiabatic/ambient/specT/adjZn. Name Type Variability Description/Comments leakF number input time <ul> <li>leakage fraction, 0-1</li> <li>return: leak is modelled at duct inlet (return register)</li> <li>supply: leak is modelled at duct outlet (supply register)</li> </ul> uaTot DBL End of subhour <ul> <li>cur step total conductance between duct air</li> <li>and surrounding equivalent temp, Btuh/F</li> </ul> Name Type Variability Description/Comments beta number End of subhour <ul> <li>cur step conduction loss parameter (1 - effectiveness)</li> <li>depends only on ds_uaTot and air mass flow</li> </ul> Name Type Variability Description/Comments air[index] Array [4] <ul> <li>cur step air states</li> <li>[ 0]=entering</li> <li>[ 1]=after leak addition (return only)</li> <li>[ 2]=average (consistent w/ conduction loss)</li> <li>[ 3]=leaving</li> </ul> AIRSTATE Name Type Variability Description/Comments air[index].tdb DBL End of subhour air dry-bulb temp, F air[index].w DBL End of subhour air humidity ratio, lb moisture/lb dry air Name Type Variability Description/Comments amfFL DBL End of subhour dry air mass flow rate at full load, lbm/hr qCondFL DBL End of subhour <ul> <li>full load total conduction losses to surround (+ = out of duct), Btuh</li> <li>(may be old: from last calc when rsMode != rsmOFF)</li> </ul> qCond DBL End of subhour <ul> <li>total conduction loss rate to surround (+ = out of duct), Btuh</li> <li>(may be old: from last calc when rsMode != rsmOFF)</li> </ul> qCondAir DBL End of subhour ... to txa (air) qCondRad DBL End of subhour <ul> <li>... to txr (radiant)</li> <li>ds_qCond = ds_qCondAir + ds_qCondRad</li> </ul> qLeakSen DBL End of subhour leakage sensible heat loss rate, Btuh (+ = out of duct) qLeakLat DBL End of subhour leakage latent heat loss rate, Btuh (+ = out of duct)"},{"location":"probe-definitions/Inverse/","title":"Inverse","text":"<p>title: Inverse ---</p> Name Type Variability Description/Comments freq choice:IVL Start of run X0 number Start of run Y0 number Start of run YTarg number Start of run Name Type Variability Description/Comments X number Post-calc phase of subhour Y number Post-calc phase of subhour Name Type Variability Description/Comments XEst number input time"},{"location":"probe-definitions/LOADMETER/","title":"LOADMETER","text":"<p>title: LOADMETER ---</p> Name Type Variability Description/Comments subMtri[index] TI Array [DIM_SUBMETERLIST] Start of run submeters subMtrMult[index] number Array [DIM_SUBMETERLIST] Start of subhour submeter multipliers <ul> <li>accumulated values for each interval</li> <li>CAUTION: ordered for subscripting by IVLCH-1</li> </ul> Name Type Variability Description/Comments Y run (aka year or annual) LOADMTR_IVL Name Type Variability Description/Comments Y.count number End of run # of accums   energy use  Name Type Variability Description/Comments Y.qHtg number End of run heating energy, Btu (assumed to be first float) Y.qClg number End of run cooling energy, Btu M month LOADMTR_IVL Name Type Variability Description/Comments M.count number Unknown # of accums   energy use  Name Type Variability Description/Comments M.qHtg number Unknown heating energy, Btu (assumed to be first float) M.qClg number Unknown cooling energy, Btu D day LOADMTR_IVL Name Type Variability Description/Comments D.count number End of day # of accums   energy use  Name Type Variability Description/Comments D.qHtg number End of day heating energy, Btu (assumed to be first float) D.qClg number End of day cooling energy, Btu H hour LOADMTR_IVL Name Type Variability Description/Comments H.count number End of hour # of accums   energy use  Name Type Variability Description/Comments H.qHtg number End of hour heating energy, Btu (assumed to be first float) H.qClg number End of hour cooling energy, Btu S subhour LOADMTR_IVL Name Type Variability Description/Comments S.count number End of subhour # of accums   energy use  Name Type Variability Description/Comments S.qHtg number End of subhour heating energy, Btu (assumed to be first float) S.qClg number End of subhour cooling energy, Btu"},{"location":"probe-definitions/PERFORMANCEMAP/","title":"PERFORMANCEMAP","text":"<p>title: PERFORMANCEMAP ---</p> Name Type Variability Description/Comments gxCount number Start of run count of child PMGRIDAXISs (= # of map dimensions) luNValuesExp number Start of run expected count of PMLOOKUPDATA values = product of # of grid dimensions"},{"location":"probe-definitions/PMGRIDAXIS/","title":"PMGRIDAXIS","text":"<p>title: PMGRIDAXIS ---</p> Name Type Variability Description/Comments type CULSTR input time <ul> <li>axis type (e.g. \"DBT\")</li> <li>cannot use [PMGRIDAXIS][pmgridaxis].name</li> <li>multiple [PMGRIDAXISs][pmgridaxis] may use same pmx_type</li> </ul> nValues number input time # of pmx_values found in input values[index] number Array [11] input time axis values Name Type Variability Description/Comments refValue number input time <ul> <li>nominal or reference value of axis</li> <li>e.g. 95 for cooling ODT</li> <li>used for normalizing and data consistency checking</li> </ul>"},{"location":"probe-definitions/PMLOOKUPDATA/","title":"PMLOOKUPDATA","text":"<p>title: PMLOOKUPDATA ---</p> Name Type Variability Description/Comments type CULSTR input time data identifier nValues number input time # of pm_values found in input values[index] number Array [700] input time lookup values in gridaxis order"},{"location":"probe-definitions/PVArray/","title":"PVArray","text":"<p>title: PVArray ---</p> Name Type Variability Description/Comments mounting choice:MOUNT input time <ul> <li>mounting</li> <li>C_MOUNTCH_BLDG: attached to bldg (rotates per [bldgAzm][bldgazm])</li> <li>C_MOUNTCH_SITE: site base (does not rotate)</li> </ul> pnIdx number input time <ul> <li>Penumbra surface index</li> <li>-1 if no Penumbra surface</li> </ul> area DBL input time area derived from polygon, ft2 Name Type Variability Description/Comments fBeam number End of hour <ul> <li>fraction of area receiving direct beam</li> <li>1 if no Penumbra shading</li> </ul> fBeamErrCount number End of hour <ul> <li>counter for fBeam &gt; 1 errors</li> <li>limits # of runtime messages</li> </ul> Name Type Variability Description/Comments vrtInp[index] number Array [DIM_POLYGONXYZ] input time input vertices (x, y, z), ft Name Type Variability Description/Comments elecMtri TI input time meter for system electricity production endUse choice:ENDUSE input time end use of energy. defaults to \"PV\" dcCap FLOAT_GEZ input time system capacity/size (DC nameplate), kW moduleType choice:PVMOD input time type of module (Standard, Premium, ThinFilm) tempCoeff number input time temperature coefficient, 1/F covRefrInd FLOAT_GE1 input time refraction index for coating applied to cover arrayType choice:PVARR input time type of array (Fixed, FixedRoof, 1Axis, Backtracked, 2Axis) tilt ANGLE Start of hour Array tilt, radians (input as degrees) azm ANGLE Start of hour Array azimuth, radians (input as degrees) grndRefl number Start of hour ground reflectance gcr number input time ground coverage ratio (what fraction of the ground is covered by the array). 1.0 implies no spacing. dcacRat FLOAT_GZ input time DC to AC ratio sif FLOAT_GE1 Start of hour Shading Impact Factor invEff number input time inverter efficiency at rated power sysLoss number Start of hour system losses tCell number End of hour cell temperature, F aoi number End of hour angle of incidence (radians) panelTilt ANGLE End of hour tilt of pv panel (different from array tilt for tracking systems), radians panelAzm ANGLE End of hour azimuth of pv panel (different from array tilt for tracking systems), radians panelRot ANGLE End of hour rotation of pv panel for 1-axis tracking systems, radians clockwise from vertical poa number End of hour plane of array incidence (before shading), Btu/h-ft2 poaBeam number End of hour plane of array beam incidence (before shading), Btu/h-ft2 radIBeam number End of hour beam radiation incident on array, Btu/h-ft2 radIBeamEff number End of hour effective beam radiation incident on array (accounts for shading impact factor), Btu/h-ft2 radI number End of hour total radiation incident on array, Btu/h-ft2 radIEff number End of hour effective total radiation incident on array (accounts for shading impact factor), Btu/h-ft2 radTrans number End of hour transmitted radiation (after accounting for shading impact), Btu/h-ft2 dcOut number End of hour DC power output, Btu acOut number End of hour AC power output, Btu Name Type Variability Description/Comments tauNorm number Start of run transmittance at normal incidence inoct TEMP Start of run installed nominal operating cell temperature, F convRatio number Start of run ratio of back convection to front convection tGrndRatio number Start of run ratio of ground-cell temperature diff. to air-cell temperature diff. radILs number End of hour last step (curently hour) total radiation incident on array, Btu/h-ft2 tCellLs number End of hour last step (curently hour) cell temperature, F"},{"location":"probe-definitions/PipeSeg/","title":"PipeSeg","text":"<p>title: PipeSeg ---</p> Name Type Variability Description/Comments len FLOAT_GEZ input time segment length, ft size FLOAT_GZ input time <ul> <li>nominal pipe size (diameter), in</li> <li>pipe actual OD = ps_size + 0.125</li> </ul> insulK FLOAT_GZ input time insulation conductivity, Btuh-ft/ft2-F insulThk FLOAT_GEZ input time insulation thickness, in exH FLOAT_GZ input time combined exterior surface coefficient, Btuh/ft2-F Name Type Variability Description/Comments absSlr number Start of subhour solar (SW) absorptance, dimless awAbsSlr DBL Start of subhour <ul> <li>area-weighted solar absorptance</li> <li>= sb_absSlr * area / zn_surfASlr</li> <li>exterior surf outside: always 0</li> <li>windows inside: TBD 12-8-10</li> <li>ducts: always 0</li> </ul> epsLW number Start of subhour thermal (LW) emittance zi TI Start of subhour adjacent zone idx, 0 if exposed to ambient F DBL Start of subhour solar (short wave) fraction ?  TODO: NOT USED? as of 4-2012 Fp DBL Start of subhour <ul> <li>\"view factor\" to zone radiant temp, dimless.  Includes Oppenheim surface conductance.</li> <li>aka \"F-prime\" in CZM documentation.</li> </ul> Name Type Variability Description/Comments frRad DBL Start of subhour re radiant to radiant temp (room radiant node or sky) fSky DBL Start of subhour \"view factor\" to radiant surround at sky temp fAir DBL Start of subhour \"view factor\" to radiant surround at air temp (ground, horizon) Name Type Variability Description/Comments hcNat FLOAT_GEZ End of subhour surface natural convection coefficient, Btuh/ft2-F hcFrc FLOAT_GEZ End of subhour surface forced (wind) convection coefficient, Btuh/ft2-F hcMult FLOAT_GEZ End of subhour surface convection coefficient multiplier, dimless hxa FLOAT_GEZ End of subhour overall coeff to sb_txa = sb_hcMult*(sb_hcNat + sb_hcFrc), Btuh/ft2-F hxr FLOAT_GEZ End of subhour <ul> <li>surface (linearized) radiative coefficient, Btuh/ft2-F</li> <li>= coupling to sb_txr</li> </ul> hxtot number End of subhour sb_hxa + sb_hxr uRat DBL End of subhour <ul> <li>ratio uC/(sb_hxa + sb_hxr + uC)</li> <li>= 1/(1 + rC*(sb_hxa + sb_hxr))</li> <li>where uC = surface-to-surface conductance</li> <li>rC = 1/uC</li> <li>but: duct model outside surf to duct air</li> </ul> Name Type Variability Description/Comments fRat DBL End of subhour <ul> <li>sb_hxtot * sb_uRat, Btuh/ft2-F</li> <li>= overall conductance not including other side</li> <li>surface resistances</li> <li>(ducts: overall conductance from duct air to sb_txe)</li> </ul> cx DBL End of subhour air/radiant coupling due to this surface, Btuh/ft2-F Name Type Variability Description/Comments sgTarg solar gain target: bm, df gain from insolation SGTARG Name Type Variability Description/Comments sgTarg.bm DBL End of subhour beam sgTarg.df DBL End of subhour diffuse sgTarg.tot DBL End of subhour total sg DBL End of subhour absorbed solar total, Btuh (NOT Btuh/ft2), summed from sb_sgTarg Name Type Variability Description/Comments tSrf number End of subhour most recently calculated surface temp, F tSrfls number Start of subhour <ul> <li>last step surface temp, F</li> <li>copied from sb_tSrf at step end</li> <li>not *e (available for probing)</li> </ul> qrAbs DBL End of subhour <ul> <li>total absorbed radiant heat gain at surface, Btuh/ft2 (+ = into surface)</li> <li>= (sb_sg + sb_rIg)/area</li> </ul> txa number End of subhour <ul> <li>adjacent air temp, F (from prior step)</li> <li>inside: prior step zone tz</li> <li>outside: current step ambient dry bulb temp</li> </ul> txr number End of subhour <ul> <li>adjacent radiant temp, F</li> <li>inside: prior step zone tr</li> <li>outside: current step sky temp</li> </ul> txe number End of subhour <ul> <li>adjacent environmental temp, F</li> <li>combined sb_txa and sb_txr; simplifies calcs in some cases</li> <li>set but unused? for inside</li> <li>set/used for ASHWAT outside</li> </ul> w DBL End of subhour <ul> <li>adjacent air humidity ratio if known (else 0)</li> <li>used re duct leakage</li> </ul> qSrf DBL End of subhour <ul> <li>conduction into surface, Btuh/ft2</li> <li>updated at end of timestep</li> </ul> Name Type Variability Description/Comments pPS PIPESEGP Start of subhour pointer to parent PIPESEG Name Type Variability Description/Comments exCnd choice:EXCND input time adjacent cond: adiabatic/ambient/specT/adjZn. exT number Start of hour surround temperature, F Name Type Variability Description/Comments totals <ul> <li>segment totals (re st_Accum() to parents)</li> <li>also retains vol, UA, exArea used in calcs</li> </ul> SEGTOTS Name Type Variability Description/Comments totals.count DBL Start of run # of segments included in totals totals.len DBL Start of run length, ft totals.vol DBL Start of run volume, gal totals.exArea DBL Start of run outside surface area (at insulation surface), ft2 totals.UA DBL Start of run fluid-to-surround loss, Btuh/F-hr fRhoCpX FLOAT_GZ Start of run <ul> <li>fluid volumetric heat flow factor, Btuh/gpm-F</li> <li>initialized for water, code otherwise general</li> </ul> fvf number End of hour fluid volumetric flow rate, gpm (note: not ft3/hr) tIn number End of hour current hour inlet fluid temp, F tOut number End of hour current hour outlet fluid temp, F PLWF number End of hour current hour heat loss when flowing, Btu PLCD number End of hour current hour standing (noflow) heat loss, Btu PL number End of hour ps_PLWF + ps_PLCD"},{"location":"probe-definitions/RSYS/","title":"RSYS","text":"<p>title: RSYS ---</p> Name Type Variability Description/Comments type RSYSTY input time system type (ACFURN, ACRES, ASHP, AC, FURN, RES) desc CULSTR input time <ul> <li>optional description string (e.g. model #)</li> <li>included in perf map,</li> </ul> generatePerfMap choice:NOYES input time <ul> <li>if YES, generate performance map (development aid)</li> <li>writes to file .csv</li> </ul> areaServed DBL Start of run total zone floor area served by this RSYS, ft2 zonesServed number Start of run # of zones served by this RSYS Name Type Variability Description/Comments elecMtri TI input time meter for system electricity use fuelMtri TI input time meter for system fuel use loadMtri TI input time <ul> <li>idx of [LOADMETER][loadmeter] that accumulates of primary (coil) output</li> <li>qHtg accums heating output, Btu (&gt; 0)</li> <li>qClg accums cooling output, Btu (&lt; 0)</li> </ul> htgLoadMtri TI input time idx of LOADMETER that accumulates only primary (coil) heating output clgLoadMtri TI input time idx of LOADMETER that accumulates only primary (coil) cooling output srcSideLoadMtri TI input time <ul> <li>idx of [LOADMETER][loadmeter] that accumulation of source-side heat transfer</li> <li>aka heat of rejection or outdoor coil heat transfer</li> <li>qHtg accums heat to [RSYS][rsys] from env during heating operation, Btu (&gt; 0)</li> <li>qClg accums heat from [RSYS][rsys] to env during cooling opersion, Btu (&lt; 0)</li> <li>Meaningful for compression rs_types.</li> </ul> htgSrcSideLoadMtri TI input time idx of LOADMETER for accumulation of source-side heating clgSrcSideLoadMtri TI input time idx of LOADMETER for accumulation of source-side cooling <ul> <li>parasitic consumption: accum'd to Par end use in</li> <li>appropriate meter; no thermal effect</li> </ul> Name Type Variability Description/Comments parElec number Start of hour electrical parasitic power, W parFuel number Start of hour fuel parasitic consumption, Btuh <ul> <li>nominal capacities, provide type-independent probe source for capacities.</li> <li>Reporting-only -- not used in calculations</li> <li>daily variability because default value changes during autosizing</li> </ul> Name Type Variability Description/Comments capNomH number Start of day nominal heating capacity, Btuh.  Default=rs_capH or rs_cap47 capNomC number Start of day nominal cooling capacity, Btuh.  Default=rs_cap95 Name Type Variability Description/Comments fan RSYS fan characteristics FAN Name Type Variability Description/Comments fan.fanTy choice:FANTY Start of run <ul> <li>fan position choice, according to application as follows; constant.</li> <li>air handler supply:  DRAWTHRU (default) or BLOWTHRU</li> <li>ah return/relief:  NONE (default), RETURN, or RELIEF</li> <li>terminal:  NONE (default), SERIES, or PARALLEL</li> <li>zone exhaust fan:  NONE or EXHAUST (no types, just whether exists)</li> <li>AirNet ([IZXFER][izxfer]):    ditto</li> </ul> fan.vfDs AFLOW_GZ End of subhour design volumetric flow (cfm actual air).  constant, RQD except as noted. *s cuz varies when autoSizing. fan.vfDs_As AFLOW Start of run autoSized ditto for ah sfan and rfan for naming consistency. 6-95. fan.vfDs_AsNov AFLOW Start of run <ul> <li>raw autoSized ditto b4 overSize added, for report/probes. 7-95.</li> <li>cnausz.cpp code ASSUMES x, x_As, x_AsNov together for access thru one ptr. cuprobe.cpp's name search also requires together.</li> </ul> fan.vfMxF number Start of run <ul> <li>factor by which fan flow will exceed vfDs (at reduced pressure). default 1.3. constant.</li> <li>Error if &lt; 1.0; typically &lt;= 1.5.</li> </ul> Name Type Variability Description/Comments fan.press PRESAIR_GEZ Start of run <ul> <li>system design pressure, \"H2O (inches of water), constant, used in defaulting power / efficiency.</li> <li>default: supply 3, r/r .75, tu .3, zx ???.</li> <li>0 allowed 5-1-92 to eliminate fan heat for test/calibration purposes.</li> </ul>   only one of eff and shaftPwr may be given:  Name Type Variability Description/Comments fan.eff FRAC_GZ Start of run <ul> <li>fan (hydraulic) efficiency at vfDs and press (any temp), constant,</li> <li>default from power if given, else .65.  (1-eff) of fan shaft power is converted to heat in airstream.</li> </ul> fan.shaftPwr BHP_GZ Start of run <ul> <li>fan shaft power at vfDs and press (any temp). constant. default: from eff</li> <li>Btuh internally, entered in BHP (user name 'shaftBhp') (cvpak converts).</li> <li>^^^^make user name 'shaftBhp'.  field type name??</li> </ul> fan.elecPwr FLOAT_GZ Start of run <ul> <li>motor input power, W/cfm (based on vfDs); shaftPwr and elecPwr cannot both be</li> <li>input</li> </ul> Name Type Variability Description/Comments fan.motTy choice:MOTTY Start of run <ul> <li>motor type (C_MOTTYCH_PSC or C_MOTTYCH_BPM)</li> <li>[RSYS][rsys] only minimal use 4-12, could effect defaults</li> </ul> Name Type Variability Description/Comments fan.motEff FRAC_GZ Start of run motor/drive efficiency, constant, default .9. Name Type Variability Description/Comments fan.motPos choice:MOTPOS Start of run <ul> <li>motor/drive position: choice of INFLO (default), INRETURN, EXTERNAL.  constant.</li> <li>INRETURN is for supply fans only and will be deferred/omitted if difficult</li> <li>chip per taylor 3-4-92).</li> </ul> Name Type Variability Description/Comments fan.curvePy fan part-load energy consumption curve cubic polynomial coefficients with x0 PYCUBIC2 Name Type Variability Description/Comments fan.curvePy.k[index] number Array [6] Start of run FLOAT k[6]. [0..3] are coeff, [4] is minimum x, [5] is terminator needed by cul.cpp. Name Type Variability Description/Comments fan.mtri TI Start of run subscript of meter (MTR) to which energy consumption is charged fan.endUse choice:ENDUSE Start of run <ul> <li>end use to which energy consumption is charged</li> <li>not used for all fans (many implicitly default to \"fan\")</li> </ul> Name Type Variability Description/Comments fan.ausz BOO Start of run <ul> <li>non-0 if fan being autoSized (AH sfan, rfan): input contained [AUTOSIZE][autosize] _fanVfDs. 7-1-95.</li> <li>see also AH::fanAs, asRfan, asFlow. 7-1-95. */</li> </ul> <ul> <li>FAN setup time members, set by cnfan.cpp:FAN::setup. May be resetup during autoSize run.</li> <li>also cMx may be init by setup, to be non-0.</li> </ul> Name Type Variability Description/Comments fan.outPower number Start of subhour <ul> <li>motor output power (work done by fan), member 7-95 for one setup check in cncult5.cpp</li> <li>inPower = shaftPwr/motEff  is computed as needed.</li> </ul> fan.airPower number Start of subhour <ul> <li>fan heat to air (Btuh) at vfDs (&amp; pressure): work done by fan, plus motor/drive inefficiency if in flow.</li> <li>Note work done by fan is modelled as HEAT ADDED TO AIR AT FAN per Chip/Niles (3-92, undocumented)</li> <li>heat to air around motor (in return air etc) at design flow is: (inPower - airPower). this is 0 if motor in air flow.</li> </ul>   FAN runtime members, set by cnah.cpp:FAN::pute( cFlow, temp)  Name Type Variability Description/Comments fan.cMx CFLOW End of subhour max heat cap flow (Btuh/F) at curr air temp &amp; run press &amp; ref w: .vfMx * air vsh * 60 (min/hr) fan.c CFLOW End of subhour current average flow in heat cap units (Btuh/F): input saved for probing by last call to FAN::pute() fan.t TEMP End of subhour current air temp, input saved ditto, used in converting BtuF/F to cfm fan.frOn number End of subhour <ul> <li>fraction of time fan is on, saved input</li> <li>made local to pute()to save members 10-92:</li> <li>*s *e FRAC relFlow  // fraction of design flow</li> <li>*s *e FRAC relLoad  // fraction of full load per part load curve for fan type (1.0 if over design flow: assume pressure drops)</li> </ul> fan.p number End of subhour (motor) power consumption for subhour -- inPower * relLoad.  *subhrDur for meter. fan.q number End of subhour heat (power) to air this subhour: airPower * relLoad.  Member needed in addition to c and dT?? fan.dT TEMPDIFF End of subhour temp difference due to fan: q/c fan.qAround number End of subhour heat to air around motor, if not in air flow, for use re supply fan motor in return air adjForFanHt choice:NOYES Start of run <ul> <li>YES: fanHtRtd derived from rs_fan.motTy</li> <li>and removed from capacity and input values</li> <li>NO: no rated fan heat adjustments</li> </ul> Name Type Variability Description/Comments asRet <ul> <li>return duct entering air state (at grilles)</li> <li>(flow-weighted average of all zones)</li> </ul> AIRSTATE Name Type Variability Description/Comments asRet.tdb DBL End of subhour air dry-bulb temp, F asRet.w DBL End of subhour air humidity ratio, lb moisture/lb dry air asIn <ul> <li>entering air state (after return ducts)</li> <li>valid for all modes</li> </ul> AIRSTATE Name Type Variability Description/Comments asIn.tdb DBL End of subhour air dry-bulb temp, F asIn.w DBL End of subhour air humidity ratio, lb moisture/lb dry air twbIn DBL End of subhour entering air wet bulb (after return ducts), F asOut <ul> <li>leaving air state at plenum</li> <li>NOT including any aux heat</li> <li>NOT including any DSE or supply duct losses</li> </ul> AIRSTATE Name Type Variability Description/Comments asOut.tdb DBL End of subhour air dry-bulb temp, F asOut.w DBL End of subhour air humidity ratio, lb moisture/lb dry air asOutAux <ul> <li>aux heat leaving air state at plenum for ASHP heating (else 0)</li> <li>includes fan heat</li> <li>may include primary heat per rs_ctrlAuxH</li> <li>NOT including any DSE or supply duct losses</li> </ul> AIRSTATE Name Type Variability Description/Comments asOutAux.tdb DBL End of subhour air dry-bulb temp, F asOutAux.w DBL End of subhour air humidity ratio, lb moisture/lb dry air <p>supply air state (at registers)</p> Name Type Variability Description/Comments asSup ... at full capacity under current conditions AIRSTATE Name Type Variability Description/Comments asSup.tdb DBL End of subhour air dry-bulb temp, F asSup.w DBL End of subhour air humidity ratio, lb moisture/lb dry air asSupAux ... at full cap + auxiliary (ASHP only, else unused) AIRSTATE Name Type Variability Description/Comments asSupAux.tdb DBL End of subhour air dry-bulb temp, F asSupAux.w DBL End of subhour air humidity ratio, lb moisture/lb dry air tSupLs number Start of subhour <ul> <li>... supply dry-bulb at last step, F</li> <li>used as e.g. 1st iteration guess in ASHP aux heat calc</li> </ul> <ul> <li>autosizing</li> <li>TODO: clarify re fan heat?</li> </ul> Name Type Variability Description/Comments isAuszH number Start of run <ul> <li>TRUE iff currently autosizing heating</li> <li>= Top.tp_autoSizing &amp;&amp; IsAusz( RSYS_CAPH)</li> </ul> isAuszC number Start of run ditto cooling RSYS_CAP95 tdDesH FLOAT_GZ Start of run <ul> <li>design temperature difference (rise) across [RSYS][rsys] for heating</li> <li>autosizing, F.  default 30 F for ASHP else 50 F</li> </ul> tdDesC FLOAT_LZ Start of run <ul> <li>design temperature difference (fall) across [RSYS][rsys] for cooling</li> <li>autosizing, F.  default -25 F</li> </ul> fxCap[index] number Array [2] End of subhour <ul> <li>current step excess capacity factor = amfAvailable / max( amfRequest)</li> <li>&gt;1 = excess capacity</li> <li>[ 0]=primary   [1]=prim+aux or aux alone (per rs_ctrlAuxH)</li> </ul> fxCapCDay number End of hour <ul> <li>current day excess cooling capacity factor</li> <li>evaluated at last time step of hour</li> <li>&gt;1 = excess capacity</li> </ul> fxCapHDay number End of hour ditto heating fxCapHTarg FLOAT_GZ Start of run <ul> <li>target excess capacity factor for heating autosize</li> <li>default = 1.4 (40% oversize)</li> </ul> fxCapHAsF number Start of run <ul> <li>working excess capacity factor for heating autosize</li> <li>ensures sufficient capacity to meet load</li> </ul> fxCapCTarg FLOAT_GZ Start of run <ul> <li>target excess capacity factor for cooling autosize</li> <li>default = 1.2 (20% oversize)</li> </ul> fxCapCAsF number Start of run <ul> <li>working excess capacity factor for cooling autosize</li> <li>ensures sufficient capacity to meet load</li> </ul> fxCapAuxHTarg FLOAT_GZ Start of phase <ul> <li>target excess capacity factor for auxH autosize</li> <li>default = 1.0</li> </ul> auszH autoSizing working data members re heating AUSZ    ---setup time members  Name Type Variability Description/Comments auszH.az_active BOO Start of run TRUE iff autoSizing this member <ul> <li>---runtime</li> <li>set at initialization</li> </ul> Name Type Variability Description/Comments auszH.az_a number End of subhour <ul> <li>1a size (load) -- max of warmup-converged design days</li> <li>pass 1 part b and pass 2: enlarge size if necess, real models.</li> </ul> auszH.az_b number End of subhour <ul> <li>1b rated size plus increases during simulation incl pass 2 -- max of design days</li> <li>for pass 2 (increase size if necess, measure load, reduce oversize sizes) and for main sim load reports</li> </ul> auszH.ldPk number End of subhour largest load this design day iteration or in main sim auszH.ldPkAs number End of day autoSize peak load: max of warmup-converged design days auszH.ldPkAs1 number End of day <ul> <li>autoSize pass 1 peak load, re reporting overloads of devices that only</li> <li>exceed limit on pass 1, eg supply fan when sizing terminals, 7-6-95.</li> </ul> auszH.plrPk number End of subhour largest plr this design day iteration or in main sim auszH.plrPkAs number End of day autoSize peak plr: max of warmup-converged design days auszH.xPk number End of subhour rated size (*px) when plrPk set auszH.xPkAs number End of day rated size (xPk) when plrPkAs set - use when reducing oversize in case x has changed. 6-97. auszH.az_notDone BOO End of day <ul> <li>re convergence: nz says this AUSZ requires additional iterations</li> <li>set to 0 at beg of each iteration; incrd anywhere is calcs if not converged</li> <li>see also Top.tp_auszNotDone = overall notdone flag</li> </ul> auszC ditto cooling AUSZ    ---setup time members  Name Type Variability Description/Comments auszC.az_active BOO Start of run TRUE iff autoSizing this member <ul> <li>---runtime</li> <li>set at initialization</li> </ul> Name Type Variability Description/Comments auszC.az_a number End of subhour <ul> <li>1a size (load) -- max of warmup-converged design days</li> <li>pass 1 part b and pass 2: enlarge size if necess, real models.</li> </ul> auszC.az_b number End of subhour <ul> <li>1b rated size plus increases during simulation incl pass 2 -- max of design days</li> <li>for pass 2 (increase size if necess, measure load, reduce oversize sizes) and for main sim load reports</li> </ul> auszC.ldPk number End of subhour largest load this design day iteration or in main sim auszC.ldPkAs number End of day autoSize peak load: max of warmup-converged design days auszC.ldPkAs1 number End of day <ul> <li>autoSize pass 1 peak load, re reporting overloads of devices that only</li> <li>exceed limit on pass 1, eg supply fan when sizing terminals, 7-6-95.</li> </ul> auszC.plrPk number End of subhour largest plr this design day iteration or in main sim auszC.plrPkAs number End of day autoSize peak plr: max of warmup-converged design days auszC.xPk number End of subhour rated size (*px) when plrPk set auszC.xPkAs number End of day rated size (xPk) when plrPkAs set - use when reducing oversize in case x has changed. 6-97. auszC.az_notDone BOO End of day <ul> <li>re convergence: nz says this AUSZ requires additional iterations</li> <li>set to 0 at beg of each iteration; incrd anywhere is calcs if not converged</li> <li>see also Top.tp_auszNotDone = overall notdone flag</li> </ul> <p>ASHP heating (all values net = include rated fan heat / power)</p> Name Type Variability Description/Comments HSPF FLOAT_GZ Start of run rated HSPF, Btuh/W cap47 FLOAT_GZ End of phase full speed net heating capacity at ODB=47 F COP47 FLOAT_GZ End of phase COP at ODB=47 F cap35 FLOAT_GZ End of phase full speed net heating capacity at ODB=35 F COP35 FLOAT_GZ End of phase COP at ODB=35 F cap17 FLOAT_GZ End of phase full speed net heating capacity at ODB=17 F COP17 FLOAT_GZ End of phase COP at ODB=17 F cap05 FLOAT_GZ End of phase full speed net heating capacity at ODB=5 F COP05 FLOAT_GZ End of phase COP at ODB=5 F capRat1747 FLOAT_GZ Start of run <ul> <li>cap17 / cap47 ratio (re autosizing)</li> <li>default based on HSPF or other correlations</li> </ul> capRat9547 FLOAT_GZ Start of run <ul> <li>total net cap95 (cooling) / net cap47 (heating)</li> <li>re consistent htg/clg size iff both autosized</li> <li>(else inconsistency ignored)</li> <li>default=correlation per A. Conant</li> <li>see ashpCap95FromCap47() and ashpCap47FromCap95()</li> </ul> Name Type Variability Description/Comments COPMin47 FLOAT_GZ End of phase Rated net COP at ODB=47 F, min speed (for reporting only) COPMin35 FLOAT_GZ End of phase Rated net COP at ODB=35 F, min speed (for reporting only) COPMin17 FLOAT_GZ End of phase Rated net COP at ODB=17 F, min speed (for reporting only) COPMin05 FLOAT_GZ End of phase Rated net COP at ODB= 5 F, min speed (for reporting only) Name Type Variability Description/Comments CdH number End of phase heating cycling degradation factor Name Type Variability Description/Comments inp47 FLOAT_GZ End of phase input power at ODB=47 F, Btuh (w/ rated fan power) inp35 FLOAT_GZ End of phase input power at ODB=35 F, Btuh (w/ rated fan power) inp17 FLOAT_GZ End of phase input power at ODB=17 F, Btuh (w/ rated fan power) <p>ASHP constants [ 0]=non-defrost, [1]=defrost (used when 17 &lt; T &lt; 45)</p> Name Type Variability Description/Comments ASHPCapF[index] number Array [2] Start of run capacity slope: cap(T) = cap17 + CapF*(T - 17) ASHPInpF[index] number Array [2] Start of run input slope: inp(T) = inp17 + InpF*(T - 17) Name Type Variability Description/Comments perfMapHtgi TI Start of run heating performance map idx perfMapClgi TI Start of run heating performance map idx Name Type Variability Description/Comments typeAuxH AUXHEATTY Start of run type of auxiliary heat (C_AUXHEATTY_NONE, _RES, _FURN) ctrlAuxH AUXHEATCTRL Start of run <ul> <li>auxiliary heating control</li> <li>C_AUXHEATCTRL_LO    Compressor locked out if any aux</li> <li>C_AUXHEATCTRL_CYCLE Compressor runs continuously, aux cycles</li> <li>C_AUXHEATCTRL_ALT   Compressor/aux alternate</li> </ul> capAuxH FLOAT_GEZ End of phase <ul> <li>auxiliary heating capacity (NOT including fan heat), Btuh</li> <li>*always* 0 if !rs_IsHP()</li> </ul> capAuxHInp number End of phase <ul> <li>rs_capAuxH as input (may be [AUTOSIZE][autosize])</li> <li>allows use of estimated rs_capAuxH during ASHP autosize</li> </ul> AFUEAuxH FLOAT_GZ Start of phase auxiliary furnace heating AFUE (assumed constant), default 0.9 effAuxH FLOAT_GZ Start of phase aux heat efficiency (= rs_AFUEAuxH or 1) underSizedAuxCount number End of run <ul> <li># of subhours having aux heat capacity &lt; compressor capacity</li> <li>iff rs_ctrlAuxH != C_AUXHEATCTRL_CYCLE and rs_capAuxH &gt; 0</li> </ul> ASHPLockOutT number Start of hour <ul> <li>air source heat pump compressor lockout temp, F</li> <li>compressor capacity assumed 0 if outdoor tdb &lt; tLockOut</li> <li>default is -999 (no lockout)</li> </ul> defrostModel choice:RSYSDEFROSTMODEL Start of run <ul> <li>defrost model</li> <li>NONE:        defrost ignored (no capacity reduction, no aux heat)</li> <li>REVCYCLE:    no additional aux heat (just capacity reduced per cap35)</li> <li>REVCYCLEAUX: aux heat used to compensate for capacity reduction due to</li> <li>reverse (cooling) operation</li> </ul> <p>non-ASHP heating</p> Name Type Variability Description/Comments AFUE FRAC_GZ Start of phase heating system rated AFUE, 0 &lt; AFUE &lt;= 1 Name Type Variability Description/Comments capH FLOAT_GEZ End of phase rated net heating output (including fan), Btuh capH_As FLOAT_GEZ End of phase autoSized capH (including fan), Btuh capH_AsNov FLOAT_GEZ End of phase <ul> <li>raw autoSized capH w/o oversizing (including fan), Btuh</li> <li>autoSize code ASSUMES x, x_As, x_AsNov together for access thru one ptr. cuprobe.cpp's name search also requires together.</li> </ul> Name Type Variability Description/Comments fanSFPRtd[index] FLOAT_GEZ Array [2] Start of run <ul> <li>rated specific fan power, W/cfm (assumed included in rated capacities)</li> <li>[ 0] = heating   [ 1] = cooling</li> </ul> fanHRtdH number End of phase <ul> <li>fan heat included in ASHP rated cap/COP/HSPF, Btuh</li> <li>(generally estimated from rs_fanHRtdC)</li> </ul> fanSFPH FLOAT_GEZ Start of run operating heating specific fan power, W/cfm fanHeatH number End of phase <ul> <li>operating heating fan electrical power at rated air flow, Btuh</li> <li>used re both electricity use and air heat gain</li> </ul> amfH number End of phase heating full speed dry air mass flow rate, lbm/hr effHt number End of subhour <ul> <li>current step gross heating efficiency at current speed, dimless</li> <li>includes rs_fEffH modification if any</li> <li>0 = ASHP compressor is unavailable (due to lockout, )</li> </ul> capHtFS number End of subhour <ul> <li>current step full speed primary heating capacity, Btuh</li> <li>if known; used only for CHDHW</li> </ul> capHt number End of subhour <ul> <li>current step current speed net primary heating capacity, Btuh</li> <li>includes fan heat and strip/furn defrost makeup heat</li> <li>= fan heat only if compressor unavailable</li> </ul> inpHt number End of subhour current step current speed compressor input power, Btuh capDfHt number End of subhour <ul> <li>current step defrost heating capacity, Btuh</li> <li>= typically resistance heat activated to prevent cold supply air</li> <li>0 if not ASHP or no defrost active</li> </ul> COPHtAdj number End of subhour current step adjusted heating compressor COP (reflecting all adjustments) capRatCH FLOAT_GZ Start of phase <ul> <li>total net capC (aka rs_cap95) (cooling) / net capH (heating)</li> <li>re consistent WSHP htg/clg size iff both autosized</li> <li>(else inconsistency ignored)</li> <li>default based on eyeballed manufacturers' data</li> <li>see WshpConsistentCaps()</li> </ul> CHDHWSYSi TI input time <ul> <li>index of [DHWSYS][dhwsys] supplying hot water for combined heat/DWH CHDHW coil</li> <li>nz iff rs_type is CHDHW or ACCHDHW</li> </ul> tCoilEW number End of subhour CHDHW heating coil entering water temp, F <p>compression cooling</p> Name Type Variability Description/Comments cap95 FLOAT_GEZ End of phase rated full speed net total cooling capacity at 95 F (&gt;= 0), Btuh cap95_As FLOAT_GEZ End of phase autosize cap95 net total cooling cap, Btuh cap95_AsNov FLOAT_GEZ End of phase <ul> <li>raw autoSized cap95 net total cooling cap w/o oversizing, Btuh</li> <li>autoSize code ASSUMES x, x_As, x_AsNov together for access thru one ptr. cuprobe.cpp's name search also requires together.</li> </ul> Name Type Variability Description/Comments COP95 FLOAT_GZ End of phase <ul> <li>rated net COP at 95 F (= rs_EER95 / 3.412)</li> <li>rs_COP95 and rs_EER95 are consistent at runtime</li> </ul> EER95 FLOAT_GZ End of phase <ul> <li>rated net EER at 95 F, Btuh/W (=rs_COP95 * 3.412)</li> <li>rs_COP95 and rs_EER95 are consistent at runtime</li> </ul> SEER FLOAT_GZ End of phase cooling AHRI rated SEER, Btuh/W Name Type Variability Description/Comments cap115 FLOAT_GEZ End of phase output: total full speed net cooling capacity at 115 F (&gt;= 0), Btuh COP115 FLOAT_GZ End of phase output: full speed cooling COP at 115F cap82 FLOAT_GEZ End of phase output: total full speed net cooling capacity at 82 F (&gt;= 0), Btuh COP82 FLOAT_GZ End of phase output: full speed cooling COP at 82F Name Type Variability Description/Comments vfPerTon FLOAT_GZ Start of phase <ul> <li>operating air flow ratio, cfm/ton (= cfm/(rs_cap95/12000))</li> <li>used for cooling and ASHPPM heating</li> </ul> fanSFPC FLOAT_GEZ Start of phase cooling fan full speed operating specific fan power, W/cfm (default 0.365) fanHeatC number End of phase <ul> <li>cooling fan full speed operating electrical power, Btuh</li> <li>used re both electricity use and air heat gain</li> </ul> fanDeltaTC number End of phase <ul> <li>cooling fan heat temperature rise, F</li> <li>constant even if capacity is altered during autosize</li> <li>Why: air flow is function of rated capacity</li> </ul> amfC number End of phase cooling dry air mass flow rate, lbm/hr CdC number End of phase cooling cycling degradation factor rhInTest number End of hour specified entering air relnum (for testing), 0-1 rhIn number End of subhour <ul> <li>plenum entering air relnum, 0-1</li> <li>( = rs_rhInTest if given, else from zone + return duct)</li> </ul> twbCoilIn number End of subhour coil entering wet bulb, F (after blow-thru fan if any) tdbCoilIn number End of subhour coil entering dry bulb, F (ditto) Name Type Variability Description/Comments SHR FLOAT_GZ End of subhour <ul> <li>cooling sensible heat ratio (sensible capacity / total capacity)</li> <li>from coil model for compression types</li> <li>from rs_SHRtarget for fancoil</li> <li>may be modified re humidity constraints</li> </ul> SHRtarget FLOAT_GZ Start of subhour <ul> <li>inputable nominal sensible heat ratio (for fancoil)</li> <li>default 0.7</li> </ul> Name Type Variability Description/Comments fChgH number Start of phase <ul> <li>heating refrigerant charge factor (default 1, &lt;1 for CA compliance)</li> <li>multiplies heat pump heating COP</li> </ul> fChgC number Start of phase <ul> <li>cooling refrigerant charge factor (default 1, 0.9 or 0.96 for CA compliance)</li> <li>multiplies cooling COP</li> </ul> <p>rs_fanSFPRtd[] rated cooling specific fan power, W/cfm see above</p> Name Type Variability Description/Comments fanHRtdC number End of phase fan heat included in rated rs_cap95, Btuh capnfX number End of phase constant for rs_capXxxCt calc SEERnfX number End of phase constant for rs_SEERnf calc EERnfX number End of phase constant for rs_EERnfCalc Name Type Variability Description/Comments fCondCap number End of subhour conditions factor, capacity fCondInp number End of subhour conditions factor, input power fCondSEER number End of subhour conditions factor, SEER fCondEER number End of subhour conditions factor, EER <p>values for current step (adjusted for outdoor and indoor temps)</p> Name Type Variability Description/Comments SEERnf number End of subhour SEER w/o fan power EERnf number End of subhour EER w/o fan power EERt number End of subhour <ul> <li>compressor EER, Btuh/W (temperature weighted mix of</li> <li>rs_SEERnf and rs_EERnf)</li> </ul> capTotCt number End of subhour coil total cooling capacity at current conditions and speed, Btuh (&lt;0) capLatCt number End of subhour coil latent cooling capacity at current conditions and speed, Btuh (&lt;0) capSenCt number End of subhour coil sensible cooling capacity at current conditions and speed, Btuh (&lt;0) inpCt number End of subhour <ul> <li>compressor nominal electrical input power at current conditions and speed, Btuh</li> <li>NOT adjusted by rs_fEffC</li> </ul> effCt number End of subhour <ul> <li>temp adjusted compressor efficiency (= CEt in ACM)</li> <li>abs( rs_capTotCt)*rs_fEffC / rs_inpCt</li> </ul> <p>Central outside air vent (aka OAV)</p> Name Type Variability Description/Comments OAVType choice:RSYSOAVTY input time type: NONE, FIXEDFLOW (aka SmartVent), VARFLOW (aka SmartBreeze) OAVReliefZi TI input time OAV relief zone index OAVTdbInlet number Start of subhour <ul> <li>OAV inlet dry-bulb temp, F</li> <li>default = from project weather data source (generally weather file)</li> <li>note: default varies subhourly but input expression is hourly</li> </ul> OAVTdiff FLOAT_GZ Start of hour OAV temperature differential, F OAVAvfDs FLOAT_GEZ input time OAV design air flow rate, cfm actual air OAVFanSFP FLOAT_GEZ input time OAV design fan specific fan power (based on rs_OAVVfDs), W/cfm OAVAvfMinF number input time OAV minimum volume flow (rs_avfOAV always &gt;= rs_OAVAvfMinF *rs_OAVAvfDs) Name Type Variability Description/Comments avfOAV number Start of day OAV current air volume flow, cfm (set at beg of each day) fanHeatOAV number Start of day ditto fan power, Btuh amfOAV number Start of day ditto air mass flow, lbm/hr <ul> <li>Distribution losses</li> <li>Distribution system efficiency (DSE): simplified distribution loss model</li> <li>discards 1-DSE of heat added by system</li> </ul> Name Type Variability Description/Comments DSEH FRAC_GZ Start of hour heating distribution system efficiency (DSE); &lt;0: use DUCTSEG else apply DSEH DSEC FRAC_GZ Start of hour cooling distribution system efficiency (DSE); &lt;0: use DUCTSEG else apply DSEC Name Type Variability Description/Comments fEffH FLOAT_GZ Start of subhour heating efficiency adjustment factor (applied to substep efficency), default=1 fEffAuxHBackup FLOAT_GZ Start of subhour auxiliary heating backup mode efficiency adjustment factor (applied to substep efficency), default=1 fEffAuxHDefrost FLOAT_GZ Start of subhour auxiliary heating defrost mode efficiency adjustment factor (applied to substep efficency), default=1 fEffC FLOAT_GZ Start of subhour cooling efficiency adjustment factor (applied to substep efficency), default=1 Name Type Variability Description/Comments tdbOut number Start of subhour <ul> <li>outdoor dry-bulb temp at condensor or other outdoor components, F</li> <li>default = from project weather data source (generally weather file)</li> <li>note: default varies subhourly but input expression is hourly</li> </ul> modeCtrl RSYSMODECTRL Start of hour mode control (off, heat, cool, auto } mode USI End of subhour mode (rsmOFF, rsmHEAT, rsmCOOL, rsmOAV ) modeLs USI Start of subhour last step mode (rsmOFF, rsmHEAT, rsmCOOL, rsmOAV ) modeLastActive USI Start of subhour <ul> <li>last active mode (rsmOFF, rsmHEAT, rsmCOOL, rsmOAV )</li> <li>(allows guess re e.g. heating vs cooling season)</li> </ul> amfReq[index] DBL Array [2] End of subhour <ul> <li>total AMF (at system) requested by zones, lbm/hr</li> <li>[ 0] = primary source (compressor or burner)</li> <li>[ 1] = prim+aux or aux-only (per rs_auxControl)</li> <li>ASHP heating only else 0</li> </ul> znLoad[index] number Array [2] End of subhour <ul> <li>sensible load to hold zone(s) at setpoint, Btuh</li> <li>[ 0] = primary (compressor or burner)</li> <li>[ 1] = prim+aux or aux-only (per rs_auxControl)</li> <li>calculated results</li> </ul> capSenNetFS number End of subhour net sensible capacity at full speed, Btuh Name Type Variability Description/Comments amf DBL End of subhour <ul> <li>current step dry air mass flow rate, lbm/hr</li> <li>= flow at blower / coil / furnace HX etc.</li> <li>set per rsMode from rs_amfH, rs_amfC, or OAV algorithm</li> <li>depends on rs_speedF for VC and CHDHW; does not reflect cycling</li> </ul> fanPwr number End of subhour <ul> <li>current step fan power, Btuh</li> <li>used for both air stream heat addition and electricity consumption</li> </ul> PLF number End of subhour <ul> <li>efficiency degradation due to cycling</li> <li>PLF = PartLoadEfficiency / FullLoadEfficency</li> </ul> PLR number End of subhour current step part load ratio = sensible load / full-speed sensible capacity runF number End of subhour primary (e.g. compressor) run fraction speedF number End of subhour <ul> <li>primary (compressor) current speed fraction</li> <li>= current net cap / full speed net cap</li> <li>fixed speed: 1; var spd: &lt;= 1 per load</li> </ul> speedFMin number End of subhour <ul> <li>primary (compressor) current minimum speed fraction</li> <li>fixed speed: 1; var spd: &lt; 1 per min current min cap</li> </ul> runFAux number End of subhour auxiliary run fraction outSen DBL End of subhour <ul> <li>average primary (compressor, burner, coil, ) sensible heat delivery rate for last subhr, Btuh</li> <li>(includes runF/speedF, does not include fan, defrost, or aux heat)</li> <li>used for both heating and cooling</li> </ul> outLat DBL End of subhour average latent heat delivery rate, Btuh outFan DBL End of subhour average fan heat added to air stream, Btuh outDefrost DBL End of subhour <ul> <li>average defrost heat, Btuh</li> <li>= typically resistance heat added to prevent cold supply air</li> <li>0 if not ASHP or if defrost not active</li> </ul> outAux DBL End of subhour average auxiliary heat added to air stream, Btuh (for ASHP) outSenTot DBL End of subhour <ul> <li>average total sensible heat delivery rate for last subhr, Btuh</li> <li>= rs_outSen + rs_outFan + rs_outDefrost + rs_outAux</li> </ul> Name Type Variability Description/Comments calcCount[index] number Array [2] End of run <ul> <li># calls to rs_SupplyAirState, re optimizing rs_FindRequiredSpeedF()</li> <li>[ 0] = heating, [1] = cooling</li> </ul> Name Type Variability Description/Comments inPrimary DBL End of subhour primary input, Btuh (compressor, burner, ) inFan DBL End of subhour fan electricity input, Btuh (not kWh) inDefrost DBL End of subhour defrost heating input, Btuh (ASHP only) inAux DBL End of subhour auxiliary heating input, Btuh"},{"location":"probe-definitions/RSYSRes/","title":"RSYSRes","text":"<p>title: RSYSRes ---</p> Name Type Variability Description/Comments Y run results, aka year or annual RSYSRES_IVL_SUB Name Type Variability Description/Comments Y.n number End of run <ul> <li>number of intervals added together in this one (divisor for averages)</li> <li>(maintained but unused)</li> </ul>   float members to add, hrsOn MUST be first (else change rsr_Accum() etc)  Name Type Variability Description/Comments Y.hrsOn HOURS End of run operating hours Y.hrsOnAux HOURS End of run <ul> <li>auxiliary heating operating hours (ASHP only)</li> <li>does not include defrost</li> </ul> Name Type Variability Description/Comments Y.qhPrimary ENERGY End of run heating output w/o fan, w/o defrost, Btu Y.qhDefrost ENERGY End of run defrost (strip) heat output, Btu Y.qhAux ENERGY End of run auxiliary heat output, Btu Y.qhFan ENERGY End of run heating mode fan heat, Btu Y.qhNet ENERGY End of run heating mode net output (qhPrimary+qhDefrost+qhAux+qhFan), Btu Name Type Variability Description/Comments Y.qcSen ENERGY End of run sensible cooling output w/o fan (&lt; 0), Btu Y.qcLat ENERGY End of run latent cooling output (&lt;0), Btu Y.qcFan ENERGY End of run cooling mode fan heat, Btu Y.qcSenNet ENERGY End of run sensible cooling net output (qcSen+qcFan), Btu Name Type Variability Description/Comments Y.qvFan ENERGY End of run OAV mode fan heat, Btu Name Type Variability Description/Comments Y.fhPrimary ENERGY End of run heating mode primary fuel, Btu Y.fhDefrost ENERGY End of run heating mode defrost fuel, Btu Y.fhAux ENERGY End of run heating mode auxiliary fuel, Btu Y.fhParasitic ENERGY End of run heating mode parasitic fuel, Btu Y.fhTot ENERGY End of run <ul> <li>heating mode total fuel, Btu</li> <li>primary+defrost+aux+parasitics</li> </ul> Name Type Variability Description/Comments Y.ehPrimary ENERGY End of run <ul> <li>heating mode primary electicity use, Btu</li> <li>(compressor, resistance, )</li> </ul> Y.ehDefrost ENERGY End of run heating mode defrost (strip) electricity use, Btu Y.ehAux ENERGY End of run heating mode auxiliary (strip) electricity use, Btu Y.ehFan ENERGY End of run heating mode fan electricity use, Btu Y.ehParasitic ENERGY End of run heating mode parasitic electricity, Btu Y.ehTot ENERGY End of run <ul> <li>heating mode total electricity use, Btu</li> <li>primary+defrost+aux+fan+parasitic</li> </ul> Name Type Variability Description/Comments Y.ecPrimary ENERGY End of run cooling mode compressor electricity use, Btu Y.ecFan ENERGY End of run cooling mode fan electricity use, Btu Y.ecParasitic ENERGY End of run cooling mode parasitic electricity, Btu Y.ecTot ENERGY End of run <ul> <li>cooling mode total electricity use, Btu</li> <li>primary+fan+parasitic</li> </ul> Name Type Variability Description/Comments Y.evFan ENERGY End of run OAV mode fan electricity use, Btu Y.evParasitic ENERGY End of run OAV mode parasitic electricity use, Btu Y.evTot ENERGY End of run <ul> <li>OAV mode total electricity use, Btu</li> <li>fan+parasistic</li> </ul>   zone energy transfers (must be contiguous and in order, see code)  Name Type Variability Description/Comments Y.qhZoneSen ENERGY End of run heating mode sensible transfer to zone(s) (after dist losses), Btu Y.qhZoneLat ENERGY End of run heating mode latent transfer to zone(s) (after dist losses), Btu Y.qcZoneSen ENERGY End of run cooling mode sensible transfer to zone(s) (after dist losses), Btu Y.qcZoneLat ENERGY End of run cooling mode latent transfer to zone(s) (after dist losses), Btu Y.qvZoneSen ENERGY End of run OAV mode sensible transfer to zone(s) (after dist losses), Btu Y.qvZoneLat ENERGY End of run OAV mode latent transfer to zone(s) (after dist losses), Btu M month RSYSRES_IVL_SUB Name Type Variability Description/Comments M.n number Unknown <ul> <li>number of intervals added together in this one (divisor for averages)</li> <li>(maintained but unused)</li> </ul>   float members to add, hrsOn MUST be first (else change rsr_Accum() etc)  Name Type Variability Description/Comments M.hrsOn HOURS Unknown operating hours M.hrsOnAux HOURS Unknown <ul> <li>auxiliary heating operating hours (ASHP only)</li> <li>does not include defrost</li> </ul> Name Type Variability Description/Comments M.qhPrimary ENERGY Unknown heating output w/o fan, w/o defrost, Btu M.qhDefrost ENERGY Unknown defrost (strip) heat output, Btu M.qhAux ENERGY Unknown auxiliary heat output, Btu M.qhFan ENERGY Unknown heating mode fan heat, Btu M.qhNet ENERGY Unknown heating mode net output (qhPrimary+qhDefrost+qhAux+qhFan), Btu Name Type Variability Description/Comments M.qcSen ENERGY Unknown sensible cooling output w/o fan (&lt; 0), Btu M.qcLat ENERGY Unknown latent cooling output (&lt;0), Btu M.qcFan ENERGY Unknown cooling mode fan heat, Btu M.qcSenNet ENERGY Unknown sensible cooling net output (qcSen+qcFan), Btu Name Type Variability Description/Comments M.qvFan ENERGY Unknown OAV mode fan heat, Btu Name Type Variability Description/Comments M.fhPrimary ENERGY Unknown heating mode primary fuel, Btu M.fhDefrost ENERGY Unknown heating mode defrost fuel, Btu M.fhAux ENERGY Unknown heating mode auxiliary fuel, Btu M.fhParasitic ENERGY Unknown heating mode parasitic fuel, Btu M.fhTot ENERGY Unknown <ul> <li>heating mode total fuel, Btu</li> <li>primary+defrost+aux+parasitics</li> </ul> Name Type Variability Description/Comments M.ehPrimary ENERGY Unknown <ul> <li>heating mode primary electicity use, Btu</li> <li>(compressor, resistance, )</li> </ul> M.ehDefrost ENERGY Unknown heating mode defrost (strip) electricity use, Btu M.ehAux ENERGY Unknown heating mode auxiliary (strip) electricity use, Btu M.ehFan ENERGY Unknown heating mode fan electricity use, Btu M.ehParasitic ENERGY Unknown heating mode parasitic electricity, Btu M.ehTot ENERGY Unknown <ul> <li>heating mode total electricity use, Btu</li> <li>primary+defrost+aux+fan+parasitic</li> </ul> Name Type Variability Description/Comments M.ecPrimary ENERGY Unknown cooling mode compressor electricity use, Btu M.ecFan ENERGY Unknown cooling mode fan electricity use, Btu M.ecParasitic ENERGY Unknown cooling mode parasitic electricity, Btu M.ecTot ENERGY Unknown <ul> <li>cooling mode total electricity use, Btu</li> <li>primary+fan+parasitic</li> </ul> Name Type Variability Description/Comments M.evFan ENERGY Unknown OAV mode fan electricity use, Btu M.evParasitic ENERGY Unknown OAV mode parasitic electricity use, Btu M.evTot ENERGY Unknown <ul> <li>OAV mode total electricity use, Btu</li> <li>fan+parasistic</li> </ul>   zone energy transfers (must be contiguous and in order, see code)  Name Type Variability Description/Comments M.qhZoneSen ENERGY Unknown heating mode sensible transfer to zone(s) (after dist losses), Btu M.qhZoneLat ENERGY Unknown heating mode latent transfer to zone(s) (after dist losses), Btu M.qcZoneSen ENERGY Unknown cooling mode sensible transfer to zone(s) (after dist losses), Btu M.qcZoneLat ENERGY Unknown cooling mode latent transfer to zone(s) (after dist losses), Btu M.qvZoneSen ENERGY Unknown OAV mode sensible transfer to zone(s) (after dist losses), Btu M.qvZoneLat ENERGY Unknown OAV mode latent transfer to zone(s) (after dist losses), Btu D day RSYSRES_IVL_SUB Name Type Variability Description/Comments D.n number End of day <ul> <li>number of intervals added together in this one (divisor for averages)</li> <li>(maintained but unused)</li> </ul>   float members to add, hrsOn MUST be first (else change rsr_Accum() etc)  Name Type Variability Description/Comments D.hrsOn HOURS End of day operating hours D.hrsOnAux HOURS End of day <ul> <li>auxiliary heating operating hours (ASHP only)</li> <li>does not include defrost</li> </ul> Name Type Variability Description/Comments D.qhPrimary ENERGY End of day heating output w/o fan, w/o defrost, Btu D.qhDefrost ENERGY End of day defrost (strip) heat output, Btu D.qhAux ENERGY End of day auxiliary heat output, Btu D.qhFan ENERGY End of day heating mode fan heat, Btu D.qhNet ENERGY End of day heating mode net output (qhPrimary+qhDefrost+qhAux+qhFan), Btu Name Type Variability Description/Comments D.qcSen ENERGY End of day sensible cooling output w/o fan (&lt; 0), Btu D.qcLat ENERGY End of day latent cooling output (&lt;0), Btu D.qcFan ENERGY End of day cooling mode fan heat, Btu D.qcSenNet ENERGY End of day sensible cooling net output (qcSen+qcFan), Btu Name Type Variability Description/Comments D.qvFan ENERGY End of day OAV mode fan heat, Btu Name Type Variability Description/Comments D.fhPrimary ENERGY End of day heating mode primary fuel, Btu D.fhDefrost ENERGY End of day heating mode defrost fuel, Btu D.fhAux ENERGY End of day heating mode auxiliary fuel, Btu D.fhParasitic ENERGY End of day heating mode parasitic fuel, Btu D.fhTot ENERGY End of day <ul> <li>heating mode total fuel, Btu</li> <li>primary+defrost+aux+parasitics</li> </ul> Name Type Variability Description/Comments D.ehPrimary ENERGY End of day <ul> <li>heating mode primary electicity use, Btu</li> <li>(compressor, resistance, )</li> </ul> D.ehDefrost ENERGY End of day heating mode defrost (strip) electricity use, Btu D.ehAux ENERGY End of day heating mode auxiliary (strip) electricity use, Btu D.ehFan ENERGY End of day heating mode fan electricity use, Btu D.ehParasitic ENERGY End of day heating mode parasitic electricity, Btu D.ehTot ENERGY End of day <ul> <li>heating mode total electricity use, Btu</li> <li>primary+defrost+aux+fan+parasitic</li> </ul> Name Type Variability Description/Comments D.ecPrimary ENERGY End of day cooling mode compressor electricity use, Btu D.ecFan ENERGY End of day cooling mode fan electricity use, Btu D.ecParasitic ENERGY End of day cooling mode parasitic electricity, Btu D.ecTot ENERGY End of day <ul> <li>cooling mode total electricity use, Btu</li> <li>primary+fan+parasitic</li> </ul> Name Type Variability Description/Comments D.evFan ENERGY End of day OAV mode fan electricity use, Btu D.evParasitic ENERGY End of day OAV mode parasitic electricity use, Btu D.evTot ENERGY End of day <ul> <li>OAV mode total electricity use, Btu</li> <li>fan+parasistic</li> </ul>   zone energy transfers (must be contiguous and in order, see code)  Name Type Variability Description/Comments D.qhZoneSen ENERGY End of day heating mode sensible transfer to zone(s) (after dist losses), Btu D.qhZoneLat ENERGY End of day heating mode latent transfer to zone(s) (after dist losses), Btu D.qcZoneSen ENERGY End of day cooling mode sensible transfer to zone(s) (after dist losses), Btu D.qcZoneLat ENERGY End of day cooling mode latent transfer to zone(s) (after dist losses), Btu D.qvZoneSen ENERGY End of day OAV mode sensible transfer to zone(s) (after dist losses), Btu D.qvZoneLat ENERGY End of day OAV mode latent transfer to zone(s) (after dist losses), Btu H hour. RSYSRES_IVL_SUB Name Type Variability Description/Comments H.n number End of hour <ul> <li>number of intervals added together in this one (divisor for averages)</li> <li>(maintained but unused)</li> </ul>   float members to add, hrsOn MUST be first (else change rsr_Accum() etc)  Name Type Variability Description/Comments H.hrsOn HOURS End of hour operating hours H.hrsOnAux HOURS End of hour <ul> <li>auxiliary heating operating hours (ASHP only)</li> <li>does not include defrost</li> </ul> Name Type Variability Description/Comments H.qhPrimary ENERGY End of hour heating output w/o fan, w/o defrost, Btu H.qhDefrost ENERGY End of hour defrost (strip) heat output, Btu H.qhAux ENERGY End of hour auxiliary heat output, Btu H.qhFan ENERGY End of hour heating mode fan heat, Btu H.qhNet ENERGY End of hour heating mode net output (qhPrimary+qhDefrost+qhAux+qhFan), Btu Name Type Variability Description/Comments H.qcSen ENERGY End of hour sensible cooling output w/o fan (&lt; 0), Btu H.qcLat ENERGY End of hour latent cooling output (&lt;0), Btu H.qcFan ENERGY End of hour cooling mode fan heat, Btu H.qcSenNet ENERGY End of hour sensible cooling net output (qcSen+qcFan), Btu Name Type Variability Description/Comments H.qvFan ENERGY End of hour OAV mode fan heat, Btu Name Type Variability Description/Comments H.fhPrimary ENERGY End of hour heating mode primary fuel, Btu H.fhDefrost ENERGY End of hour heating mode defrost fuel, Btu H.fhAux ENERGY End of hour heating mode auxiliary fuel, Btu H.fhParasitic ENERGY End of hour heating mode parasitic fuel, Btu H.fhTot ENERGY End of hour <ul> <li>heating mode total fuel, Btu</li> <li>primary+defrost+aux+parasitics</li> </ul> Name Type Variability Description/Comments H.ehPrimary ENERGY End of hour <ul> <li>heating mode primary electicity use, Btu</li> <li>(compressor, resistance, )</li> </ul> H.ehDefrost ENERGY End of hour heating mode defrost (strip) electricity use, Btu H.ehAux ENERGY End of hour heating mode auxiliary (strip) electricity use, Btu H.ehFan ENERGY End of hour heating mode fan electricity use, Btu H.ehParasitic ENERGY End of hour heating mode parasitic electricity, Btu H.ehTot ENERGY End of hour <ul> <li>heating mode total electricity use, Btu</li> <li>primary+defrost+aux+fan+parasitic</li> </ul> Name Type Variability Description/Comments H.ecPrimary ENERGY End of hour cooling mode compressor electricity use, Btu H.ecFan ENERGY End of hour cooling mode fan electricity use, Btu H.ecParasitic ENERGY End of hour cooling mode parasitic electricity, Btu H.ecTot ENERGY End of hour <ul> <li>cooling mode total electricity use, Btu</li> <li>primary+fan+parasitic</li> </ul> Name Type Variability Description/Comments H.evFan ENERGY End of hour OAV mode fan electricity use, Btu H.evParasitic ENERGY End of hour OAV mode parasitic electricity use, Btu H.evTot ENERGY End of hour <ul> <li>OAV mode total electricity use, Btu</li> <li>fan+parasistic</li> </ul>   zone energy transfers (must be contiguous and in order, see code)  Name Type Variability Description/Comments H.qhZoneSen ENERGY End of hour heating mode sensible transfer to zone(s) (after dist losses), Btu H.qhZoneLat ENERGY End of hour heating mode latent transfer to zone(s) (after dist losses), Btu H.qcZoneSen ENERGY End of hour cooling mode sensible transfer to zone(s) (after dist losses), Btu H.qcZoneLat ENERGY End of hour cooling mode latent transfer to zone(s) (after dist losses), Btu H.qvZoneSen ENERGY End of hour OAV mode sensible transfer to zone(s) (after dist losses), Btu H.qvZoneLat ENERGY End of hour OAV mode latent transfer to zone(s) (after dist losses), Btu S subhour, aka subStep or sub-time-step RSYSRES_IVL_SUB Name Type Variability Description/Comments S.n number End of subhour <ul> <li>number of intervals added together in this one (divisor for averages)</li> <li>(maintained but unused)</li> </ul>   float members to add, hrsOn MUST be first (else change rsr_Accum() etc)  Name Type Variability Description/Comments S.hrsOn HOURS End of subhour operating hours S.hrsOnAux HOURS End of subhour <ul> <li>auxiliary heating operating hours (ASHP only)</li> <li>does not include defrost</li> </ul> Name Type Variability Description/Comments S.qhPrimary ENERGY End of subhour heating output w/o fan, w/o defrost, Btu S.qhDefrost ENERGY End of subhour defrost (strip) heat output, Btu S.qhAux ENERGY End of subhour auxiliary heat output, Btu S.qhFan ENERGY End of subhour heating mode fan heat, Btu S.qhNet ENERGY End of subhour heating mode net output (qhPrimary+qhDefrost+qhAux+qhFan), Btu Name Type Variability Description/Comments S.qcSen ENERGY End of subhour sensible cooling output w/o fan (&lt; 0), Btu S.qcLat ENERGY End of subhour latent cooling output (&lt;0), Btu S.qcFan ENERGY End of subhour cooling mode fan heat, Btu S.qcSenNet ENERGY End of subhour sensible cooling net output (qcSen+qcFan), Btu Name Type Variability Description/Comments S.qvFan ENERGY End of subhour OAV mode fan heat, Btu Name Type Variability Description/Comments S.fhPrimary ENERGY End of subhour heating mode primary fuel, Btu S.fhDefrost ENERGY End of subhour heating mode defrost fuel, Btu S.fhAux ENERGY End of subhour heating mode auxiliary fuel, Btu S.fhParasitic ENERGY End of subhour heating mode parasitic fuel, Btu S.fhTot ENERGY End of subhour <ul> <li>heating mode total fuel, Btu</li> <li>primary+defrost+aux+parasitics</li> </ul> Name Type Variability Description/Comments S.ehPrimary ENERGY End of subhour <ul> <li>heating mode primary electicity use, Btu</li> <li>(compressor, resistance, )</li> </ul> S.ehDefrost ENERGY End of subhour heating mode defrost (strip) electricity use, Btu S.ehAux ENERGY End of subhour heating mode auxiliary (strip) electricity use, Btu S.ehFan ENERGY End of subhour heating mode fan electricity use, Btu S.ehParasitic ENERGY End of subhour heating mode parasitic electricity, Btu S.ehTot ENERGY End of subhour <ul> <li>heating mode total electricity use, Btu</li> <li>primary+defrost+aux+fan+parasitic</li> </ul> Name Type Variability Description/Comments S.ecPrimary ENERGY End of subhour cooling mode compressor electricity use, Btu S.ecFan ENERGY End of subhour cooling mode fan electricity use, Btu S.ecParasitic ENERGY End of subhour cooling mode parasitic electricity, Btu S.ecTot ENERGY End of subhour <ul> <li>cooling mode total electricity use, Btu</li> <li>primary+fan+parasitic</li> </ul> Name Type Variability Description/Comments S.evFan ENERGY End of subhour OAV mode fan electricity use, Btu S.evParasitic ENERGY End of subhour OAV mode parasitic electricity use, Btu S.evTot ENERGY End of subhour <ul> <li>OAV mode total electricity use, Btu</li> <li>fan+parasistic</li> </ul>   zone energy transfers (must be contiguous and in order, see code)  Name Type Variability Description/Comments S.qhZoneSen ENERGY End of subhour heating mode sensible transfer to zone(s) (after dist losses), Btu S.qhZoneLat ENERGY End of subhour heating mode latent transfer to zone(s) (after dist losses), Btu S.qcZoneSen ENERGY End of subhour cooling mode sensible transfer to zone(s) (after dist losses), Btu S.qcZoneLat ENERGY End of subhour cooling mode latent transfer to zone(s) (after dist losses), Btu S.qvZoneSen ENERGY End of subhour OAV mode sensible transfer to zone(s) (after dist losses), Btu S.qvZoneLat ENERGY End of subhour OAV mode latent transfer to zone(s) (after dist losses), Btu Name Type Variability Description/Comments prior <ul> <li>prior year,month,day,hour,subhr results, available throughout interval</li> <li>CAUTION: code assumes prior and curr arranged so can offset from curr to prior. eg in cnguts.cpp.</li> </ul> RSYSRES_SUB Name Type Variability Description/Comments prior.Y run results, aka year or annual RSYSRES_IVL_SUB Name Type Variability Description/Comments prior.Y.n number Start of run <ul> <li>number of intervals added together in this one (divisor for averages)</li> <li>(maintained but unused)</li> </ul>   float members to add, hrsOn MUST be first (else change rsr_Accum() etc)  Name Type Variability Description/Comments prior.Y.hrsOn HOURS Start of run operating hours prior.Y.hrsOnAux HOURS Start of run <ul> <li>auxiliary heating operating hours (ASHP only)</li> <li>does not include defrost</li> </ul> Name Type Variability Description/Comments prior.Y.qhPrimary ENERGY Start of run heating output w/o fan, w/o defrost, Btu prior.Y.qhDefrost ENERGY Start of run defrost (strip) heat output, Btu prior.Y.qhAux ENERGY Start of run auxiliary heat output, Btu prior.Y.qhFan ENERGY Start of run heating mode fan heat, Btu prior.Y.qhNet ENERGY Start of run heating mode net output (qhPrimary+qhDefrost+qhAux+qhFan), Btu Name Type Variability Description/Comments prior.Y.qcSen ENERGY Start of run sensible cooling output w/o fan (&lt; 0), Btu prior.Y.qcLat ENERGY Start of run latent cooling output (&lt;0), Btu prior.Y.qcFan ENERGY Start of run cooling mode fan heat, Btu prior.Y.qcSenNet ENERGY Start of run sensible cooling net output (qcSen+qcFan), Btu Name Type Variability Description/Comments prior.Y.qvFan ENERGY Start of run OAV mode fan heat, Btu Name Type Variability Description/Comments prior.Y.fhPrimary ENERGY Start of run heating mode primary fuel, Btu prior.Y.fhDefrost ENERGY Start of run heating mode defrost fuel, Btu prior.Y.fhAux ENERGY Start of run heating mode auxiliary fuel, Btu prior.Y.fhParasitic ENERGY Start of run heating mode parasitic fuel, Btu prior.Y.fhTot ENERGY Start of run <ul> <li>heating mode total fuel, Btu</li> <li>primary+defrost+aux+parasitics</li> </ul> Name Type Variability Description/Comments prior.Y.ehPrimary ENERGY Start of run <ul> <li>heating mode primary electicity use, Btu</li> <li>(compressor, resistance, )</li> </ul> prior.Y.ehDefrost ENERGY Start of run heating mode defrost (strip) electricity use, Btu prior.Y.ehAux ENERGY Start of run heating mode auxiliary (strip) electricity use, Btu prior.Y.ehFan ENERGY Start of run heating mode fan electricity use, Btu prior.Y.ehParasitic ENERGY Start of run heating mode parasitic electricity, Btu prior.Y.ehTot ENERGY Start of run <ul> <li>heating mode total electricity use, Btu</li> <li>primary+defrost+aux+fan+parasitic</li> </ul> Name Type Variability Description/Comments prior.Y.ecPrimary ENERGY Start of run cooling mode compressor electricity use, Btu prior.Y.ecFan ENERGY Start of run cooling mode fan electricity use, Btu prior.Y.ecParasitic ENERGY Start of run cooling mode parasitic electricity, Btu prior.Y.ecTot ENERGY Start of run <ul> <li>cooling mode total electricity use, Btu</li> <li>primary+fan+parasitic</li> </ul> Name Type Variability Description/Comments prior.Y.evFan ENERGY Start of run OAV mode fan electricity use, Btu prior.Y.evParasitic ENERGY Start of run OAV mode parasitic electricity use, Btu prior.Y.evTot ENERGY Start of run <ul> <li>OAV mode total electricity use, Btu</li> <li>fan+parasistic</li> </ul>   zone energy transfers (must be contiguous and in order, see code)  Name Type Variability Description/Comments prior.Y.qhZoneSen ENERGY Start of run heating mode sensible transfer to zone(s) (after dist losses), Btu prior.Y.qhZoneLat ENERGY Start of run heating mode latent transfer to zone(s) (after dist losses), Btu prior.Y.qcZoneSen ENERGY Start of run cooling mode sensible transfer to zone(s) (after dist losses), Btu prior.Y.qcZoneLat ENERGY Start of run cooling mode latent transfer to zone(s) (after dist losses), Btu prior.Y.qvZoneSen ENERGY Start of run OAV mode sensible transfer to zone(s) (after dist losses), Btu prior.Y.qvZoneLat ENERGY Start of run OAV mode latent transfer to zone(s) (after dist losses), Btu prior.M month RSYSRES_IVL_SUB Name Type Variability Description/Comments prior.M.n number Unknown <ul> <li>number of intervals added together in this one (divisor for averages)</li> <li>(maintained but unused)</li> </ul>   float members to add, hrsOn MUST be first (else change rsr_Accum() etc)  Name Type Variability Description/Comments prior.M.hrsOn HOURS Unknown operating hours prior.M.hrsOnAux HOURS Unknown <ul> <li>auxiliary heating operating hours (ASHP only)</li> <li>does not include defrost</li> </ul> Name Type Variability Description/Comments prior.M.qhPrimary ENERGY Unknown heating output w/o fan, w/o defrost, Btu prior.M.qhDefrost ENERGY Unknown defrost (strip) heat output, Btu prior.M.qhAux ENERGY Unknown auxiliary heat output, Btu prior.M.qhFan ENERGY Unknown heating mode fan heat, Btu prior.M.qhNet ENERGY Unknown heating mode net output (qhPrimary+qhDefrost+qhAux+qhFan), Btu Name Type Variability Description/Comments prior.M.qcSen ENERGY Unknown sensible cooling output w/o fan (&lt; 0), Btu prior.M.qcLat ENERGY Unknown latent cooling output (&lt;0), Btu prior.M.qcFan ENERGY Unknown cooling mode fan heat, Btu prior.M.qcSenNet ENERGY Unknown sensible cooling net output (qcSen+qcFan), Btu Name Type Variability Description/Comments prior.M.qvFan ENERGY Unknown OAV mode fan heat, Btu Name Type Variability Description/Comments prior.M.fhPrimary ENERGY Unknown heating mode primary fuel, Btu prior.M.fhDefrost ENERGY Unknown heating mode defrost fuel, Btu prior.M.fhAux ENERGY Unknown heating mode auxiliary fuel, Btu prior.M.fhParasitic ENERGY Unknown heating mode parasitic fuel, Btu prior.M.fhTot ENERGY Unknown <ul> <li>heating mode total fuel, Btu</li> <li>primary+defrost+aux+parasitics</li> </ul> Name Type Variability Description/Comments prior.M.ehPrimary ENERGY Unknown <ul> <li>heating mode primary electicity use, Btu</li> <li>(compressor, resistance, )</li> </ul> prior.M.ehDefrost ENERGY Unknown heating mode defrost (strip) electricity use, Btu prior.M.ehAux ENERGY Unknown heating mode auxiliary (strip) electricity use, Btu prior.M.ehFan ENERGY Unknown heating mode fan electricity use, Btu prior.M.ehParasitic ENERGY Unknown heating mode parasitic electricity, Btu prior.M.ehTot ENERGY Unknown <ul> <li>heating mode total electricity use, Btu</li> <li>primary+defrost+aux+fan+parasitic</li> </ul> Name Type Variability Description/Comments prior.M.ecPrimary ENERGY Unknown cooling mode compressor electricity use, Btu prior.M.ecFan ENERGY Unknown cooling mode fan electricity use, Btu prior.M.ecParasitic ENERGY Unknown cooling mode parasitic electricity, Btu prior.M.ecTot ENERGY Unknown <ul> <li>cooling mode total electricity use, Btu</li> <li>primary+fan+parasitic</li> </ul> Name Type Variability Description/Comments prior.M.evFan ENERGY Unknown OAV mode fan electricity use, Btu prior.M.evParasitic ENERGY Unknown OAV mode parasitic electricity use, Btu prior.M.evTot ENERGY Unknown <ul> <li>OAV mode total electricity use, Btu</li> <li>fan+parasistic</li> </ul>   zone energy transfers (must be contiguous and in order, see code)  Name Type Variability Description/Comments prior.M.qhZoneSen ENERGY Unknown heating mode sensible transfer to zone(s) (after dist losses), Btu prior.M.qhZoneLat ENERGY Unknown heating mode latent transfer to zone(s) (after dist losses), Btu prior.M.qcZoneSen ENERGY Unknown cooling mode sensible transfer to zone(s) (after dist losses), Btu prior.M.qcZoneLat ENERGY Unknown cooling mode latent transfer to zone(s) (after dist losses), Btu prior.M.qvZoneSen ENERGY Unknown OAV mode sensible transfer to zone(s) (after dist losses), Btu prior.M.qvZoneLat ENERGY Unknown OAV mode latent transfer to zone(s) (after dist losses), Btu prior.D day RSYSRES_IVL_SUB Name Type Variability Description/Comments prior.D.n number Start of day <ul> <li>number of intervals added together in this one (divisor for averages)</li> <li>(maintained but unused)</li> </ul>   float members to add, hrsOn MUST be first (else change rsr_Accum() etc)  Name Type Variability Description/Comments prior.D.hrsOn HOURS Start of day operating hours prior.D.hrsOnAux HOURS Start of day <ul> <li>auxiliary heating operating hours (ASHP only)</li> <li>does not include defrost</li> </ul> Name Type Variability Description/Comments prior.D.qhPrimary ENERGY Start of day heating output w/o fan, w/o defrost, Btu prior.D.qhDefrost ENERGY Start of day defrost (strip) heat output, Btu prior.D.qhAux ENERGY Start of day auxiliary heat output, Btu prior.D.qhFan ENERGY Start of day heating mode fan heat, Btu prior.D.qhNet ENERGY Start of day heating mode net output (qhPrimary+qhDefrost+qhAux+qhFan), Btu Name Type Variability Description/Comments prior.D.qcSen ENERGY Start of day sensible cooling output w/o fan (&lt; 0), Btu prior.D.qcLat ENERGY Start of day latent cooling output (&lt;0), Btu prior.D.qcFan ENERGY Start of day cooling mode fan heat, Btu prior.D.qcSenNet ENERGY Start of day sensible cooling net output (qcSen+qcFan), Btu Name Type Variability Description/Comments prior.D.qvFan ENERGY Start of day OAV mode fan heat, Btu Name Type Variability Description/Comments prior.D.fhPrimary ENERGY Start of day heating mode primary fuel, Btu prior.D.fhDefrost ENERGY Start of day heating mode defrost fuel, Btu prior.D.fhAux ENERGY Start of day heating mode auxiliary fuel, Btu prior.D.fhParasitic ENERGY Start of day heating mode parasitic fuel, Btu prior.D.fhTot ENERGY Start of day <ul> <li>heating mode total fuel, Btu</li> <li>primary+defrost+aux+parasitics</li> </ul> Name Type Variability Description/Comments prior.D.ehPrimary ENERGY Start of day <ul> <li>heating mode primary electicity use, Btu</li> <li>(compressor, resistance, )</li> </ul> prior.D.ehDefrost ENERGY Start of day heating mode defrost (strip) electricity use, Btu prior.D.ehAux ENERGY Start of day heating mode auxiliary (strip) electricity use, Btu prior.D.ehFan ENERGY Start of day heating mode fan electricity use, Btu prior.D.ehParasitic ENERGY Start of day heating mode parasitic electricity, Btu prior.D.ehTot ENERGY Start of day <ul> <li>heating mode total electricity use, Btu</li> <li>primary+defrost+aux+fan+parasitic</li> </ul> Name Type Variability Description/Comments prior.D.ecPrimary ENERGY Start of day cooling mode compressor electricity use, Btu prior.D.ecFan ENERGY Start of day cooling mode fan electricity use, Btu prior.D.ecParasitic ENERGY Start of day cooling mode parasitic electricity, Btu prior.D.ecTot ENERGY Start of day <ul> <li>cooling mode total electricity use, Btu</li> <li>primary+fan+parasitic</li> </ul> Name Type Variability Description/Comments prior.D.evFan ENERGY Start of day OAV mode fan electricity use, Btu prior.D.evParasitic ENERGY Start of day OAV mode parasitic electricity use, Btu prior.D.evTot ENERGY Start of day <ul> <li>OAV mode total electricity use, Btu</li> <li>fan+parasistic</li> </ul>   zone energy transfers (must be contiguous and in order, see code)  Name Type Variability Description/Comments prior.D.qhZoneSen ENERGY Start of day heating mode sensible transfer to zone(s) (after dist losses), Btu prior.D.qhZoneLat ENERGY Start of day heating mode latent transfer to zone(s) (after dist losses), Btu prior.D.qcZoneSen ENERGY Start of day cooling mode sensible transfer to zone(s) (after dist losses), Btu prior.D.qcZoneLat ENERGY Start of day cooling mode latent transfer to zone(s) (after dist losses), Btu prior.D.qvZoneSen ENERGY Start of day OAV mode sensible transfer to zone(s) (after dist losses), Btu prior.D.qvZoneLat ENERGY Start of day OAV mode latent transfer to zone(s) (after dist losses), Btu prior.H hour. RSYSRES_IVL_SUB Name Type Variability Description/Comments prior.H.n number Start of hour <ul> <li>number of intervals added together in this one (divisor for averages)</li> <li>(maintained but unused)</li> </ul>   float members to add, hrsOn MUST be first (else change rsr_Accum() etc)  Name Type Variability Description/Comments prior.H.hrsOn HOURS Start of hour operating hours prior.H.hrsOnAux HOURS Start of hour <ul> <li>auxiliary heating operating hours (ASHP only)</li> <li>does not include defrost</li> </ul> Name Type Variability Description/Comments prior.H.qhPrimary ENERGY Start of hour heating output w/o fan, w/o defrost, Btu prior.H.qhDefrost ENERGY Start of hour defrost (strip) heat output, Btu prior.H.qhAux ENERGY Start of hour auxiliary heat output, Btu prior.H.qhFan ENERGY Start of hour heating mode fan heat, Btu prior.H.qhNet ENERGY Start of hour heating mode net output (qhPrimary+qhDefrost+qhAux+qhFan), Btu Name Type Variability Description/Comments prior.H.qcSen ENERGY Start of hour sensible cooling output w/o fan (&lt; 0), Btu prior.H.qcLat ENERGY Start of hour latent cooling output (&lt;0), Btu prior.H.qcFan ENERGY Start of hour cooling mode fan heat, Btu prior.H.qcSenNet ENERGY Start of hour sensible cooling net output (qcSen+qcFan), Btu Name Type Variability Description/Comments prior.H.qvFan ENERGY Start of hour OAV mode fan heat, Btu Name Type Variability Description/Comments prior.H.fhPrimary ENERGY Start of hour heating mode primary fuel, Btu prior.H.fhDefrost ENERGY Start of hour heating mode defrost fuel, Btu prior.H.fhAux ENERGY Start of hour heating mode auxiliary fuel, Btu prior.H.fhParasitic ENERGY Start of hour heating mode parasitic fuel, Btu prior.H.fhTot ENERGY Start of hour <ul> <li>heating mode total fuel, Btu</li> <li>primary+defrost+aux+parasitics</li> </ul> Name Type Variability Description/Comments prior.H.ehPrimary ENERGY Start of hour <ul> <li>heating mode primary electicity use, Btu</li> <li>(compressor, resistance, )</li> </ul> prior.H.ehDefrost ENERGY Start of hour heating mode defrost (strip) electricity use, Btu prior.H.ehAux ENERGY Start of hour heating mode auxiliary (strip) electricity use, Btu prior.H.ehFan ENERGY Start of hour heating mode fan electricity use, Btu prior.H.ehParasitic ENERGY Start of hour heating mode parasitic electricity, Btu prior.H.ehTot ENERGY Start of hour <ul> <li>heating mode total electricity use, Btu</li> <li>primary+defrost+aux+fan+parasitic</li> </ul> Name Type Variability Description/Comments prior.H.ecPrimary ENERGY Start of hour cooling mode compressor electricity use, Btu prior.H.ecFan ENERGY Start of hour cooling mode fan electricity use, Btu prior.H.ecParasitic ENERGY Start of hour cooling mode parasitic electricity, Btu prior.H.ecTot ENERGY Start of hour <ul> <li>cooling mode total electricity use, Btu</li> <li>primary+fan+parasitic</li> </ul> Name Type Variability Description/Comments prior.H.evFan ENERGY Start of hour OAV mode fan electricity use, Btu prior.H.evParasitic ENERGY Start of hour OAV mode parasitic electricity use, Btu prior.H.evTot ENERGY Start of hour <ul> <li>OAV mode total electricity use, Btu</li> <li>fan+parasistic</li> </ul>   zone energy transfers (must be contiguous and in order, see code)  Name Type Variability Description/Comments prior.H.qhZoneSen ENERGY Start of hour heating mode sensible transfer to zone(s) (after dist losses), Btu prior.H.qhZoneLat ENERGY Start of hour heating mode latent transfer to zone(s) (after dist losses), Btu prior.H.qcZoneSen ENERGY Start of hour cooling mode sensible transfer to zone(s) (after dist losses), Btu prior.H.qcZoneLat ENERGY Start of hour cooling mode latent transfer to zone(s) (after dist losses), Btu prior.H.qvZoneSen ENERGY Start of hour OAV mode sensible transfer to zone(s) (after dist losses), Btu prior.H.qvZoneLat ENERGY Start of hour OAV mode latent transfer to zone(s) (after dist losses), Btu prior.S subhour, aka subStep or sub-time-step RSYSRES_IVL_SUB Name Type Variability Description/Comments prior.S.n number Start of subhour <ul> <li>number of intervals added together in this one (divisor for averages)</li> <li>(maintained but unused)</li> </ul>   float members to add, hrsOn MUST be first (else change rsr_Accum() etc)  Name Type Variability Description/Comments prior.S.hrsOn HOURS Start of subhour operating hours prior.S.hrsOnAux HOURS Start of subhour <ul> <li>auxiliary heating operating hours (ASHP only)</li> <li>does not include defrost</li> </ul> Name Type Variability Description/Comments prior.S.qhPrimary ENERGY Start of subhour heating output w/o fan, w/o defrost, Btu prior.S.qhDefrost ENERGY Start of subhour defrost (strip) heat output, Btu prior.S.qhAux ENERGY Start of subhour auxiliary heat output, Btu prior.S.qhFan ENERGY Start of subhour heating mode fan heat, Btu prior.S.qhNet ENERGY Start of subhour heating mode net output (qhPrimary+qhDefrost+qhAux+qhFan), Btu Name Type Variability Description/Comments prior.S.qcSen ENERGY Start of subhour sensible cooling output w/o fan (&lt; 0), Btu prior.S.qcLat ENERGY Start of subhour latent cooling output (&lt;0), Btu prior.S.qcFan ENERGY Start of subhour cooling mode fan heat, Btu prior.S.qcSenNet ENERGY Start of subhour sensible cooling net output (qcSen+qcFan), Btu Name Type Variability Description/Comments prior.S.qvFan ENERGY Start of subhour OAV mode fan heat, Btu Name Type Variability Description/Comments prior.S.fhPrimary ENERGY Start of subhour heating mode primary fuel, Btu prior.S.fhDefrost ENERGY Start of subhour heating mode defrost fuel, Btu prior.S.fhAux ENERGY Start of subhour heating mode auxiliary fuel, Btu prior.S.fhParasitic ENERGY Start of subhour heating mode parasitic fuel, Btu prior.S.fhTot ENERGY Start of subhour <ul> <li>heating mode total fuel, Btu</li> <li>primary+defrost+aux+parasitics</li> </ul> Name Type Variability Description/Comments prior.S.ehPrimary ENERGY Start of subhour <ul> <li>heating mode primary electicity use, Btu</li> <li>(compressor, resistance, )</li> </ul> prior.S.ehDefrost ENERGY Start of subhour heating mode defrost (strip) electricity use, Btu prior.S.ehAux ENERGY Start of subhour heating mode auxiliary (strip) electricity use, Btu prior.S.ehFan ENERGY Start of subhour heating mode fan electricity use, Btu prior.S.ehParasitic ENERGY Start of subhour heating mode parasitic electricity, Btu prior.S.ehTot ENERGY Start of subhour <ul> <li>heating mode total electricity use, Btu</li> <li>primary+defrost+aux+fan+parasitic</li> </ul> Name Type Variability Description/Comments prior.S.ecPrimary ENERGY Start of subhour cooling mode compressor electricity use, Btu prior.S.ecFan ENERGY Start of subhour cooling mode fan electricity use, Btu prior.S.ecParasitic ENERGY Start of subhour cooling mode parasitic electricity, Btu prior.S.ecTot ENERGY Start of subhour <ul> <li>cooling mode total electricity use, Btu</li> <li>primary+fan+parasitic</li> </ul> Name Type Variability Description/Comments prior.S.evFan ENERGY Start of subhour OAV mode fan electricity use, Btu prior.S.evParasitic ENERGY Start of subhour OAV mode parasitic electricity use, Btu prior.S.evTot ENERGY Start of subhour <ul> <li>OAV mode total electricity use, Btu</li> <li>fan+parasistic</li> </ul>   zone energy transfers (must be contiguous and in order, see code)  Name Type Variability Description/Comments prior.S.qhZoneSen ENERGY Start of subhour heating mode sensible transfer to zone(s) (after dist losses), Btu prior.S.qhZoneLat ENERGY Start of subhour heating mode latent transfer to zone(s) (after dist losses), Btu prior.S.qcZoneSen ENERGY Start of subhour cooling mode sensible transfer to zone(s) (after dist losses), Btu prior.S.qcZoneLat ENERGY Start of subhour cooling mode latent transfer to zone(s) (after dist losses), Btu prior.S.qvZoneSen ENERGY Start of subhour OAV mode sensible transfer to zone(s) (after dist losses), Btu prior.S.qvZoneLat ENERGY Start of subhour OAV mode latent transfer to zone(s) (after dist losses), Btu"},{"location":"probe-definitions/SHADEX/","title":"SHADEX","text":"<p>title: SHADEX ---</p> Name Type Variability Description/Comments mounting choice:MOUNT input time <ul> <li>mounting</li> <li>C_MOUNTCH_BLDG: attached to bldg (rotates per [bldgAzm][bldgazm])</li> <li>C_MOUNTCH_SITE: site base (does not rotate)</li> </ul> pnIdx number input time <ul> <li>Penumbra surface index</li> <li>-1 if no Penumbra surface</li> </ul> area DBL input time area derived from polygon, ft2 Name Type Variability Description/Comments fBeam number End of hour <ul> <li>fraction of area receiving direct beam</li> <li>1 if no Penumbra shading</li> </ul> fBeamErrCount number End of hour <ul> <li>counter for fBeam &gt; 1 errors</li> <li>limits # of runtime messages</li> </ul> Name Type Variability Description/Comments vrtInp[index] number Array [DIM_POLYGONXYZ] input time input vertices (x, y, z), ft"},{"location":"probe-definitions/ahRes/","title":"ahRes","text":"<p>title: ahRes ---</p> Name Type Variability Description/Comments Y ah run results, aka year or annual AHRES_IVL_SUB Name Type Variability Description/Comments Y.n number End of run <ul> <li>number of intervals added together in this one (divisor for averages)</li> <li>float members to average in results accumulation. cnguts.h defines assume tDbO is 1st, vf is last.</li> <li>pairs consisting of temperature &amp; humidity (wetbulb temp may be generated when printing)</li> </ul> Y.tDbO TEMP End of run outdoor temp (for convience for reporting; same for all ah) (Top.tDbO, .wO) Y.wO HUMRAT End of run outdoor temp (for convience for reporting; same for all ah) (Top.tDbO, .wO) Y.tr TEMP End of run return air (AH.tr,.wr) Y.wr HUMRAT End of run return air (AH.tr,.wr) Y.thx TEMP End of run heat recovery air (.ah_oaHx.hx_supOutAF.as_tdb,.ah_oaHx.hx_supOutAF.as_w) Y.whx HUMRAT End of run heat recovery air (.ah_oaHx.hx_supOutAF.as_tdb,.ah_oaHx.hx_supOutAF.as_w) Y.fhx number End of run fraction air through heat recovery (= 1 - .ah_oaHx.hx_bypassFrac) Y.tmix TEMP End of run mixed air (.tmix,.wmix) Y.wmix HUMRAT End of run mixed air (.tmix,.wmix) Y.ts TEMP End of run supply air (.ts, .ws) Y.ws HUMRAT End of run supply air (.ts, .ws) Y.po number End of run fraction outside air (.po) Y.frFanOn number End of run fraction of time fan on if ahFanCycles, else 1.0 Y.vf AFLOW End of run <ul> <li>flow (at supply fan) (.cmix)</li> <li>float members to add: qh is first, hrsOn is last.  CAUTION: q's here are energy not power.</li> </ul> Y.qh ENERGY End of run heat and total cool load (at coils) Y.qc ENERGY End of run heat and total cool load (at coils) Y.qs ENERGY End of run cool sensible and latent loads (included in qc) Y.ql ENERGY End of run cool sensible and latent loads (included in qc) Y.qO     ENERGY End of run net energy taken from outside air (possible future impl); fan heat energy Y.qFan ENERGY End of run net energy taken from outside air (possible future impl); fan heat energy Y.qLoss ENERGY End of run leak/loss net energy; energy delivered to load. Y.qLoad ENERGY End of run leak/loss net energy; energy delivered to load. Y.qBal ENERGY End of run unbalance, should be near 0: qh+qc+qO+qFan+qLoss+qLoad. Y.ph ENERGY End of run heat and cool coil input energy, from meter or (probably) from plant Y.pc ENERGY End of run heat and cool coil input energy, from meter or (probably) from plant Y.pAuxH ENERGY End of run heat and cool aux energy Y.pAuxC ENERGY End of run heat and cool aux energy Y.pFan ENERGY End of run fans input energy Y.hrsOn HOURS End of run <ul> <li>time air handler on: accumulated Top.tp_subhrDur</li> <li>int members to sum in accumulation.  cnguts.h defines assume nSubhr is 1st, nIterFan is last.</li> </ul> Y.nSubhr number End of run subhour counter: for convenience / possibly making cluster-dependent Y.nIter1 number End of run iteration counter 1: # times called, including immediate exits Y.nIter2 number End of run iteration counter 2: # times executed Y.nIter4 number End of run iteration counter 4: # inner loops (calls to pute4Fs) Y.nIterFan number End of run # fan adjustment iterations, counting both ups and downs M month AHRES_IVL_SUB Name Type Variability Description/Comments M.n number Unknown <ul> <li>number of intervals added together in this one (divisor for averages)</li> <li>float members to average in results accumulation. cnguts.h defines assume tDbO is 1st, vf is last.</li> <li>pairs consisting of temperature &amp; humidity (wetbulb temp may be generated when printing)</li> </ul> M.tDbO TEMP Unknown outdoor temp (for convience for reporting; same for all ah) (Top.tDbO, .wO) M.wO HUMRAT Unknown outdoor temp (for convience for reporting; same for all ah) (Top.tDbO, .wO) M.tr TEMP Unknown return air (AH.tr,.wr) M.wr HUMRAT Unknown return air (AH.tr,.wr) M.thx TEMP Unknown heat recovery air (.ah_oaHx.hx_supOutAF.as_tdb,.ah_oaHx.hx_supOutAF.as_w) M.whx HUMRAT Unknown heat recovery air (.ah_oaHx.hx_supOutAF.as_tdb,.ah_oaHx.hx_supOutAF.as_w) M.fhx number Unknown fraction air through heat recovery (= 1 - .ah_oaHx.hx_bypassFrac) M.tmix TEMP Unknown mixed air (.tmix,.wmix) M.wmix HUMRAT Unknown mixed air (.tmix,.wmix) M.ts TEMP Unknown supply air (.ts, .ws) M.ws HUMRAT Unknown supply air (.ts, .ws) M.po number Unknown fraction outside air (.po) M.frFanOn number Unknown fraction of time fan on if ahFanCycles, else 1.0 M.vf AFLOW Unknown <ul> <li>flow (at supply fan) (.cmix)</li> <li>float members to add: qh is first, hrsOn is last.  CAUTION: q's here are energy not power.</li> </ul> M.qh ENERGY Unknown heat and total cool load (at coils) M.qc ENERGY Unknown heat and total cool load (at coils) M.qs ENERGY Unknown cool sensible and latent loads (included in qc) M.ql ENERGY Unknown cool sensible and latent loads (included in qc) M.qO     ENERGY Unknown net energy taken from outside air (possible future impl); fan heat energy M.qFan ENERGY Unknown net energy taken from outside air (possible future impl); fan heat energy M.qLoss ENERGY Unknown leak/loss net energy; energy delivered to load. M.qLoad ENERGY Unknown leak/loss net energy; energy delivered to load. M.qBal ENERGY Unknown unbalance, should be near 0: qh+qc+qO+qFan+qLoss+qLoad. M.ph ENERGY Unknown heat and cool coil input energy, from meter or (probably) from plant M.pc ENERGY Unknown heat and cool coil input energy, from meter or (probably) from plant M.pAuxH ENERGY Unknown heat and cool aux energy M.pAuxC ENERGY Unknown heat and cool aux energy M.pFan ENERGY Unknown fans input energy M.hrsOn HOURS Unknown <ul> <li>time air handler on: accumulated Top.tp_subhrDur</li> <li>int members to sum in accumulation.  cnguts.h defines assume nSubhr is 1st, nIterFan is last.</li> </ul> M.nSubhr number Unknown subhour counter: for convenience / possibly making cluster-dependent M.nIter1 number Unknown iteration counter 1: # times called, including immediate exits M.nIter2 number Unknown iteration counter 2: # times executed M.nIter4 number Unknown iteration counter 4: # inner loops (calls to pute4Fs) M.nIterFan number Unknown # fan adjustment iterations, counting both ups and downs D day AHRES_IVL_SUB Name Type Variability Description/Comments D.n number End of day <ul> <li>number of intervals added together in this one (divisor for averages)</li> <li>float members to average in results accumulation. cnguts.h defines assume tDbO is 1st, vf is last.</li> <li>pairs consisting of temperature &amp; humidity (wetbulb temp may be generated when printing)</li> </ul> D.tDbO TEMP End of day outdoor temp (for convience for reporting; same for all ah) (Top.tDbO, .wO) D.wO HUMRAT End of day outdoor temp (for convience for reporting; same for all ah) (Top.tDbO, .wO) D.tr TEMP End of day return air (AH.tr,.wr) D.wr HUMRAT End of day return air (AH.tr,.wr) D.thx TEMP End of day heat recovery air (.ah_oaHx.hx_supOutAF.as_tdb,.ah_oaHx.hx_supOutAF.as_w) D.whx HUMRAT End of day heat recovery air (.ah_oaHx.hx_supOutAF.as_tdb,.ah_oaHx.hx_supOutAF.as_w) D.fhx number End of day fraction air through heat recovery (= 1 - .ah_oaHx.hx_bypassFrac) D.tmix TEMP End of day mixed air (.tmix,.wmix) D.wmix HUMRAT End of day mixed air (.tmix,.wmix) D.ts TEMP End of day supply air (.ts, .ws) D.ws HUMRAT End of day supply air (.ts, .ws) D.po number End of day fraction outside air (.po) D.frFanOn number End of day fraction of time fan on if ahFanCycles, else 1.0 D.vf AFLOW End of day <ul> <li>flow (at supply fan) (.cmix)</li> <li>float members to add: qh is first, hrsOn is last.  CAUTION: q's here are energy not power.</li> </ul> D.qh ENERGY End of day heat and total cool load (at coils) D.qc ENERGY End of day heat and total cool load (at coils) D.qs ENERGY End of day cool sensible and latent loads (included in qc) D.ql ENERGY End of day cool sensible and latent loads (included in qc) D.qO     ENERGY End of day net energy taken from outside air (possible future impl); fan heat energy D.qFan ENERGY End of day net energy taken from outside air (possible future impl); fan heat energy D.qLoss ENERGY End of day leak/loss net energy; energy delivered to load. D.qLoad ENERGY End of day leak/loss net energy; energy delivered to load. D.qBal ENERGY End of day unbalance, should be near 0: qh+qc+qO+qFan+qLoss+qLoad. D.ph ENERGY End of day heat and cool coil input energy, from meter or (probably) from plant D.pc ENERGY End of day heat and cool coil input energy, from meter or (probably) from plant D.pAuxH ENERGY End of day heat and cool aux energy D.pAuxC ENERGY End of day heat and cool aux energy D.pFan ENERGY End of day fans input energy D.hrsOn HOURS End of day <ul> <li>time air handler on: accumulated Top.tp_subhrDur</li> <li>int members to sum in accumulation.  cnguts.h defines assume nSubhr is 1st, nIterFan is last.</li> </ul> D.nSubhr number End of day subhour counter: for convenience / possibly making cluster-dependent D.nIter1 number End of day iteration counter 1: # times called, including immediate exits D.nIter2 number End of day iteration counter 2: # times executed D.nIter4 number End of day iteration counter 4: # inner loops (calls to pute4Fs) D.nIterFan number End of day # fan adjustment iterations, counting both ups and downs H hour. AHRES_IVL_SUB Name Type Variability Description/Comments H.n number End of hour <ul> <li>number of intervals added together in this one (divisor for averages)</li> <li>float members to average in results accumulation. cnguts.h defines assume tDbO is 1st, vf is last.</li> <li>pairs consisting of temperature &amp; humidity (wetbulb temp may be generated when printing)</li> </ul> H.tDbO TEMP End of hour outdoor temp (for convience for reporting; same for all ah) (Top.tDbO, .wO) H.wO HUMRAT End of hour outdoor temp (for convience for reporting; same for all ah) (Top.tDbO, .wO) H.tr TEMP End of hour return air (AH.tr,.wr) H.wr HUMRAT End of hour return air (AH.tr,.wr) H.thx TEMP End of hour heat recovery air (.ah_oaHx.hx_supOutAF.as_tdb,.ah_oaHx.hx_supOutAF.as_w) H.whx HUMRAT End of hour heat recovery air (.ah_oaHx.hx_supOutAF.as_tdb,.ah_oaHx.hx_supOutAF.as_w) H.fhx number End of hour fraction air through heat recovery (= 1 - .ah_oaHx.hx_bypassFrac) H.tmix TEMP End of hour mixed air (.tmix,.wmix) H.wmix HUMRAT End of hour mixed air (.tmix,.wmix) H.ts TEMP End of hour supply air (.ts, .ws) H.ws HUMRAT End of hour supply air (.ts, .ws) H.po number End of hour fraction outside air (.po) H.frFanOn number End of hour fraction of time fan on if ahFanCycles, else 1.0 H.vf AFLOW End of hour <ul> <li>flow (at supply fan) (.cmix)</li> <li>float members to add: qh is first, hrsOn is last.  CAUTION: q's here are energy not power.</li> </ul> H.qh ENERGY End of hour heat and total cool load (at coils) H.qc ENERGY End of hour heat and total cool load (at coils) H.qs ENERGY End of hour cool sensible and latent loads (included in qc) H.ql ENERGY End of hour cool sensible and latent loads (included in qc) H.qO     ENERGY End of hour net energy taken from outside air (possible future impl); fan heat energy H.qFan ENERGY End of hour net energy taken from outside air (possible future impl); fan heat energy H.qLoss ENERGY End of hour leak/loss net energy; energy delivered to load. H.qLoad ENERGY End of hour leak/loss net energy; energy delivered to load. H.qBal ENERGY End of hour unbalance, should be near 0: qh+qc+qO+qFan+qLoss+qLoad. H.ph ENERGY End of hour heat and cool coil input energy, from meter or (probably) from plant H.pc ENERGY End of hour heat and cool coil input energy, from meter or (probably) from plant H.pAuxH ENERGY End of hour heat and cool aux energy H.pAuxC ENERGY End of hour heat and cool aux energy H.pFan ENERGY End of hour fans input energy H.hrsOn HOURS End of hour <ul> <li>time air handler on: accumulated Top.tp_subhrDur</li> <li>int members to sum in accumulation.  cnguts.h defines assume nSubhr is 1st, nIterFan is last.</li> </ul> H.nSubhr number End of hour subhour counter: for convenience / possibly making cluster-dependent H.nIter1 number End of hour iteration counter 1: # times called, including immediate exits H.nIter2 number End of hour iteration counter 2: # times executed H.nIter4 number End of hour iteration counter 4: # inner loops (calls to pute4Fs) H.nIterFan number End of hour # fan adjustment iterations, counting both ups and downs S subhour, aka subStep or sub-time-step AHRES_IVL_SUB Name Type Variability Description/Comments S.n number End of subhour <ul> <li>number of intervals added together in this one (divisor for averages)</li> <li>float members to average in results accumulation. cnguts.h defines assume tDbO is 1st, vf is last.</li> <li>pairs consisting of temperature &amp; humidity (wetbulb temp may be generated when printing)</li> </ul> S.tDbO TEMP End of subhour outdoor temp (for convience for reporting; same for all ah) (Top.tDbO, .wO) S.wO HUMRAT End of subhour outdoor temp (for convience for reporting; same for all ah) (Top.tDbO, .wO) S.tr TEMP End of subhour return air (AH.tr,.wr) S.wr HUMRAT End of subhour return air (AH.tr,.wr) S.thx TEMP End of subhour heat recovery air (.ah_oaHx.hx_supOutAF.as_tdb,.ah_oaHx.hx_supOutAF.as_w) S.whx HUMRAT End of subhour heat recovery air (.ah_oaHx.hx_supOutAF.as_tdb,.ah_oaHx.hx_supOutAF.as_w) S.fhx number End of subhour fraction air through heat recovery (= 1 - .ah_oaHx.hx_bypassFrac) S.tmix TEMP End of subhour mixed air (.tmix,.wmix) S.wmix HUMRAT End of subhour mixed air (.tmix,.wmix) S.ts TEMP End of subhour supply air (.ts, .ws) S.ws HUMRAT End of subhour supply air (.ts, .ws) S.po number End of subhour fraction outside air (.po) S.frFanOn number End of subhour fraction of time fan on if ahFanCycles, else 1.0 S.vf AFLOW End of subhour <ul> <li>flow (at supply fan) (.cmix)</li> <li>float members to add: qh is first, hrsOn is last.  CAUTION: q's here are energy not power.</li> </ul> S.qh ENERGY End of subhour heat and total cool load (at coils) S.qc ENERGY End of subhour heat and total cool load (at coils) S.qs ENERGY End of subhour cool sensible and latent loads (included in qc) S.ql ENERGY End of subhour cool sensible and latent loads (included in qc) S.qO     ENERGY End of subhour net energy taken from outside air (possible future impl); fan heat energy S.qFan ENERGY End of subhour net energy taken from outside air (possible future impl); fan heat energy S.qLoss ENERGY End of subhour leak/loss net energy; energy delivered to load. S.qLoad ENERGY End of subhour leak/loss net energy; energy delivered to load. S.qBal ENERGY End of subhour unbalance, should be near 0: qh+qc+qO+qFan+qLoss+qLoad. S.ph ENERGY End of subhour heat and cool coil input energy, from meter or (probably) from plant S.pc ENERGY End of subhour heat and cool coil input energy, from meter or (probably) from plant S.pAuxH ENERGY End of subhour heat and cool aux energy S.pAuxC ENERGY End of subhour heat and cool aux energy S.pFan ENERGY End of subhour fans input energy S.hrsOn HOURS End of subhour <ul> <li>time air handler on: accumulated Top.tp_subhrDur</li> <li>int members to sum in accumulation.  cnguts.h defines assume nSubhr is 1st, nIterFan is last.</li> </ul> S.nSubhr number End of subhour subhour counter: for convenience / possibly making cluster-dependent S.nIter1 number End of subhour iteration counter 1: # times called, including immediate exits S.nIter2 number End of subhour iteration counter 2: # times executed S.nIter4 number End of subhour iteration counter 4: # inner loops (calls to pute4Fs) S.nIterFan number End of subhour # fan adjustment iterations, counting both ups and downs"},{"location":"probe-definitions/airHandler/","title":"airHandler","text":"<p>title: airHandler --- input -- in addition to AUTOSIZE ahhcCaptRat, ahccCaptRat, sfanVfDs, rfanVfDs: these set FsAS field status bit.</p> Name Type Variability Description/Comments ahTsDsH TEMP Start of hour heating design supply temperature, for sizing coil vs fan. defaulted hourly to ahTsMx. ahTsDsC TEMP Start of hour cooling design supply temperature, for sizing coil vs fan. defaulted hourly to ahTsMn. fxCapH FLOAT_GZ Start of phase capacity factor for autoSized heat coils (default 1.1 = 10% oversized) fxCapC FLOAT_GZ Start of phase capacity factor for autoSized cool coils (default 1.1 = 10% oversized) fxVfFan FLOAT_GZ Start of phase <ul> <li>volume flow factor for autoSized fan(s) (default 1.1 = 10% oversized)</li> <li>setup</li> </ul> asRfan BOO Start of run TRUE to autoSize return/relief fan (to same capacity as supply fan) asFlow BOO Start of run <ul> <li>true if autoSizing supply fan and/or flow of any connected terminal:</li> <li>change to const supply temp model in part A.</li> <li>runtime</li> </ul> hcAs autoSizing working data members re heat coil AUSZ    ---setup time members  Name Type Variability Description/Comments hcAs.az_active BOO Start of run TRUE iff autoSizing this member <ul> <li>---runtime</li> <li>set at initialization</li> </ul> Name Type Variability Description/Comments hcAs.az_a number End of subhour <ul> <li>1a size (load) -- max of warmup-converged design days</li> <li>pass 1 part b and pass 2: enlarge size if necess, real models.</li> </ul> hcAs.az_b number End of subhour <ul> <li>1b rated size plus increases during simulation incl pass 2 -- max of design days</li> <li>for pass 2 (increase size if necess, measure load, reduce oversize sizes) and for main sim load reports</li> </ul> hcAs.ldPk number End of subhour largest load this design day iteration or in main sim hcAs.ldPkAs number End of day autoSize peak load: max of warmup-converged design days hcAs.ldPkAs1 number End of day <ul> <li>autoSize pass 1 peak load, re reporting overloads of devices that only</li> <li>exceed limit on pass 1, eg supply fan when sizing terminals, 7-6-95.</li> </ul> hcAs.plrPk number End of subhour largest plr this design day iteration or in main sim hcAs.plrPkAs number End of day autoSize peak plr: max of warmup-converged design days hcAs.xPk number End of subhour rated size (*px) when plrPk set hcAs.xPkAs number End of day rated size (xPk) when plrPkAs set - use when reducing oversize in case x has changed. 6-97. hcAs.az_notDone BOO End of day <ul> <li>re convergence: nz says this AUSZ requires additional iterations</li> <li>set to 0 at beg of each iteration; incrd anywhere is calcs if not converged</li> <li>see also Top.tp_auszNotDone = overall notdone flag</li> </ul> ccAs .. re cool coil (total only. sens cap: see .SHRRat. sens load: see .qcs) AUSZ    ---setup time members  Name Type Variability Description/Comments ccAs.az_active BOO Start of run TRUE iff autoSizing this member <ul> <li>---runtime</li> <li>set at initialization</li> </ul> Name Type Variability Description/Comments ccAs.az_a number End of subhour <ul> <li>1a size (load) -- max of warmup-converged design days</li> <li>pass 1 part b and pass 2: enlarge size if necess, real models.</li> </ul> ccAs.az_b number End of subhour <ul> <li>1b rated size plus increases during simulation incl pass 2 -- max of design days</li> <li>for pass 2 (increase size if necess, measure load, reduce oversize sizes) and for main sim load reports</li> </ul> ccAs.ldPk number End of subhour largest load this design day iteration or in main sim ccAs.ldPkAs number End of day autoSize peak load: max of warmup-converged design days ccAs.ldPkAs1 number End of day <ul> <li>autoSize pass 1 peak load, re reporting overloads of devices that only</li> <li>exceed limit on pass 1, eg supply fan when sizing terminals, 7-6-95.</li> </ul> ccAs.plrPk number End of subhour largest plr this design day iteration or in main sim ccAs.plrPkAs number End of day autoSize peak plr: max of warmup-converged design days ccAs.xPk number End of subhour rated size (*px) when plrPk set ccAs.xPkAs number End of day rated size (xPk) when plrPkAs set - use when reducing oversize in case x has changed. 6-97. ccAs.az_notDone BOO End of day <ul> <li>re convergence: nz says this AUSZ requires additional iterations</li> <li>set to 0 at beg of each iteration; incrd anywhere is calcs if not converged</li> <li>see also Top.tp_auszNotDone = overall notdone flag</li> </ul> fanAs <ul> <li>.. re fan(s) -- autosized rfan slaves to sfan.</li> <li>values saved at entry to hvacIterSubhr for conditional backtracking during autoSizing.</li> </ul> AUSZ    ---setup time members  Name Type Variability Description/Comments fanAs.az_active BOO Start of run TRUE iff autoSizing this member <ul> <li>---runtime</li> <li>set at initialization</li> </ul> Name Type Variability Description/Comments fanAs.az_a number End of subhour <ul> <li>1a size (load) -- max of warmup-converged design days</li> <li>pass 1 part b and pass 2: enlarge size if necess, real models.</li> </ul> fanAs.az_b number End of subhour <ul> <li>1b rated size plus increases during simulation incl pass 2 -- max of design days</li> <li>for pass 2 (increase size if necess, measure load, reduce oversize sizes) and for main sim load reports</li> </ul> fanAs.ldPk number End of subhour largest load this design day iteration or in main sim fanAs.ldPkAs number End of day autoSize peak load: max of warmup-converged design days fanAs.ldPkAs1 number End of day <ul> <li>autoSize pass 1 peak load, re reporting overloads of devices that only</li> <li>exceed limit on pass 1, eg supply fan when sizing terminals, 7-6-95.</li> </ul> fanAs.plrPk number End of subhour largest plr this design day iteration or in main sim fanAs.plrPkAs number End of day autoSize peak plr: max of warmup-converged design days fanAs.xPk number End of subhour rated size (*px) when plrPk set fanAs.xPkAs number End of day rated size (xPk) when plrPkAs set - use when reducing oversize in case x has changed. 6-97. fanAs.az_notDone BOO End of day <ul> <li>re convergence: nz says this AUSZ requires additional iterations</li> <li>set to 0 at beg of each iteration; incrd anywhere is calcs if not converged</li> <li>see also Top.tp_auszNotDone = overall notdone flag</li> </ul> bVfDs AFLOW_GEZ End of subhour <ul> <li>sfan.vfDs. see COIL::bCaptRat for ahhc and ahcc.</li> <li>results: see ahhc.captRat_As, ahcc.captRat_As, ahcc.capsRat_As, sfan.vfDs_As, rfan.vfDs_As, ditto _AsNov's.</li> <li>values at time of cool coil peak load in main run or des day, for loads reports and input to -PkAs mbrs below</li> </ul> qcPkS number End of subhour sensible load @ peak total load qcPkL number End of subhour latent cool coil load ditto qcPkH number End of subhour hour 1-24 of peak total cool coil load qcPkD number End of subhour day of month 1-31 of peak load, not used for autoSizing qcPkM number End of subhour month 1-12 of peak load, or 0 for Heat design month qcPkTDbO TEMP End of subhour outdoor temp at time of peak load qcPkWO HUMRAT End of subhour outdoor hum rat at time of peak load. w's must follow t's for reports. qcPkTen TEMP End of subhour entering air temp qcPkWen HUMRAT End of subhour hum rat qcPkTex TEMP End of subhour exiting air temp (b4 remix w bypass air) qcPkWex HUMRAT End of subhour <ul> <li>hum rat (b4 remix w bypass air)</li> <li>above for autoSize pass 2 cvg'd des day with largest peak cool coil load, saved for size rpts in input rec thru main run.</li> </ul> qcPkSAs number End of subhour sensible load @ peak total load qcPkLAs number End of subhour latent cool coil load ditto qcPkHAs number End of subhour hour 1-24 of peak total cool coil load qcPkDAs number End of subhour day of month 1-31 of peak load, not used for autoSizing qcPkMAs number End of subhour month 1-12 of peak load, or 0 for Heat design month qcPkTDbOAs TEMP End of subhour outdoor temp at time of peak load qcPkWOAs HUMRAT End of subhour outdoor hum rat at time of peak load. w's must follow t's for reports. qcPkTenAs TEMP End of subhour entering air temp qcPkWenAs HUMRAT End of subhour hum rat qcPkTexAs TEMP End of subhour exiting air temp (b4 remix w bypass air) qcPkWexAs HUMRAT End of subhour hum rat (b4 remix w bypass air) Name Type Variability Description/Comments ahTsSp TEMP_TSCM Start of hour <ul> <li>supply temperature setpoint or control method: RA, WZ, CZ, ZN, ZN2, or number, hourly,</li> <li>RQD if ah has economizer or coil, else disallowed.</li> <li>NUMBER: a number or numeric expression can express functions of time, outdoor temp, etc.</li> <li>RA: controlled by return air temp.  raMn, raMx, tsMn, tsMx must be input.</li> <li>WZ/CZ: Warmest Zone/Coolest Zone: set ts to meet load of control zone</li> <li>requiring the lowest/highest ts with its VAV damper 90-100% open.</li> <li>ZN: choose WZ or CZ per whether terminal [ahCtu][ahctu]'s t'stat is calling for heat or cold, else ah off.</li> <li>defaults [ahFanCycles][ahfancycles] YES. intended for single zone systems, RESYS, PTAC.</li> <li>ZN2: choose WZ or CZ per whether terminal [ahCtu][ahctu]'s t'stat is calling for heat or cold, else fan only.</li> <li>intended for single zone const vol systems, PSZ.</li> <li>ZN, ZN2 are the ONLY methods where demand determines whether zones are being heated or cooled;</li> <li>in other cases, if system can heat or cool zone, supply temp must be scheduled, reset by</li> <li>outside temp, etc.  Optional separate setpoint inputs for setback/setup operation are below.</li> </ul> Name Type Variability Description/Comments ahFanCycles NOYESVC Start of hour <ul> <li>YES if fan (and coil) cycles with zone thermostat; hourly;</li> <li>default: YES when [ahTsSp][ahtssp]==ZN (not ZN2), else NO (defaulted dynamicaly in AH::begHour).</li> <li>see BOO fcc for runtime testing.  6-15-92.</li> </ul> <p>min and max supply temps, always allowed, RQD when ahTsSp==RA (runtime ck), or (5-95) when ahTsSP==ZN &amp;&amp; ahFanCyles==YES.</p> Name Type Variability Description/Comments ahTsMn TEMP_GZ Start of hour hourly, default 40. ahTsMx TEMP_GZ Start of hour hourly, default 250. <p>RQD when ahTsSp is RA, else ignored;</p> Name Type Variability Description/Comments ahTsRaMn TEMP_GZ Start of hour return air temp at which tsSp is at ahTsMx. hourly. ahTsRaMx TEMP_GZ Start of hour .. ahTsMn. hourly.  If return air moves outside this range, tsSp does not change further. Name Type Variability Description/Comments ahCtu TI Start of run <ul> <li>terminal for determining whether to heat or cool under ZN, ZN2 tsu sp control.</li> <li>defaults to served terminal if only one, else RQD when [ahTsSp][ahtssp] is ZN or ZN2.</li> </ul> Name Type Variability Description/Comments ahWzCzns[index] TI Array [16] Start of phase zone names monitored for warmest zone and coolest zone Ts Sp control, respectively. ahCzCzns[index] TI Array [16] Start of phase <ul> <li>Each input may be ALL, ALL_BUT, and/or zone names, comma-separated.  default ALL.</li> <li>internally: TI_ALL; or TI_ALLBUT + zone subsrs; or zone subscrs; max 15, 0-terminated.</li> </ul> <ul> <li>minimun oa flow is regulated to a given cfm (VOLUME) or a fraction of the current flow (FRACTION),</li> <li>in either case multiplied by a schedulable fraction (eg to shut off vent air during warmup).</li> <li>if oaMnCm is VOL:   min_oa_flow = [oaMnFrac][oamnfrac] * [oaVfDsMn][oavfdsmn]</li> <li>FRAC:  min_oa_flow = [oaMnFrac][oamnfrac] * [oaVfDsMn][oavfdsmn] * curr_flow / supply_fan_design_cap</li> </ul> Name Type Variability Description/Comments oaMnCm choice:OAMN Start of phase min OA flow Control Method, choice of VOL or FRAC, default VOL, constant. Name Type Variability Description/Comments oaMnFrac number Start of hour fraction 0-1 of minimum OA to use now, hourly, default 1.0. eg to shut off oa during warmup. Name Type Variability Description/Comments oaVfDsMn AFLOW_GEZ Start of run <ul> <li>design minimum outside air flow (cfm actual air), constant,  dfl .15 * area.</li> <li>for FRACTION control, this is multiplied by  curr_flow/supply_fan_design_cap.</li> </ul> Name Type Variability Description/Comments oaEcoTy choice:ECOTY Start of phase <ul> <li>choice of NONE, NONINTEGRATED, TWO_STAGE, INTEGRATED.  constant. default NONE.</li> <li>NONE means OA flow is the minimum, above.</li> <li>INTEGRATED means economizer and coil do their respective things, independently.</li> <li>NONINTEGRATED means coil does not run when economizer is enabled</li> <li>(per [oaLimT][oalimt], [oaLimE][oalime], oaMxFrac, right?)</li> <li>TWO_STAGE: not needed for compliance, defer implementation til I understand coils:</li> <li>economizer off when coil cycles on (\"requires calculating % coil runtime</li> <li>in subhour using minimum unloading step as capacity\").</li> </ul> <ul> <li>following 2 variables disallowed if economizer type is NONE</li> <li>*declare \"#define oaMxFrac (1.0)\"   // maximum outdoor air as a fraction of current flow: hard-code to 1.0, 10-25-92.</li> </ul> Name Type Variability Description/Comments oaLimT TEMP_RA Start of hour <ul> <li>economizer oa temp hi limit: number -50 to 999, or RA for current return air temp,</li> <li>hourly, dfl RA.  oa flow reduced to minimum when oa temp &gt; [oaLimT][oalimt].</li> </ul> oaLimE ENTH_RA Start of hour economizer oa enthalpy hi limit: number or RA, constant, dfl 999 (enth limit disabled). Name Type Variability Description/Comments oaOaLeak number Start of phase <ul> <li>outside air damper leakage to mixed air, fraction of supply fan design cfm if have economizer,</li> <li>else fraction of [oaVfDsMn][oavfdsmn].  Const, default .05 if return fan, .10 if relief fan or no r/r fan.</li> <li>Puts a floor on oa flow and thus a ceiling on ra flow, to mixed air.</li> </ul> Name Type Variability Description/Comments oaRaLeak number Start of phase <ul> <li>return air damper leakage to mixed air, fraction supply fan design cfm,</li> <li>constant, default .05 if relief fan or no r/r fan, .10 if return fan.</li> <li>(note I took out proposed default 0 if no economizer 3-6-92 **)</li> <li>Puts a floor on ra flow and thus a ceiling on oa flow, to mixed air.</li> </ul> Name Type Variability Description/Comments oaZoneLeakF number Start of hour <ul> <li>assumed zone leakage fraction; for zone airnet ONLY</li> <li>retFlow = supFlow * (1. - oaZoneLeakF * po)</li> <li>default: 0 if return/relief fan else .5</li> </ul> <p>heat recovery</p> Name Type Variability Description/Comments oaHx outdoor air heat recovery HEATEXCHANGER substruct HEATEXCHANGER    Heat exchanger inputs  Name Type Variability Description/Comments oaHx.VfDs AFLOW_GZ Start of run <ul> <li>Design supply volumetric flow rate of the heat exchanger</li> <li>defaults to supply fan VfDs</li> </ul> oaHx.f2 FLOAT_GZ Start of run Flow fraction for second set of inputs (default 0.75) oaHx.senEffH[index] number Array [2] Start of run <ul> <li>Heat exchanger heating sensible effectiveness</li> <li>[ 0]: at design 100% flow</li> <li>[ 1]: at hx_F2</li> </ul> oaHx.latEffH[index] number Array [2] Start of run <ul> <li>Heat exchanger heating latent effectiveness</li> <li>[ 0]: at design 100% flow</li> <li>[ 1]: at hx_F2</li> </ul> oaHx.senEffC[index] number Array [2] Start of run <ul> <li>Heat exchanger cooling sensible effectiveness</li> <li>[ 0]: at design 100% flow</li> <li>[ 1]: at hx_F2</li> </ul> oaHx.latEffC[index] number Array [2] Start of run <ul> <li>Heat exchanger cooling latent effectiveness</li> <li>[ 0]: at design 100% flow</li> <li>[ 1]: at hx_F2</li> </ul> oaHx.bypass choice:NOYES Start of run HX can be bypassed when not adventatgeous oaHx.auxPwr FLOAT_GEZ Start of subhour Auxiliary power, W oaHx.auxMtri TI Start of run Meter for auxiliary power   Outputs  Name Type Variability Description/Comments oaHx.supInAF <ul> <li>Supply inlet air flow (splits to hx_hxInAF</li> <li>and hx_bypassAF based on hx_bypassFrac)</li> </ul> AIRFLOW Name Type Variability Description/Comments oaHx.supInAF.tdb DBL End of subhour air dry-bulb temp, F oaHx.supInAF.w DBL End of subhour air humidity ratio, lb moisture/lb dry air Name Type Variability Description/Comments oaHx.supInAF.amf DBL End of subhour <ul> <li>mass flow rate, lb/hr dry air</li> <li>*s *e DBL as_tdb        // from AIRSTATE</li> <li>*s *e DBL as_w</li> </ul> oaHx.hxInAF HX supply inlet air flow AIRFLOW Name Type Variability Description/Comments oaHx.hxInAF.tdb DBL End of subhour air dry-bulb temp, F oaHx.hxInAF.w DBL End of subhour air humidity ratio, lb moisture/lb dry air Name Type Variability Description/Comments oaHx.hxInAF.amf DBL End of subhour <ul> <li>mass flow rate, lb/hr dry air</li> <li>*s *e DBL as_tdb        // from AIRSTATE</li> <li>*s *e DBL as_w</li> </ul> oaHx.hxOutAF HX supply outlet air flow AIRFLOW Name Type Variability Description/Comments oaHx.hxOutAF.tdb DBL End of subhour air dry-bulb temp, F oaHx.hxOutAF.w DBL End of subhour air humidity ratio, lb moisture/lb dry air Name Type Variability Description/Comments oaHx.hxOutAF.amf DBL End of subhour <ul> <li>mass flow rate, lb/hr dry air</li> <li>*s *e DBL as_tdb        // from AIRSTATE</li> <li>*s *e DBL as_w</li> </ul> oaHx.bypassAF Bypass air flow AIRFLOW Name Type Variability Description/Comments oaHx.bypassAF.tdb DBL End of subhour air dry-bulb temp, F oaHx.bypassAF.w DBL End of subhour air humidity ratio, lb moisture/lb dry air Name Type Variability Description/Comments oaHx.bypassAF.amf DBL End of subhour <ul> <li>mass flow rate, lb/hr dry air</li> <li>*s *e DBL as_tdb        // from AIRSTATE</li> <li>*s *e DBL as_w</li> </ul> oaHx.exhInAF Exhaust inlet air flow AIRFLOW Name Type Variability Description/Comments oaHx.exhInAF.tdb DBL End of subhour air dry-bulb temp, F oaHx.exhInAF.w DBL End of subhour air humidity ratio, lb moisture/lb dry air Name Type Variability Description/Comments oaHx.exhInAF.amf DBL End of subhour <ul> <li>mass flow rate, lb/hr dry air</li> <li>*s *e DBL as_tdb        // from AIRSTATE</li> <li>*s *e DBL as_w</li> </ul> oaHx.supOutAF <ul> <li>Supply outlet air flow (mixes to hx_hxInAF</li> <li>and hx_bypassAF based on hx_bypassFrac)</li> <li>*s *e *nest AIRFLOW hx_exhOutAF // Exhaust outlet air flow, not yet needed</li> </ul> AIRFLOW Name Type Variability Description/Comments oaHx.supOutAF.tdb DBL End of subhour air dry-bulb temp, F oaHx.supOutAF.w DBL End of subhour air humidity ratio, lb moisture/lb dry air Name Type Variability Description/Comments oaHx.supOutAF.amf DBL End of subhour <ul> <li>mass flow rate, lb/hr dry air</li> <li>*s *e DBL as_tdb        // from AIRSTATE</li> <li>*s *e DBL as_w</li> </ul> Name Type Variability Description/Comments oaHx.bypassFrac number End of subhour Fraction of supply inlet air bypassing heat exchanger oaHx.tSet DBL End of subhour Setpoint temperature for air exiting heat exchanger oaHx.sensEff number End of subhour Sensible efficacy oaHx.latEff number End of subhour Latent efficacy Name Type Variability Description/Comments ahSOLeak number Start of phase Supply duct leakage to outdoors, 0-.1 of sfanVfDs, default .01.  use 0 if duct indoors. ahROLeak number Start of phase Return duct leakage from outdoors, 0-.1, of sfanVfDs, default .01, use 0 if duct indoors. ahSOLoss number Start of phase Supply duct loss/gain to outdoors, 0-.1, default .02? (Taylor 0.5F), use 0 if duct indoors. ahROLoss number Start of phase Return duct heat loss/gain to outdoors, 0-.1, default .02? (ditto), use 0 if duct indoors. Name Type Variability Description/Comments ahSch AHSCHVC Start of hour <ul> <li>supply fan and thus air handler schedule: choice of ON or OFF, hourly variable; default ON.</li> <li>ON: fan runs at varying volume (except under ahFanCyles, when fan cycles on and off at full flow).</li> <li>OFF: Taylor setback/setup control in effect, if specified, when/if implemented.</li> <li>WARMUP, OPTIMUM_START: we may add these here later when implemented.</li> <li>see also heat and cool coil schedules.</li> </ul> Name Type Variability Description/Comments sfan <ul> <li>supply fan FAN substruct (as declared above)</li> <li>following supply fan inputs are stored in FAN subrecord sfan:</li> <li>FANTYCH [sfanType][sfantype]        // supply fan type/position: choice of DRAWTHRU (default) or BLOWTHRU.  constant.</li> <li>AFLOW_GZ [sfanVfDs][sfanvfds]       // design volume flow (cfm actual air), constant, RQD.</li> <li>FLOAT  [sfanVfMxF][sfanvfmxf]       // factor by which fan will exceed vfDs (at reduced pressure). default 1.3. constant.</li> <li>PRESAIR_GZ [sfanPress][sfanpress]   // design pressure, \"H2O, constant, default 3.</li> <li>//At most one of the next 2 may be given:</li> <li>FRAC sfanFanEff     // Fan efficiency at vfDs and press, constant, default .65 or from power if given.</li> <li>BHP_GZ [sfanShaftBhp][sfanshaftbhp]     // Fan shaft brake horsepower at vfDs and press, constant, default from eff.</li> <li>FRAC [sfanMotEff][sfanmoteff]       // motor/drive efficiency, constant, default .9.</li> <li>MOTPOSCH [sfanMotPos][sfanmotpos]   // motor/drive position: choice of INFLO (default), INRETURN, or EXTERNAL.</li> <li>INRETURN will be deferred/omitted if difficult (chip per taylor 3-4-92).</li> <li>[FANPLCH sfanPlCtrl // part-load control method, choice of VARSPEED (default), CYCLE, etc as above.]</li> <li>PYCUBIC2 [sfanCurvePy][sfancurvepy] // part-load energy consumption curve coefficients 6-92, default linear.</li> <li>MTR sfanMtri        // MTR to which energy use is charged 4-11-92</li> </ul> FAN Name Type Variability Description/Comments sfan.fanTy choice:FANTY Start of phase <ul> <li>fan position choice, according to application as follows; constant.</li> <li>air handler supply:  DRAWTHRU (default) or BLOWTHRU</li> <li>ah return/relief:  NONE (default), RETURN, or RELIEF</li> <li>terminal:  NONE (default), SERIES, or PARALLEL</li> <li>zone exhaust fan:  NONE or EXHAUST (no types, just whether exists)</li> <li>AirNet ([IZXFER][izxfer]):    ditto</li> </ul> sfan.vfDs AFLOW_GZ End of subhour design volumetric flow (cfm actual air).  constant, RQD except as noted. *s cuz varies when autoSizing. sfan.vfDs_As AFLOW Start of phase autoSized ditto for ah sfan and rfan for naming consistency. 6-95. sfan.vfDs_AsNov AFLOW Start of phase <ul> <li>raw autoSized ditto b4 overSize added, for report/probes. 7-95.</li> <li>cnausz.cpp code ASSUMES x, x_As, x_AsNov together for access thru one ptr. cuprobe.cpp's name search also requires together.</li> </ul> sfan.vfMxF number Start of phase <ul> <li>factor by which fan flow will exceed vfDs (at reduced pressure). default 1.3. constant.</li> <li>Error if &lt; 1.0; typically &lt;= 1.5.</li> </ul> Name Type Variability Description/Comments sfan.press PRESAIR_GEZ Start of run <ul> <li>system design pressure, \"H2O (inches of water), constant, used in defaulting power / efficiency.</li> <li>default: supply 3, r/r .75, tu .3, zx ???.</li> <li>0 allowed 5-1-92 to eliminate fan heat for test/calibration purposes.</li> </ul>   only one of eff and shaftPwr may be given:  Name Type Variability Description/Comments sfan.eff FRAC_GZ Start of run <ul> <li>fan (hydraulic) efficiency at vfDs and press (any temp), constant,</li> <li>default from power if given, else .65.  (1-eff) of fan shaft power is converted to heat in airstream.</li> </ul> sfan.shaftPwr BHP_GZ Start of run <ul> <li>fan shaft power at vfDs and press (any temp). constant. default: from eff</li> <li>Btuh internally, entered in BHP (user name 'shaftBhp') (cvpak converts).</li> <li>^^^^make user name 'shaftBhp'.  field type name??</li> </ul> sfan.elecPwr FLOAT_GZ Start of run <ul> <li>motor input power, W/cfm (based on vfDs); shaftPwr and elecPwr cannot both be</li> <li>input</li> </ul> Name Type Variability Description/Comments sfan.motTy choice:MOTTY Start of run <ul> <li>motor type (C_MOTTYCH_PSC or C_MOTTYCH_BPM)</li> <li>[RSYS][rsys] only minimal use 4-12, could effect defaults</li> </ul> Name Type Variability Description/Comments sfan.motEff FRAC_GZ Start of phase motor/drive efficiency, constant, default .9. Name Type Variability Description/Comments sfan.motPos choice:MOTPOS Start of phase <ul> <li>motor/drive position: choice of INFLO (default), INRETURN, EXTERNAL.  constant.</li> <li>INRETURN is for supply fans only and will be deferred/omitted if difficult</li> <li>chip per taylor 3-4-92).</li> </ul> Name Type Variability Description/Comments sfan.curvePy fan part-load energy consumption curve cubic polynomial coefficients with x0 PYCUBIC2 Name Type Variability Description/Comments sfan.curvePy.k[index] number Array [6] Start of phase FLOAT k[6]. [0..3] are coeff, [4] is minimum x, [5] is terminator needed by cul.cpp. Name Type Variability Description/Comments sfan.mtri TI Start of phase subscript of meter (MTR) to which energy consumption is charged sfan.endUse choice:ENDUSE Start of phase <ul> <li>end use to which energy consumption is charged</li> <li>not used for all fans (many implicitly default to \"fan\")</li> </ul> Name Type Variability Description/Comments sfan.ausz BOO Start of run <ul> <li>non-0 if fan being autoSized (AH sfan, rfan): input contained [AUTOSIZE][autosize] _fanVfDs. 7-1-95.</li> <li>see also AH::fanAs, asRfan, asFlow. 7-1-95. */</li> </ul> <ul> <li>FAN setup time members, set by cnfan.cpp:FAN::setup. May be resetup during autoSize run.</li> <li>also cMx may be init by setup, to be non-0.</li> </ul> Name Type Variability Description/Comments sfan.outPower number Start of subhour <ul> <li>motor output power (work done by fan), member 7-95 for one setup check in cncult5.cpp</li> <li>inPower = shaftPwr/motEff  is computed as needed.</li> </ul> sfan.airPower number Start of subhour <ul> <li>fan heat to air (Btuh) at vfDs (&amp; pressure): work done by fan, plus motor/drive inefficiency if in flow.</li> <li>Note work done by fan is modelled as HEAT ADDED TO AIR AT FAN per Chip/Niles (3-92, undocumented)</li> <li>heat to air around motor (in return air etc) at design flow is: (inPower - airPower). this is 0 if motor in air flow.</li> </ul>   FAN runtime members, set by cnah.cpp:FAN::pute( cFlow, temp)  Name Type Variability Description/Comments sfan.cMx CFLOW End of subhour max heat cap flow (Btuh/F) at curr air temp &amp; run press &amp; ref w: .vfMx * air vsh * 60 (min/hr) sfan.c CFLOW End of subhour current average flow in heat cap units (Btuh/F): input saved for probing by last call to FAN::pute() sfan.t TEMP End of subhour current air temp, input saved ditto, used in converting BtuF/F to cfm sfan.frOn number End of subhour <ul> <li>fraction of time fan is on, saved input</li> <li>made local to pute()to save members 10-92:</li> <li>*s *e FRAC relFlow  // fraction of design flow</li> <li>*s *e FRAC relLoad  // fraction of full load per part load curve for fan type (1.0 if over design flow: assume pressure drops)</li> </ul> sfan.p number End of subhour (motor) power consumption for subhour -- inPower * relLoad.  *subhrDur for meter. sfan.q number End of subhour heat (power) to air this subhour: airPower * relLoad.  Member needed in addition to c and dT?? sfan.dT TEMPDIFF End of subhour temp difference due to fan: q/c sfan.qAround number End of subhour heat to air around motor, if not in air flow, for use re supply fan motor in return air Name Type Variability Description/Comments rfan <ul> <li>return/relief (rr) fan subsruct (decl above)</li> <li>if rfan.fanType is NONE, other rr fan members are disallowed.</li> <li>following rr fan inputs are stored in FAN subrecord rfan:</li> <li>RFANTYCH [rfanType][rfantype]       // return fan type/position: choice of NONE (default), RETURN, or RELIEF. constant.</li> <li>AFLOW_GZ [rfanVfDs][rfanvfds]       // design volume flow, constant, default [sfanVfDs][sfanvfds]. [ less min outside air -- undone 7-95 ]</li> <li>FLOAT  [rfanVfMxF][rfanvfmxf]       // factor by which fan will exceed vfDs (at reduced pressure). dfl 1.3. constant.</li> <li>PRESAIR_GZ [rfanPress][rfanpress]   // design pressure, \"H2O, constant, default .75.</li> <li>//At most one of the next 2 may be given:</li> <li>FRAC rfanFanEff     // Fan efficiency at vfDs and press, constant, default .65 or from power if given.</li> <li>BHP_GZ [rfanShaftBhp][rfanshaftbhp]     // Fan shaft brake horsepower at vfDs and press, constant, default from eff.</li> <li>FRAC [rfanMotEff][rfanmoteff]       // motor/drive efficiency, constant, default .9.</li> <li>MOTPOSCH [rfanMotPos][rfanmotpos]   // motor/drive position: choice of INFLO (default) or EXTERNAL.</li> <li>[FANPLCH rfanPlCtrl // part-load control method, choice of VARSPEED, CYCLE, etc. default: same as supply fan.]</li> <li>PYCUBIC2 [rfanCurvePy][rfancurvepy] // part-load energy consumption curve coefficients 6-92. default: same as supply fan.</li> <li>MTR rfanMtri        // MTR to which energy use is charged 4-11-92</li> </ul> FAN Name Type Variability Description/Comments rfan.fanTy choice:FANTY Start of phase <ul> <li>fan position choice, according to application as follows; constant.</li> <li>air handler supply:  DRAWTHRU (default) or BLOWTHRU</li> <li>ah return/relief:  NONE (default), RETURN, or RELIEF</li> <li>terminal:  NONE (default), SERIES, or PARALLEL</li> <li>zone exhaust fan:  NONE or EXHAUST (no types, just whether exists)</li> <li>AirNet ([IZXFER][izxfer]):    ditto</li> </ul> rfan.vfDs AFLOW_GZ End of subhour design volumetric flow (cfm actual air).  constant, RQD except as noted. *s cuz varies when autoSizing. rfan.vfDs_As AFLOW Start of phase autoSized ditto for ah sfan and rfan for naming consistency. 6-95. rfan.vfDs_AsNov AFLOW Start of phase <ul> <li>raw autoSized ditto b4 overSize added, for report/probes. 7-95.</li> <li>cnausz.cpp code ASSUMES x, x_As, x_AsNov together for access thru one ptr. cuprobe.cpp's name search also requires together.</li> </ul> rfan.vfMxF number Start of phase <ul> <li>factor by which fan flow will exceed vfDs (at reduced pressure). default 1.3. constant.</li> <li>Error if &lt; 1.0; typically &lt;= 1.5.</li> </ul> Name Type Variability Description/Comments rfan.press PRESAIR_GEZ Start of run <ul> <li>system design pressure, \"H2O (inches of water), constant, used in defaulting power / efficiency.</li> <li>default: supply 3, r/r .75, tu .3, zx ???.</li> <li>0 allowed 5-1-92 to eliminate fan heat for test/calibration purposes.</li> </ul>   only one of eff and shaftPwr may be given:  Name Type Variability Description/Comments rfan.eff FRAC_GZ Start of run <ul> <li>fan (hydraulic) efficiency at vfDs and press (any temp), constant,</li> <li>default from power if given, else .65.  (1-eff) of fan shaft power is converted to heat in airstream.</li> </ul> rfan.shaftPwr BHP_GZ Start of run <ul> <li>fan shaft power at vfDs and press (any temp). constant. default: from eff</li> <li>Btuh internally, entered in BHP (user name 'shaftBhp') (cvpak converts).</li> <li>^^^^make user name 'shaftBhp'.  field type name??</li> </ul> rfan.elecPwr FLOAT_GZ Start of run <ul> <li>motor input power, W/cfm (based on vfDs); shaftPwr and elecPwr cannot both be</li> <li>input</li> </ul> Name Type Variability Description/Comments rfan.motTy choice:MOTTY Start of run <ul> <li>motor type (C_MOTTYCH_PSC or C_MOTTYCH_BPM)</li> <li>[RSYS][rsys] only minimal use 4-12, could effect defaults</li> </ul> Name Type Variability Description/Comments rfan.motEff FRAC_GZ Start of phase motor/drive efficiency, constant, default .9. Name Type Variability Description/Comments rfan.motPos choice:MOTPOS Start of phase <ul> <li>motor/drive position: choice of INFLO (default), INRETURN, EXTERNAL.  constant.</li> <li>INRETURN is for supply fans only and will be deferred/omitted if difficult</li> <li>chip per taylor 3-4-92).</li> </ul> Name Type Variability Description/Comments rfan.curvePy fan part-load energy consumption curve cubic polynomial coefficients with x0 PYCUBIC2 Name Type Variability Description/Comments rfan.curvePy.k[index] number Array [6] Start of phase FLOAT k[6]. [0..3] are coeff, [4] is minimum x, [5] is terminator needed by cul.cpp. Name Type Variability Description/Comments rfan.mtri TI Start of phase subscript of meter (MTR) to which energy consumption is charged rfan.endUse choice:ENDUSE Start of phase <ul> <li>end use to which energy consumption is charged</li> <li>not used for all fans (many implicitly default to \"fan\")</li> </ul> Name Type Variability Description/Comments rfan.ausz BOO Start of run <ul> <li>non-0 if fan being autoSized (AH sfan, rfan): input contained [AUTOSIZE][autosize] _fanVfDs. 7-1-95.</li> <li>see also AH::fanAs, asRfan, asFlow. 7-1-95. */</li> </ul> <ul> <li>FAN setup time members, set by cnfan.cpp:FAN::setup. May be resetup during autoSize run.</li> <li>also cMx may be init by setup, to be non-0.</li> </ul> Name Type Variability Description/Comments rfan.outPower number Start of subhour <ul> <li>motor output power (work done by fan), member 7-95 for one setup check in cncult5.cpp</li> <li>inPower = shaftPwr/motEff  is computed as needed.</li> </ul> rfan.airPower number Start of subhour <ul> <li>fan heat to air (Btuh) at vfDs (&amp; pressure): work done by fan, plus motor/drive inefficiency if in flow.</li> <li>Note work done by fan is modelled as HEAT ADDED TO AIR AT FAN per Chip/Niles (3-92, undocumented)</li> <li>heat to air around motor (in return air etc) at design flow is: (inPower - airPower). this is 0 if motor in air flow.</li> </ul>   FAN runtime members, set by cnah.cpp:FAN::pute( cFlow, temp)  Name Type Variability Description/Comments rfan.cMx CFLOW End of subhour max heat cap flow (Btuh/F) at curr air temp &amp; run press &amp; ref w: .vfMx * air vsh * 60 (min/hr) rfan.c CFLOW End of subhour current average flow in heat cap units (Btuh/F): input saved for probing by last call to FAN::pute() rfan.t TEMP End of subhour current air temp, input saved ditto, used in converting BtuF/F to cfm rfan.frOn number End of subhour <ul> <li>fraction of time fan is on, saved input</li> <li>made local to pute()to save members 10-92:</li> <li>*s *e FRAC relFlow  // fraction of design flow</li> <li>*s *e FRAC relLoad  // fraction of full load per part load curve for fan type (1.0 if over design flow: assume pressure drops)</li> </ul> rfan.p number End of subhour (motor) power consumption for subhour -- inPower * relLoad.  *subhrDur for meter. rfan.q number End of subhour heat (power) to air this subhour: airPower * relLoad.  Member needed in addition to c and dT?? rfan.dT TEMPDIFF End of subhour temp difference due to fan: q/c rfan.qAround number End of subhour heat to air around motor, if not in air flow, for use re supply fan motor in return air Name Type Variability Description/Comments cch crankcase heater subrecord 10-92 for AHP's, perhaps DX, must be common to heat and cool. CCH    CCH inputs  Name Type Variability Description/Comments cch.cchCM CCHCM Start of run <ul> <li>crankcase heater presence and control method choice. Niles cchCtlMtd.</li> <li>Default: PTC_CLO if ahhc.coilTy is AHP, else NONE.</li> <li>NONE      no crankcase heater present</li> <li>CONSTANT  crankcase heater input always pMx.</li> <li>PTC   control per oil temp when compr doesn't run (see tMx,tMn,dt); pMn if runs at all in subhour.</li> <li>TSTAT     control per outdoor temp when compr is off; 0 if compr runs at all in subhour. See tOn,tOff.</li> <li>CONSTANT_CLO,PTC_CLO: same as corres choices above except 0 input during fraction of time</li> <li>compr is on. TSTAT_CLO omitted: moot.</li> <li>for all [cchCM][cchcm]'s:</li> </ul> cch.pMx KW_GZ Start of phase <ul> <li>Crankcase resistance heater input power; maximum power if [cchCM][cchcm] is PTC or PTC_CLO.</li> <li>default .4kW. entered in kW, internally in Btuh.  Niles pCchMx.</li> <li>for PTC &amp; PTC_CLO:</li> </ul> cch.pMn KW_GZ Start of phase min cch input power. default .04kW. entered in kW, internally in Btuh.  Niles pCchMn. cch.tMx TEMP Start of phase low temp (max power) setpoint...                            Default 0 F.   Niles tCchPtcMx. cch.tMn TEMP Start of phase <ul> <li>high temp (min power) setpoint for [cchCM][cchcm] = PTC or PTC_CLO.  Default 150 F. Niles tCchPtcMn.</li> <li>For PTC or PTC_CLO, when compr does not run, cch input is pMx if oil temp below tMx, pMn above tMn,</li> <li>proportional between. If compr runs at all in subhr, input is pMn. See dt, next.</li> <li>tMn must be &gt;= tMn. == allowed.</li> </ul> cch.dt TEMPDIFF Start of phase <ul> <li>how much warmer than outdoor temp crankcase oil is assumed to be, in subhrs when compr does not run.</li> <li>Default 20 F. Niles tCchDelta.</li> <li>for [cchCM][cchcm] = TSTAT:</li> </ul> cch.tOn TEMP Start of phase outdoor temp cch turn-on setpoint ...                                 Default 72 F. Niles tCchTstOn. cch.tOff TEMP Start of run <ul> <li>outdoor temp cch turn-off setpoint for hours when compr does not run. Default tOn.  Niles tCchTstOff.</li> <li>Give tOff &gt; tOn to simulate thermostat differential. == allowed. &lt; yeilds error message.</li> <li>If compr runs at all in subhour, crankcase heater is off for entire subhour.</li> <li>for all [cchCM][cchcm]'s:</li> </ul> cch.mtri TI Start of phase subscript of meter to which cch energy use is to be recorded, default none. <ul> <li>CCH setup time</li> <li>Rob used p not Niles' e for next 2, 10-92:</li> <li>*r ENERGY e47Off    // energy input during off part of one cycle of ARI 47 degree cycling test, kWh. Niles eCchOffCyc47.</li> <li>*r ENERGY e47On // .. on ..  Niles eCchOnCyc47.</li> </ul> Name Type Variability Description/Comments cch.p47Off number Start of run <ul> <li>power input during off part of one cycle of ARI 47 degree cycling test, kWh.</li> <li>*r POWER p47On  // .. on ..  restore if need found.</li> </ul> cch.p17 number Start of run power input to crankcase heater in ARI 17 degree continuous operation test, kW. Niles pCch17. cch.p47 number Start of run <ul> <li>ditto 47 degree test. Niles pCch47. p17 and p47 always the same; p47 may be used in code as</li> <li>crankcase heater input in any test. ??clarify while coding.</li> </ul>   CCH runtime  Name Type Variability Description/Comments cch.frCprOn number End of subhour <ul> <li>fraction of time compressor ran this subhour, input to power determination.</li> <li>copy of ahhc.frCprOn for AHP, frCOn * frFanOn for DX, etc.</li> </ul> cch.tState BOO End of subhour thermostat state for cchCM = TSTAT: must remember to implement hysteresis cch.p number End of subhour cch input===output power this subhour Name Type Variability Description/Comments ahhc <ul> <li>ah heat coil subrecord.  If ahhc.coilType is NONE, other hc inputs are disallowed.</li> <li>following ah heat coil inputs are stored in ahhc, + many additions:</li> <li>HCOILTYCH [ahhcType][ahhctype]      // choice of NONE (default), ELEC, HW (hot water, GAS, OIL, AHP, ... constant.</li> <li>OFFAVAILVC ahhcSch  // OFF or AVAIL, hourly, default AVAIL.</li> <li>POWER_GZ ahhcCaptRat    // total rated capacity (Btu/hr), constant, RQD.</li> <li>TI [ahhcMtr][ahhcmtr]       // MTR to which to charge energy use for non-plant coil types.</li> <li>many more now (7-92), update</li> </ul> AHHEATCOIL Name Type Variability Description/Comments ahhc.coilTy choice:COILTY Start of run <ul> <li>coil type choice according to application, as follows.  constant.</li> <li>air handler cool coil: NONE (default), ELEC, DX, CHW, ...</li> <li>air handler heat coil: NONE (default), ELEC, HW, GAS, OIL, AHP, ...</li> <li>terminal heat coil: NONE (default if no local heat), ELEC (dflt if local heat), HW,  GAS,OIL??...</li> <li>\"ELEC COOL COIL\" is a testing aid that cools with 100% efficiency &amp; capacity at any temp.</li> </ul> Name Type Variability Description/Comments ahhc.sched OFFAVAILVC Start of hour AVAIL when coil available, OFF when disabled, hourly, default AVAIL.   sensible cap'y: see COOLCOIL.capsRat.  Name Type Variability Description/Comments ahhc.captRat POWER_NZ End of subhour <ul> <li>*s *e for probes, cuz autoSize changes it. hourly for input purposes.</li> <li>total rated cap'y (Btuh), RQD except AHP, ?CHW, hrly vbl for furnaces, const for DX coil.</li> </ul> ahhc.captRat_As number Start of phase captRat determined by autoSizing, w less vbly for easier use in probes in main sim. 6-95. ahhc.captRat_AsNov number Start of phase <ul> <li>raw captRat determined by autoSizing, before overSize added, for reports/probes. 7-95</li> <li>cnausz.cpp code ASSUMES x, x_As, x_AsNov together for access thru one ptr. cuprobe.cpp's name search also requires together.</li> </ul> ahhc.bCaptRat number End of subhour start-subHr captRat, to undo size increases not in use as converged at end subhr (ahhc,ahcc). Name Type Variability Description/Comments ahhc.eirRat number Start of hour <ul> <li>rated load energy input ratio===heat input ratio===input/output===1/efficiency for DX,GAS,OIL at least.</li> <li>hrly vbl for GAS,OIL; constant for DX, .   effRat: see HEATCOIL.</li> </ul> Name Type Variability Description/Comments ahhc.mtri TI Start of phase MTR to which to charge coil main energy use, if not through a plant. Name Type Variability Description/Comments ahhc.aux POWER_GEZ Start of hour additional input energy used by auxiliary controls and devices. ahhc.auxMtri TI Start of phase Meter for auxiliary energy   coil runtime members  Name Type Variability Description/Comments ahhc.q number End of subhour average (not fan-on) output power level for subhour ahhc.qPr number End of subhour output at which coil's plant last computed, for call-flagging plant. set: cnhp.cpp. used: cncoil.cpp ahhc.p number End of subhour <ul> <li>input power level this subhour, from plant or to charge to meter (*subhrDur!).</li> <li>p = input from plant tentative 9-92; implemented for HW coils.</li> </ul> ahhc.plr number End of subhour current fan-on (or furnace-on) relative load (part load ratio) ahhc.plrAv number End of subhour current average relative load (plr * frFanOn) ahhc.eir number End of subhour energy input ratio: current input/output, fan on===average. Rob's addition, for probes, 5-92. ahhc.capMax number End of subhour maximum capacity this subhour, used to calculate tPossH/C. ahhc.pAux number End of subhour aux power this subhour <ul> <li>has all members of base class COIL, and...</li> <li>heat coil additional input members</li> <li>CAUTION: HEATCOIL::setup code used to assume .effRat was 1st derived class member, 7-92.</li> <li>for GAS or OIL furnace \"coil\" in ah</li> </ul> Name Type Variability Description/Comments ahhc.effRat FRAC_GZ Start of phase efficiency @ rated load: alternate eir input, converted into eirRat in setup. ahhc.pyEi <ul> <li>cubic polynomial coefficients to correct full-load energy input for part load ratio</li> <li>for GAS or OIL heat coil.  Default (per DOE2): .01861, 1.094209, -.112819, 0.</li> </ul> PYCUBIC Name Type Variability Description/Comments ahhc.pyEi.k[index] number Array [5] Start of phase <ul> <li>FLOAT k[5].  One extra member needed as terminator by cul.cpp array input logic, 5-92.</li> <li>possible future setup optimizations: 1) select ptr to fcn that does not compute terms whose k is 0;</li> <li>2) precalculate constants to compute in form  ((x*k[3] + k[2])*x + k[1])*x + k[0]</li> </ul> ahhc.stackEffect number Start of hour <ul> <li>fraction of unused capacity that must be used (increasing plr) to make up for increased</li> <li>infiltration due to hot stack when (indoor) furnace runs but not continuously.  Default 0.</li> <li>Expect function of Top.tDbO.</li> <li>for HW coil</li> </ul> ahhc.hpi TI Start of phase <ul> <li>subscript of [HEATPLANT][heatplant] serving HW coil</li> <li>heat coil setup time members</li> <li>for HW coil</li> </ul> ahhc.nxTu4hp TI Start of run TuB subscr of next TU with HW coil on same HEATPLANT. 1st is HEATPLANT.tu1. ahhc.nxAh4hp TI Start of run <ul> <li>AhB subscr of next AH with HW coil on same [HEATPLANT][heatplant]. 1st is [HEATPLANT][heatplant].ah1.</li> <li>heat coil runtime members</li> <li>for GAS or OIL furnace \"coil\" in ah</li> </ul> ahhc.flueLoss number End of subhour <ul> <li>part-load flue loss this subhour, GAS and OIL only</li> <li>for HW or AHP coil</li> </ul> ahhc.qWant number End of subhour <ul> <li>HW:  desired output===input, doHWCoil to hpCompute, used in determining capF.</li> <li>AHP: desired output, doAhpHeatCoil to doAhpHeat</li> <li>*s *e POWER q           // current output power: is a COIL member.</li> <li>*s *e POWER qPr     // output at which coil's plant last computed, for change-flagged plant: COIL member</li> </ul>    AHP steady state heating capacity  Name Type Variability Description/Comments ahhc.cap17 POWER_GZ Start of phase ARI steady state rated cap @ 17 out, 70 indoor (return) air, Btuh, RQD for AHP, Niles pCapSs17. ahhc.capRat1747 FRAC_GZ Start of run cap17 / cap47 ratio (re autosizing) ahhc.capRat9547 FLOAT_GZ Start of run <ul> <li>total net cap95 (cooling) / net cap47 (heating)</li> <li>re consistent htg/clg size iff both autosized</li> <li>(else inconsistency ignored)</li> <li>default=correlation per A. Conant</li> <li>see ashpCap95FromCap47() and ashpCap47FromCap95()</li> </ul> ahhc.cap35 POWER_GZ Start of run <ul> <li>ARI steady state rated cap @ 35F outdoor, Btuh, default per fd35Df, Niles pCapSs35.</li> <li>Reflects frost buildup and defrost degradation but no cycling. Unlikely to be known;</li> <li>defaults to fd35Df (next) times a value linearly interpolated between cap17 &amp; cap47.</li> <li>If given, error if greater than value linearly interpolated between cap17 &amp; cap47.</li> </ul> ahhc.fd35Df number Start of phase <ul> <li>Default frost/defrost degradation factor at 35 F, default .85, Niles fdf35dft.</li> <li>Reduction of output at unchanged input, due to defrosting and due to frost on outdoor coil.</li> <li>Used in determining default value for cap35 (preceding); not used if cap35 is given.</li> </ul> ahhc.capIa number Start of phase <ul> <li>Capacity correction factor for indoor (return) air temperature, default .004, Niles iacCap.</li> <li>Expressed as a fraction reduction in capacity per degree above 70F.</li> </ul> ahhc.capSupHeat FLOAT_GEZ Start of phase Output of supplemental coil, Btu/h. ahhc.effSupHeat FLOAT_GZ Start of hour Supplemental heat efficiency ahhc.supHeatMtri TI Start of phase meter for supplemental heat energy use ahhc.tFrMn TEMP Start of phase lowest  temp for frost buildup &amp; defrost effects, default 17F, Niles tFrstMn. ahhc.tFrMx TEMP Start of phase highest temp for frost buildup &amp; defrost effects, default 47F, Niles tFrstMx. ahhc.tFrPk TEMP Start of phase <ul> <li>temp for peak frost buildup &amp; defrost effects, default 42F, Niles tFrstPk.</li> <li>Frost buildup &amp; defrost capacity reduction comes from frost buildup on outdoor coil,</li> <li>plus time spent doing reverse cycle defrosting (heating outdoor coil: cools indoor coil).</li> <li>Error if not tFrMn &lt; tFrPk &lt; tFrMx.</li> </ul> ahhc.dfrFMn number Start of phase min frac time in reverse cycle cooling, default .0222 (2/90 min), Niles tmFrcDefMn. ahhc.dfrFMx number Start of phase <ul> <li>max frac time in reverse cycle cooling, default .0889 (8/90 min), Niles tmFrcDefMx.</li> <li>Error if dfrFMx &lt;= dfrFMn.</li> <li>Fraction of time defrosting is min is at/below tFrMn and at (not above) tFrMx.</li> <li>Max used at tFrPk. Linear interp between. 0 time defrosting above tfrMx.</li> <li>During defrosting time, cold output (see dfrCap) not heat is delivered to load,</li> <li>addl heater (see dfrRh) is operated.</li> </ul> ahhc.dfrCap POWER_NZ Start of run <ul> <li>cooling capacity (to ah supply air) during defrosting, default 2 * cap17, Niles pDefCool.</li> <li>Should include any effects of switchover transient; program will compute lost heating cap.</li> <li>Negative internally. (future) should check or default somehow vs ahp cooling inputs if given?</li> <li>*f KW_GZ dfrRh          /* input (&amp; output) power of addl reheat coil run during defrost, default 5kW, Niles pDefRh.</li> <li>entered as kW, converted to Btuh internally by units stuff. */</li> <li>AHHEATCOIL inputs for AHP low temperature cutout</li> </ul> ahhc.tOff TEMP Start of phase low temp cutout setpoint, default 5 F, Niles tOff. ahhc.tOn TEMP Start of phase <ul> <li>low temp cut-back-in setpoint, default 12 F, Niles tOn. tOn==tOff ok, error if &lt;.</li> <li>AHHEATCOIL AHP (air source heat pump) heating power input inputs</li> </ul> ahhc.COP17 FLOAT_GZ Start of phase COP input @ 17 outdoor, 70 indoor (return). RQD for AHP. Niles pInSs17. ahhc.COP47 FLOAT_GZ Start of phase COP input @ 47 outdoor, 70 indoor (return). RQD for AHP. Niles pInSs47. ahhc.inIa number Start of phase <ul> <li>indoor (return) air temp power input correction factor, default .004, Niles iacIn.</li> <li>Fraction decrease in steady-state input per degree above 70F.</li> </ul> ahhc.cd number Start of phase <ul> <li>ARI cycling degradation coefficient, default .25, Niles cd.</li> <li>Ratio of fraction drop in system COP (incl cch, defrost) to fraction drop in capacity</li> <li>when cycling, from steady-state values, in ARI 47 F cycling performance tests.</li> <li>A value of .25 means that if the heat pump is cycled to drop its output to</li> <li>20% of full capacity (i.e. by the fraction .8), its COP will drop by .8 * .25 = .2.</li> <li>meter: COIL.mtri is used; compr input power to category htg, and suppl heater input to catagory hp.</li> <li>AHP non-inputtable contants</li> </ul>   AHHEATCOIL AHP setup time members  Name Type Variability Description/Comments ahhc.in17 KW_GZ Start of run steady state power @ 17 outdoor, 70 indoor (return). RQD for AHP. Niles pInSs17. ahhc.in47 KW_GZ Start of run <ul> <li>steady state power @ 47 outdoor, 70 indoor (return). RQD for AHP. Niles pInSs47.</li> <li>These reflect full power, no cycling, include compr &amp; crankcase heater.</li> <li>Program removes cch input energy. Externally kW, internally Btuh.</li> </ul> ahhc.in17c number Start of run compressor input power @ 17 degrees out, 70 in: in17 with cch power removed. Niles pInSs17. ahhc.in47c number Start of run ditto 47 degrees.  Niles pInSs47. ahhc.cdm number Start of run modified cd: cycling degradation coefficient adjusted to remove cch. Niles cdm.   AHHEATCOIL AHP runtime input members  Name Type Variability Description/Comments ahhc.tIa TEMP End of subhour <ul> <li>indoor air temp: copy of tmix or whatever ah variable is chosen</li> <li>qWant           desired output: HEATCOIL member used.</li> </ul> ahhc.qSupLim number End of subhour <ul> <li>caller-set heat output limit for when suppl heat in use: kludge when fan cycling</li> <li>to prevent raising ts and dropping fanFrOn to where suppl heat cuts out --&gt; ah oscillation</li> </ul> ahhc.frFanOn DBL End of subhour <ul> <li>fraction of time fan runs, 1.0 if not cycling, copy of AH.frFanOn.</li> <li>AHHEATCOIL AHP runtime internal members</li> </ul> ahhc.loTLockout BOO End of subhour TRUE if compressor locked out due to low outdoor temp (see tOff, tOn) ahhc.supOn BOO End of subhour TRUE if supplementary heat enabled (frFanOn is ~1.0, with hysterisis to keep ah stable). ahhc.capCon number End of subhour continuous cpr capac incl frost/defrost @ actual indoor temp, excl def &amp; reg rh. Niles pCapMx. ahhc.qDfrhCon number End of subhour <ul> <li>continuous avg heat ouput to defrost heater @ outdoor temp (not cycling). Niles pDefRhMx.</li> <li>made local, only set in cases needed:</li> <li>*s *e FRAC hlf      // heating load factor: hp compr heat used/capCon. Excludes reg &amp; dfr rh. frCprOn may be larger.</li> <li>*s *e FRAC plf      // part load factor, by which COP falls due to cycling.</li> <li>*s *e FRAC frTmDfr  // fraction of time defrosting, this subhour. Niles tmFrDef.</li> <li>AHHEATCOIL AHP runtime output members</li> <li>q: coil member: heat delivered, by heat pump incl suppl heaters (qSh). Niles pDel.</li> </ul> ahhc.frCprOn number End of subhour fraction of time compressor runs, this subhour. May be used by cch code. Niles tmFrRun. ahhc.pCpr number End of subhour power input to compressor (Niles pInComp): copy to .p in coilsEndSubhr. ahhc.qSh number End of subhour output of reg (not defrost) supplemental heaters. Included in q of coil. ahhc.pSh number End of subhour <ul> <li>input of reg &amp; dfr supplemental resistance heaters.</li> <li>crankcase heater input power: see CCH.p. Niles pCch.</li> </ul> Name Type Variability Description/Comments ahccBypass FRAC_GZ Start of phase <ul> <li>fraction of air flow which bypasses cool coil (for better humidity control), constant, dfl 0.</li> <li>Bypass is fixed at given fraction; no damper control is modelled.</li> </ul> Name Type Variability Description/Comments ahcc <ul> <li>cool coil subrecord.  If ahcc.coilType is NONE, other cc inputs are disallowed.</li> <li>following cool coil inputs are stored in ahcc:</li> <li>CCOILTYCH [ahccType][ahcctype]      // choice of NONE (default), ELEC, DX, CHW, ... .  constant.</li> <li>OFFAVAILVC ahccSch  // OFF or AVAIL, hourly, default AVAIL.</li> <li>POWER_GZ ahccCaptRat    // total rated capacity (Btu/hr), constant, RQD.</li> <li>POWER_GZ ahccCapsRat    // sensible rated capacity 1-CaptRat Btu/hr, constant.  Can it default to a % of CaptRat?</li> <li>FRAC_GZ [ahccSHRRat][ahccshrrat]        // sensible heat ratio (caps/capt) for cooling coil</li> <li>TI [ahccMtr][ahccmtr]       // MTR to which to charge energy use for non-plant-supported coil types.</li> <li>many more now -- should update this, 5-92.</li> </ul> COOLCOIL Name Type Variability Description/Comments ahcc.coilTy choice:COILTY Start of run <ul> <li>coil type choice according to application, as follows.  constant.</li> <li>air handler cool coil: NONE (default), ELEC, DX, CHW, ...</li> <li>air handler heat coil: NONE (default), ELEC, HW, GAS, OIL, AHP, ...</li> <li>terminal heat coil: NONE (default if no local heat), ELEC (dflt if local heat), HW,  GAS,OIL??...</li> <li>\"ELEC COOL COIL\" is a testing aid that cools with 100% efficiency &amp; capacity at any temp.</li> </ul> Name Type Variability Description/Comments ahcc.sched OFFAVAILVC Start of hour AVAIL when coil available, OFF when disabled, hourly, default AVAIL.   sensible cap'y: see COOLCOIL.capsRat.  Name Type Variability Description/Comments ahcc.captRat POWER_NZ End of subhour <ul> <li>*s *e for probes, cuz autoSize changes it. hourly for input purposes.</li> <li>total rated cap'y (Btuh), RQD except AHP, ?CHW, hrly vbl for furnaces, const for DX coil.</li> </ul> ahcc.captRat_As number Start of phase captRat determined by autoSizing, w less vbly for easier use in probes in main sim. 6-95. ahcc.captRat_AsNov number Start of phase <ul> <li>raw captRat determined by autoSizing, before overSize added, for reports/probes. 7-95</li> <li>cnausz.cpp code ASSUMES x, x_As, x_AsNov together for access thru one ptr. cuprobe.cpp's name search also requires together.</li> </ul> ahcc.bCaptRat number End of subhour start-subHr captRat, to undo size increases not in use as converged at end subhr (ahhc,ahcc). Name Type Variability Description/Comments ahcc.eirRat number Start of hour <ul> <li>rated load energy input ratio===heat input ratio===input/output===1/efficiency for DX,GAS,OIL at least.</li> <li>hrly vbl for GAS,OIL; constant for DX, .   effRat: see HEATCOIL.</li> </ul> Name Type Variability Description/Comments ahcc.mtri TI Start of phase MTR to which to charge coil main energy use, if not through a plant. Name Type Variability Description/Comments ahcc.aux POWER_GEZ Start of hour additional input energy used by auxiliary controls and devices. ahcc.auxMtri TI Start of phase Meter for auxiliary energy   coil runtime members  Name Type Variability Description/Comments ahcc.q number End of subhour average (not fan-on) output power level for subhour ahcc.qPr number End of subhour output at which coil's plant last computed, for call-flagging plant. set: cnhp.cpp. used: cncoil.cpp ahcc.p number End of subhour <ul> <li>input power level this subhour, from plant or to charge to meter (*subhrDur!).</li> <li>p = input from plant tentative 9-92; implemented for HW coils.</li> </ul> ahcc.plr number End of subhour current fan-on (or furnace-on) relative load (part load ratio) ahcc.plrAv number End of subhour current average relative load (plr * frFanOn) ahcc.eir number End of subhour energy input ratio: current input/output, fan on===average. Rob's addition, for probes, 5-92. ahcc.capMax number End of subhour maximum capacity this subhour, used to calculate tPossH/C. ahcc.pAux number End of subhour aux power this subhour <ul> <li>additional inputtable members for cooling coil</li> <li>CAUTION: cncult5:COOLCOIL::setup code used to assume .cppapsRat was 1st derived class member 5-92.</li> <li>total rated capacity: see COIL::captRat. Not used for CHW.</li> </ul> Name Type Variability Description/Comments ahcc.capsRat POWER_NZ End of subhour dx: sensible rated capacity &lt;= CaptRat Btu/hr, const for input, *s cuz varies during autoSize. ahcc.capsRat_As number Start of phase AutoSized ditto for naming consistency. 6-95. ahcc.capsRat_AsNov number Start of phase Raw autoSized ditto, b4 oversize added, for report &amp; probing. 7-95. ahcc.SHRRat FRAC_GZ Start of phase <ul> <li>sensible heat ratio (caps/capt) for cooling coil</li> <li>cnausz.cpp code ASSUMES x, x_As, x_AsNov together for access thru one ptr. cuprobe.cpp's name search also requires together.</li> </ul> ahcc.minTEvap TEMP_GZ Start of phase dx: min evaporator (effective surface) temp (below which compressor cuts out), default 35F. (40F til 8-95) ahcc.k1 FLOAT_LZ Start of phase <ul> <li>dx, chw: power of relative air flow to which outside number of transfer units is proportional.</li> <li>Used in formula of form: ntuO = ntuoDs*(relCfm)^k1. Default dx: -.3, chw: -.2. Niles k1.</li> </ul>   (dx,chw) coil rating (design) conditions. otta make names consistent: change vfR to vfDs?  Name Type Variability Description/Comments ahcc.dsTDbCnd TEMP_GZ Start of phase design (rating) (dx) condenser temp (outdoor temp pending water option), default = ARI = 95F. ahcc.dsTDbEn TEMP_GZ Start of phase design (rating) (dx,chw) entering air dry bulb temp, default = ARI = 80F. ahcc.dsTWbEn TEMP_GZ Start of phase design (rating) (dx) entering air wet bulb temp, default = ARI = 67F.  replaces Taylor's dsEAWB. ahcc.vfR AFLOW_GZ Start of run rating (dx,chw) air flow (cfm). default: DX: per vfRperTon. CHW: sfan.vfDs. ahcc.vfRperTon number Start of run DX default vfR per ton (12000 Btuh) of captRat. default: 400.   re dx cool coil compressor cycling and energy consumption  Name Type Variability Description/Comments ahcc.minUnldPlr number Start of phase part load ratio (fraction of full load) at/above which \"compressor unloading\" is used. dfl 1. ahcc.minFsldPlr number Start of phase <ul> <li>plr above which \"false loading\" is used (up to minUnldPlr). dfl minUnldPlr: no false loading.</li> <li>eirMinUnldPlr   below: pydxEirUl(minUnldPlr) precomputed at setup.</li> <li>*h FLOAT eirRAT     // rated load energy input ratio: is a COIL member</li> </ul> <ul> <li>inputtable coefficients for dx polynomial correcting fcns. Defaulted to DOE2 \"PTAC\" values (or as changed) by cncult5 code.</li> <li>enter comma-separated list of coefficients in order:</li> <li>PYCUBIC:  cubic(x):         constant, coeff x, coeff x^2, coeff x^3.</li> <li>PYBIQUAD: biquadratic(x,y): constant, coeff x, coeff x^2, coeff y, coeff y^2, coeff x*y.</li> <li>corrects...</li> </ul> Name Type Variability Description/Comments ahcc.pydxCaptT dx capt for (off-rated) tWbEn and tDbCnd (entering wetBulb, condenser dryBulb temps) PYBIQUAD Name Type Variability Description/Comments ahcc.pydxCaptT.k[index] number Array [7] Start of phase FLOAT k[7].  One extra member needed as terminator by cul.cpp array input logic, 5-92. ahcc.pydxCaptF dx capt (off-rated) relative flow; arg is plrVf PYCUBIC Name Type Variability Description/Comments ahcc.pydxCaptF.k[index] number Array [5] Start of phase <ul> <li>FLOAT k[5].  One extra member needed as terminator by cul.cpp array input logic, 5-92.</li> <li>possible future setup optimizations: 1) select ptr to fcn that does not compute terms whose k is 0;</li> <li>2) precalculate constants to compute in form  ((x*k[3] + k[2])*x + k[1])*x + k[0]</li> </ul> ahcc.pydxCaptFLim number Start of phase upper limit for value of pydxCaptF, 8-28-95 ahcc.pydxEirT dx energy input for tWbEn and tDbCnd PYBIQUAD Name Type Variability Description/Comments ahcc.pydxEirT.k[index] number Array [7] Start of phase FLOAT k[7].  One extra member needed as terminator by cul.cpp array input logic, 5-92. ahcc.pydxEirUl <ul> <li>dx energy in for part load in dx compr-unloading range (minUnldPlr &lt;= plr &lt;= 1).</li> <li>(Adjusts full-load input (eirRat*capt): I claim eir in name is misnomer, rob 5-92).</li> <li>note for minFsldPlr &lt; plr &lt; minUnldPlr, input remains at minUnldPlr's;</li> <li>for plr &lt;= minUnldPlr, input does straight line to 0.</li> </ul> PYCUBIC Name Type Variability Description/Comments ahcc.pydxEirUl.k[index] number Array [5] Start of phase <ul> <li>FLOAT k[5].  One extra member needed as terminator by cul.cpp array input logic, 5-92.</li> <li>possible future setup optimizations: 1) select ptr to fcn that does not compute terms whose k is 0;</li> <li>2) precalculate constants to compute in form  ((x*k[3] + k[2])*x + k[1])*x + k[0]</li> </ul>   inputtable COOLCOIL members for CHW coil, 10-92. all const.  Name Type Variability Description/Comments ahcc.cpi TI Start of phase subscript of COOLPLANT serving CHW coil, RQD for chw. ahcc.gpmDs H2OFLOW_GZ Start of phase design (i.e. maximum) chilled water flow, gpm, RQD for chw. Niles mwd[g]. ahcc.ntuoDs FLOAT_GZ Start of phase outside number of transfer units at design air flow (vfR), default 2. Niles ntuOd. ahcc.ntuiDs FLOAT_GZ Start of phase <ul> <li>inside number of transfer units at design water flow (gpmDs), default 2. Niles ntuId.</li> <li>also used, above: vfR, dsTDbEn, k1.  Not used for chw: captRat, capsRat, .</li> <li>note Niles k2 not used as not simulating flow/exit temp.</li> </ul>   COOLCOIL setup time: dx:  Name Type Variability Description/Comments ahcc.wsatMinTEvap DBL Start of run hum ratio of saturated air at minTEvap (minimum evaporator temp) ahcc.hsatMinTEvap DBL Start of run enthalpy of saturated air at minTEvap ahcc.efecOR DBL Start of run (outside) effectiveness at rated conditions (in record for probing only) ahcc.ntuR DBL Start of run number of trasfer units (like time constants) at rated conditions ahcc.eirMinUnldPlr DBL Start of run <ul> <li>pydxEirUl(minUnldPlr): precomputed dx input correction for falseLoading; prorate for cycling.</li> <li>dx and chw:</li> </ul> ahcc.menR DBL Start of run <ul> <li>chw/dx coil rating air flow (lb/hr) (for chw, Niles 'mad')</li> <li>vfR * air density @ dsTDbEn, @ sea level 1-95</li> <li>chw setup time:</li> </ul> ahcc.nxAh4cp TI Start of run 0 or subscr of next AH with CHW coil served by same COOLPLANT. 1st is COOLPLANT.ah1. ahcc.mwDs DBL Start of run <ul> <li>MFLOW</li> <li>design (max) chilled water flow: .gpmDs converted to lb/hr.</li> </ul>   COOLCOIL runtime members  Name Type Variability Description/Comments ahcc.wantQflag BOO End of subhour <ul> <li>nz if cooling desired (texWant &lt; ten) regardless of sched, etc. doCoils--&gt;cpEstimate.</li> <li>chw:</li> </ul> ahcc.tewd DBL End of subhour <ul> <li>TEMP</li> <li>chw internal: full-water-flow effective temp: prior value used next time called.</li> </ul> ahcc.chwQ DBL End of subhour <ul> <li>POWER</li> <li>heat taken from primary loop water, negative: chw load, to [COOLPLANT][coolplant] (same as ahcc.q).</li> </ul> ahcc.tr DBL End of subhour <ul> <li>TEMP</li> <li>water return temp to coolplant</li> </ul> ahcc.cpTsPr TEMP End of subhour cp ts for which coil last computed, re compute-flagging coil from plant ahcc.trPr TEMP End of subhour coil tr at last coil compute, re call-flagging cp from coil model ahcc.fullLoadWet BOO End of subhour <ul> <li>true if CHW coil wet @ full load,</li> <li>with hysterisis cuz CHW coil model has output discontinuity 10-92.</li> <li>dx mainly...</li> </ul> ahcc.frCprOn DBL End of subhour <ul> <li>dx: output to crankcase heater (via coilsEndSubhr): fraction of time compressor on.</li> <li>Move to COIL or AH if additional applicabilities found:</li> </ul> ahcc.tWbEn DBL End of subhour <ul> <li>TEMP</li> <li>dx coil entering air wetBulb temp: doDxCoil to coilsEndSubhr.</li> </ul> ahcc.hen DBL End of subhour <ul> <li>ENTHALPY</li> <li>dx,chw coil entering air enthalpy / is member for probeing</li> </ul> ahcc.tDbCnd DBL End of subhour <ul> <li>TEMP</li> <li>dx system condenser temp: Top.tDbO or (future) water temp)</li> <li>dx... following are members for probe-ability where local variable might [would] otherwise suffice:</li> <li>review for unused ones and delete:</li> </ul> ahcc.efecO DBL End of subhour <ul> <li>FRAC</li> <li>current (dx coil) effectiveness</li> </ul> ahcc.capt DBL End of subhour <ul> <li>POWER</li> <li>current (dx or any cool coil) total capacity</li> </ul> ahcc.caps DBL End of subhour <ul> <li>POWER</li> <li>current (dx coil) sensible capacity</li> </ul> ahcc.plrVf DBL End of subhour <ul> <li>FRAC</li> <li>current (dx coil) fan-on relative flow (part fan load ratio, cfm, Niles' plrCfm).</li> </ul> ahcc.plrSens DBL End of subhour <ul> <li>FRAC</li> <li>current (dx coil) fan-on relative sensible load (part load ratio)</li> </ul> ahcc.qs DBL End of subhour <ul> <li>POWER</li> <li>current (dx coil) sensible load</li> </ul> ahcc.ql DBL End of subhour <ul> <li>POWER</li> <li>current (dx coil) latent load</li> <li>general</li> <li>*s *e POWER q       COIL member above: current total load: q = qs + ql</li> <li>*s *e POWER p       COIL member above: current (electrical or ?plant) input power</li> <li>*s *e FRAC  plr     COIL member above: current fan-on relative load (part load ratio)</li> <li>*s *e FLOAT eir     COIL member above: current (dx,elec) energy input ratio: eir = p / q</li> <li>*s *e POWER qPr     COIL member; currently 10-92 not used for coolcoil</li> <li>*s *e TEMP  tsPr        plant supply temp at which coil last computed, for compute-flagging coil: COIL member</li> </ul> ahcc.xLGain ENERGY End of subhour condensation heat added to air (const enthalpy) to fix supersaturated wen, this subhr. ahcc.xLGainYr ENERGY End of subhour .. cumulative over run, for message at end run. ahcc.nSubhrsLX number End of subhour <ul> <li>number of subhours in which supersaturated entering air fixed</li> <li>flags for messages at end autoSize (or run, future?)</li> </ul> ahcc.minTLtd BOO End of subhour output limited by minTEvap b4 reaching ahTsMn (DX, 7-95) ahcc.cfm2Few BOO End of subhour too little flow to permit sizing coil to meet load at min temp (DX, 7-95) Name Type Variability Description/Comments tu1 TI Start of run chain head: TuB ss of 1st terminal for air handler.  Next is TU.nxTu4a. zhx1 TI Start of run chain head of ah's ZHX's (Zone Hvac Xfers): 0 or ZhxB subscript of first. next: ZHX.nxZhx4a. <p>ah runtime, terminals interactions:</p> Name Type Variability Description/Comments ahMode AHMODE End of subhour <ul> <li>what ah is doing: set to: ahOFF/ahFAN/ahHEATING/ahCOOLING/ahON(normal).</li> <li>test: &amp; ahFAN, &amp; ahHEATBIT, &amp; ahCOOLBIT for fan, heatcoil, coolcoil enabled.</li> </ul> tSup DBL End of subhour <ul> <li>TEMP</li> <li>supply temp FOR TERMINALS, F.  Set from working copy aTs at ahCompute exit.</li> <li>Differs from tsSp1 by duct loss and leakage (as well as coil limitations).</li> </ul> wSup DBL End of subhour <ul> <li>HUMRAT</li> <li>supply air humidity ratio for TERMINALS, set from working copy aWs at ah exit</li> </ul> wSupLs DBL Start of subhour <ul> <li>HUMRAT</li> <li>end prior subhr ah_wSup (=ah_wSup in 1st iteration), AH:ah_AfterSubhr to ZNR::ztuMdSets</li> </ul> airxTs DBL End of subhour <ul> <li>HC_VOL</li> <li>Btuh/cfm-F volumetric flow heat capacity of air at ts (airVsh, * 60 min/hour).</li> </ul> tsMnFo DBL End of subhour <ul> <li>TEMP</li> <li>ctu min flow, coil-off supply temp, calc'd &amp; ret'd by getTsMnFo. See tsMnFoOk.</li> </ul> tsMnFoOk BOO End of subhour TRUE if tsMnFo has been calc'd since last ahEstimate/ahCompute. set/used in getTsMnFo(). tsMxFo DBL End of subhour <ul> <li>TEMP</li> <li>ctu max flow, coil-off supply temp, calc'd &amp; ret'd by getTsMxFo. See tsMxFoOk.</li> </ul> tsMxFoOk BOO End of subhour TRUE if tsMxFo has been calc'd since last ahEstimate/ahCompute. set/used in getTsMxFo(). <p>input used for this iteration: return air as it left (future) plenum, b4 return duct: weighted average zones</p> Name Type Variability Description/Comments tr DBL End of subhour <ul> <li>TEMP</li> <li>return air temp (wtd avg zones, adj for (future) plenum)</li> </ul> wr DBL End of subhour <ul> <li>HUMRAT</li> <li>return air humidity ratio</li> </ul> cr DBL End of subhour <ul> <li>CFLOW</li> <li>return air flow (heat cap units); same as total supply air to zones</li> </ul> cMxfcc DBL End of subhour <ul> <li>CFLOW</li> <li>max flow used re deterimining frFanOn (member for probes / dbg aid).</li> </ul> frFanOn DBL End of subhour <ul> <li>FRAC</li> <li>if fcc, fraction of time coil/fan are on (cr/max poss c), else 1.0 (fan always on).</li> </ul> leakCOn DBL End of subhour <ul> <li>CFLOW</li> <li>fan-on rtn duct leak in === sup duct leak out (6-92). mbr for probes / dbg aid.</li> <li>at entry to air handler, this iteration -- see Nx's below.</li> </ul> tr1 DBL End of subhour <ul> <li>TEMP</li> <li>return air temp after return duct loss and leakage</li> </ul> wr1 DBL End of subhour <ul> <li>HUMRAT</li> <li>hum rat after return duct leakage</li> </ul> cr1 DBL End of subhour <ul> <li>CFLOW</li> <li>flow ditto, heat cap units (Btuh/F)</li> <li>after return fan, if any, this iteration; at entry to economizer.  w: use wr1.  c: use cr1.</li> </ul> tr2 DBL End of subhour <ul> <li>TEMP</li> <li>temp after rfan, b4 eco, for next iteration: copied to tr3 after conditional exit.</li> </ul> rfanQ number End of subhour return fan power copied at commitment to this iteration (rfan.q is next iter) <p>after economizer, before supply fan and coil(s).</p> Name Type Variability Description/Comments tmix DBL End of subhour <ul> <li>TEMP</li> <li>temp after outside air/economizer</li> </ul> wen DBL End of subhour <ul> <li>HUMRAT</li> <li>hum after outside air/economizer, and at coil entry</li> </ul> cmix DBL End of subhour <ul> <li>CFLOW</li> <li>flow after outside air/eco, thru supply fan, and at supply duct (but not in cool coil)</li> <li>at coil entrance: after blowthru supply fan if any; excludes flow that bypasses coil</li> </ul> dtMixEn DBL End of subhour <ul> <li>TEMPDIFF</li> <li>eco to coil entry temp diff: supply fan heat if blowthru, else 0</li> </ul> ten DBL End of subhour <ul> <li>TEMP</li> <li>coil entry temp: poss fan heat added.  wen: is just above.</li> </ul> cen DBL End of subhour <ul> <li>CFLOW</li> <li>flow into coil: cmix less any bypassing air, heat cap units (Btuh/F)</li> </ul> men DBL End of subhour <ul> <li>MFLOW</li> <li>same flow in mass units (lb/hr).</li> <li>tWbEn: see COOLCOIL.</li> <li>hen:   see COOLCOIL.</li> <li>at coil exit</li> </ul> tex DBL End of subhour <ul> <li>TEMP</li> <li>coil exit temp: coil Q added.</li> </ul> wex DBL End of subhour <ul> <li>HUMRAT</li> <li>coil exit humidity ratio</li> <li>after coil flow mixed with bypassing air</li> </ul> tex1 DBL End of subhour <ul> <li>TEMP</li> <li>add fan heat to get tSen.</li> <li>wex1: use aWs (below), later copied to ws (above).</li> <li>flow: cmix again.</li> <li>at ts sensor: after drawthru supply fan if any: ie at air handler exit, before supply duct.  c: is cmix.  w: use aWs.</li> </ul> dtExSen DBL End of subhour <ul> <li>TEMPDIFF</li> <li>coil exit to ts sensor temp difference: drawthru fan heat, else 0</li> </ul> tSen DBL End of subhour <ul> <li>TEMP</li> <li>temp at supply temp sensor (before supply duct). ahTsSp1 is setpoint for tSen.</li> <li>at delivery to individual terminal supply ducts, after shared supply duct leakage and loss if any</li> <li>w: use aWs. c: is cr, or sum of terminal c's.</li> </ul> dtSenS DBL End of subhour <ul> <li>TEMPDIFF</li> <li>supply duct temp diff, due to [ahSOLeak][ahsoleak] and [ahSOLoss][ahsoloss]</li> </ul> aTs DBL End of subhour <ul> <li>TEMP</li> <li>supply temp (air handler output).  aTs is ah working copy used so last value used</li> <li>for ztuCompute (ts, above) remains avail thru AH::ahCompute. Elsewhere, same as ts.</li> </ul> aWs DBL End of subhour <ul> <li>HUMRAT</li> <li>hum rat of supply air, working copy, used to set ws at ah exit.</li> <li>CFLOW cs: expect to need when return flow != supply.</li> </ul> <ul> <li>--- temps etc...  trNx...tr2Nx are values for use as inputs to NEXT iteration, resulting from current ah outputs.</li> <li>they are copied to tr...tr2 above at use (commitment to another iteration) by pute4Fs.</li> <li>next-iteration return air as it leaves (future) plenum, before return duct: weighted average zones</li> </ul> Name Type Variability Description/Comments trNx DBL End of subhour <ul> <li>TEMP</li> <li>return air temp (wtd avg zones, adj for (future) plenum)</li> </ul> wrNx DBL End of subhour <ul> <li>HUMRAT</li> <li>return air humidity ratio</li> </ul> crNx DBL End of subhour <ul> <li>CFLOW</li> <li>return air flow (heat cap units); same as total supply air to zones</li> </ul> cMxnx DBL End of subhour <ul> <li>CFLOW</li> <li>flow for frFanOnNx = 1.0: min( crNx, sfan.cMx-leak).  Member just for probes/dbg aid.</li> </ul> frFanOnNx DBL End of subhour <ul> <li>FRAC</li> <li>if fcc, fraction of time coil/fan are on (crNx/max poss flow), else 1.0 (fan always on).</li> </ul> leakCOnNx DBL End of subhour <ul> <li>CFLOW</li> <li>fan-on leak into return duct === leak out of supply duct at present 6-92.</li> <li>member for probes/debug aid; cd remove setFrFanOn arg.</li> <li>at entry to air handler, next iteration</li> </ul> tr1Nx DBL End of subhour <ul> <li>TEMP</li> <li>return air temp after return duct loss and leakage</li> </ul> wr1Nx DBL End of subhour <ul> <li>HUMRAT</li> <li>hum rat ditto</li> </ul> cr1Nx DBL End of subhour <ul> <li>CFLOW</li> <li>flow ditto [formerly named cAh]; heat cap units (Btuh/F)</li> <li>after return fan, if any; at entry to economizer; next iteration.  w: use wr1Nx.  c: use cr1Nx.</li> </ul> tr2Nx DBL End of subhour <ul> <li>TEMP</li> <li>temp after rfan, b4 eco, for next iteration: copied to tr3 after conditional exit.</li> </ul> <p>ah run, internal, general/miscellaneous</p> Name Type Variability Description/Comments uUseAr TCUSE End of subhour 'or' of tu.useAr's at refine() entry, for detecting pegged terminals, set in zRat, tentative. fcc BOO End of hour <ul> <li>TRUE if fan cycles: fan runs only fraction of subhour requested by control terminal, else off.</li> <li>when on, fan runs full flow and coil usually at a high power.</li> <li>set hourly from [ahFanCycles][ahfancycles] else [ahTsSp][ahtssp]==ZN by AH::begHour.</li> <li>when TRUE: frFanOn is fraction time on for fan (and usually coil).</li> <li>flows and powers become average, divide by frFanOn for fan-on value.</li> <li>ah Temps, w's, plr's, po remain fan-on values.</li> <li>when FALSE: fan runs all the time (normal VAV case), frFanOn is 1.0.</li> </ul> isZNorZN2 BOO End of hour TRUE if ahTsSp is ZN or ZN2 this hour. 5-95. tsSp1 DBL End of subhour <ul> <li>TEMP</li> <li>[ahTsSp][ahtssp] as number: WZ/CZ/ZN/ZN2 resolved to temp now needed, set by AH::setTsSp1.</li> </ul> tsFullFlow DBL End of subhour <ul> <li>TEMP</li> <li>heating ts for full flow, special re AHP suppl rh stability, usually not set,</li> <li>cnah2.cpp:setTsSp1 to cncoil.cpp:doAhpHeatCoil</li> </ul> ecoEnabled BOO End of subhour TRUE if economizer present and currently enabled coilLockout BOO End of subhour TRUE if cooling coil disabled by full-open non-integrated economizer po DBL End of subhour current fraction outside air coilUsed COILUSED End of subhour coil in use, doCoils to coilsEndSubhr: cuNONE, cuHEAT, or cuCOOL. 12-3-92. <p>ah run, internal, fan/coil overload handling</p> Name Type Variability Description/Comments fanF DBL End of subhour \"fan factor\" used in determining current max flows. reduce when fan overloads. fanFMax DBL End of subhour <ul> <li>fanF value for full flow: max tu vfMx/vfDs, reflecting both vfMxH's &amp; vfMxC's.</li> <li>can change hourly, more often during autoSizing 7-95.</li> <li>CAUTION: fanF below fanFMax won't NECESSARILY reduce flow for current useAr's.</li> </ul> fanLimited BOO End of subhour TRUE if using full capacity of fan without getting desired flow coilLimited BOO End of subhour TRUE if using full capacity of available coil without getting desired delta-T tPossH DBL End of subhour <ul> <li>TEMP</li> <li>heating coil exit temp probably now possible, for ah estimating, doCoils to setTsSp1.</li> </ul> tPossC DBL End of subhour <ul> <li>TEMP</li> <li>cooling coil exit temp probably now possible, for ah estimating, doCoils to setTsSp1.</li> </ul> <p>changes flag (many ah change conditionals use a -Pr (prior) directly, without a flag)</p> Name Type Variability Description/Comments ahClf BOO End of subhour call-flag: set nz if must call ahCompute so it can test tr,cr etc to see if computation needed. ahPtf BOO End of subhour <ul> <li>compute-flag: set if must call ahCompute and it should unconditionally recompute this AH:</li> <li>setters include: exman chaf's for [ahTsSp][ahtssp], ahSch, ahhc.sched, ahcc.sched, etc;</li> <li>AH::estimate, ahCompute, ah_SetMode, ; ZNR::ztuMdSets, .</li> <li>tested: hvacIterSubhr(), AH::ahCompute. cleared: AH::ahCompute.</li> </ul> ahPtf2 BOO End of subhour <ul> <li>secondary flag for compute only after zones computed again, for non-convergence.</li> <li>set: AH::iter4Fs. tested: hvacIterSubhr(), AH::ahCompute. cleared: AH::ahCompute.</li> </ul>"},{"location":"probe-definitions/boiler/","title":"Boiler","text":"<p>title: boiler ---</p> Name Type Variability Description/Comments blrCap POWER_GZ Start of phase capacity (Btuh). required input. blrEffR FRAC_GZ Start of phase efficiency at steady-state full load, default .80. blrEirR number Start of phase Energy Input Ratio (1/eff): alternate input; used internally. blrPyEi <ul> <li>coefficients of cubic polynomial fcn of plr (part load ratio) to adjust full load energy input</li> <li>for part load operation. 4 floats for coeffs of plr^ 0, 1, 2, 3.</li> </ul> PYCUBIC Name Type Variability Description/Comments blrPyEi.k[index] number Array [5] Start of phase <ul> <li>FLOAT k[5].  One extra member needed as terminator by cul.cpp array input logic, 5-92.</li> <li>possible future setup optimizations: 1) select ptr to fcn that does not compute terms whose k is 0;</li> <li>2) precalculate constants to compute in form  ((x*k[3] + k[2])*x + k[1])*x + k[0]</li> </ul> mtri TI input time subscript of MTR to which to charge boiler input power, default none blrp <ul> <li>boiler primary pump subrecord (defn above): input &amp; setup members. Pump runs when boiler is on.</li> <li>boiler auxiliaries user inputs, similar to those for a COIL.</li> </ul> PUMP Name Type Variability Description/Comments blrp.gpm H2OFLOW_GZ Start of run rated flow (gpm), delivered at HdLoss. required input. code defaults .gpm for blrp, chcp, chpp. blrp.hdLoss PRESH2O_GEZ Start of phase head (pressure), ft-H2O. Accept 0 for 0 pump heat. Default CHW: 65; CW:45; HW:35. blrp.motEff FRAC_GZ Start of phase motor efficiency, default .88 blrp.hydEff FRAC_GZ Start of phase hydraulic eff, default .70. Only product of motEff * hydEff is used. blrp.ovrunF number Start of run <ul> <li>overrun factor for future use, now 9-92 set to constant 1.3.</li> <li>maximum deliverable flow at (assumed) reduced head, as multiple of Gpm.</li> </ul> blrp.mtri TI Start of phase <ul> <li>name of MTR to which electrical use is added</li> <li>PUMP setup time variables</li> </ul> blrp.mw DBL Start of run <ul> <li>MFLOW</li> <li>rated flow, Gpm converted to lb/hr</li> <li>*r DBL/*MFLOW*/ mwMx    rated flow times ovrun, lb/hr -- if needed</li> </ul> blrp.q DBL Start of run <ul> <li>POWER</li> <li>shaft power === heat to water, Btuh</li> </ul> blrp.p DBL Start of run <ul> <li>POWER</li> <li>electrical input, whenever running, Btuh: flow in application always at least mw;</li> <li>overruns at least to mwMx are assumed not to increase power (pressure drops).</li> </ul> auxOn POWER_GEZ Start of hour addl input energy used in proportion to plr when on, default 0, hourly vbl for future flexblty. auxOnMtri TI input time MTR to which to charge \"auxOn\" auxOff POWER_GEZ Start of hour addl input energy when off for part or all of subhr (proportional to 1-plr), for unforseen uses. auxOffMtri TI input time MTR for \"auxOff\" auxOnAtall POWER_GEZ Start of hour addl input energy used in toto when blr on for any part of subhour, for unforseen uses. auxOnAtallMtri TI input time MTR for \"auzOnAtall\" auxFullOff POWER_GEZ Start of hour additional input energy when off FOR ENTIRE SUBHOUR (as opposed to in proportion to 1-plr). auxFullOffMtri TI input time <ul> <li>MTR to which auxFullOff is charged, default c.mtri.</li> <li>boiler setup time</li> </ul> nxBlr4hp TI Start of run 0 or subscript of next boiler for same heatplant. 1st is HEATPLANT.blr1. used BOO Start of run <ul> <li>during input checking (cncult6.cpp), TRUE if a stage uses this boiler</li> <li>boiler runtine</li> </ul> blrMode choice:OFFON End of subhour mode this subhour: off or on. Can be on with 0 q if in HEATPLANT's 1st stage. plr number End of subhour part load ratio q number End of subhour current output power level (excluding pump heat), share of total of connected coils &amp; hx's p number End of subhour current input power pAuxOn number End of subhour blr-on proporotinal aux power this subhour pAuxOff number End of subhour blr-off proportional aux power this subhour pAuxOnAtall number End of subhour blr on-at-all aux power this subhour pAuxFullOff number End of subhour auxFullOff power this subhour"},{"location":"probe-definitions/chiller/","title":"Chiller","text":"<p>title: chiller ---</p> <ul> <li>[CHILLER][chiller] Capacity user inputs. Capacity at various temp conditions is cap = [chCapDs][chcapds]*chPyCapT(ts,tcnd).</li> <li>Note Niles chlrType deleted per Taylor (via Bruce), defaults hard-coded to HERM_CENT case.</li> </ul> Name Type Variability Description/Comments chCapDs POWER_NZ Start of phase <ul> <li>capacity at chDsTs,chDsTcnd, Btuh. Required. Negative internally. Niles capDsn.</li> <li>verify defaults 44 and 85 should be described as ARI in doct'n. *****</li> </ul> chTsDs TEMP_GZ Start of phase temp leaving chiller at which chCapDs applies, default 44. Niles twSuDsn. chTcndDs TEMP_GZ Start of phase temp entering condenser (twoDel value) for chCapDs, default 85. Niles twCndDsn. chPyCapT <ul> <li>biquad poly (6 float coeffs entered) of (chTs, chTcnd) to adjust capacity to off-design temps.</li> <li>Niles capNrCr. Normalized @ [chTsDs][chtsds]/[chTcndDs][chtcndds]; Niles' capRat not used.</li> <li>Defaults: -1.742040,.029292,-.000067,.048054,-.000291,-.000106 or as changed, cncult6.cpp.</li> <li>[CHILLER][chiller] Full-load energy Input Inputs. Full-load power input at various temp conditions is eiFL = cap*[chEirDs][cheirds]*chPyEirT(ts,tcnd).</li> </ul> PYBIQUAD Name Type Variability Description/Comments chPyCapT.k[index] number Array [7] Start of run FLOAT k[7].  One extra member needed as terminator by cul.cpp array input logic, 5-92. chCop FLOAT_GZ Start of phase <ul> <li>Full-load Coefficient of performance (output Btu/input Btu) @ [chTsDs][chtsds]/[chTcndDs][chtcndds], reflecting</li> <li>motor and chiller efficiency. No such Niles input. Converted to [chEirDs][cheirds] for internal use.</li> <li>Default: current minimum erriciency, Bruce to look up ??, meanwhile can use 3 for testing.</li> </ul> chEirDs FLOAT_GZ Start of run <ul> <li>Full-load eir (energy input ratio) @ [chTsDs][chtsds]/[chTcndDs][chtcndds], relecting motor and chiller efficiency.</li> <li>Alternate input for [chCop][chcop]; used internally; replaces Niles' eirR (eir at ARI conditions).</li> </ul> chPyEirT <ul> <li>biquad poly (6 float coeffs input) of (chTs, chTcnd) to adjust full-load energy input to</li> <li>off-rated temperature conditions, Niles eirNrCr. 1.0 @ [chTsDs][chtsds]/[chTcndDs][chtcndds].</li> <li>Defaults: 3.117600,-.109236,.001389,.003750,.000150,-.000375 (or as changed, cncult6.cpp).</li> <li>[CHILLER][chiller] part-load energy Input Inputs. Part-load energy input (ei) is full-load-energy-input (eiFL, above) corrected as follows:</li> <li>In unloading region,  1 &gt;= plr &gt; [chMinUnldPlr][chminunldplr], ei is curve given by polynomial</li> <li>ei = eiFl * chPyEirUl(plr);</li> <li>In false loading region, [chMinUnldPlr][chminunldplr] &gt;= plr &gt;= [chMinFsldPlr][chminfsldplr], energy input is constant.</li> <li>ei = eiFl * chPyEirUl([chMinUnldPlr][chminunldplr]);                  nb no plr dependence</li> <li>In cycling region, [chMinFsldPlr][chminfsldplr] &gt; plr &gt;= 0, ei is prorated (eir remains constant).</li> <li>ei = eiFl * chPyEirUl([chMinUnldPlr][chminunldplr])*plr/[chMinUnldPlr][chminunldplr].</li> <li>The value \"chPyEirUl([chMinUnldPlr][chminunldplr])\" is constant and will be precomputed at setup time.</li> <li>Niles name \"eirPlrCr\" for the above 3-case part load correction factor is not used in record.</li> </ul> PYBIQUAD Name Type Variability Description/Comments chPyEirT.k[index] number Array [7] Start of run FLOAT k[7].  One extra member needed as terminator by cul.cpp array input logic, 5-92. chPyEirUl <ul> <li>cubic poly (4 floats input for coeff) of plr to correct eir for plr in unloading range</li> <li>(1 &gt;= plr &gt; [chMinUnldPlr][chminunldplr]). Niles eirUnldCr. Defaults:.222903,.313387,.463710,0. (cncult6.cpp).</li> </ul> PYCUBIC Name Type Variability Description/Comments chPyEirUl.k[index] number Array [5] Start of run <ul> <li>FLOAT k[5].  One extra member needed as terminator by cul.cpp array input logic, 5-92.</li> <li>possible future setup optimizations: 1) select ptr to fcn that does not compute terms whose k is 0;</li> <li>2) precalculate constants to compute in form  ((x*k[3] + k[2])*x + k[1])*x + k[0]</li> </ul> chMinUnldPlr number Start of phase min unloading loading part load ratio, default 0.1. Niles minUnLdPlr. chMinFsldPlr number Start of phase <ul> <li>min false loading part load ratio, default 0.1. Niles minFsLdPlr. must be &lt;= [chMinUnldPlr][chminunldplr].</li> <li>[CHILLER][chiller] user inputs...</li> </ul> chMotEff FRAC_GZ Start of phase <ul> <li>motor efficiency (poorly named), default 1.0, Niles motorEff, used only to determine</li> <li>portion of input energy computed as above that goes to the air rather than the condenser.</li> <li>1.0 simulates hermetic compressor where all motor waste heat goes to condenser;</li> <li>use smaller values for open systems.</li> </ul> mtri TI input time <ul> <li>[METER][meter] name (\"[chMtr][chmtr]\") for accumulating compressor energy used by chiller,</li> <li>under category AUX. Default: not recorded. Note pumps have their own meters.</li> </ul> chpp <ul> <li>chiller primary pump: pumps water through primary loop to which the load (CHW coils)</li> <li>is connected. Flow is unsimulated, but assumed to be at least [chppGpm][chppgpm]=chpp.mw whenever</li> <li>chiller is on (any excess over coil flows goes thru an assumed bypass valve); if flow</li> <li>overruns this amount, it is assumed that the (unsimulated) pressure drops such that the</li> <li>pump electrical input and heat do not change. Subrecord inputs include:</li> <li>[chppGpm][chppgpm]   gpm &gt; 0    Primary pump flow. Default [chCapDs][chcapds]/5000.  Niles mwPrmPmp.</li> <li>chppHdlos    ft H2O &gt;= 0    Head loss in primary chilled water loop. default 65. Niles hdLosPrmLp.</li> <li>[chppMotEff][chppmoteff] frac &gt; 0   Primary pump motor efficiency, default .88.  Niles mtrEfPrmPmp.</li> <li>[chppHydEff][chpphydeff] frac &gt; 0   Hydraulic efficiency of primary pump, default .70 . Niles hydEfPrmPmp.</li> <li>[chppOvrunF][chppovrunf] factor &gt; 1 Maximum multiple of chppMw that pump can deliver at (assumed) pressure reduction,</li> <li>and at same electrical input. default 1.3. CSE currently does not simulate primary flow</li> <li>at run time, but will issue a warning if the sum of the flows of the connected CHW coils</li> <li>exceeds the sum of the [COOLPLANT][coolplant]'s most powerful stage's [chppGpm][chppgpm]*[chppOvrunF][chppovrunf] products.</li> <li>Drop this input if not checking coil capacity vs pumping capacity 10-92.</li> <li>[chppMtr][chppmtr] .mtri  name of a [METER][meter]  for recording electricity used by pump, category AUX.</li> </ul> PUMP Name Type Variability Description/Comments chpp.gpm H2OFLOW_GZ Start of run rated flow (gpm), delivered at HdLoss. required input. code defaults .gpm for blrp, chcp, chpp. chpp.hdLoss PRESH2O_GEZ Start of phase head (pressure), ft-H2O. Accept 0 for 0 pump heat. Default CHW: 65; CW:45; HW:35. chpp.motEff FRAC_GZ Start of phase motor efficiency, default .88 chpp.hydEff FRAC_GZ Start of phase hydraulic eff, default .70. Only product of motEff * hydEff is used. chpp.ovrunF number Start of run <ul> <li>overrun factor for future use, now 9-92 set to constant 1.3.</li> <li>maximum deliverable flow at (assumed) reduced head, as multiple of Gpm.</li> </ul> chpp.mtri TI Start of phase <ul> <li>name of MTR to which electrical use is added</li> <li>PUMP setup time variables</li> </ul> chpp.mw DBL Start of run <ul> <li>MFLOW</li> <li>rated flow, Gpm converted to lb/hr</li> <li>*r DBL/*MFLOW*/ mwMx    rated flow times ovrun, lb/hr -- if needed</li> </ul> chpp.q DBL Start of run <ul> <li>POWER</li> <li>shaft power === heat to water, Btuh</li> </ul> chpp.p DBL Start of run <ul> <li>POWER</li> <li>electrical input, whenever running, Btuh: flow in application always at least mw;</li> <li>overruns at least to mwMx are assumed not to increase power (pressure drops).</li> </ul> chcp <ul> <li>chiller heat rejection (condenser) pump: pumps water through chiller's condenser and</li> <li>the chiller's coolplant's towerplant's cooling towers. Flow is [chcpGpm][chcpgpm]=chcp.mw</li> <li>whenever chiller is on. Subrecord inputs include the following:</li> <li>[chcpGpm][chcpgpm]  gpm &gt; 0     Condenser pump flow, default [chCapDs][chcapds]/4000, Niles mwCndPmp.</li> <li>chcpHdlos   ft H2O &gt;= 0 Head loss in condenser chilled water loop, default 45', Niles hdLosCndLp.</li> <li>[chcpMotEff][chcpmoteff] frac &gt; 0   Condenser pump motor efficiency, default .88, Niles mtrEfCndPmp.</li> <li>[chcpHydEff][chcphydeff] frac &gt; 0   Hydraulic efficiency of condenser pump, default .70, Niles hydEfCndPmp.</li> <li>[chcpMtr][chcpmtr]  .mtri  name of a [METER][meter] for recording electricity used by pump, category AUX.</li> <li>[CHILLER][chiller] auxiliaries user inputs, similar to those for a [BOILER][boiler] or a COIL.</li> </ul> PUMP Name Type Variability Description/Comments chcp.gpm H2OFLOW_GZ Start of run rated flow (gpm), delivered at HdLoss. required input. code defaults .gpm for blrp, chcp, chpp. chcp.hdLoss PRESH2O_GEZ Start of phase head (pressure), ft-H2O. Accept 0 for 0 pump heat. Default CHW: 65; CW:45; HW:35. chcp.motEff FRAC_GZ Start of phase motor efficiency, default .88 chcp.hydEff FRAC_GZ Start of phase hydraulic eff, default .70. Only product of motEff * hydEff is used. chcp.ovrunF number Start of run <ul> <li>overrun factor for future use, now 9-92 set to constant 1.3.</li> <li>maximum deliverable flow at (assumed) reduced head, as multiple of Gpm.</li> </ul> chcp.mtri TI Start of phase <ul> <li>name of MTR to which electrical use is added</li> <li>PUMP setup time variables</li> </ul> chcp.mw DBL Start of run <ul> <li>MFLOW</li> <li>rated flow, Gpm converted to lb/hr</li> <li>*r DBL/*MFLOW*/ mwMx    rated flow times ovrun, lb/hr -- if needed</li> </ul> chcp.q DBL Start of run <ul> <li>POWER</li> <li>shaft power === heat to water, Btuh</li> </ul> chcp.p DBL Start of run <ul> <li>POWER</li> <li>electrical input, whenever running, Btuh: flow in application always at least mw;</li> <li>overruns at least to mwMx are assumed not to increase power (pressure drops).</li> </ul> auxOn POWER_GEZ Start of hour addl input energy used in proportion to plr when on, default 0, hourly vbl for future flexblty. auxOnMtri TI input time MTR to which to charge \"auxOn\" auxOff POWER_GEZ Start of hour addl input energy when off for part or all of subhr (proportional to 1-plr), for unforseen uses. auxOffMtri TI input time MTR for \"auxOff\" auxOnAtall POWER_GEZ Start of hour addl input energy used in toto when chiller on for any part of subhour, for unforseen uses. auxOnAtallMtri TI input time MTR for \"auxOnAtall\" auxFullOff POWER_GEZ Start of hour additional input energy when off FOR ENTIRE SUBHOUR (as opposed to in proportion to 1-plr). auxFullOffMtri TI input time MTR to which auxFullOff is charged, default c.mtri. <p>CHILLER setup time variables</p> Name Type Variability Description/Comments nxCh4cp TI Start of run 0 or subscript of next CHILLER in same COOLPLANT. 1st is COOLPLANT.ch1. used BOO Start of run non-0 if a COOLPLANT uses this chiller -- else warning eirMinUnldPlr DBL Start of run chPyEirUl(minUnldPlr): precomputed energy input corr for false loading, prorate for cycling <p>CHILLER runtime internal variables</p> Name Type Variability Description/Comments chMode choice:OFFON End of subhour C_OFFONCH_OFF or _ON: whether this chiller is running, set by staging code. cap DBL End of subhour <ul> <li>POWER</li> <li>capacity @ current cpTs and tCnd, set only if running</li> <li>[CHILLER][chiller] runtime outputs. Pri water ts, towerplant water q &amp; temp, etc. are computed directly into [COOLPLANT][coolplant] members.</li> </ul> q number End of subhour this chiller's current primary output power to pri loop p number End of subhour compressor power input. also see chpp.p, chcp.p. (Niles cndPmpPwrIn, prmPmpPwrIn, totPwrIn) pAuxOn number End of subhour chiller-on proporotinal aux power this subhour pAuxOff number End of subhour chiller-off proportional aux power this subhour pAuxOnAtall number End of subhour chiller on-at-all aux power this subhour pAuxFullOff number End of subhour auxFullOff power this subhour"},{"location":"probe-definitions/construction/","title":"Construction","text":"<p>title: construction ---</p> Name Type Variability Description/Comments conU UH input time <ul> <li>U-value.  Entered by user or calculated from associated layers (LRs).  0 allowed.</li> <li>derived</li> </ul> nLr number Start of run 0 or number of layers (in LR rat). Layers are entered in order from inside out. nFrmLr number Start of run # framed layers: error if &gt; 1; is-Framed flag. r RES_GZ Start of run thermal resistance of layers accumulated here for conU hc HC_AREA Start of run accumulated heat capacity per square foot rNom RES_GZ Start of run nominal r value"},{"location":"probe-definitions/coolPlant/","title":"coolPlant","text":"<p>title: coolPlant --- COOLPLANT user inputs</p> Name Type Variability Description/Comments cpSched OFFAVAILONVC Start of hour schedule, hourly choice of OFF, AVAIL (default), ON. cpTsSp TEMP Start of hour supply temp cooling setpoint, hourly variable, default 44. cpPipeLossF number Start of phase <ul> <li>pipe \"loss\": heat gain equal to this fraction of largest stage &lt;-- CHANGE **</li> <li>capacity will be used in any subhour when any chiller runs. default .01.</li> </ul> cpTowi TI input time <ul> <li>subscript of [TOWERPLANT][towerplant] supporting this [COOLPLANT][coolplant]. Input as name \"[cpTowerplant][cptowerplant]\". RQD.</li> <li>[COOLPLANT][coolplant] stages: 7 arrays, each input as list of up to 7 chiller names, or ALL_BUT, comma, and up to 6 names, or ALL.</li> <li>Internally, subscripts, TI_ALLBUT, and TI_ALL are stored, with 0 after and of lists (poss garbage after TI_ALL).</li> </ul> cpStage1[index] TI Array [8] Start of phase defaulted by code, if NO cpStage values entered: cpStage2[index] TI Array [8] Start of phase defaulted by code, if NO cpStage values entered: cpStage3[index] TI Array [8] Start of phase ... stage 1: TI_ALL. stages 2-7: none(0). cpStage4[index] TI Array [8] Start of phase ... stage 1: TI_ALL. stages 2-7: none(0). cpStage5[index] TI Array [8] Start of phase cpStage6[index] TI Array [8] Start of phase cpStage7[index] TI Array [8] Start of phase <ul> <li>CAUTION: code may access stages by subscripting, assuming they follow cpStage1 in order.</li> <li>CAUTION: code may use internal subscript 0-6 to access variables named cpStage1-7. Potentially confusing!</li> </ul> <p>COOLPLANT setup time</p> Name Type Variability Description/Comments ch1 TI Start of run subscript of 1st CHILLER in this COOLPLANT. Next is CHILLER.nxCh4cp. ah1 TI Start of run subscript of 1st AH with CHW coil served by this COOLPLANT. Next is AH.ahcc.nxAh4cp. nxCp4tp TI Start of run subscript of next COOLPLANT using same TOWERPLANT. 1st is TOWERPLANT.c1. mwDsCoils DBL Start of run <ul> <li>MFLOW</li> <li>sum of dsgn flows of connected CHW coils, accum by COOLCOIL::setup, for check vs pumps.</li> </ul> stgPPQ[index] number Array [7] Start of run <ul> <li>POWER</li> <li>primary pump heats of stages 0-6.</li> </ul> stgCPQ[index] number Array [7] Start of run <ul> <li>POWER</li> <li>condenser pump heats of stages 0-6.</li> </ul> stgPMw[index] number Array [7] Start of run <ul> <li>MFLOW</li> <li>primary pump flows of stages 0-6.</li> </ul> stgCMw[index] number Array [7] Start of run <ul> <li>MFLOW</li> <li>condenser (heat rejection) pump flows of stages 0-6, lb/hr</li> <li>note there is no array of capacities cuz depend on ts and tCnd, must recompute as needed.</li> </ul> stgN number Start of run max+1 used stage subscript 1-7 (used stages need not be contiguous) stgMxCap number Start of run subscript 0-6 of stage with most design power mxCapDs DBL Start of run <ul> <li>POWER</li> <li>design power of most powerful stage (negative)</li> </ul> mxPMw DBL Start of run <ul> <li>MFLOW</li> <li>largest primary pump flow, for computing minimum delta-t at runtime</li> </ul> mxPMwOv DBL Start of run <ul> <li>MFLOW</li> <li>primary pump flow w/ overrun of stage with most design power, for check vs coils</li> </ul> mxCondQ DBL Start of run <ul> <li>POWER</li> <li>max design rejected heat (positive), re defaulting [TOWERPLANT][towerplant] capacity</li> </ul> mxCondGpm DBL Start of run <ul> <li>MFLOW</li> <li>condenser pump flow of same stage (not verified largest), gpm: input value</li> </ul> qPipeLoss DBL Start of run <ul> <li>POWER</li> <li>pipe \"loss\" power: [cpPipeLossF][cppipelossf] * mxCapDs. Negative.</li> </ul> <p>COOLPLANT runtime: outputs to other objects</p> Name Type Variability Description/Comments cpTs DBL End of subhour <ul> <li>TEMP</li> <li>primary water supply temp to coils. cp- to not confuse with AH::ts when used re coil.</li> </ul> q DBL End of subhour <ul> <li>POWER</li> <li>current primary output power to coils, for results</li> </ul> qTow DBL End of subhour <ul> <li>POWER</li> <li>heat added to condenser water, incl pump heat, Btuh.</li> </ul> tTow DBL End of subhour <ul> <li>TEMP</li> <li>temp of water returned from chiller condensers, avail to towerplant (not used 10-92).</li> </ul> mwTow DBL End of subhour <ul> <li>MFLOW</li> <li>condenser water flow to towerplant, lb/hr. stgCMw[stgi].</li> <li>power consumption: occurs in chillers, is posted directy to meters.</li> <li>[COOLPLANT][coolplant] runtime: input from other objects</li> </ul> tCnd DBL End of subhour <ul> <li>TEMP</li> <li>heat rejection: water temp entering chiller condensers, last used [TOWERPLANT][towerplant].tpTs.</li> <li>also used as this cp's prior tpTs for change detection.</li> <li>[COOLPLANT][coolplant] runtime: internal</li> </ul> cpClf BOO End of subhour call-flag: set nz if must call cpCompute so it can test tr, etc to see if computation needed. cpPtf BOO End of subhour compute-flag: set if must call cpCompute and it should unconditionally recompute this plant cpMode choice:OFFON End of subhour <ul> <li>mode this subhour: off or on: per [cpSched][cpsched]; per demand for AVAIL. Set in cpEstimate, cpCompute.</li> <li>cpCompute next input(s), calculated at entry to tpCompute before commitment to new calculation:</li> </ul> qLoadNx DBL End of subhour <ul> <li>POWER</li> <li>heat added to water by loads. Negative. Believe need in rec only for debug/reporting.</li> <li>cpCompute current input(s), as used for current cpTs. -Nx('s) copied, after decision to calculate anew.</li> </ul> qLoad DBL End of subhour <ul> <li>POWER</li> <li>load: sum of coil Btuh's, pipe loss. Negative. May be used in cpEstimate.</li> </ul> tr DBL End of subhour <ul> <li>TEMP</li> <li>load: return water temp from coils, incl pipe loss, assuming no mw overrun.</li> </ul> stgi number End of subhour stage in use, 0-6 for cpStage1-7. qNeed DBL End of subhour <ul> <li>POWER</li> <li>power needed from coolPlant to deliver water at setpoint: ([cpTsSp][cptssp] - tr) * mw[stg]. negative.</li> </ul> cap DBL End of subhour <ul> <li>POWER</li> <li>curr capac of stgi chillers @ ts &amp; tCnd, Btuh, incl pump heat, set by capStg().</li> </ul> plr DBL End of subhour <ul> <li>FRAC</li> <li>part load ratio</li> </ul> puteTs DBL End of subhour <ul> <li>TEMP</li> <li>cpCompute's supply temp: cpTs, but not overwritten by cpEstimate, for debug aid/probes/reports.</li> <li>runtime internal: Pr's: prior values for runtime change-detection</li> </ul> cpTsSpPr TEMP End of subhour for cpEstimate cpTsEstPr TEMP End of subhour for cpEstimate cpModePr choice:OFFON End of subhour for cpCompute trMxPr TEMP End of subhour for cpCompute: tr-assuming-max-flow when last computed qLoadPr number End of subhour for cpCompute mwTowPr MFLOW End of subhour for cpCompute, set by tpCompute tTowPr number End of subhour for cpCompute, set by tpCompute"},{"location":"probe-definitions/doas/","title":"Doas","text":"<p>title: doas --- Fan inputs</p> Name Type Variability Description/Comments supFan supply fan characteristics FAN Name Type Variability Description/Comments supFan.fanTy choice:FANTY Start of phase <ul> <li>fan position choice, according to application as follows; constant.</li> <li>air handler supply:  DRAWTHRU (default) or BLOWTHRU</li> <li>ah return/relief:  NONE (default), RETURN, or RELIEF</li> <li>terminal:  NONE (default), SERIES, or PARALLEL</li> <li>zone exhaust fan:  NONE or EXHAUST (no types, just whether exists)</li> <li>AirNet ([IZXFER][izxfer]):    ditto</li> </ul> supFan.vfDs AFLOW_GZ End of subhour design volumetric flow (cfm actual air).  constant, RQD except as noted. *s cuz varies when autoSizing. supFan.vfDs_As AFLOW Start of phase autoSized ditto for ah sfan and rfan for naming consistency. 6-95. supFan.vfDs_AsNov AFLOW Start of phase <ul> <li>raw autoSized ditto b4 overSize added, for report/probes. 7-95.</li> <li>cnausz.cpp code ASSUMES x, x_As, x_AsNov together for access thru one ptr. cuprobe.cpp's name search also requires together.</li> </ul> supFan.vfMxF number Start of phase <ul> <li>factor by which fan flow will exceed vfDs (at reduced pressure). default 1.3. constant.</li> <li>Error if &lt; 1.0; typically &lt;= 1.5.</li> </ul> Name Type Variability Description/Comments supFan.press PRESAIR_GEZ Start of run <ul> <li>system design pressure, \"H2O (inches of water), constant, used in defaulting power / efficiency.</li> <li>default: supply 3, r/r .75, tu .3, zx ???.</li> <li>0 allowed 5-1-92 to eliminate fan heat for test/calibration purposes.</li> </ul>   only one of eff and shaftPwr may be given:  Name Type Variability Description/Comments supFan.eff FRAC_GZ Start of run <ul> <li>fan (hydraulic) efficiency at vfDs and press (any temp), constant,</li> <li>default from power if given, else .65.  (1-eff) of fan shaft power is converted to heat in airstream.</li> </ul> supFan.shaftPwr BHP_GZ Start of run <ul> <li>fan shaft power at vfDs and press (any temp). constant. default: from eff</li> <li>Btuh internally, entered in BHP (user name 'shaftBhp') (cvpak converts).</li> <li>^^^^make user name 'shaftBhp'.  field type name??</li> </ul> supFan.elecPwr FLOAT_GZ Start of run <ul> <li>motor input power, W/cfm (based on vfDs); shaftPwr and elecPwr cannot both be</li> <li>input</li> </ul> Name Type Variability Description/Comments supFan.motTy choice:MOTTY Start of run <ul> <li>motor type (C_MOTTYCH_PSC or C_MOTTYCH_BPM)</li> <li>[RSYS][rsys] only minimal use 4-12, could effect defaults</li> </ul> Name Type Variability Description/Comments supFan.motEff FRAC_GZ Start of phase motor/drive efficiency, constant, default .9. Name Type Variability Description/Comments supFan.motPos choice:MOTPOS Start of phase <ul> <li>motor/drive position: choice of INFLO (default), INRETURN, EXTERNAL.  constant.</li> <li>INRETURN is for supply fans only and will be deferred/omitted if difficult</li> <li>chip per taylor 3-4-92).</li> </ul> Name Type Variability Description/Comments supFan.curvePy fan part-load energy consumption curve cubic polynomial coefficients with x0 PYCUBIC2 Name Type Variability Description/Comments supFan.curvePy.k[index] number Array [6] Start of phase FLOAT k[6]. [0..3] are coeff, [4] is minimum x, [5] is terminator needed by cul.cpp. Name Type Variability Description/Comments supFan.mtri TI input time subscript of meter (MTR) to which energy consumption is charged supFan.endUse choice:ENDUSE Start of phase <ul> <li>end use to which energy consumption is charged</li> <li>not used for all fans (many implicitly default to \"fan\")</li> </ul> Name Type Variability Description/Comments supFan.ausz BOO Start of run <ul> <li>non-0 if fan being autoSized (AH sfan, rfan): input contained [AUTOSIZE][autosize] _fanVfDs. 7-1-95.</li> <li>see also AH::fanAs, asRfan, asFlow. 7-1-95. */</li> </ul> <ul> <li>FAN setup time members, set by cnfan.cpp:FAN::setup. May be resetup during autoSize run.</li> <li>also cMx may be init by setup, to be non-0.</li> </ul> Name Type Variability Description/Comments supFan.outPower number Start of subhour <ul> <li>motor output power (work done by fan), member 7-95 for one setup check in cncult5.cpp</li> <li>inPower = shaftPwr/motEff  is computed as needed.</li> </ul> supFan.airPower number Start of subhour <ul> <li>fan heat to air (Btuh) at vfDs (&amp; pressure): work done by fan, plus motor/drive inefficiency if in flow.</li> <li>Note work done by fan is modelled as HEAT ADDED TO AIR AT FAN per Chip/Niles (3-92, undocumented)</li> <li>heat to air around motor (in return air etc) at design flow is: (inPower - airPower). this is 0 if motor in air flow.</li> </ul>   FAN runtime members, set by cnah.cpp:FAN::pute( cFlow, temp)  Name Type Variability Description/Comments supFan.cMx CFLOW End of subhour max heat cap flow (Btuh/F) at curr air temp &amp; run press &amp; ref w: .vfMx * air vsh * 60 (min/hr) supFan.c CFLOW End of subhour current average flow in heat cap units (Btuh/F): input saved for probing by last call to FAN::pute() supFan.t TEMP End of subhour current air temp, input saved ditto, used in converting BtuF/F to cfm supFan.frOn number End of subhour <ul> <li>fraction of time fan is on, saved input</li> <li>made local to pute()to save members 10-92:</li> <li>*s *e FRAC relFlow  // fraction of design flow</li> <li>*s *e FRAC relLoad  // fraction of full load per part load curve for fan type (1.0 if over design flow: assume pressure drops)</li> </ul> supFan.p number End of subhour (motor) power consumption for subhour -- inPower * relLoad.  *subhrDur for meter. supFan.q number End of subhour heat (power) to air this subhour: airPower * relLoad.  Member needed in addition to c and dT?? supFan.dT TEMPDIFF End of subhour temp difference due to fan: q/c supFan.qAround number End of subhour heat to air around motor, if not in air flow, for use re supply fan motor in return air exhFan exhaust fan characteristics FAN Name Type Variability Description/Comments exhFan.fanTy choice:FANTY Start of phase <ul> <li>fan position choice, according to application as follows; constant.</li> <li>air handler supply:  DRAWTHRU (default) or BLOWTHRU</li> <li>ah return/relief:  NONE (default), RETURN, or RELIEF</li> <li>terminal:  NONE (default), SERIES, or PARALLEL</li> <li>zone exhaust fan:  NONE or EXHAUST (no types, just whether exists)</li> <li>AirNet ([IZXFER][izxfer]):    ditto</li> </ul> exhFan.vfDs AFLOW_GZ End of subhour design volumetric flow (cfm actual air).  constant, RQD except as noted. *s cuz varies when autoSizing. exhFan.vfDs_As AFLOW Start of phase autoSized ditto for ah sfan and rfan for naming consistency. 6-95. exhFan.vfDs_AsNov AFLOW Start of phase <ul> <li>raw autoSized ditto b4 overSize added, for report/probes. 7-95.</li> <li>cnausz.cpp code ASSUMES x, x_As, x_AsNov together for access thru one ptr. cuprobe.cpp's name search also requires together.</li> </ul> exhFan.vfMxF number Start of phase <ul> <li>factor by which fan flow will exceed vfDs (at reduced pressure). default 1.3. constant.</li> <li>Error if &lt; 1.0; typically &lt;= 1.5.</li> </ul> Name Type Variability Description/Comments exhFan.press PRESAIR_GEZ Start of run <ul> <li>system design pressure, \"H2O (inches of water), constant, used in defaulting power / efficiency.</li> <li>default: supply 3, r/r .75, tu .3, zx ???.</li> <li>0 allowed 5-1-92 to eliminate fan heat for test/calibration purposes.</li> </ul>   only one of eff and shaftPwr may be given:  Name Type Variability Description/Comments exhFan.eff FRAC_GZ Start of run <ul> <li>fan (hydraulic) efficiency at vfDs and press (any temp), constant,</li> <li>default from power if given, else .65.  (1-eff) of fan shaft power is converted to heat in airstream.</li> </ul> exhFan.shaftPwr BHP_GZ Start of run <ul> <li>fan shaft power at vfDs and press (any temp). constant. default: from eff</li> <li>Btuh internally, entered in BHP (user name 'shaftBhp') (cvpak converts).</li> <li>^^^^make user name 'shaftBhp'.  field type name??</li> </ul> exhFan.elecPwr FLOAT_GZ Start of run <ul> <li>motor input power, W/cfm (based on vfDs); shaftPwr and elecPwr cannot both be</li> <li>input</li> </ul> Name Type Variability Description/Comments exhFan.motTy choice:MOTTY Start of run <ul> <li>motor type (C_MOTTYCH_PSC or C_MOTTYCH_BPM)</li> <li>[RSYS][rsys] only minimal use 4-12, could effect defaults</li> </ul> Name Type Variability Description/Comments exhFan.motEff FRAC_GZ Start of phase motor/drive efficiency, constant, default .9. Name Type Variability Description/Comments exhFan.motPos choice:MOTPOS Start of phase <ul> <li>motor/drive position: choice of INFLO (default), INRETURN, EXTERNAL.  constant.</li> <li>INRETURN is for supply fans only and will be deferred/omitted if difficult</li> <li>chip per taylor 3-4-92).</li> </ul> Name Type Variability Description/Comments exhFan.curvePy fan part-load energy consumption curve cubic polynomial coefficients with x0 PYCUBIC2 Name Type Variability Description/Comments exhFan.curvePy.k[index] number Array [6] Start of phase FLOAT k[6]. [0..3] are coeff, [4] is minimum x, [5] is terminator needed by cul.cpp. Name Type Variability Description/Comments exhFan.mtri TI input time subscript of meter (MTR) to which energy consumption is charged exhFan.endUse choice:ENDUSE Start of phase <ul> <li>end use to which energy consumption is charged</li> <li>not used for all fans (many implicitly default to \"fan\")</li> </ul> Name Type Variability Description/Comments exhFan.ausz BOO Start of run <ul> <li>non-0 if fan being autoSized (AH sfan, rfan): input contained [AUTOSIZE][autosize] _fanVfDs. 7-1-95.</li> <li>see also AH::fanAs, asRfan, asFlow. 7-1-95. */</li> </ul> <ul> <li>FAN setup time members, set by cnfan.cpp:FAN::setup. May be resetup during autoSize run.</li> <li>also cMx may be init by setup, to be non-0.</li> </ul> Name Type Variability Description/Comments exhFan.outPower number Start of subhour <ul> <li>motor output power (work done by fan), member 7-95 for one setup check in cncult5.cpp</li> <li>inPower = shaftPwr/motEff  is computed as needed.</li> </ul> exhFan.airPower number Start of subhour <ul> <li>fan heat to air (Btuh) at vfDs (&amp; pressure): work done by fan, plus motor/drive inefficiency if in flow.</li> <li>Note work done by fan is modelled as HEAT ADDED TO AIR AT FAN per Chip/Niles (3-92, undocumented)</li> <li>heat to air around motor (in return air etc) at design flow is: (inPower - airPower). this is 0 if motor in air flow.</li> </ul>   FAN runtime members, set by cnah.cpp:FAN::pute( cFlow, temp)  Name Type Variability Description/Comments exhFan.cMx CFLOW End of subhour max heat cap flow (Btuh/F) at curr air temp &amp; run press &amp; ref w: .vfMx * air vsh * 60 (min/hr) exhFan.c CFLOW End of subhour current average flow in heat cap units (Btuh/F): input saved for probing by last call to FAN::pute() exhFan.t TEMP End of subhour current air temp, input saved ditto, used in converting BtuF/F to cfm exhFan.frOn number End of subhour <ul> <li>fraction of time fan is on, saved input</li> <li>made local to pute()to save members 10-92:</li> <li>*s *e FRAC relFlow  // fraction of design flow</li> <li>*s *e FRAC relLoad  // fraction of full load per part load curve for fan type (1.0 if over design flow: assume pressure drops)</li> </ul> exhFan.p number End of subhour (motor) power consumption for subhour -- inPower * relLoad.  *subhrDur for meter. exhFan.q number End of subhour heat (power) to air this subhour: airPower * relLoad.  Member needed in addition to c and dT?? exhFan.dT TEMPDIFF End of subhour temp difference due to fan: q/c exhFan.qAround number End of subhour heat to air around motor, if not in air flow, for use re supply fan motor in return air <p>Tempering coil inputs</p> Name Type Variability Description/Comments supTH TEMP Start of subhour supply temperature heating setpoint EIRH FLOAT_GEZ Start of subhour heating coil energy input ratio (1/efficiency (or 1/COP) coilHMtri TI input time Meter for heating coil supTC TEMP Start of subhour supply temperature cooling setpoint EIRC FLOAT_GEZ Start of subhour cooling coil energy input ratio (1/efficiency (or 1/COP) SHRtarget FRAC_GZ Start of subhour target cooling coil SHR. Could be overriden by oa_SHR. coilCMtri TI input time Meter for heating coil Name Type Variability Description/Comments loadMtri TI input time LOADMTR idx for accumulation of coil output Name Type Variability Description/Comments tEx TEMP Start of subhour <ul> <li>[DOAS][doas] exterior air drybulb temp, F</li> <li>default = current ambient dry bulb (from weather file)</li> </ul> wEx FRAC_GZ Start of subhour <ul> <li>[DOAS][doas] exterior air humidity ratio, lb/lb</li> <li>default = current ambient humidity ratio (from weather file)</li> </ul> <p>Heat Exchanger</p> Name Type Variability Description/Comments hx heat exchanger substruct HEATEXCHANGER    Heat exchanger inputs  Name Type Variability Description/Comments hx.VfDs AFLOW_GZ Start of run <ul> <li>Design supply volumetric flow rate of the heat exchanger</li> <li>defaults to supply fan VfDs</li> </ul> hx.f2 FLOAT_GZ Start of run Flow fraction for second set of inputs (default 0.75) hx.senEffH[index] number Array [2] Start of run <ul> <li>Heat exchanger heating sensible effectiveness</li> <li>[ 0]: at design 100% flow</li> <li>[ 1]: at hx_F2</li> </ul> hx.latEffH[index] number Array [2] Start of run <ul> <li>Heat exchanger heating latent effectiveness</li> <li>[ 0]: at design 100% flow</li> <li>[ 1]: at hx_F2</li> </ul> hx.senEffC[index] number Array [2] Start of run <ul> <li>Heat exchanger cooling sensible effectiveness</li> <li>[ 0]: at design 100% flow</li> <li>[ 1]: at hx_F2</li> </ul> hx.latEffC[index] number Array [2] Start of run <ul> <li>Heat exchanger cooling latent effectiveness</li> <li>[ 0]: at design 100% flow</li> <li>[ 1]: at hx_F2</li> </ul> hx.bypass choice:NOYES Start of run HX can be bypassed when not adventatgeous hx.auxPwr FLOAT_GEZ Start of subhour Auxiliary power, W hx.auxMtri TI Start of run Meter for auxiliary power   Outputs  Name Type Variability Description/Comments hx.supInAF <ul> <li>Supply inlet air flow (splits to hx_hxInAF</li> <li>and hx_bypassAF based on hx_bypassFrac)</li> </ul> AIRFLOW Name Type Variability Description/Comments hx.supInAF.tdb DBL End of subhour air dry-bulb temp, F hx.supInAF.w DBL End of subhour air humidity ratio, lb moisture/lb dry air Name Type Variability Description/Comments hx.supInAF.amf DBL End of subhour <ul> <li>mass flow rate, lb/hr dry air</li> <li>*s *e DBL as_tdb        // from AIRSTATE</li> <li>*s *e DBL as_w</li> </ul> hx.hxInAF HX supply inlet air flow AIRFLOW Name Type Variability Description/Comments hx.hxInAF.tdb DBL End of subhour air dry-bulb temp, F hx.hxInAF.w DBL End of subhour air humidity ratio, lb moisture/lb dry air Name Type Variability Description/Comments hx.hxInAF.amf DBL End of subhour <ul> <li>mass flow rate, lb/hr dry air</li> <li>*s *e DBL as_tdb        // from AIRSTATE</li> <li>*s *e DBL as_w</li> </ul> hx.hxOutAF HX supply outlet air flow AIRFLOW Name Type Variability Description/Comments hx.hxOutAF.tdb DBL End of subhour air dry-bulb temp, F hx.hxOutAF.w DBL End of subhour air humidity ratio, lb moisture/lb dry air Name Type Variability Description/Comments hx.hxOutAF.amf DBL End of subhour <ul> <li>mass flow rate, lb/hr dry air</li> <li>*s *e DBL as_tdb        // from AIRSTATE</li> <li>*s *e DBL as_w</li> </ul> hx.bypassAF Bypass air flow AIRFLOW Name Type Variability Description/Comments hx.bypassAF.tdb DBL End of subhour air dry-bulb temp, F hx.bypassAF.w DBL End of subhour air humidity ratio, lb moisture/lb dry air Name Type Variability Description/Comments hx.bypassAF.amf DBL End of subhour <ul> <li>mass flow rate, lb/hr dry air</li> <li>*s *e DBL as_tdb        // from AIRSTATE</li> <li>*s *e DBL as_w</li> </ul> hx.exhInAF Exhaust inlet air flow AIRFLOW Name Type Variability Description/Comments hx.exhInAF.tdb DBL End of subhour air dry-bulb temp, F hx.exhInAF.w DBL End of subhour air humidity ratio, lb moisture/lb dry air Name Type Variability Description/Comments hx.exhInAF.amf DBL End of subhour <ul> <li>mass flow rate, lb/hr dry air</li> <li>*s *e DBL as_tdb        // from AIRSTATE</li> <li>*s *e DBL as_w</li> </ul> hx.supOutAF <ul> <li>Supply outlet air flow (mixes to hx_hxInAF</li> <li>and hx_bypassAF based on hx_bypassFrac)</li> <li>*s *e *nest AIRFLOW hx_exhOutAF // Exhaust outlet air flow, not yet needed</li> </ul> AIRFLOW Name Type Variability Description/Comments hx.supOutAF.tdb DBL End of subhour air dry-bulb temp, F hx.supOutAF.w DBL End of subhour air humidity ratio, lb moisture/lb dry air Name Type Variability Description/Comments hx.supOutAF.amf DBL End of subhour <ul> <li>mass flow rate, lb/hr dry air</li> <li>*s *e DBL as_tdb        // from AIRSTATE</li> <li>*s *e DBL as_w</li> </ul> Name Type Variability Description/Comments hx.bypassFrac number End of subhour Fraction of supply inlet air bypassing heat exchanger hx.tSet DBL End of subhour Setpoint temperature for air exiting heat exchanger hx.sensEff number End of subhour Sensible efficacy hx.latEff number End of subhour Latent efficacy <p>Outputs</p> Name Type Variability Description/Comments supAF Supply air flow going to IZXFERs (before supply fan, fan heat added to IZXFERs) AIRFLOW Name Type Variability Description/Comments supAF.tdb DBL End of subhour air dry-bulb temp, F supAF.w DBL End of subhour air humidity ratio, lb moisture/lb dry air Name Type Variability Description/Comments supAF.amf DBL End of subhour <ul> <li>mass flow rate, lb/hr dry air</li> <li>*s *e DBL as_tdb        // from AIRSTATE</li> <li>*s *e DBL as_w</li> </ul> exhAF Exhaust air flow coming from IZXFERs AIRFLOW Name Type Variability Description/Comments exhAF.tdb DBL End of subhour air dry-bulb temp, F exhAF.w DBL End of subhour air humidity ratio, lb moisture/lb dry air Name Type Variability Description/Comments exhAF.amf DBL End of subhour <ul> <li>mass flow rate, lb/hr dry air</li> <li>*s *e DBL as_tdb        // from AIRSTATE</li> <li>*s *e DBL as_w</li> </ul> supQSen number End of subhour Sensible heat added (+) or removed (-) from the supply for tempering supQLat number End of subhour Latent heat added (+) or removed (-) from the supply for tempering SHR FRAC_GZ End of subhour actual cooling coil SHR. Same as oa_SHRtarget unless adjusted for humidity limits."},{"location":"probe-definitions/door/","title":"Door","text":"<p>title: door ---</p> Name Type Variability Description/Comments ty number input time type CTEXTWALL, CTINTWALL, CTWINDOW, CTMXWALL, CTPERIM, CTKIVA set by cult or code. <p>inputs.  *r's where set by topCkf in at least some cases.</p> Name Type Variability Description/Comments area AREA_GZ Start of run (net) area, sf.  Reflects window multiplier. azm ANGLE Start of run azimuth (radians, 0 = North, Pi/2 = East) tilt ANGLE Start of run tilt (radians, 0 = horiz up, Pi/2 = vert. dircos[index] number Array [3] Start of run outward normal direction cosines for given azm/tilt depthBG FLOAT_GEZ Start of run depth below grade of bottom of wall, ft height FLOAT_GEZ Start of run height of surface, ft (currently only used for Kiva) model choice:SFMODEL input time <ul> <li>surface model: user input</li> <li>quick/auto/delayed(massive)/delayed_hour/delayed_subhour/forward_difference/kiva</li> </ul> modelr choice:SFMODEL Start of run <ul> <li>resolved to quick (runtime XSURF generated),</li> <li>or to delayed_hour or _subhour (runtime MASS generated)</li> <li>or to kiva (runtime KIVA generated)</li> </ul> lThkF number Start of run <ul> <li>thickness factor, adjusts max thickness allowed for mass sublayers</li> <li>default = 0.5</li> </ul> Name Type Variability Description/Comments gti TI Start of run window glazeType subscript. Used at runtime re incidence angle. sco number Start of monthly-hourly window: SMSO: Solar Heat Gain Coef multiplier, shades Open scc number Start of monthly-hourly window: SMSC: Solar Heat Gain Coef, shades Closed sbcI inside (zone side) surface boundary conditions SBC Name Type Variability Description/Comments sbcI.absSlr number Start of monthly-hourly solar (SW) absorptance, dimless sbcI.awAbsSlr DBL Start of monthly-hourly <ul> <li>area-weighted solar absorptance</li> <li>= sb_absSlr * area / zn_surfASlr</li> <li>exterior surf outside: always 0</li> <li>windows inside: TBD 12-8-10</li> <li>ducts: always 0</li> </ul> sbcI.epsLW number Start of run thermal (LW) emittance sbcI.zi TI Start of run adjacent zone idx, 0 if exposed to ambient sbcI.F DBL Start of run solar (short wave) fraction ?  TODO: NOT USED? as of 4-2012 sbcI.Fp DBL Start of run <ul> <li>\"view factor\" to zone radiant temp, dimless.  Includes Oppenheim surface conductance.</li> <li>aka \"F-prime\" in CZM documentation.</li> </ul> Name Type Variability Description/Comments sbcI.frRad DBL Start of run re radiant to radiant temp (room radiant node or sky) sbcI.fSky DBL Start of run \"view factor\" to radiant surround at sky temp sbcI.fAir DBL Start of run \"view factor\" to radiant surround at air temp (ground, horizon) Name Type Variability Description/Comments sbcI.hcNat FLOAT_GEZ End of subhour surface natural convection coefficient, Btuh/ft2-F sbcI.hcFrc FLOAT_GEZ End of subhour surface forced (wind) convection coefficient, Btuh/ft2-F sbcI.hcMult FLOAT_GEZ End of subhour surface convection coefficient multiplier, dimless sbcI.hxa FLOAT_GEZ End of subhour overall coeff to sb_txa = sb_hcMult*(sb_hcNat + sb_hcFrc), Btuh/ft2-F sbcI.hxr FLOAT_GEZ End of subhour <ul> <li>surface (linearized) radiative coefficient, Btuh/ft2-F</li> <li>= coupling to sb_txr</li> </ul> sbcI.hxtot number End of subhour sb_hxa + sb_hxr sbcI.uRat DBL End of subhour <ul> <li>ratio uC/(sb_hxa + sb_hxr + uC)</li> <li>= 1/(1 + rC*(sb_hxa + sb_hxr))</li> <li>where uC = surface-to-surface conductance</li> <li>rC = 1/uC</li> <li>but: duct model outside surf to duct air</li> </ul> Name Type Variability Description/Comments sbcI.fRat DBL End of subhour <ul> <li>sb_hxtot * sb_uRat, Btuh/ft2-F</li> <li>= overall conductance not including other side</li> <li>surface resistances</li> <li>(ducts: overall conductance from duct air to sb_txe)</li> </ul> sbcI.cx DBL End of subhour air/radiant coupling due to this surface, Btuh/ft2-F Name Type Variability Description/Comments sbcI.sgTarg solar gain target: bm, df gain from insolation SGTARG Name Type Variability Description/Comments sbcI.sgTarg.bm DBL End of subhour beam sbcI.sgTarg.df DBL End of subhour diffuse sbcI.sgTarg.tot DBL End of subhour total sbcI.sg DBL End of subhour absorbed solar total, Btuh (NOT Btuh/ft2), summed from sb_sgTarg Name Type Variability Description/Comments sbcI.tSrf number End of subhour most recently calculated surface temp, F sbcI.tSrfls number Start of subhour <ul> <li>last step surface temp, F</li> <li>copied from sb_tSrf at step end</li> <li>not *e (available for probing)</li> </ul> sbcI.qrAbs DBL End of subhour <ul> <li>total absorbed radiant heat gain at surface, Btuh/ft2 (+ = into surface)</li> <li>= (sb_sg + sb_rIg)/area</li> </ul> sbcI.txa number End of subhour <ul> <li>adjacent air temp, F (from prior step)</li> <li>inside: prior step zone tz</li> <li>outside: current step ambient dry bulb temp</li> </ul> sbcI.txr number End of subhour <ul> <li>adjacent radiant temp, F</li> <li>inside: prior step zone tr</li> <li>outside: current step sky temp</li> </ul> sbcI.txe number End of subhour <ul> <li>adjacent environmental temp, F</li> <li>combined sb_txa and sb_txr; simplifies calcs in some cases</li> <li>set but unused? for inside</li> <li>set/used for ASHWAT outside</li> </ul> sbcI.w DBL End of subhour <ul> <li>adjacent air humidity ratio if known (else 0)</li> <li>used re duct leakage</li> </ul> sbcI.qSrf DBL End of subhour <ul> <li>conduction into surface, Btuh/ft2</li> <li>updated at end of timestep</li> </ul> Name Type Variability Description/Comments sbcI.pXS XSURFP Start of run parent pointer sbcI.si number Start of run <ul> <li>side of *sb_pXS represented by this SBC</li> <li>0=inside, 1=outside</li> </ul> sbcI.fcWind DBL Start of run <ul> <li>wind constant re sb_hcFrc (includes roughness, unit conversion, height adj, ...)</li> <li>value is model specific</li> <li>Walton: sb_hcFrc = sb_fcWind * Top.windSpeedSqrtSh</li> <li>Unified: sb_hcFrc = sb_fcWind * Top.windSpeedPt8</li> </ul> sbcI.fcWind2 DBL Start of run unified: add'l constant re sb_eta sbcI.eta DBL End of subhour <ul> <li>unified: wind speed adjustment included in sb_hcNat</li> <li>windV=0: sb_eta=1, sb_hcNat=still-air value</li> <li>windv&gt;0: sb_eta&lt;1, sb_hcNat is reduced</li> </ul> <ul> <li>characteristic dimensions re convection models</li> <li>not always set or used</li> <li>Note: may be derived from parent surface TODO</li> </ul> Name Type Variability Description/Comments sbcI.widNom DBL Start of run nominal width, ft (smaller dimension assuming rectangle) sbcI.lenNom DBL Start of run nominal length, ft (larger dimension assuming rectangle) sbcI.lenCharNat DBL Start of run characteristic length for some natural convection models, ft sbcI.lenEffWink DBL Start of run effective length for Winkelmann forced convection model, ft Name Type Variability Description/Comments sbcI.cosTilt DBL Start of run <ul> <li>cos( Tilt ) for the boundary -- note parent surface tilt is defined</li> <li>relative to outside normal (sbcO), so inside sb_cosTilt is oposite (+180 deg)</li> </ul> sbcI.atvDeg DBL Start of run angle-to-vertical, deg (inside: 90-tilt; outside: tilt-90) sbcI.cosAtv DBL Start of run cos( angle to vertical) 0 - 1 (never &lt; 0) sbcI.hcModel choice:CONVMODEL Start of run <ul> <li>surface convective coefficient model</li> <li>specifies calc method sb_hcNat and sb_hcFrc</li> </ul> sbcI.hcFrcOptions number Start of run <ul> <li>options re inside forced convection model</li> <li>1: use sb_hcFrcCoeffs (see code), else zn_hcFrc</li> </ul> sbcI.hcFrcCoeffs[index] number Array [DIM_HCFRCCOEFFS] Start of run <ul> <li>coefficients for forced convection model (inside only)</li> <li>1 extra array member required by cul</li> </ul> sbcI.hcLChar number Start of run <ul> <li>characteristic length, ft</li> <li>used in derivation of exterior forced convective coeff</li> <li>default = 10 ft</li> <li>unused re natural convective coeff (interior or exterior)</li> </ul> sbcI.hcConst[index] DBL Array [3] Start of run <ul> <li>convection coefficient model constants</li> <li>Unified: exposure to zone or ambient</li> <li>hcNat = sb_hcConst[]*abs( TD)^.33)</li> <li>[ 0]: tAir&lt;=tSrf, [ 1]: tAir&gt;tSrf</li> <li>[ 2]: unused</li> <li>ASHRAE: exposure to zone, hcNat = sb_hcConst[]</li> <li>[ 0]: sys off, tAir&lt;=tSrf, [ 1]: sys off, tAir&gt;tSrf</li> <li>[ 2]: sys on</li> </ul> <ul> <li>re [sfExCnd][sfexcnd] = GROUND: conductances to weather vars, Btuh/ft2-F</li> <li>correlation values derived by Bazjanac/Huang for various</li> <li>insulation configurations</li> </ul> Name Type Variability Description/Comments sbcI.groundModel choice:GROUNDMODEL Start of run <ul> <li>ground model in use (not input 1/1/2015)</li> <li>C_GROUNDMODELCH_D2INP: DOE-2 model w/ user coeffs</li> <li>C_GROUNDMODELCH_D2COR: DOE-2 model w/ correlation coeffs</li> </ul> sbcI.cTaDbAvgYr FLOAT_GEZ Start of run to annual avg taDb sbcI.cTaDbAvg31 FLOAT_GEZ Start of run to last 31 day avg taDb sbcI.cTaDbAvg14 FLOAT_GEZ Start of run to last 14 day avg taDb sbcI.cTaDbAvg07 FLOAT_GEZ Start of run to last 7 day avg taDb sbcI.cTGrnd FLOAT_GEZ Start of run to computed ground temp sbcI.rGrnd FLOAT_GEZ Start of run resistance = 1/(sum of above) (0 if sum=0) sbcI.rConGrnd FLOAT_GEZ Start of run <ul> <li>ground model implicit construction resistance, ft2-F/Btuh</li> <li>= approx resistance of construction film/carpet/slab/soil</li> <li>Caution: construction should be consistent with configuration</li> <li>implicit in coefficient values.</li> </ul> sbcO outside (ambient or adjacent zone) surface boundary conditions SBC Name Type Variability Description/Comments sbcO.absSlr number Start of monthly-hourly solar (SW) absorptance, dimless sbcO.awAbsSlr DBL Start of monthly-hourly <ul> <li>area-weighted solar absorptance</li> <li>= sb_absSlr * area / zn_surfASlr</li> <li>exterior surf outside: always 0</li> <li>windows inside: TBD 12-8-10</li> <li>ducts: always 0</li> </ul> sbcO.epsLW number Start of run thermal (LW) emittance sbcO.zi TI Start of run adjacent zone idx, 0 if exposed to ambient sbcO.F DBL Start of run solar (short wave) fraction ?  TODO: NOT USED? as of 4-2012 sbcO.Fp DBL Start of run <ul> <li>\"view factor\" to zone radiant temp, dimless.  Includes Oppenheim surface conductance.</li> <li>aka \"F-prime\" in CZM documentation.</li> </ul> Name Type Variability Description/Comments sbcO.frRad DBL Start of run re radiant to radiant temp (room radiant node or sky) sbcO.fSky DBL Start of run \"view factor\" to radiant surround at sky temp sbcO.fAir DBL Start of run \"view factor\" to radiant surround at air temp (ground, horizon) Name Type Variability Description/Comments sbcO.hcNat FLOAT_GEZ End of subhour surface natural convection coefficient, Btuh/ft2-F sbcO.hcFrc FLOAT_GEZ End of subhour surface forced (wind) convection coefficient, Btuh/ft2-F sbcO.hcMult FLOAT_GEZ End of subhour surface convection coefficient multiplier, dimless sbcO.hxa FLOAT_GEZ End of subhour overall coeff to sb_txa = sb_hcMult*(sb_hcNat + sb_hcFrc), Btuh/ft2-F sbcO.hxr FLOAT_GEZ End of subhour <ul> <li>surface (linearized) radiative coefficient, Btuh/ft2-F</li> <li>= coupling to sb_txr</li> </ul> sbcO.hxtot number End of subhour sb_hxa + sb_hxr sbcO.uRat DBL End of subhour <ul> <li>ratio uC/(sb_hxa + sb_hxr + uC)</li> <li>= 1/(1 + rC*(sb_hxa + sb_hxr))</li> <li>where uC = surface-to-surface conductance</li> <li>rC = 1/uC</li> <li>but: duct model outside surf to duct air</li> </ul> Name Type Variability Description/Comments sbcO.fRat DBL End of subhour <ul> <li>sb_hxtot * sb_uRat, Btuh/ft2-F</li> <li>= overall conductance not including other side</li> <li>surface resistances</li> <li>(ducts: overall conductance from duct air to sb_txe)</li> </ul> sbcO.cx DBL End of subhour air/radiant coupling due to this surface, Btuh/ft2-F Name Type Variability Description/Comments sbcO.sgTarg solar gain target: bm, df gain from insolation SGTARG Name Type Variability Description/Comments sbcO.sgTarg.bm DBL End of subhour beam sbcO.sgTarg.df DBL End of subhour diffuse sbcO.sgTarg.tot DBL End of subhour total sbcO.sg DBL End of subhour absorbed solar total, Btuh (NOT Btuh/ft2), summed from sb_sgTarg Name Type Variability Description/Comments sbcO.tSrf number End of subhour most recently calculated surface temp, F sbcO.tSrfls number Start of subhour <ul> <li>last step surface temp, F</li> <li>copied from sb_tSrf at step end</li> <li>not *e (available for probing)</li> </ul> sbcO.qrAbs DBL End of subhour <ul> <li>total absorbed radiant heat gain at surface, Btuh/ft2 (+ = into surface)</li> <li>= (sb_sg + sb_rIg)/area</li> </ul> sbcO.txa number End of subhour <ul> <li>adjacent air temp, F (from prior step)</li> <li>inside: prior step zone tz</li> <li>outside: current step ambient dry bulb temp</li> </ul> sbcO.txr number End of subhour <ul> <li>adjacent radiant temp, F</li> <li>inside: prior step zone tr</li> <li>outside: current step sky temp</li> </ul> sbcO.txe number End of subhour <ul> <li>adjacent environmental temp, F</li> <li>combined sb_txa and sb_txr; simplifies calcs in some cases</li> <li>set but unused? for inside</li> <li>set/used for ASHWAT outside</li> </ul> sbcO.w DBL End of subhour <ul> <li>adjacent air humidity ratio if known (else 0)</li> <li>used re duct leakage</li> </ul> sbcO.qSrf DBL End of subhour <ul> <li>conduction into surface, Btuh/ft2</li> <li>updated at end of timestep</li> </ul> Name Type Variability Description/Comments sbcO.pXS XSURFP Start of run parent pointer sbcO.si number Start of run <ul> <li>side of *sb_pXS represented by this SBC</li> <li>0=inside, 1=outside</li> </ul> sbcO.fcWind DBL Start of run <ul> <li>wind constant re sb_hcFrc (includes roughness, unit conversion, height adj, ...)</li> <li>value is model specific</li> <li>Walton: sb_hcFrc = sb_fcWind * Top.windSpeedSqrtSh</li> <li>Unified: sb_hcFrc = sb_fcWind * Top.windSpeedPt8</li> </ul> sbcO.fcWind2 DBL Start of run unified: add'l constant re sb_eta sbcO.eta DBL End of subhour <ul> <li>unified: wind speed adjustment included in sb_hcNat</li> <li>windV=0: sb_eta=1, sb_hcNat=still-air value</li> <li>windv&gt;0: sb_eta&lt;1, sb_hcNat is reduced</li> </ul> <ul> <li>characteristic dimensions re convection models</li> <li>not always set or used</li> <li>Note: may be derived from parent surface TODO</li> </ul> Name Type Variability Description/Comments sbcO.widNom DBL Start of run nominal width, ft (smaller dimension assuming rectangle) sbcO.lenNom DBL Start of run nominal length, ft (larger dimension assuming rectangle) sbcO.lenCharNat DBL Start of run characteristic length for some natural convection models, ft sbcO.lenEffWink DBL Start of run effective length for Winkelmann forced convection model, ft Name Type Variability Description/Comments sbcO.cosTilt DBL Start of run <ul> <li>cos( Tilt ) for the boundary -- note parent surface tilt is defined</li> <li>relative to outside normal (sbcO), so inside sb_cosTilt is oposite (+180 deg)</li> </ul> sbcO.atvDeg DBL Start of run angle-to-vertical, deg (inside: 90-tilt; outside: tilt-90) sbcO.cosAtv DBL Start of run cos( angle to vertical) 0 - 1 (never &lt; 0) sbcO.hcModel choice:CONVMODEL Start of run <ul> <li>surface convective coefficient model</li> <li>specifies calc method sb_hcNat and sb_hcFrc</li> </ul> sbcO.hcFrcOptions number Start of run <ul> <li>options re inside forced convection model</li> <li>1: use sb_hcFrcCoeffs (see code), else zn_hcFrc</li> </ul> sbcO.hcFrcCoeffs[index] number Array [DIM_HCFRCCOEFFS] Start of run <ul> <li>coefficients for forced convection model (inside only)</li> <li>1 extra array member required by cul</li> </ul> sbcO.hcLChar number Start of run <ul> <li>characteristic length, ft</li> <li>used in derivation of exterior forced convective coeff</li> <li>default = 10 ft</li> <li>unused re natural convective coeff (interior or exterior)</li> </ul> sbcO.hcConst[index] DBL Array [3] Start of run <ul> <li>convection coefficient model constants</li> <li>Unified: exposure to zone or ambient</li> <li>hcNat = sb_hcConst[]*abs( TD)^.33)</li> <li>[ 0]: tAir&lt;=tSrf, [ 1]: tAir&gt;tSrf</li> <li>[ 2]: unused</li> <li>ASHRAE: exposure to zone, hcNat = sb_hcConst[]</li> <li>[ 0]: sys off, tAir&lt;=tSrf, [ 1]: sys off, tAir&gt;tSrf</li> <li>[ 2]: sys on</li> </ul> <ul> <li>re [sfExCnd][sfexcnd] = GROUND: conductances to weather vars, Btuh/ft2-F</li> <li>correlation values derived by Bazjanac/Huang for various</li> <li>insulation configurations</li> </ul> Name Type Variability Description/Comments sbcO.groundModel choice:GROUNDMODEL Start of run <ul> <li>ground model in use (not input 1/1/2015)</li> <li>C_GROUNDMODELCH_D2INP: DOE-2 model w/ user coeffs</li> <li>C_GROUNDMODELCH_D2COR: DOE-2 model w/ correlation coeffs</li> </ul> sbcO.cTaDbAvgYr FLOAT_GEZ Start of run to annual avg taDb sbcO.cTaDbAvg31 FLOAT_GEZ Start of run to last 31 day avg taDb sbcO.cTaDbAvg14 FLOAT_GEZ Start of run to last 14 day avg taDb sbcO.cTaDbAvg07 FLOAT_GEZ Start of run to last 7 day avg taDb sbcO.cTGrnd FLOAT_GEZ Start of run to computed ground temp sbcO.rGrnd FLOAT_GEZ Start of run resistance = 1/(sum of above) (0 if sum=0) sbcO.rConGrnd FLOAT_GEZ Start of run <ul> <li>ground model implicit construction resistance, ft2-F/Btuh</li> <li>= approx resistance of construction film/carpet/slab/soil</li> <li>Caution: construction should be consistent with configuration</li> <li>implicit in coefficient values.</li> </ul> Name Type Variability Description/Comments fenModel choice:FENMODEL input time fenestration model: user input SHGC number input time rated SHGC of assembly fMult FLOAT_GEZ Start of run window frame/mullion multiplier (input or from GT) UNFRC UH_GZ input time overall U-factor evaluated under per NFRC heating conditions NGlz number input time # of glazings bare-glass assembly exShd choice:EXSHD input time exterior shade (ASHWAT only) inShd choice:INSHD input time interior shade (ditto) dirtLoss FLOAT_GEZ Start of run window dirt loss factor (input or from GT) <p>next 3 are input for surface, copied from surface of door or window</p> Name Type Variability Description/Comments sfExCnd choice:EXCND Start of run adjacent cond: adiabatic/ambient/specT/adjZn. sfExT TEMP Start of subhour outside temp if .sfExCnd==C_EXCNDCH_SPECT sfAdjZi TI input time zone for sfExCnd==ADJZN, or 0 for exterior surface/door/window. uI UH_GZ Start of run interior surf (air film) conductance. input. uC UH_GZ Start of run uval of construction, excl surfaces (air films). From CON, GT, or SFI.sfU user input. uX UH_GZ Start of run exterior surface (air film) conductance. input. Rf number Start of run <ul> <li>exterior roughness factor, re convection (new 10-10)</li> <li>default: windows=1, all others=2.17</li> </ul> grndRefl number Start of monthly-hourly ground reflectivity, default: wall: Top.grndRefl; door/win: owning wall. <p>view factors for diffuse (only) radiation so user can precompute shading effects of window overhang/fins</p> Name Type Variability Description/Comments vfSkyDf number Start of monthly-hourly sky view factor for diffuse solar, default .5 + .5*cos(tilt) vfGrndDf number Start of monthly-hourly ground view factor for diffuse solar, default .5 - .5*cos(tilt) <p>view factors re outside surface LW (thermal) radiant exchange</p> Name Type Variability Description/Comments vfSkyLW number Start of run sky view factor for long-wave radiation, hard-coded .5 + .5*cos( tilt) vfGrndLW number Start of run ground view factor for long-wave radiation, hard-coded .5 - .5*cos( tilt) Name Type Variability Description/Comments uval UH_GZ Start of run <ul> <li>Overall air-to-air conductance, Btuh/sf-F</li> <li>includes uX and uC surf cond</li> </ul> <ul> <li>*Nominal* U-factor etc including ASHRAE heating surface resistance</li> <li>documentation only!</li> </ul> Name Type Variability Description/Comments UNom UH_GZ Start of run nominal air-to-air U-factor, Btuh/sf-F UANom UA Start of run <ul> <li>area * xs_UNom, Btuh/F</li> <li>surface values, [0]=inside, [1]=outside</li> </ul> rSrfNom[index] number Array [2] Start of run surface resistance sf-F/Btuh hSrfNom[index] number Array [2] Start of run surface conductance (1/xs_rSrfNom), Btuh/sf-F Name Type Variability Description/Comments cFctr UH_GZ Start of run surface-to-surface conductance (not populated!) Name Type Variability Description/Comments iwshad TI Start of run 0 if none or subscr in WSHADRAT of overhang/fin info for a shaded window msi TI Start of run 0, or mass (MsR) subscript for CTMXWALL. tLrB[index] number Array [XSMXTLRB] End of hour <ul> <li>layer boundary temps re probes</li> <li>populated at end of hour</li> </ul> <p>solar gain distributions: [partly] based on SGDIST inputs</p> Name Type Variability Description/Comments nsgdist number Start of run <ul> <li>Number of SG distributions</li> <li>[SGDIST][sgdist] sgdist[ HSMXSGDIST]:</li> </ul> sgdist[index] Array [HSMXSGDIST] <ul> <li>=8 (2-95), cndefns.h. explicit solar gain distribs</li> <li>*r -&gt; min variation here: no members set at input time</li> <li>*nest [SGDIST][sgdist] sgdist -&gt; solar gain distribution (struct just above).  set: cncult3.cpp:cnuSgDist().</li> </ul> SGDIST Name Type Variability Description/Comments sgdist[index].targTy number Start of run <ul> <li>target type: define (cnguts.h)   basAnc &amp; member</li> <li>zone air                    SGDTTZNAIR    ZNR.qSgAir</li> <li>(zone check/results total   SGDTTZNTOT    ZNR.qSgTot/qSgTotSh (not here; gen'd in cgsolar 2-95)</li> <li>surface in/outside          SGDTSURFI/O</li> </ul> sgdist[index].targTi TI Start of run subscript of targeted entry in RAT above: *i in SGI; *nest merges variation flags. sgdist[index].FSO number Start of monthly-hourly frac of gain to target, shades open sgdist[index].FSC number Start of monthly-hourly frac of gain to target, shades closed (defaults to sgd_FSO) <ul> <li>surface/door/window</li> <li>.ownTi (base class) is zone for surface, or surface for window or door.</li> <li>CAUTION: ambiguous base</li> </ul> Name Type Variability Description/Comments sfClass number input time sfcNUL, sfcSURF, sfcDOOR, sfcWINDOW sfArea AREA_GZ input time surface: gross area, net in x.xs_area. sfU UH_GZ input time <ul> <li>uval input if no [sfCon][sfcon] given (excl surf films)</li> <li>[sfInH][sfinh], [sfExH][sfexh]: input/default to x.uI, x.uX.</li> </ul> sfCon TI input time <ul> <li>surface construction (optional)</li> <li>[sfInAbs][sfinabs], [sfExAbs][sfexabs]: input/default to x.xs_AbsSlr(0, 1)</li> <li>surface only</li> </ul> sfTy choice:OSTY constant wall/floor/ceil/[intmass1/2]: for input cking. sfFnd TI input time surface foundation object (floors only, optional) sfFndFloor TI input time surface foundation floor object (walls only, optional) sfExpPerim LEN input time <ul> <li>foundation floor exposed perimeter (floors only)</li> <li>window only</li> </ul> width LEN_GZ input time width and height: used to compute shading, height LEN_GZ input time ... and to compute area b4 mutliplier. mult FLOAT_GZ input time <ul> <li>area multiplier (for multiple identical windows)</li> <li>derived/internal</li> </ul> xi TI Start of run subscript in runtime XSRAT, to facilitate access by probers 1-92 msi TI Start of run <ul> <li>0 or MSRAT MsR subscr which will be used if delayed model</li> <li>(must be known eg for sgdists b4 MsR record can be made eg because net area must be known)</li> </ul>"},{"location":"probe-definitions/export/","title":"Export","text":"<p>title: export ---</p> Name Type Variability Description/Comments zi TI input time zone for zone-specific reports. Can be TI_SUM, TI_ALL. mtri TI input time meter to report/export for meter-specific reports. Can be TI_SUM, TI_ALL. ahi TI input time air handler to report/export for air-handler-specific reports. Can be TI_SUM, TI_ALL. tui TI input time terminal to report/export for terminal-specific reports. Can be TI_ALL dhwMtri TI input time DHW meter to report/export for DHW meter-specific reports. Can be TI_ALL. afMtri TI input time Air flow meter to report/export for AF meter-specific reports. Can be TI_ALL. isExport BOO input time 1 if export not report, so same fcns can be used with RiB and XiB records rpTy choice:RPTY constant report/export type C_RPTYCH_EB etc rpFreq choice:IVL constant r/xport frequency C_IVLCH_M etc rpDayBeg DOY input time start 1-based Julian day of year, where applicable rpDayEnd DOY input time end .. rpBtuSf FLOAT_GZ input time energy (Btu) scale factor rpCond number End of subhour condition: if given, rpt lines omitted when FALSE (INT used to hold NAN) rpTitle CULSTR input time title, for UDT, in dm rpCpl number input time chars per line, inputtable re UDT's (default -1=\"as wide as needed\") rpHeader choice:RPTHD input time table header or export header yes/no (default yes) rpFooter choice:NOYES input time table footer (summary line) or export footer (just blank line?) yes/no (default yes) coli TI Start of run RcolB/XcolB subscript of first column (thence linked by .nxColi). nCol number Start of run # columns wid number Start of run <ul> <li>total col width for user-defined report</li> <li>generated</li> </ul> vrh number Start of run assigned virtual report handle, used from here to build UnspoolInfo."},{"location":"probe-definitions/exportCol/","title":"exportCol","text":"<p>title: exportCol --- input       .ownTi is RI subscript of owning report/export.   Column order is order of input.</p> Name Type Variability Description/Comments colHead CULSTR input time column head string, in dm.  *i cuz VEOI in cncult.cpp:rpColT[]. colGap SI_GEZ input time space to left of column, default 1 colWid number input time column width colDec number input time colDecimals: max digits after point colJust choice:JUST input time justification: C_JUSTCH_L or _R colVal VALNDT Post-calc phase of subhour <ul> <li>value vt_val and data type vt_dt (TYFL/TYSTR in input, DTFLOAT/DTCULSTR in run), used at end report interval.</li> <li>derived</li> </ul> nxColi TI Unknown for runtime: COL subscript of next column in this report, 0 if last one"},{"location":"probe-definitions/exportFile/","title":"exportFile","text":"<p>title: exportFile ---</p> Name Type Variability Description/Comments fileName CULSTR input time file name, path optional.  *i cuz VEOI in cncult. fileStat choice:FILESTAT Start of run fresh(overwrite,default)/new(err if exists)/append pageFmt choice:NOYES input time <ul> <li>page formatting on no/yes</li> <li>derived</li> </ul> fileStatChecked number Start of run check fileStat only once to prevent \"file exists\" error or re-setting \"overWrite\" on later run overWrite number Start of run append if 0.  set by fileStat=fresh, cleared on use, so addl runs do not erase earlier output. wasNotEmpty number Start of run nz if existed and size &gt; 0 at fileStat check"},{"location":"probe-definitions/foundation/","title":"Foundation","text":"<p>title: foundation --- input</p> Name Type Variability Description/Comments wlHtAbvGrd LEN input time Height of foundation wall above grade wlDpBlwSlb LEN input time Depth of foundation wall below the slab wlConi TI input time Foundation wall construction (CON subscript)"},{"location":"probe-definitions/foundationBlock/","title":"foundationBlock","text":"<p>title: foundationBlock --- input</p> Name Type Variability Description/Comments mati TI input time Material (MAT subscript) for this component x1Ref choice:FBXREF input time Point 1 X reference z1Ref choice:FBZREF input time Point 1 Z reference x1 number input time Point 1 X value (relative to reference) z1 number input time Point 1 X value (relative to reference) x2Ref choice:FBXREF input time Point 2 X reference (defaults to Point 1 X reference) z2Ref choice:FBZREF input time Point 2 Z reference (defaults to Point 1 Z reference) x2 number input time Point 2 X value (relative to reference) z2 number input time Point 2 X value (relative to reference)"},{"location":"probe-definitions/gain/","title":"Gain","text":"<p>title: gain --- input.      .ownTI (base class) is zone subscript.</p> Name Type Variability Description/Comments gnPower number Start of hour <ul> <li>amount of gain (demand -- b4 reduction by [gnDlFrPow][gndlfrpow]), Btuh, hourly expression</li> <li>if linked to [DHWSYS][dhwsys], units are Btuh/gal</li> </ul> mtri TI input time meter to which gain is charged gnEndUse choice:ENDUSE Start of phase end use of energy: cooling, heating, receptacles, etc. reqd if gnMeter != none, else disallowed. gnFrLat number Start of hour fraction of gain which is latent (0 - 1, hourly expression) gnFrRad number Start of hour <ul> <li>fraction of gain which is radiant, added 11-95</li> <li>next 3 must sum to &lt;= 1</li> </ul> gnFrZn number Start of hour fraction of gain going to zone (0 - 1, hourly expression) gnFrPl number Start of hour fraction of gain going to plenum (0 - 1, hourly expression) gnFrRtn number Start of hour fraction of gain going to return (0 - 1, hourly expression) gnDlFrPow number Start of hour fraction power on for daylighting, 0-1, default 1.0, hourly expression dhwsysi TI input time <ul> <li>controlling [DHWSYS][dhwsys], 0 if none ()</li> <li>allows gains that track water use (re e.g. dishwashers, clotheswashers,)</li> </ul> dhwmtri TI input time <ul> <li>controlling [DHWMETER][dhwmeter], 0 if none</li> <li>allows gains that track water use (re e.g. dishwashers, clotheswashers,)</li> </ul> dhwEndUse choice:DHWEUX input time <ul> <li>with gn_dhwsysi, specifies controlling HW end use</li> <li>note includes _TOTAL and _UNKNOWN</li> </ul>"},{"location":"probe-definitions/glazeType/","title":"glazeType","text":"<p>title: glazeType ---</p> Name Type Variability Description/Comments gtSHGC number input time rated SHGC of assembly gtSMSO number Start of monthly-hourly optional solar heat gain coef multiplier, shades open, used if not spec'd in window, dflt 1.0. gtSMSC number Start of monthly-hourly ditto shades closed, defaults at window level. gtFMult FLOAT_GEZ input time optional frame/mullion multiplier for use when not spec'd in window. constant. gtPySHGC <ul> <li>beam SHGC incidence angle multiplier: 4th-order polynomial in cosine of angle.</li> <li>4 inputtable coefficients (no constant). .val1(x) returns value.</li> </ul> PY4 Name Type Variability Description/Comments gtPySHGC.k[index] number Array [6] Start of phase FLOAT k[6].  One extra member needed as terminator by cul.cpp array input logic. gtDMSHGC number input time diffuse SHGC multiplier used (in place of polynomial). RQD. constant. gtDMRBSol number input time reflectance for diffuse solar on inside of glass, for Cavity Absorptance calc'ns (cgsolar.cpp). gtU UH_GZ input time optional u-value for use when not spec'd in window. contant. gtUNFRC UH_GZ input time overall U-factor evaluated under per NFRC heating conditions gtNGlz number input time # of glazings bare-glass assembly gtFenModel choice:FENMODEL input time <ul> <li>fenestration model: user input</li> <li>SHGC or ASHWAT (added 11-8-2010)</li> </ul> gtExShd choice:EXSHD input time exterior shade (ASHWAT only) gtInShd choice:INSHD input time interior shade (ditto) gtDirtLoss FLOAT_GEZ input time dirt loss fraction (all solar gain reduced by this factor"},{"location":"probe-definitions/heatPlant/","title":"heatPlant","text":"<p>title: heatPlant ---</p> Name Type Variability Description/Comments hpSched OFFAVAILONVC Start of hour hourly choice of OFF, AVAIL (default; plant runs on demand), or ON (at least 1st stage runs). hpPipeLossF number Start of phase <ul> <li>pipe loss, default .01, fraction of largest stage boiler capac whenever any boiler running</li> <li>heatplant user inputs: staging: 7 arrays, each of up to 7 boiler subscripts, or TI_ALL, or TI_ALLBUT and up to 6 subscripts</li> </ul> hpStage1[index] TI Array [8] Start of phase defaulted by code, if NO hpStage values entered: hpStage2[index] TI Array [8] Start of phase defaulted by code, if NO hpStage values entered: hpStage3[index] TI Array [8] Start of phase ... stage 1: TI_ALL. stages 2-7: none (0). hpStage4[index] TI Array [8] Start of phase ... stage 1: TI_ALL. stages 2-7: none (0). hpStage5[index] TI Array [8] Start of phase hpStage6[index] TI Array [8] Start of phase hpStage7[index] TI Array [8] Start of phase <ul> <li>CAUTION: code may access stages by subscripting, assuming they follow hpStage1 in order.</li> <li>CAUTION: code uses internal subscript values 0-6 to access variables named hpStage1-7.</li> <li>heatplant setup time</li> </ul> blr1 TI Start of run subscript of 1st BOILER for this HEATPLANT. Next is BOILER.nxBlr4hp. tu1 TI Start of run subscript of 1st TU with HW coil served by this HEATPLANT. Next is TU.tuhc.nxTu4hp. ah1 TI Start of run subscript of 1st AH with HW coil served by this HEATPLANT. Next is AH.ahhc.nxAh4hp. hl1 TI Start of run subscript of 1st HPLOOP with HX for this HEATPLANT qPipeLoss DBL Start of run <ul> <li>POWER</li> <li>pipe loss power: [hpPipeLossF][hppipelossf] * capStg[stgMxQ]</li> </ul> stgCap[index] DBL Array [7] Start of run <ul> <li>POWER</li> <li>max power output of stages 0-6: boiler caps + pump heats.</li> </ul> stgPQ[index] DBL Array [7] Start of run <ul> <li>POWER</li> <li>pump heats of stages 0-6.</li> </ul> stgN number Start of run max+1 used stage subscript 1-7 (used stages need not be contiguous) stgMxQ number Start of run <ul> <li>most powerful stage subscript 0-6</li> <li>heatplant runtime</li> </ul> hpClf BOO End of subhour call-flag: set nz if must call hpCompute so it can test tr, etc to see if computation needed. hpPtf BOO End of subhour compute-flag: set if must call hpCompute and it should unconditionally recompute this plant. hpMode choice:OFFON End of subhour mode this subhour: off or on: per hpSched; per demand for AVAIL. Set in hpEstimate, hpCompute. capF DBL End of subhour <ul> <li>FRAC</li> <li>1.0 or, when overloaded, derating fraction for capacity of each coil/hx.</li> </ul> stgi number End of subhour <ul> <li>stage in use, 0-6 for hpStage1-7.</li> <li>for heatplant loop temp is not simulated; plant output and coil load q are always same and same variable used.</li> </ul> qNx DBL End of subhour <ul> <li>POWER</li> <li>latest coil/hx load, copied to .q at decision to compute, else may remain slightly different.</li> </ul> q DBL End of subhour <ul> <li>POWER</li> <li>current output, total from boilers &amp; boiler pumps === total load of connected coils &amp; hx's.</li> <li>autoSizing</li> </ul> qPk number End of subhour peak load re error autosizing overload message qPkAs number End of subhour peak load on a converged autoSizing design day re error autosizing overload message <p>prior values for runtime change-detection</p> Name Type Variability Description/Comments hpModePr choice:OFFON End of subhour qPr number End of subhour capFPr number End of subhour"},{"location":"probe-definitions/holiday/","title":"Holiday","text":"<p>title: holiday --- valid input is: hDateTrue; or hDateTrue + hDateObs or hdOnMonday; or hdCase + hdDow + hdMon.</p> Name Type Variability Description/Comments hdDateTrue DOY input time true date of Holiday, 1-365 hdDateObs DOY input time day holiday is observed, 1-365 hdOnMonday choice:NOYES input time <ul> <li>YES if holiday that falls on weekend is observed on Monday</li> <li>next three together specify rule for determining date of holiday on \"1st Monday in Sep\", \"4th Thu in Nov\", etc</li> </ul> hdCase choice:HDAYCASE input time case: C_HOLICASECH_FIRST, _SECOND, _THIRD, _FOURTH, _LAST hdDow choice:DOW input time day of week, Sun=1.  SUBTRACT 1 BEFORE USING. hdMon choice:MON input time month 1-12"},{"location":"probe-definitions/impFileFldNames/","title":"impFileFldNames","text":"<p>title: impFileFldNames ---</p> Name Type Variability Description/Comments impfi TI input time <ul> <li>0 or subscript of IMPF record for file in ImpfiB/ImpfB</li> <li>fnmt[]: array of info on fields ref'd by name, in order seen (before numbers known).</li> <li>used at runtime to get fnr's to access fields. subscript: \"fnmi\", \"field name index\"</li> </ul> fnmiN number input time number of named fields seen for this file / max fnmi (+ 1 if 0-based)"},{"location":"probe-definitions/importFile/","title":"importFile","text":"<p>title: importFile ---</p> Name Type Variability Description/Comments fileName CULSTR Start of phase file name, path optional, in heap or pseudocode. *i cuz VEOI in cncult. RQD. title CULSTR Start of phase <ul> <li>title string. If given, file's must match.</li> <li>*z SI imPhaseSpare .. idea for possible future [AUTOSIZE][autosize]/MAINSIM/BOTH choice</li> </ul> imFreq choice:IVL input time frequency of record reads, Y M D H; HS and Subhour not allowed. RQD. hasHeader choice:NOYES Start of phase file has header no/yes, default yes. iffnmi TI Start of run <ul> <li>subscript of import file field record in IffnmB. Holds used names b4 file opened;</li> <li>used for runtime access to IMPF record to handle forward references</li> <li>runtime</li> <li>file</li> </ul> posEndHdr number Start of run <ul> <li>file pointer after header, for repositioning file after warmup</li> <li>buffer</li> </ul> bufSz USI Start of run 0 or allocated size of buffer (actually 1 larger to hold \\0) bufN USI Start of hour number of characters in buffer === subscript of 1st unused byte bufI1 USI Start of hour buffer subscript 1: start or next unscanned field in current record bufI2 USI Start of hour buffer subscript 2: end current record. ==bufI1 if no current record. lineNo number Start of hour 1-based line number (\\n count) in file lineNoEndHdr number Start of run lineNo corresponding to posEndHdr nFieldsScanned number End of hour 0 or number of fields already scanned in current record"},{"location":"probe-definitions/izXfer/","title":"izXfer","text":"<p>title: izXfer ---</p> Name Type Variability Description/Comments zi1 TI Start of run subscripts of zones involved (air flow &gt; 0 = into zone 1) zi2 TI Start of run iz_zi2 = -1 iff not interzone doas TI Start of run subscript of DOAS where air is supplied from (air flow &gt; 0), or exhausting to (airflow &lt; 0) ua UA Start of hour air-to-air coupling const (Btuh/F) thru walls etc. nvcntrl choice:IZNVTY input time <ul> <li>Control type for nat vents:</li> <li>C_IZNVTYCH_NONE: no venting (iz_ua only)</li> <li>C_IZNVTYCH_ONEWAY: \"diode\" variant of 2 way (xfer iff t1 &gt; t2)</li> <li>C_IZNVTYCH_TWOWAY: high/low/hdiff vent (pre-2010)</li> <li>C_IZNVTYCH_ANEXT: airnet vent to exterior (zi2=-1)</li> <li>C_IZNVTYCH_ANIZ: airnet vent between zones</li> <li>C_IZNVTYCH_ANHORIZ: airnet large horiz opening (e.g. stairwell)</li> <li>C_IZNVTYCH_ANEXTFAN: airnet fan to/from exterior (zi2=-1)</li> <li>C_IZNVTYCH_ANIZFAN: airnet fan between zones</li> <li>fan flow adds fan heat / uses electricity</li> <li>C_IZNVTYCH_ANEXTFLOW: airnet specified flow to/from exterior (zi2=-1)</li> <li>C_IZNVTYCH_ANIZFLOW: airnet specified flow between zones</li> <li>specified flow transfers air (no fan heat, no elec)</li> <li>C_IZNVTYCH_ANHERV: heat/energy recovery ventilator</li> <li>C_IZNVTYCH_ANDUCTLK: duct leakage</li> <li>C_IZNVTYCH_ANSYSAIR: system air flow</li> <li>C_IZNVTYCH_ANOAVRLF: [RSYS][rsys] OAV relief air</li> <li>( = interzone hole sized per flow)</li> </ul> afCatI AFCAT Start of run <ul> <li>air flow input category (accounting only) C_AFCAT_xxx</li> <li>or 0 = unknown</li> <li>resolved to iz_afMtrCat1 and iz_afMtrCat2 for runtime</li> </ul> <ul> <li>AFMTR pointers, derived from zone zn_afMtri</li> <li>NULL if not specified or same on both sides of IZ type</li> </ul> Name Type Variability Description/Comments afMtrCat1 number Start of run ... for iz_pAfMtr1 afMtrCat2 number Start of run ... for iz_pAfMtr2 Name Type Variability Description/Comments a1 AREA_GEZ Start of hour <ul> <li>vent area 1, ft2</li> <li>_TWOWAY = low vent area</li> <li>AirNet = minimum vent area (\"infil only\")</li> </ul> a2 AREA_GEZ Start of hour <ul> <li>vent area 2, ft2</li> <li>_TWOWAY = high vent area</li> <li>AirNet = maximum vent area (\"infil + vent\")</li> <li>BUT note it is OK if a1 &gt; a2</li> </ul> L1 LEN_GZ input time opening dim 1, ft (_ANHORIZ) L2 LEN_GZ input time opening dim 2, ft hz number input time <ul> <li>_AN (non FAN): height of iz_a1 relative to arbitrary 0 (ft)</li> <li>_TWOWAY: height a1 - height a2 difference (ft)</li> </ul> Name Type Variability Description/Comments stairAngle FLOAT_GEZ input time <ul> <li>stair angle, deg (_ANHORIZ) (90 = vert)</li> <li>default = 34 deg</li> </ul> cd FRAC_GZ input time orifice coefficient, dimless (user input, default 0.8) exp number Start of run power law exponent, (user input, default 0.5) cpr number input time wind pressure coefficient (ignored if not _ANEXT) <p>fan volume flow (cfm, += into zone1; if &lt;0, fan is exhaust)</p> Name Type Variability Description/Comments vfMin AFLOW Start of subhour <ul> <li>min vent flow rate, cfm (for fixed flow types)</li> <li>(*net* supply flow for _ANHERV)</li> </ul> vfMax AFLOW Start of subhour max vent flow rate, cfm (for fixed flow types) tEx TEMP Start of subhour <ul> <li>vent exterior air drybulb temp for ANEXT, ANEXTFAN, ANEXTFLOW, and ANEXTHERV, F</li> <li>default = current ambient dry bulb (from weather file)</li> </ul> wEx FRAC_GZ Start of subhour <ul> <li>vent exterior air humidity ratio, lb/lb</li> <li>default = current ambient humidity ratio (from weather file)</li> </ul> windSpeed FLOAT_GEZ Start of subhour <ul> <li>windspeed seen by this vent, mph</li> <li>default = zone-adjusted windspeed</li> </ul> linkedFlowMult FLOAT_GZ input time <ul> <li>multiplier for flow to/from linked zone or [DOAS][doas] or ...</li> <li>applied to flow seen by \"other\" zone or device (but not this zone)</li> <li>supports zone multiplier schemes</li> <li>initially implemented for [DOAS][doas] only, 6-1-2023</li> </ul> Name Type Variability Description/Comments ASEF number Start of subhour apparent sensible effectiveness (for _ANHERV) LEF number Start of subhour latent effectiveness (for _ANHERV) SRE number Start of subhour HVI sensible recovery efficiency (for _ANHERV) ASRE number Start of subhour HVI adjusted sensible recovery efficiency (for _ANHERV) RVFanHeatF number Start of subhour <ul> <li>fraction of HERV fan power that heats supply air (experimental)</li> <li>default 0</li> </ul> vfExhRat number Start of subhour <ul> <li>exhaust ratio (for _ANHERV) = (vfGross exhaust)/(vfGross supply)</li> <li>default = 1 (balanced)</li> </ul> EATR number Start of subhour <ul> <li>exhaust air transfer ratio (for _ANHERV)</li> <li>vfGross = vfNet / (1.-EATR)</li> </ul> fan vent fan characteristics (unused if not fan type) FAN Name Type Variability Description/Comments fan.fanTy choice:FANTY Start of phase <ul> <li>fan position choice, according to application as follows; constant.</li> <li>air handler supply:  DRAWTHRU (default) or BLOWTHRU</li> <li>ah return/relief:  NONE (default), RETURN, or RELIEF</li> <li>terminal:  NONE (default), SERIES, or PARALLEL</li> <li>zone exhaust fan:  NONE or EXHAUST (no types, just whether exists)</li> <li>AirNet ([IZXFER][izxfer]):    ditto</li> </ul> fan.vfDs AFLOW_GZ End of subhour design volumetric flow (cfm actual air).  constant, RQD except as noted. *s cuz varies when autoSizing. fan.vfDs_As AFLOW Start of phase autoSized ditto for ah sfan and rfan for naming consistency. 6-95. fan.vfDs_AsNov AFLOW Start of phase <ul> <li>raw autoSized ditto b4 overSize added, for report/probes. 7-95.</li> <li>cnausz.cpp code ASSUMES x, x_As, x_AsNov together for access thru one ptr. cuprobe.cpp's name search also requires together.</li> </ul> fan.vfMxF number Start of phase <ul> <li>factor by which fan flow will exceed vfDs (at reduced pressure). default 1.3. constant.</li> <li>Error if &lt; 1.0; typically &lt;= 1.5.</li> </ul> Name Type Variability Description/Comments fan.press PRESAIR_GEZ Start of run <ul> <li>system design pressure, \"H2O (inches of water), constant, used in defaulting power / efficiency.</li> <li>default: supply 3, r/r .75, tu .3, zx ???.</li> <li>0 allowed 5-1-92 to eliminate fan heat for test/calibration purposes.</li> </ul>   only one of eff and shaftPwr may be given:  Name Type Variability Description/Comments fan.eff FRAC_GZ Start of run <ul> <li>fan (hydraulic) efficiency at vfDs and press (any temp), constant,</li> <li>default from power if given, else .65.  (1-eff) of fan shaft power is converted to heat in airstream.</li> </ul> fan.shaftPwr BHP_GZ Start of run <ul> <li>fan shaft power at vfDs and press (any temp). constant. default: from eff</li> <li>Btuh internally, entered in BHP (user name 'shaftBhp') (cvpak converts).</li> <li>^^^^make user name 'shaftBhp'.  field type name??</li> </ul> fan.elecPwr FLOAT_GZ Start of run <ul> <li>motor input power, W/cfm (based on vfDs); shaftPwr and elecPwr cannot both be</li> <li>input</li> </ul> Name Type Variability Description/Comments fan.motTy choice:MOTTY Start of run <ul> <li>motor type (C_MOTTYCH_PSC or C_MOTTYCH_BPM)</li> <li>[RSYS][rsys] only minimal use 4-12, could effect defaults</li> </ul> Name Type Variability Description/Comments fan.motEff FRAC_GZ Start of phase motor/drive efficiency, constant, default .9. Name Type Variability Description/Comments fan.motPos choice:MOTPOS Start of phase <ul> <li>motor/drive position: choice of INFLO (default), INRETURN, EXTERNAL.  constant.</li> <li>INRETURN is for supply fans only and will be deferred/omitted if difficult</li> <li>chip per taylor 3-4-92).</li> </ul> Name Type Variability Description/Comments fan.curvePy fan part-load energy consumption curve cubic polynomial coefficients with x0 PYCUBIC2 Name Type Variability Description/Comments fan.curvePy.k[index] number Array [6] Start of phase FLOAT k[6]. [0..3] are coeff, [4] is minimum x, [5] is terminator needed by cul.cpp. Name Type Variability Description/Comments fan.mtri TI input time subscript of meter (MTR) to which energy consumption is charged fan.endUse choice:ENDUSE Start of phase <ul> <li>end use to which energy consumption is charged</li> <li>not used for all fans (many implicitly default to \"fan\")</li> </ul> Name Type Variability Description/Comments fan.ausz BOO Start of run <ul> <li>non-0 if fan being autoSized (AH sfan, rfan): input contained [AUTOSIZE][autosize] _fanVfDs. 7-1-95.</li> <li>see also AH::fanAs, asRfan, asFlow. 7-1-95. */</li> </ul> <ul> <li>FAN setup time members, set by cnfan.cpp:FAN::setup. May be resetup during autoSize run.</li> <li>also cMx may be init by setup, to be non-0.</li> </ul> Name Type Variability Description/Comments fan.outPower number Start of subhour <ul> <li>motor output power (work done by fan), member 7-95 for one setup check in cncult5.cpp</li> <li>inPower = shaftPwr/motEff  is computed as needed.</li> </ul> fan.airPower number Start of subhour <ul> <li>fan heat to air (Btuh) at vfDs (&amp; pressure): work done by fan, plus motor/drive inefficiency if in flow.</li> <li>Note work done by fan is modelled as HEAT ADDED TO AIR AT FAN per Chip/Niles (3-92, undocumented)</li> <li>heat to air around motor (in return air etc) at design flow is: (inPower - airPower). this is 0 if motor in air flow.</li> </ul>   FAN runtime members, set by cnah.cpp:FAN::pute( cFlow, temp)  Name Type Variability Description/Comments fan.cMx CFLOW End of subhour max heat cap flow (Btuh/F) at curr air temp &amp; run press &amp; ref w: .vfMx * air vsh * 60 (min/hr) fan.c CFLOW End of subhour current average flow in heat cap units (Btuh/F): input saved for probing by last call to FAN::pute() fan.t TEMP End of subhour current air temp, input saved ditto, used in converting BtuF/F to cfm fan.frOn number End of subhour <ul> <li>fraction of time fan is on, saved input</li> <li>made local to pute()to save members 10-92:</li> <li>*s *e FRAC relFlow  // fraction of design flow</li> <li>*s *e FRAC relLoad  // fraction of full load per part load curve for fan type (1.0 if over design flow: assume pressure drops)</li> </ul> fan.p number End of subhour (motor) power consumption for subhour -- inPower * relLoad.  *subhrDur for meter. fan.q number End of subhour heat (power) to air this subhour: airPower * relLoad.  Member needed in addition to c and dT?? fan.dT TEMPDIFF End of subhour temp difference due to fan: q/c fan.qAround number End of subhour heat to air around motor, if not in air flow, for use re supply fan motor in return air <p>derived / internal</p> Name Type Variability Description/Comments nvcoeff number Start of run nat vent overall coeff Btuh/(dt^.5). set by izxSetup(). air1 z1 air state (tdb and w) AIRSTATE Name Type Variability Description/Comments air1.tdb DBL End of subhour air dry-bulb temp, F air1.w DBL End of subhour air humidity ratio, lb moisture/lb dry air air2 z2 air state (may be ambient or from DOAS) AIRSTATE Name Type Variability Description/Comments air2.tdb DBL End of subhour air dry-bulb temp, F air2.w DBL End of subhour air humidity ratio, lb moisture/lb dry air Name Type Variability Description/Comments rho1 number Start of subhour z1 moist air density, lb/cf rho2 number Start of subhour z2 moist air density, lb/cf (may be ambient or from DOAS) ad[index] Array [2] <ul> <li>airnet working data</li> <li>[ 0]: infil only</li> <li>[ 1]: infil+vent</li> </ul> ANDAT Name Type Variability Description/Comments ad[index].Ae AREA_GEZ End of subhour effective vent area, ft2; function of vent type and iz_cd ad[index].AeLin AREA_GEZ End of subhour modified iz_Ae, ft2; prevents discontinuity at delPLinear ad[index].pres1 DBL End of subhour pressure at z1 side of element, lbf/sf (for pressure-dependent) ad[index].pres2 DBL End of subhour pressure at z2 side of element, lbf/sf (for pressure-dependent) ad[index].delP DBL End of subhour pressure diff across element, lbf/sf (+ = pz1 &gt; pz2) ad[index].mdotP DBL End of subhour <ul> <li>air mass flow rate, (lbm moist air)/sec (+ into z1)</li> <li>pressure driven: derived via pressure balance</li> <li>fixed flow: as set</li> </ul> ad[index].dmdp DBL End of subhour derivative of ad_mdotP wrt pressure (0 for fix flow) ad[index].mdotB DBL End of subhour <ul> <li>add'l buoyancy-driven mass flow, (lbm moist air)/sec</li> <li>balanced flow z1 &lt;-&gt; z2, used only for _ANHORIZ</li> </ul> ad[index].mdotX DBL End of subhour <ul> <li>air mass exhaust flow, (lbm moist air)/sec (+ out of z2)</li> <li>HERV = exhaust flow</li> <li>Other = ad_mdotP</li> </ul> ad[index].xDelpF DBL End of subhour buoyancy flooding pressure factor ad[index].xMbm DBL End of subhour buoyancy max possible flow factor ad[index].tdFan DBL End of subhour air stream temp rise across fan, F ad[index].pFan DBL End of subhour fan (electrical) power for meter, Btuh (*not* W) amfNom number End of subhour <ul> <li>nominal air mass flow, lbm/sec</li> <li>= fVent weighted average of iz_ad[ 0] and iz_ad[ 1]</li> <li>NOTE: approximate when fVent not 0 or 1</li> </ul>"},{"location":"probe-definitions/layer/","title":"Layer","text":"<p>title: layer --- input.  Also .ownTI (base class) is owning CONstruction subscript.</p> Name Type Variability Description/Comments thk LEN_GZ input time thickness of layer, ft. dfl mt_thk else RQD. *i cuz VEOI in cncult:lrT[]. mati TI input time primary material (MAT subscript). RQD. frmMati TI input time framing material in layer, 0 if unframed layer frmFrac number input time <ul> <li>fraction framing in layer. RQD if lrFrmMati nz.</li> <li>derived:</li> </ul> uvy CNDVY_GZ Start of run conductivity: weighted combo of pri &amp; framing; NOT specific to thickness. r RES_GZ Start of run layer r-value (for thk, per ft2) vhc HC_VOL Start of run volumetric heat capac (dens*spHt, framing-weighted)"},{"location":"probe-definitions/mass/","title":"Mass","text":"<p>title: mass ---</p> Name Type Variability Description/Comments sfi TI Start of run associated surface subscript sfClass number Start of run associated surface class (sfcSURF or sfcDOOR) xri TI Start of run XSRAT subscript: ditto area number Start of run area, ft2 isSubhrly BOO Start of run TRUE iff this mass simulated subhourly (else hourly) isFD BOO Start of run TRUE iff this mass used forward-difference model (always subhourly) inside inside surface boundary conditions MASSBC Name Type Variability Description/Comments inside.msi TI Start of run parent mass subscr inside.ty number Start of run Bound cond type: MSBCADIABATIC, MSBCAMBIENT, MSBCGROUND, MSBCZONE, or MSBCSPECT. inside.zi TI Start of run Zone sbscr if .bc_ty == MSBCZONE. inside.exTa number Start of hour <ul> <li>adjacent air temp, F</li> <li>if MSBCSPECT, set by user input (often expression)</li> <li>else set to ambient, zone, etc. per bc_ty</li> </ul> inside.exTr number Start of hour <ul> <li>adjacent radiant temp, F</li> <li>Solar must pass thru rsurf.  Conduction thru rsurf in series with surf film = h.</li> </ul> inside.rsurf number Start of run extra surf resis, from masstype, for \"light\" surf lyrs eg carpet: res for solar to 1st hvy lyr. inside.h number Start of run <ul> <li>combined surface conductance, air to 1st \"heavy\" layer (Btuh/ft2-F)</li> <li>= surface conductance combined w .rsurf.</li> </ul> inside.ha number Start of run bc_h * area, Btuh/F   runtime - solar gain setup - temps used while computing 1 hour for month  Name Type Variability Description/Comments inside.rIg RIGTARG Start of hour <ul> <li>radiant internal gain target (float) (Btuh). Pointed to by ZNR.rIgDist; set/used in cnloads. 11-95</li> <li>next 6 for reports and energy balance check.</li> <li>these are 0'd at start hr/day/month then accumulated to, so only valid at end interval: *e: usable in reports.</li> <li>for general probability would need \"prior\" copy, not *e, always valid prior day/month value.</li> </ul> inside.qxhnet DBL End of hour Net heat xfer for hour (Btu, + = into mass): signed sum of all transfers. inside.qxdnet DBL End of day ... ditto current day inside.qxmnet DBL Unknown ... ditto current month inside.qxhtot DBL End of hour Total xfer for hour (Btu): sum of abs(xfer).  Used as divisor for determining relative error. inside.qxdtot DBL End of day ... ditto current day inside.qxmtot DBL Unknown <ul> <li>... ditto current month</li> <li>for probe-ability (can't probe thru pointer MSRAT.temp[]) 1-19-94</li> </ul> inside.surfTemp number End of subhour probe-able duplicate copy of inside or outside layer surface temp, set in loadsSurfaces. outside outside... MASSBC Name Type Variability Description/Comments outside.msi TI Start of run parent mass subscr outside.ty number Start of run Bound cond type: MSBCADIABATIC, MSBCAMBIENT, MSBCGROUND, MSBCZONE, or MSBCSPECT. outside.zi TI Start of run Zone sbscr if .bc_ty == MSBCZONE. outside.exTa number Start of hour <ul> <li>adjacent air temp, F</li> <li>if MSBCSPECT, set by user input (often expression)</li> <li>else set to ambient, zone, etc. per bc_ty</li> </ul> outside.exTr number Start of hour <ul> <li>adjacent radiant temp, F</li> <li>Solar must pass thru rsurf.  Conduction thru rsurf in series with surf film = h.</li> </ul> outside.rsurf number Start of run extra surf resis, from masstype, for \"light\" surf lyrs eg carpet: res for solar to 1st hvy lyr. outside.h number Start of run <ul> <li>combined surface conductance, air to 1st \"heavy\" layer (Btuh/ft2-F)</li> <li>= surface conductance combined w .rsurf.</li> </ul> outside.ha number Start of run bc_h * area, Btuh/F   runtime - solar gain setup - temps used while computing 1 hour for month  Name Type Variability Description/Comments outside.rIg RIGTARG Start of hour <ul> <li>radiant internal gain target (float) (Btuh). Pointed to by ZNR.rIgDist; set/used in cnloads. 11-95</li> <li>next 6 for reports and energy balance check.</li> <li>these are 0'd at start hr/day/month then accumulated to, so only valid at end interval: *e: usable in reports.</li> <li>for general probability would need \"prior\" copy, not *e, always valid prior day/month value.</li> </ul> outside.qxhnet DBL End of hour Net heat xfer for hour (Btu, + = into mass): signed sum of all transfers. outside.qxdnet DBL End of day ... ditto current day outside.qxmnet DBL Unknown ... ditto current month outside.qxhtot DBL End of hour Total xfer for hour (Btu): sum of abs(xfer).  Used as divisor for determining relative error. outside.qxdtot DBL End of day ... ditto current day outside.qxmtot DBL Unknown <ul> <li>... ditto current month</li> <li>for probe-ability (can't probe thru pointer MSRAT.temp[]) 1-19-94</li> </ul> outside.surfTemp number End of subhour probe-able duplicate copy of inside or outside layer surface temp, set in loadsSurfaces. UNom UH_GZ Start of run <ul> <li>overall uval incl nominal surface films, Btuh/ft2-F</li> <li>used for reporting only</li> </ul> tc number Start of run time constant (con-&gt;hc/sfInH) as used to default sfModel &amp; isSubhrly, for reporting, 1-95 Name Type Variability Description/Comments pMM MASSMODELP Start of run <ul> <li>pointer to runtime mass model for this mass (type determined per input)</li> <li>see mspak.h</li> </ul>"},{"location":"probe-definitions/material/","title":"Material","text":"<p>title: material --- input.  *i's cuz VEOI's in cncult.</p> Name Type Variability Description/Comments thk LEN_GZ input time -1 or optional default thickness, ft cond CNDVY_GZ input time conductivity, Btuh-ft/ft2-F (at mt_condTRat) condTRat number input time rating temp for mt_cond, F (typically 70 F) condCT number input time <ul> <li>conductivity temp coefficient, 1/F</li> <li>condAtT = mt_cond*(1 + mt_condCT*(T - mt_condTRat)</li> </ul> spHt SPECHEAT input time specific heat, Btu/lb-F dens DENSITY input time 0 (massless) or density, lb/ft3 rNom RESVY_GZ input time <ul> <li>nominal R of insulation, ft2-F/Btuh-ft</li> <li>= resistance of 1 ft2 per ft thick.</li> <li>documentation only (typically round number, e.g. 13)</li> <li>-1 = not given</li> <li>derived.  *r: set in input check/setup.</li> </ul> vhc HC_VOL Start of run volumetric heat capac (Btu/ft3-F): mt_spHt*mt_dens"},{"location":"probe-definitions/meter/","title":"Meter","text":"<p>title: meter --- inputs: rates</p> Name Type Variability Description/Comments rate number Start of hour cost per Btu of use dmdRate number input time dmdCost per Btu of demand, for a month subMtri[index] TI Array [DIM_SUBMETERLIST] Start of run submeters subMtrMult[index] number Array [DIM_SUBMETERLIST] Start of hour submeter multipliers <ul> <li>results: accumulated useage and cost for this meter (record subscript),</li> <li>for each interval (member here), usage by end use (substruct member):</li> <li>CAUTION: ordered for subscripting by IVLCH-1.</li> </ul> Name Type Variability Description/Comments Y run (aka year or annual) energy use MTR_IVL   accum functions; see CAUTION below  Name Type Variability Description/Comments Y.tot number Post-calc phase of run <ul> <li>total of following specific end uses.  Code assumes precedes them.</li> <li>= allEU + bt + pv</li> <li>Use by purpose (end use), energy used in Btu:</li> <li>CAUTION: order of members MATCHES DTENDUSECH choices (cndtypes.def)</li> <li>for subscripting (in cnguts,cgresult.cpp) by end use -1:</li> </ul> Y.clg number End of run space cooling.  code assumes 1st member. Y.htg number End of run space heating incl heat pump compressor Y.hpBU number End of run heat pump resistance heating (backup and defrost) Y.dhw number End of run <ul> <li>domestic (service) hot water heating</li> <li>HPWH: compressor+misc energy</li> </ul> Y.dhwBU number End of run <ul> <li>domestic (service) hot water backup</li> <li>HPWH: resistance heating energy</li> <li>others: virtual backup to maintain ws_tUse</li> </ul> Y.dhwMFL number End of run <ul> <li>domestic (service) multi-family loop energy</li> <li>= [DHWLOOP][dhwloop] pump electricity + loss makeup</li> </ul> Y.fanC number End of run fans - cooling and cooling ventilation Y.fanH number End of run fans - heating Y.fanV number End of run fans - IAQ ventilation Y.fan number End of run fans - other Y.aux number End of run HVAC auxiliaries and parasitics, not including fans Y.proc number End of run process energy Y.lit number End of run lighting Y.rcp number End of run receptacles Y.ext number End of run external -- outdoor lights, etc Y.refr number End of run refrigeration Y.dish number End of run dish washing Y.dry number End of run clothes drying Y.wash number End of run clothes washing Y.cook number End of run cooking Y.usr1 number End of run user-defined end use 1 Y.usr2 number End of run user-defined end use 2 Y.bt number Post-calc phase of run battery output (negative) Y.pv number End of run photovoltaic array output (negative) Y.allEU number End of run subtotal, clg .. usr2 (= load w/o bt and pv)   cost results. for now (11-93), must report with probes. Code (cnguts) may assume in this order, after uses.  Name Type Variability Description/Comments Y.cost number Post-calc phase of run accumulated  tot*rate Y.dmdCost number Post-calc phase of run <ul> <li>largest dmd*dmdRate to month level, then accumulates (mtr_Accum)</li> <li>demand results. related code: mtr_Accum. for now, must be reported with probes.</li> </ul> Y.dmd number Post-calc phase of run peak use in interval; hourly value same as .tot. Y.dmdShoy SHOY Post-calc phase of run peak time as subhour of year, subhr unused: 4*(hr+24*jDay). M month's use MTR_IVL   accum functions; see CAUTION below  Name Type Variability Description/Comments M.tot number Unknown <ul> <li>total of following specific end uses.  Code assumes precedes them.</li> <li>= allEU + bt + pv</li> <li>Use by purpose (end use), energy used in Btu:</li> <li>CAUTION: order of members MATCHES DTENDUSECH choices (cndtypes.def)</li> <li>for subscripting (in cnguts,cgresult.cpp) by end use -1:</li> </ul> M.clg number Unknown space cooling.  code assumes 1st member. M.htg number Unknown space heating incl heat pump compressor M.hpBU number Unknown heat pump resistance heating (backup and defrost) M.dhw number Unknown <ul> <li>domestic (service) hot water heating</li> <li>HPWH: compressor+misc energy</li> </ul> M.dhwBU number Unknown <ul> <li>domestic (service) hot water backup</li> <li>HPWH: resistance heating energy</li> <li>others: virtual backup to maintain ws_tUse</li> </ul> M.dhwMFL number Unknown <ul> <li>domestic (service) multi-family loop energy</li> <li>= [DHWLOOP][dhwloop] pump electricity + loss makeup</li> </ul> M.fanC number Unknown fans - cooling and cooling ventilation M.fanH number Unknown fans - heating M.fanV number Unknown fans - IAQ ventilation M.fan number Unknown fans - other M.aux number Unknown HVAC auxiliaries and parasitics, not including fans M.proc number Unknown process energy M.lit number Unknown lighting M.rcp number Unknown receptacles M.ext number Unknown external -- outdoor lights, etc M.refr number Unknown refrigeration M.dish number Unknown dish washing M.dry number Unknown clothes drying M.wash number Unknown clothes washing M.cook number Unknown cooking M.usr1 number Unknown user-defined end use 1 M.usr2 number Unknown user-defined end use 2 M.bt number Unknown battery output (negative) M.pv number Unknown photovoltaic array output (negative) M.allEU number Unknown subtotal, clg .. usr2 (= load w/o bt and pv)   cost results. for now (11-93), must report with probes. Code (cnguts) may assume in this order, after uses.  Name Type Variability Description/Comments M.cost number Unknown accumulated  tot*rate M.dmdCost number Unknown <ul> <li>largest dmd*dmdRate to month level, then accumulates (mtr_Accum)</li> <li>demand results. related code: mtr_Accum. for now, must be reported with probes.</li> </ul> M.dmd number Unknown peak use in interval; hourly value same as .tot. M.dmdShoy SHOY Unknown peak time as subhour of year, subhr unused: 4*(hr+24*jDay). D day's use MTR_IVL   accum functions; see CAUTION below  Name Type Variability Description/Comments D.tot number Post-calc phase of day <ul> <li>total of following specific end uses.  Code assumes precedes them.</li> <li>= allEU + bt + pv</li> <li>Use by purpose (end use), energy used in Btu:</li> <li>CAUTION: order of members MATCHES DTENDUSECH choices (cndtypes.def)</li> <li>for subscripting (in cnguts,cgresult.cpp) by end use -1:</li> </ul> D.clg number End of day space cooling.  code assumes 1st member. D.htg number End of day space heating incl heat pump compressor D.hpBU number End of day heat pump resistance heating (backup and defrost) D.dhw number End of day <ul> <li>domestic (service) hot water heating</li> <li>HPWH: compressor+misc energy</li> </ul> D.dhwBU number End of day <ul> <li>domestic (service) hot water backup</li> <li>HPWH: resistance heating energy</li> <li>others: virtual backup to maintain ws_tUse</li> </ul> D.dhwMFL number End of day <ul> <li>domestic (service) multi-family loop energy</li> <li>= [DHWLOOP][dhwloop] pump electricity + loss makeup</li> </ul> D.fanC number End of day fans - cooling and cooling ventilation D.fanH number End of day fans - heating D.fanV number End of day fans - IAQ ventilation D.fan number End of day fans - other D.aux number End of day HVAC auxiliaries and parasitics, not including fans D.proc number End of day process energy D.lit number End of day lighting D.rcp number End of day receptacles D.ext number End of day external -- outdoor lights, etc D.refr number End of day refrigeration D.dish number End of day dish washing D.dry number End of day clothes drying D.wash number End of day clothes washing D.cook number End of day cooking D.usr1 number End of day user-defined end use 1 D.usr2 number End of day user-defined end use 2 D.bt number Post-calc phase of day battery output (negative) D.pv number End of day photovoltaic array output (negative) D.allEU number End of day subtotal, clg .. usr2 (= load w/o bt and pv)   cost results. for now (11-93), must report with probes. Code (cnguts) may assume in this order, after uses.  Name Type Variability Description/Comments D.cost number Post-calc phase of day accumulated  tot*rate D.dmdCost number Post-calc phase of day <ul> <li>largest dmd*dmdRate to month level, then accumulates (mtr_Accum)</li> <li>demand results. related code: mtr_Accum. for now, must be reported with probes.</li> </ul> D.dmd number Post-calc phase of day peak use in interval; hourly value same as .tot. D.dmdShoy SHOY Post-calc phase of day peak time as subhour of year, subhr unused: 4*(hr+24*jDay). H hour's use MTR_IVL   accum functions; see CAUTION below  Name Type Variability Description/Comments H.tot number Post-calc phase of hour <ul> <li>total of following specific end uses.  Code assumes precedes them.</li> <li>= allEU + bt + pv</li> <li>Use by purpose (end use), energy used in Btu:</li> <li>CAUTION: order of members MATCHES DTENDUSECH choices (cndtypes.def)</li> <li>for subscripting (in cnguts,cgresult.cpp) by end use -1:</li> </ul> H.clg number End of hour space cooling.  code assumes 1st member. H.htg number End of hour space heating incl heat pump compressor H.hpBU number End of hour heat pump resistance heating (backup and defrost) H.dhw number End of hour <ul> <li>domestic (service) hot water heating</li> <li>HPWH: compressor+misc energy</li> </ul> H.dhwBU number End of hour <ul> <li>domestic (service) hot water backup</li> <li>HPWH: resistance heating energy</li> <li>others: virtual backup to maintain ws_tUse</li> </ul> H.dhwMFL number End of hour <ul> <li>domestic (service) multi-family loop energy</li> <li>= [DHWLOOP][dhwloop] pump electricity + loss makeup</li> </ul> H.fanC number End of hour fans - cooling and cooling ventilation H.fanH number End of hour fans - heating H.fanV number End of hour fans - IAQ ventilation H.fan number End of hour fans - other H.aux number End of hour HVAC auxiliaries and parasitics, not including fans H.proc number End of hour process energy H.lit number End of hour lighting H.rcp number End of hour receptacles H.ext number End of hour external -- outdoor lights, etc H.refr number End of hour refrigeration H.dish number End of hour dish washing H.dry number End of hour clothes drying H.wash number End of hour clothes washing H.cook number End of hour cooking H.usr1 number End of hour user-defined end use 1 H.usr2 number End of hour user-defined end use 2 H.bt number Post-calc phase of hour battery output (negative) H.pv number End of hour photovoltaic array output (negative) H.allEU number End of hour subtotal, clg .. usr2 (= load w/o bt and pv)   cost results. for now (11-93), must report with probes. Code (cnguts) may assume in this order, after uses.  Name Type Variability Description/Comments H.cost number Post-calc phase of hour accumulated  tot*rate H.dmdCost number Post-calc phase of hour <ul> <li>largest dmd*dmdRate to month level, then accumulates (mtr_Accum)</li> <li>demand results. related code: mtr_Accum. for now, must be reported with probes.</li> </ul> H.dmd number Post-calc phase of hour peak use in interval; hourly value same as .tot. H.dmdShoy SHOY Post-calc phase of hour peak time as subhour of year, subhr unused: 4*(hr+24*jDay)."},{"location":"probe-definitions/perimeter/","title":"Perimeter","text":"<p>title: perimeter ---</p> Name Type Variability Description/Comments prLen LEN_GZ input time length. input. prF2 F2_GZ input time conduction per unit length. input. xi TI Start of run subscript in runtime XSURF rat, to facilitate access by probers 1-92"},{"location":"probe-definitions/report/","title":"Report","text":"<p>title: report ---</p> Name Type Variability Description/Comments zi TI input time zone for zone-specific reports. Can be TI_SUM, TI_ALL. mtri TI input time meter to report/export for meter-specific reports. Can be TI_SUM, TI_ALL. ahi TI input time air handler to report/export for air-handler-specific reports. Can be TI_SUM, TI_ALL. tui TI input time terminal to report/export for terminal-specific reports. Can be TI_ALL dhwMtri TI input time DHW meter to report/export for DHW meter-specific reports. Can be TI_ALL. afMtri TI input time Air flow meter to report/export for AF meter-specific reports. Can be TI_ALL. isExport BOO input time 1 if export not report, so same fcns can be used with RiB and XiB records rpTy choice:RPTY constant report/export type C_RPTYCH_EB etc rpFreq choice:IVL constant r/xport frequency C_IVLCH_M etc rpDayBeg DOY input time start 1-based Julian day of year, where applicable rpDayEnd DOY input time end .. rpBtuSf FLOAT_GZ input time energy (Btu) scale factor rpCond number End of subhour condition: if given, rpt lines omitted when FALSE (INT used to hold NAN) rpTitle CULSTR input time title, for UDT, in dm rpCpl number input time chars per line, inputtable re UDT's (default -1=\"as wide as needed\") rpHeader choice:RPTHD input time table header or export header yes/no (default yes) rpFooter choice:NOYES input time table footer (summary line) or export footer (just blank line?) yes/no (default yes) coli TI Start of run RcolB/XcolB subscript of first column (thence linked by .nxColi). nCol number Start of run # columns wid number Start of run <ul> <li>total col width for user-defined report</li> <li>generated</li> </ul> vrh number Start of run assigned virtual report handle, used from here to build UnspoolInfo."},{"location":"probe-definitions/reportCol/","title":"reportCol","text":"<p>title: reportCol --- input       .ownTi is RI subscript of owning report/export.   Column order is order of input.</p> Name Type Variability Description/Comments colHead CULSTR input time column head string, in dm.  *i cuz VEOI in cncult.cpp:rpColT[]. colGap SI_GEZ input time space to left of column, default 1 colWid number input time column width colDec number input time colDecimals: max digits after point colJust choice:JUST input time justification: C_JUSTCH_L or _R colVal VALNDT Post-calc phase of subhour <ul> <li>value vt_val and data type vt_dt (TYFL/TYSTR in input, DTFLOAT/DTCULSTR in run), used at end report interval.</li> <li>derived</li> </ul> nxColi TI Unknown for runtime: COL subscript of next column in this report, 0 if last one"},{"location":"probe-definitions/reportFile/","title":"reportFile","text":"<p>title: reportFile ---</p> Name Type Variability Description/Comments fileName CULSTR input time file name, path optional.  *i cuz VEOI in cncult. fileStat choice:FILESTAT Start of run fresh(overwrite,default)/new(err if exists)/append pageFmt choice:NOYES input time <ul> <li>page formatting on no/yes</li> <li>derived</li> </ul> fileStatChecked number Start of run check fileStat only once to prevent \"file exists\" error or re-setting \"overWrite\" on later run overWrite number Start of run append if 0.  set by fileStat=fresh, cleared on use, so addl runs do not erase earlier output. wasNotEmpty number Start of run nz if existed and size &gt; 0 at fileStat check"},{"location":"probe-definitions/sgdist/","title":"Sgdist","text":"<p>title: sgdist ---</p> Name Type Variability Description/Comments sgSide choice:SIDE input time C_SIDECH_INTERIOR or _EXTERIOR - side rcving gain Name Type Variability Description/Comments targTy number Start of run <ul> <li>target type: define (cnguts.h)   basAnc &amp; member</li> <li>zone air                    SGDTTZNAIR    ZNR.qSgAir</li> <li>(zone check/results total   SGDTTZNTOT    ZNR.qSgTot/qSgTotSh (not here; gen'd in cgsolar 2-95)</li> <li>surface in/outside          SGDTSURFI/O</li> </ul> targTi TI input time subscript of targeted entry in RAT above: *i in SGI; *nest merges variation flags. FSO number Start of monthly-hourly frac of gain to target, shades open FSC number Start of monthly-hourly frac of gain to target, shades closed (defaults to sgd_FSO)"},{"location":"probe-definitions/shade/","title":"Shade","text":"<p>title: shade ---</p> Name Type Variability Description/Comments wWidth LEN_GZ Start of run Window width.  *r: set (from window) by input check/setup (topCkf). wHeight LEN_GZ Start of run Window height ohDepth LEN Start of monthly-hourly Depth of overhang.  *mh: may change monthly-hourly: m-h user exprs accepted. ohDistUp LEN Start of monthly-hourly Distance from top of window to bot of OH ohExL LEN Start of monthly-hourly Overhang extension beyond left edge of window ohExR LEN Start of monthly-hourly Ditto right edge ohFlap LEN Start of monthly-hourly Len of flap hanging down from front of overhang lfDepth LEN Start of monthly-hourly Left fin depth lfTopUp LEN Start of monthly-hourly Left fin top of window to top of fin lfDistL LEN Start of monthly-hourly Left fin distance to left edge of window lfBotUp LEN Start of monthly-hourly Left fin bottom to window bottom distance rfDepth LEN Start of monthly-hourly Right fin values analogous to left rfTopUp LEN Start of monthly-hourly rfDistR LEN Start of monthly-hourly rfBotUp LEN Start of monthly-hourly"},{"location":"probe-definitions/surface/","title":"Surface","text":"<p>title: surface ---</p> Name Type Variability Description/Comments ty number input time type CTEXTWALL, CTINTWALL, CTWINDOW, CTMXWALL, CTPERIM, CTKIVA set by cult or code. <p>inputs.  *r's where set by topCkf in at least some cases.</p> Name Type Variability Description/Comments area AREA_GZ Start of run (net) area, sf.  Reflects window multiplier. azm ANGLE Start of run azimuth (radians, 0 = North, Pi/2 = East) tilt ANGLE Start of run tilt (radians, 0 = horiz up, Pi/2 = vert. dircos[index] number Array [3] Start of run outward normal direction cosines for given azm/tilt depthBG FLOAT_GEZ Start of run depth below grade of bottom of wall, ft height FLOAT_GEZ Start of run height of surface, ft (currently only used for Kiva) model choice:SFMODEL input time <ul> <li>surface model: user input</li> <li>quick/auto/delayed(massive)/delayed_hour/delayed_subhour/forward_difference/kiva</li> </ul> modelr choice:SFMODEL Start of run <ul> <li>resolved to quick (runtime XSURF generated),</li> <li>or to delayed_hour or _subhour (runtime MASS generated)</li> <li>or to kiva (runtime KIVA generated)</li> </ul> lThkF number Start of run <ul> <li>thickness factor, adjusts max thickness allowed for mass sublayers</li> <li>default = 0.5</li> </ul> Name Type Variability Description/Comments gti TI Start of run window glazeType subscript. Used at runtime re incidence angle. sco number Start of monthly-hourly window: SMSO: Solar Heat Gain Coef multiplier, shades Open scc number Start of monthly-hourly window: SMSC: Solar Heat Gain Coef, shades Closed sbcI inside (zone side) surface boundary conditions SBC Name Type Variability Description/Comments sbcI.absSlr number Start of monthly-hourly solar (SW) absorptance, dimless sbcI.awAbsSlr DBL Start of monthly-hourly <ul> <li>area-weighted solar absorptance</li> <li>= sb_absSlr * area / zn_surfASlr</li> <li>exterior surf outside: always 0</li> <li>windows inside: TBD 12-8-10</li> <li>ducts: always 0</li> </ul> sbcI.epsLW number Start of run thermal (LW) emittance sbcI.zi TI Start of run adjacent zone idx, 0 if exposed to ambient sbcI.F DBL Start of run solar (short wave) fraction ?  TODO: NOT USED? as of 4-2012 sbcI.Fp DBL Start of run <ul> <li>\"view factor\" to zone radiant temp, dimless.  Includes Oppenheim surface conductance.</li> <li>aka \"F-prime\" in CZM documentation.</li> </ul> Name Type Variability Description/Comments sbcI.frRad DBL Start of run re radiant to radiant temp (room radiant node or sky) sbcI.fSky DBL Start of run \"view factor\" to radiant surround at sky temp sbcI.fAir DBL Start of run \"view factor\" to radiant surround at air temp (ground, horizon) Name Type Variability Description/Comments sbcI.hcNat FLOAT_GEZ End of subhour surface natural convection coefficient, Btuh/ft2-F sbcI.hcFrc FLOAT_GEZ End of subhour surface forced (wind) convection coefficient, Btuh/ft2-F sbcI.hcMult FLOAT_GEZ End of subhour surface convection coefficient multiplier, dimless sbcI.hxa FLOAT_GEZ End of subhour overall coeff to sb_txa = sb_hcMult*(sb_hcNat + sb_hcFrc), Btuh/ft2-F sbcI.hxr FLOAT_GEZ End of subhour <ul> <li>surface (linearized) radiative coefficient, Btuh/ft2-F</li> <li>= coupling to sb_txr</li> </ul> sbcI.hxtot number End of subhour sb_hxa + sb_hxr sbcI.uRat DBL End of subhour <ul> <li>ratio uC/(sb_hxa + sb_hxr + uC)</li> <li>= 1/(1 + rC*(sb_hxa + sb_hxr))</li> <li>where uC = surface-to-surface conductance</li> <li>rC = 1/uC</li> <li>but: duct model outside surf to duct air</li> </ul> Name Type Variability Description/Comments sbcI.fRat DBL End of subhour <ul> <li>sb_hxtot * sb_uRat, Btuh/ft2-F</li> <li>= overall conductance not including other side</li> <li>surface resistances</li> <li>(ducts: overall conductance from duct air to sb_txe)</li> </ul> sbcI.cx DBL End of subhour air/radiant coupling due to this surface, Btuh/ft2-F Name Type Variability Description/Comments sbcI.sgTarg solar gain target: bm, df gain from insolation SGTARG Name Type Variability Description/Comments sbcI.sgTarg.bm DBL End of subhour beam sbcI.sgTarg.df DBL End of subhour diffuse sbcI.sgTarg.tot DBL End of subhour total sbcI.sg DBL End of subhour absorbed solar total, Btuh (NOT Btuh/ft2), summed from sb_sgTarg Name Type Variability Description/Comments sbcI.tSrf number End of subhour most recently calculated surface temp, F sbcI.tSrfls number Start of subhour <ul> <li>last step surface temp, F</li> <li>copied from sb_tSrf at step end</li> <li>not *e (available for probing)</li> </ul> sbcI.qrAbs DBL End of subhour <ul> <li>total absorbed radiant heat gain at surface, Btuh/ft2 (+ = into surface)</li> <li>= (sb_sg + sb_rIg)/area</li> </ul> sbcI.txa number End of subhour <ul> <li>adjacent air temp, F (from prior step)</li> <li>inside: prior step zone tz</li> <li>outside: current step ambient dry bulb temp</li> </ul> sbcI.txr number End of subhour <ul> <li>adjacent radiant temp, F</li> <li>inside: prior step zone tr</li> <li>outside: current step sky temp</li> </ul> sbcI.txe number End of subhour <ul> <li>adjacent environmental temp, F</li> <li>combined sb_txa and sb_txr; simplifies calcs in some cases</li> <li>set but unused? for inside</li> <li>set/used for ASHWAT outside</li> </ul> sbcI.w DBL End of subhour <ul> <li>adjacent air humidity ratio if known (else 0)</li> <li>used re duct leakage</li> </ul> sbcI.qSrf DBL End of subhour <ul> <li>conduction into surface, Btuh/ft2</li> <li>updated at end of timestep</li> </ul> Name Type Variability Description/Comments sbcI.pXS XSURFP Start of run parent pointer sbcI.si number Start of run <ul> <li>side of *sb_pXS represented by this SBC</li> <li>0=inside, 1=outside</li> </ul> sbcI.fcWind DBL Start of run <ul> <li>wind constant re sb_hcFrc (includes roughness, unit conversion, height adj, ...)</li> <li>value is model specific</li> <li>Walton: sb_hcFrc = sb_fcWind * Top.windSpeedSqrtSh</li> <li>Unified: sb_hcFrc = sb_fcWind * Top.windSpeedPt8</li> </ul> sbcI.fcWind2 DBL Start of run unified: add'l constant re sb_eta sbcI.eta DBL End of subhour <ul> <li>unified: wind speed adjustment included in sb_hcNat</li> <li>windV=0: sb_eta=1, sb_hcNat=still-air value</li> <li>windv&gt;0: sb_eta&lt;1, sb_hcNat is reduced</li> </ul> <ul> <li>characteristic dimensions re convection models</li> <li>not always set or used</li> <li>Note: may be derived from parent surface TODO</li> </ul> Name Type Variability Description/Comments sbcI.widNom DBL Start of run nominal width, ft (smaller dimension assuming rectangle) sbcI.lenNom DBL Start of run nominal length, ft (larger dimension assuming rectangle) sbcI.lenCharNat DBL Start of run characteristic length for some natural convection models, ft sbcI.lenEffWink DBL Start of run effective length for Winkelmann forced convection model, ft Name Type Variability Description/Comments sbcI.cosTilt DBL Start of run <ul> <li>cos( Tilt ) for the boundary -- note parent surface tilt is defined</li> <li>relative to outside normal (sbcO), so inside sb_cosTilt is oposite (+180 deg)</li> </ul> sbcI.atvDeg DBL Start of run angle-to-vertical, deg (inside: 90-tilt; outside: tilt-90) sbcI.cosAtv DBL Start of run cos( angle to vertical) 0 - 1 (never &lt; 0) sbcI.hcModel choice:CONVMODEL Start of run <ul> <li>surface convective coefficient model</li> <li>specifies calc method sb_hcNat and sb_hcFrc</li> </ul> sbcI.hcFrcOptions number Start of run <ul> <li>options re inside forced convection model</li> <li>1: use sb_hcFrcCoeffs (see code), else zn_hcFrc</li> </ul> sbcI.hcFrcCoeffs[index] number Array [DIM_HCFRCCOEFFS] Start of run <ul> <li>coefficients for forced convection model (inside only)</li> <li>1 extra array member required by cul</li> </ul> sbcI.hcLChar number Start of run <ul> <li>characteristic length, ft</li> <li>used in derivation of exterior forced convective coeff</li> <li>default = 10 ft</li> <li>unused re natural convective coeff (interior or exterior)</li> </ul> sbcI.hcConst[index] DBL Array [3] Start of run <ul> <li>convection coefficient model constants</li> <li>Unified: exposure to zone or ambient</li> <li>hcNat = sb_hcConst[]*abs( TD)^.33)</li> <li>[ 0]: tAir&lt;=tSrf, [ 1]: tAir&gt;tSrf</li> <li>[ 2]: unused</li> <li>ASHRAE: exposure to zone, hcNat = sb_hcConst[]</li> <li>[ 0]: sys off, tAir&lt;=tSrf, [ 1]: sys off, tAir&gt;tSrf</li> <li>[ 2]: sys on</li> </ul> <ul> <li>re [sfExCnd][sfexcnd] = GROUND: conductances to weather vars, Btuh/ft2-F</li> <li>correlation values derived by Bazjanac/Huang for various</li> <li>insulation configurations</li> </ul> Name Type Variability Description/Comments sbcI.groundModel choice:GROUNDMODEL Start of run <ul> <li>ground model in use (not input 1/1/2015)</li> <li>C_GROUNDMODELCH_D2INP: DOE-2 model w/ user coeffs</li> <li>C_GROUNDMODELCH_D2COR: DOE-2 model w/ correlation coeffs</li> </ul> sbcI.cTaDbAvgYr FLOAT_GEZ Start of run to annual avg taDb sbcI.cTaDbAvg31 FLOAT_GEZ Start of run to last 31 day avg taDb sbcI.cTaDbAvg14 FLOAT_GEZ Start of run to last 14 day avg taDb sbcI.cTaDbAvg07 FLOAT_GEZ Start of run to last 7 day avg taDb sbcI.cTGrnd FLOAT_GEZ Start of run to computed ground temp sbcI.rGrnd FLOAT_GEZ Start of run resistance = 1/(sum of above) (0 if sum=0) sbcI.rConGrnd FLOAT_GEZ Start of run <ul> <li>ground model implicit construction resistance, ft2-F/Btuh</li> <li>= approx resistance of construction film/carpet/slab/soil</li> <li>Caution: construction should be consistent with configuration</li> <li>implicit in coefficient values.</li> </ul> sbcO outside (ambient or adjacent zone) surface boundary conditions SBC Name Type Variability Description/Comments sbcO.absSlr number Start of monthly-hourly solar (SW) absorptance, dimless sbcO.awAbsSlr DBL Start of monthly-hourly <ul> <li>area-weighted solar absorptance</li> <li>= sb_absSlr * area / zn_surfASlr</li> <li>exterior surf outside: always 0</li> <li>windows inside: TBD 12-8-10</li> <li>ducts: always 0</li> </ul> sbcO.epsLW number Start of run thermal (LW) emittance sbcO.zi TI Start of run adjacent zone idx, 0 if exposed to ambient sbcO.F DBL Start of run solar (short wave) fraction ?  TODO: NOT USED? as of 4-2012 sbcO.Fp DBL Start of run <ul> <li>\"view factor\" to zone radiant temp, dimless.  Includes Oppenheim surface conductance.</li> <li>aka \"F-prime\" in CZM documentation.</li> </ul> Name Type Variability Description/Comments sbcO.frRad DBL Start of run re radiant to radiant temp (room radiant node or sky) sbcO.fSky DBL Start of run \"view factor\" to radiant surround at sky temp sbcO.fAir DBL Start of run \"view factor\" to radiant surround at air temp (ground, horizon) Name Type Variability Description/Comments sbcO.hcNat FLOAT_GEZ End of subhour surface natural convection coefficient, Btuh/ft2-F sbcO.hcFrc FLOAT_GEZ End of subhour surface forced (wind) convection coefficient, Btuh/ft2-F sbcO.hcMult FLOAT_GEZ End of subhour surface convection coefficient multiplier, dimless sbcO.hxa FLOAT_GEZ End of subhour overall coeff to sb_txa = sb_hcMult*(sb_hcNat + sb_hcFrc), Btuh/ft2-F sbcO.hxr FLOAT_GEZ End of subhour <ul> <li>surface (linearized) radiative coefficient, Btuh/ft2-F</li> <li>= coupling to sb_txr</li> </ul> sbcO.hxtot number End of subhour sb_hxa + sb_hxr sbcO.uRat DBL End of subhour <ul> <li>ratio uC/(sb_hxa + sb_hxr + uC)</li> <li>= 1/(1 + rC*(sb_hxa + sb_hxr))</li> <li>where uC = surface-to-surface conductance</li> <li>rC = 1/uC</li> <li>but: duct model outside surf to duct air</li> </ul> Name Type Variability Description/Comments sbcO.fRat DBL End of subhour <ul> <li>sb_hxtot * sb_uRat, Btuh/ft2-F</li> <li>= overall conductance not including other side</li> <li>surface resistances</li> <li>(ducts: overall conductance from duct air to sb_txe)</li> </ul> sbcO.cx DBL End of subhour air/radiant coupling due to this surface, Btuh/ft2-F Name Type Variability Description/Comments sbcO.sgTarg solar gain target: bm, df gain from insolation SGTARG Name Type Variability Description/Comments sbcO.sgTarg.bm DBL End of subhour beam sbcO.sgTarg.df DBL End of subhour diffuse sbcO.sgTarg.tot DBL End of subhour total sbcO.sg DBL End of subhour absorbed solar total, Btuh (NOT Btuh/ft2), summed from sb_sgTarg Name Type Variability Description/Comments sbcO.tSrf number End of subhour most recently calculated surface temp, F sbcO.tSrfls number Start of subhour <ul> <li>last step surface temp, F</li> <li>copied from sb_tSrf at step end</li> <li>not *e (available for probing)</li> </ul> sbcO.qrAbs DBL End of subhour <ul> <li>total absorbed radiant heat gain at surface, Btuh/ft2 (+ = into surface)</li> <li>= (sb_sg + sb_rIg)/area</li> </ul> sbcO.txa number End of subhour <ul> <li>adjacent air temp, F (from prior step)</li> <li>inside: prior step zone tz</li> <li>outside: current step ambient dry bulb temp</li> </ul> sbcO.txr number End of subhour <ul> <li>adjacent radiant temp, F</li> <li>inside: prior step zone tr</li> <li>outside: current step sky temp</li> </ul> sbcO.txe number End of subhour <ul> <li>adjacent environmental temp, F</li> <li>combined sb_txa and sb_txr; simplifies calcs in some cases</li> <li>set but unused? for inside</li> <li>set/used for ASHWAT outside</li> </ul> sbcO.w DBL End of subhour <ul> <li>adjacent air humidity ratio if known (else 0)</li> <li>used re duct leakage</li> </ul> sbcO.qSrf DBL End of subhour <ul> <li>conduction into surface, Btuh/ft2</li> <li>updated at end of timestep</li> </ul> Name Type Variability Description/Comments sbcO.pXS XSURFP Start of run parent pointer sbcO.si number Start of run <ul> <li>side of *sb_pXS represented by this SBC</li> <li>0=inside, 1=outside</li> </ul> sbcO.fcWind DBL Start of run <ul> <li>wind constant re sb_hcFrc (includes roughness, unit conversion, height adj, ...)</li> <li>value is model specific</li> <li>Walton: sb_hcFrc = sb_fcWind * Top.windSpeedSqrtSh</li> <li>Unified: sb_hcFrc = sb_fcWind * Top.windSpeedPt8</li> </ul> sbcO.fcWind2 DBL Start of run unified: add'l constant re sb_eta sbcO.eta DBL End of subhour <ul> <li>unified: wind speed adjustment included in sb_hcNat</li> <li>windV=0: sb_eta=1, sb_hcNat=still-air value</li> <li>windv&gt;0: sb_eta&lt;1, sb_hcNat is reduced</li> </ul> <ul> <li>characteristic dimensions re convection models</li> <li>not always set or used</li> <li>Note: may be derived from parent surface TODO</li> </ul> Name Type Variability Description/Comments sbcO.widNom DBL Start of run nominal width, ft (smaller dimension assuming rectangle) sbcO.lenNom DBL Start of run nominal length, ft (larger dimension assuming rectangle) sbcO.lenCharNat DBL Start of run characteristic length for some natural convection models, ft sbcO.lenEffWink DBL Start of run effective length for Winkelmann forced convection model, ft Name Type Variability Description/Comments sbcO.cosTilt DBL Start of run <ul> <li>cos( Tilt ) for the boundary -- note parent surface tilt is defined</li> <li>relative to outside normal (sbcO), so inside sb_cosTilt is oposite (+180 deg)</li> </ul> sbcO.atvDeg DBL Start of run angle-to-vertical, deg (inside: 90-tilt; outside: tilt-90) sbcO.cosAtv DBL Start of run cos( angle to vertical) 0 - 1 (never &lt; 0) sbcO.hcModel choice:CONVMODEL Start of run <ul> <li>surface convective coefficient model</li> <li>specifies calc method sb_hcNat and sb_hcFrc</li> </ul> sbcO.hcFrcOptions number Start of run <ul> <li>options re inside forced convection model</li> <li>1: use sb_hcFrcCoeffs (see code), else zn_hcFrc</li> </ul> sbcO.hcFrcCoeffs[index] number Array [DIM_HCFRCCOEFFS] Start of run <ul> <li>coefficients for forced convection model (inside only)</li> <li>1 extra array member required by cul</li> </ul> sbcO.hcLChar number Start of run <ul> <li>characteristic length, ft</li> <li>used in derivation of exterior forced convective coeff</li> <li>default = 10 ft</li> <li>unused re natural convective coeff (interior or exterior)</li> </ul> sbcO.hcConst[index] DBL Array [3] Start of run <ul> <li>convection coefficient model constants</li> <li>Unified: exposure to zone or ambient</li> <li>hcNat = sb_hcConst[]*abs( TD)^.33)</li> <li>[ 0]: tAir&lt;=tSrf, [ 1]: tAir&gt;tSrf</li> <li>[ 2]: unused</li> <li>ASHRAE: exposure to zone, hcNat = sb_hcConst[]</li> <li>[ 0]: sys off, tAir&lt;=tSrf, [ 1]: sys off, tAir&gt;tSrf</li> <li>[ 2]: sys on</li> </ul> <ul> <li>re [sfExCnd][sfexcnd] = GROUND: conductances to weather vars, Btuh/ft2-F</li> <li>correlation values derived by Bazjanac/Huang for various</li> <li>insulation configurations</li> </ul> Name Type Variability Description/Comments sbcO.groundModel choice:GROUNDMODEL Start of run <ul> <li>ground model in use (not input 1/1/2015)</li> <li>C_GROUNDMODELCH_D2INP: DOE-2 model w/ user coeffs</li> <li>C_GROUNDMODELCH_D2COR: DOE-2 model w/ correlation coeffs</li> </ul> sbcO.cTaDbAvgYr FLOAT_GEZ Start of run to annual avg taDb sbcO.cTaDbAvg31 FLOAT_GEZ Start of run to last 31 day avg taDb sbcO.cTaDbAvg14 FLOAT_GEZ Start of run to last 14 day avg taDb sbcO.cTaDbAvg07 FLOAT_GEZ Start of run to last 7 day avg taDb sbcO.cTGrnd FLOAT_GEZ Start of run to computed ground temp sbcO.rGrnd FLOAT_GEZ Start of run resistance = 1/(sum of above) (0 if sum=0) sbcO.rConGrnd FLOAT_GEZ Start of run <ul> <li>ground model implicit construction resistance, ft2-F/Btuh</li> <li>= approx resistance of construction film/carpet/slab/soil</li> <li>Caution: construction should be consistent with configuration</li> <li>implicit in coefficient values.</li> </ul> Name Type Variability Description/Comments fenModel choice:FENMODEL input time fenestration model: user input SHGC number input time rated SHGC of assembly fMult FLOAT_GEZ Start of run window frame/mullion multiplier (input or from GT) UNFRC UH_GZ input time overall U-factor evaluated under per NFRC heating conditions NGlz number input time # of glazings bare-glass assembly exShd choice:EXSHD input time exterior shade (ASHWAT only) inShd choice:INSHD input time interior shade (ditto) dirtLoss FLOAT_GEZ Start of run window dirt loss factor (input or from GT) <p>next 3 are input for surface, copied from surface of door or window</p> Name Type Variability Description/Comments sfExCnd choice:EXCND Start of run adjacent cond: adiabatic/ambient/specT/adjZn. sfExT TEMP Start of subhour outside temp if .sfExCnd==C_EXCNDCH_SPECT sfAdjZi TI input time zone for sfExCnd==ADJZN, or 0 for exterior surface/door/window. uI UH_GZ Start of run interior surf (air film) conductance. input. uC UH_GZ Start of run uval of construction, excl surfaces (air films). From CON, GT, or SFI.sfU user input. uX UH_GZ Start of run exterior surface (air film) conductance. input. Rf number Start of run <ul> <li>exterior roughness factor, re convection (new 10-10)</li> <li>default: windows=1, all others=2.17</li> </ul> grndRefl number Start of monthly-hourly ground reflectivity, default: wall: Top.grndRefl; door/win: owning wall. <p>view factors for diffuse (only) radiation so user can precompute shading effects of window overhang/fins</p> Name Type Variability Description/Comments vfSkyDf number Start of monthly-hourly sky view factor for diffuse solar, default .5 + .5*cos(tilt) vfGrndDf number Start of monthly-hourly ground view factor for diffuse solar, default .5 - .5*cos(tilt) <p>view factors re outside surface LW (thermal) radiant exchange</p> Name Type Variability Description/Comments vfSkyLW number Start of run sky view factor for long-wave radiation, hard-coded .5 + .5*cos( tilt) vfGrndLW number Start of run ground view factor for long-wave radiation, hard-coded .5 - .5*cos( tilt) Name Type Variability Description/Comments uval UH_GZ Start of run <ul> <li>Overall air-to-air conductance, Btuh/sf-F</li> <li>includes uX and uC surf cond</li> </ul> <ul> <li>*Nominal* U-factor etc including ASHRAE heating surface resistance</li> <li>documentation only!</li> </ul> Name Type Variability Description/Comments UNom UH_GZ Start of run nominal air-to-air U-factor, Btuh/sf-F UANom UA Start of run <ul> <li>area * xs_UNom, Btuh/F</li> <li>surface values, [0]=inside, [1]=outside</li> </ul> rSrfNom[index] number Array [2] Start of run surface resistance sf-F/Btuh hSrfNom[index] number Array [2] Start of run surface conductance (1/xs_rSrfNom), Btuh/sf-F Name Type Variability Description/Comments cFctr UH_GZ Start of run surface-to-surface conductance (not populated!) Name Type Variability Description/Comments iwshad TI Start of run 0 if none or subscr in WSHADRAT of overhang/fin info for a shaded window msi TI Start of run 0, or mass (MsR) subscript for CTMXWALL. tLrB[index] number Array [XSMXTLRB] End of hour <ul> <li>layer boundary temps re probes</li> <li>populated at end of hour</li> </ul> <p>solar gain distributions: [partly] based on SGDIST inputs</p> Name Type Variability Description/Comments nsgdist number Start of run <ul> <li>Number of SG distributions</li> <li>[SGDIST][sgdist] sgdist[ HSMXSGDIST]:</li> </ul> sgdist[index] Array [HSMXSGDIST] <ul> <li>=8 (2-95), cndefns.h. explicit solar gain distribs</li> <li>*r -&gt; min variation here: no members set at input time</li> <li>*nest [SGDIST][sgdist] sgdist -&gt; solar gain distribution (struct just above).  set: cncult3.cpp:cnuSgDist().</li> </ul> SGDIST Name Type Variability Description/Comments sgdist[index].targTy number Start of run <ul> <li>target type: define (cnguts.h)   basAnc &amp; member</li> <li>zone air                    SGDTTZNAIR    ZNR.qSgAir</li> <li>(zone check/results total   SGDTTZNTOT    ZNR.qSgTot/qSgTotSh (not here; gen'd in cgsolar 2-95)</li> <li>surface in/outside          SGDTSURFI/O</li> </ul> sgdist[index].targTi TI Start of run subscript of targeted entry in RAT above: *i in SGI; *nest merges variation flags. sgdist[index].FSO number Start of monthly-hourly frac of gain to target, shades open sgdist[index].FSC number Start of monthly-hourly frac of gain to target, shades closed (defaults to sgd_FSO) <ul> <li>surface/door/window</li> <li>.ownTi (base class) is zone for surface, or surface for window or door.</li> <li>CAUTION: ambiguous base</li> </ul> Name Type Variability Description/Comments sfClass number input time sfcNUL, sfcSURF, sfcDOOR, sfcWINDOW sfArea AREA_GZ input time surface: gross area, net in x.xs_area. sfU UH_GZ input time <ul> <li>uval input if no [sfCon][sfcon] given (excl surf films)</li> <li>[sfInH][sfinh], [sfExH][sfexh]: input/default to x.uI, x.uX.</li> </ul> sfCon TI input time <ul> <li>surface construction (optional)</li> <li>[sfInAbs][sfinabs], [sfExAbs][sfexabs]: input/default to x.xs_AbsSlr(0, 1)</li> <li>surface only</li> </ul> sfTy choice:OSTY constant wall/floor/ceil/[intmass1/2]: for input cking. sfFnd TI input time surface foundation object (floors only, optional) sfFndFloor TI input time surface foundation floor object (walls only, optional) sfExpPerim LEN input time <ul> <li>foundation floor exposed perimeter (floors only)</li> <li>window only</li> </ul> width LEN_GZ input time width and height: used to compute shading, height LEN_GZ input time ... and to compute area b4 mutliplier. mult FLOAT_GZ input time <ul> <li>area multiplier (for multiple identical windows)</li> <li>derived/internal</li> </ul> xi TI Start of run subscript in runtime XSRAT, to facilitate access by probers 1-92 msi TI Start of run <ul> <li>0 or MSRAT MsR subscr which will be used if delayed model</li> <li>(must be known eg for sgdists b4 MsR record can be made eg because net area must be known)</li> </ul>"},{"location":"probe-definitions/terminal/","title":"Terminal","text":"<p>title: terminal --- input, in addition to AUTOSIZE tuhcCaptRat, tuVfMxH, tuVfMxC, tuVfMn (these set FsAS field status flag)</p> Name Type Variability Description/Comments tuVfMxHC choice:DIFFSAME Start of phase autoSize tuVfMxH and -C SAME or (default) different. fxCapH FLOAT_GZ Start of phase capacity factor for autoSized heat coil (default 1.1 = 10% oversized) fxVfHC FLOAT_GZ Start of phase air flow factor for autoSized air flow (default 1.1 = 10% oversized) <p>setup</p> Name Type Variability Description/Comments asHcSame BOO Start of run TRUE to autoSize tuVfMxH and -C the same -- specified with \"tuVfMxHC = SAME\" asKVol BOO Start of run <ul> <li>TRUE to autoSize for constant volume -- specified with \"[AUTOSIZE][autosize] [tuVfMn][tuvfmn]\" (implies asHcSame).</li> <li>runtime</li> </ul> hcAs autoSizing data members substruct re tuhc.captRat -- local heat heat coil capacity. AUSZ    ---setup time members  Name Type Variability Description/Comments hcAs.az_active BOO Start of run TRUE iff autoSizing this member <ul> <li>---runtime</li> <li>set at initialization</li> </ul> Name Type Variability Description/Comments hcAs.az_a number End of subhour <ul> <li>1a size (load) -- max of warmup-converged design days</li> <li>pass 1 part b and pass 2: enlarge size if necess, real models.</li> </ul> hcAs.az_b number End of subhour <ul> <li>1b rated size plus increases during simulation incl pass 2 -- max of design days</li> <li>for pass 2 (increase size if necess, measure load, reduce oversize sizes) and for main sim load reports</li> </ul> hcAs.ldPk number End of subhour largest load this design day iteration or in main sim hcAs.ldPkAs number End of day autoSize peak load: max of warmup-converged design days hcAs.ldPkAs1 number End of day <ul> <li>autoSize pass 1 peak load, re reporting overloads of devices that only</li> <li>exceed limit on pass 1, eg supply fan when sizing terminals, 7-6-95.</li> </ul> hcAs.plrPk number End of subhour largest plr this design day iteration or in main sim hcAs.plrPkAs number End of day autoSize peak plr: max of warmup-converged design days hcAs.xPk number End of subhour rated size (*px) when plrPk set hcAs.xPkAs number End of day rated size (xPk) when plrPkAs set - use when reducing oversize in case x has changed. 6-97. hcAs.az_notDone BOO End of day <ul> <li>re convergence: nz says this AUSZ requires additional iterations</li> <li>set to 0 at beg of each iteration; incrd anywhere is calcs if not converged</li> <li>see also Top.tp_auszNotDone = overall notdone flag</li> </ul> vhAs .. re tuVfMxH -- air heat max flow AUSZ    ---setup time members  Name Type Variability Description/Comments vhAs.az_active BOO Start of run TRUE iff autoSizing this member <ul> <li>---runtime</li> <li>set at initialization</li> </ul> Name Type Variability Description/Comments vhAs.az_a number End of subhour <ul> <li>1a size (load) -- max of warmup-converged design days</li> <li>pass 1 part b and pass 2: enlarge size if necess, real models.</li> </ul> vhAs.az_b number End of subhour <ul> <li>1b rated size plus increases during simulation incl pass 2 -- max of design days</li> <li>for pass 2 (increase size if necess, measure load, reduce oversize sizes) and for main sim load reports</li> </ul> vhAs.ldPk number End of subhour largest load this design day iteration or in main sim vhAs.ldPkAs number End of day autoSize peak load: max of warmup-converged design days vhAs.ldPkAs1 number End of day <ul> <li>autoSize pass 1 peak load, re reporting overloads of devices that only</li> <li>exceed limit on pass 1, eg supply fan when sizing terminals, 7-6-95.</li> </ul> vhAs.plrPk number End of subhour largest plr this design day iteration or in main sim vhAs.plrPkAs number End of day autoSize peak plr: max of warmup-converged design days vhAs.xPk number End of subhour rated size (*px) when plrPk set vhAs.xPkAs number End of day rated size (xPk) when plrPkAs set - use when reducing oversize in case x has changed. 6-97. vhAs.az_notDone BOO End of day <ul> <li>re convergence: nz says this AUSZ requires additional iterations</li> <li>set to 0 at beg of each iteration; incrd anywhere is calcs if not converged</li> <li>see also Top.tp_auszNotDone = overall notdone flag</li> </ul> vcAs .. re tuVfMxC -- air cool max flow AUSZ    ---setup time members  Name Type Variability Description/Comments vcAs.az_active BOO Start of run TRUE iff autoSizing this member <ul> <li>---runtime</li> <li>set at initialization</li> </ul> Name Type Variability Description/Comments vcAs.az_a number End of subhour <ul> <li>1a size (load) -- max of warmup-converged design days</li> <li>pass 1 part b and pass 2: enlarge size if necess, real models.</li> </ul> vcAs.az_b number End of subhour <ul> <li>1b rated size plus increases during simulation incl pass 2 -- max of design days</li> <li>for pass 2 (increase size if necess, measure load, reduce oversize sizes) and for main sim load reports</li> </ul> vcAs.ldPk number End of subhour largest load this design day iteration or in main sim vcAs.ldPkAs number End of day autoSize peak load: max of warmup-converged design days vcAs.ldPkAs1 number End of day <ul> <li>autoSize pass 1 peak load, re reporting overloads of devices that only</li> <li>exceed limit on pass 1, eg supply fan when sizing terminals, 7-6-95.</li> </ul> vcAs.plrPk number End of subhour largest plr this design day iteration or in main sim vcAs.plrPkAs number End of day autoSize peak plr: max of warmup-converged design days vcAs.xPk number End of subhour rated size (*px) when plrPk set vcAs.xPkAs number End of day rated size (xPk) when plrPkAs set - use when reducing oversize in case x has changed. 6-97. vcAs.az_notDone BOO End of day <ul> <li>re convergence: nz says this AUSZ requires additional iterations</li> <li>set to 0 at beg of each iteration; incrd anywhere is calcs if not converged</li> <li>see also Top.tp_auszNotDone = overall notdone flag</li> </ul> qhPk number End of subhour peak values of qh and qc, for load reports and -PkAs's. qc negative. qcPk number End of subhour peak values of qh and qc, for load reports and -PkAs's. qc negative. qhPkAs number End of subhour <ul> <li>peak values for all autoSize converged design days, for size reports</li> <li>[tuVfMn][tuvfmn], -MxH, -C saved at entry to hvacIterSubhr for conditional backtracking while autoSizing</li> </ul> qcPkAs number End of subhour <ul> <li>peak values for all autoSize converged design days, for size reports</li> <li>[tuVfMn][tuvfmn], -MxH, -C saved at entry to hvacIterSubhr for conditional backtracking while autoSizing</li> </ul> bVfMn AFLOW_GEZ End of subhour flags TRUE if dT too low for autoSizing tuVfMxH, C (supply temp too close to zone temp, eg due to weak ah coil) bVfMxH AFLOW_GEZ End of subhour flags TRUE if dT too low for autoSizing tuVfMxH, C (supply temp too close to zone temp, eg due to weak ah coil) bVfMxC AFLOW_GEZ End of subhour flags TRUE if dT too low for autoSizing tuVfMxH, C (supply temp too close to zone temp, eg due to weak ah coil) dtLoHSh BOO End of subhour .. this subhr, set in cnztu.cpp:ztuMode, cleared in ztuAbs. dtLoCSh BOO End of subhour .. this subhr, set in cnztu.cpp:ztuMode, cleared in ztuAbs. aDtLoHSh BOO End of subhour .. this subhr, set at end of cnah1.cpp:ahCompute aDtLoCSh BOO End of subhour .. this subhr, set at end of cnah1.cpp:ahCompute aDtLoTem BOO End of subhour cnah2:antRatTs to ahCompute temp flag re aDtLoHSh, CSh dtLoH BOO End of subhour .. on this autoSizing design day iteration (or poss run) dtLoC BOO End of subhour .. on this autoSizing design day iteration (or poss run) dtLoHAs BOO End of day <ul> <li>.. on any converged pass 2 design day: invokes endAutosizing() message.</li> <li>runtime: results: see COIL tuhc.captRat_As, [tuVfMn][tuvfmn]/MxH/MxC_As, ditto _AsNov, below.</li> </ul> dtLoCAs BOO End of subhour <ul> <li>.. on any converged pass 2 design day: invokes endAutosizing() message.</li> <li>runtime: results: see COIL tuhc.captRat_As, [tuVfMn][tuvfmn]/MxH/MxC_As, ditto _AsNov, below.</li> </ul> <p>next 2: if neither given, no LH; if setpoint given, tstat-controlled; else if tuQMnLh given, constant power.</p> Name Type Variability Description/Comments tuTLh TEMP_GZ Start of hour local heating set point for tstat control. hourly. default: no tstat control. tuQMnLh POWER_GEZ Start of hour <ul> <li>desired continuous output (Btuh) if no setpoint, or minimum if [tuTLh][tutlh] given, hourly, default 0.</li> <li>rest of LH variables disallowed if neither of above given (no LH)</li> </ul> Name Type Variability Description/Comments tuQMxLh POWER_GEZ Start of hour <ul> <li>max desired power, subject to plant limits, Btuh, hourly, RQD if [tuTLh][tutlh] given, else disallowed.</li> <li>*r POWER_GEZ tuQDsLh    //   was intended to apportion power upon plant overload; instead, using [tuhcCaptRat][tuhccaptrat], 9-92.</li> <li>dflt was max([tuQMnLh][tuqmnlh],[tuQMxLh][tuqmxlh]) or RQD if any of those vbl &amp; [tuTLh][tutlh] or [tuQMnLh][tuqmnlh] given.</li> </ul> tuPriLh SI_GZ Start of phase priority if setpoint equals another, low #'s used first, dfl 100, disallowed if tuTLh not given. tuLhNeedsFlow choice:NOYES Start of phase <ul> <li>YES to disable lh when tu fan off and central fan off or VAV flow 0 (coil in terminal).</li> <li>NO if can heat without flow (baseboard).  default: NO.</li> </ul> Name Type Variability Description/Comments tuhc <ul> <li>subrecord for terminal coil, type ELECTRIC or HW.</li> <li>following terminal local heat inputs are in tuhc, and now more!:</li> <li>COILTYCH [tuhcType][tuhctype]   // choice of ELEC, HW (hot water), ... . constant.</li> <li>// default NONE if no local heat, else ELEC.</li> <li>//sched: no schedule input for terminal coil: always available, do scheduling with setpoints or min/max heat.</li> <li>POWER_GZ [tuhcCaptRat][tuhccaptrat]     // rated capacity (Btu/hr), constant, RQD.</li> <li>TI [tuhcMtr][tuhcmtr]               // MTR to which to charge energy use for non-plant-supported coil types.</li> </ul> HEATCOIL Name Type Variability Description/Comments tuhc.coilTy choice:COILTY Start of run <ul> <li>coil type choice according to application, as follows.  constant.</li> <li>air handler cool coil: NONE (default), ELEC, DX, CHW, ...</li> <li>air handler heat coil: NONE (default), ELEC, HW, GAS, OIL, AHP, ...</li> <li>terminal heat coil: NONE (default if no local heat), ELEC (dflt if local heat), HW,  GAS,OIL??...</li> <li>\"ELEC COOL COIL\" is a testing aid that cools with 100% efficiency &amp; capacity at any temp.</li> </ul> Name Type Variability Description/Comments tuhc.sched OFFAVAILVC Start of hour AVAIL when coil available, OFF when disabled, hourly, default AVAIL.   sensible cap'y: see COOLCOIL.capsRat.  Name Type Variability Description/Comments tuhc.captRat POWER_NZ End of subhour <ul> <li>*s *e for probes, cuz autoSize changes it. hourly for input purposes.</li> <li>total rated cap'y (Btuh), RQD except AHP, ?CHW, hrly vbl for furnaces, const for DX coil.</li> </ul> tuhc.captRat_As number Start of phase captRat determined by autoSizing, w less vbly for easier use in probes in main sim. 6-95. tuhc.captRat_AsNov number Start of phase <ul> <li>raw captRat determined by autoSizing, before overSize added, for reports/probes. 7-95</li> <li>cnausz.cpp code ASSUMES x, x_As, x_AsNov together for access thru one ptr. cuprobe.cpp's name search also requires together.</li> </ul> tuhc.bCaptRat number End of subhour start-subHr captRat, to undo size increases not in use as converged at end subhr (ahhc,ahcc). Name Type Variability Description/Comments tuhc.eirRat number Start of hour <ul> <li>rated load energy input ratio===heat input ratio===input/output===1/efficiency for DX,GAS,OIL at least.</li> <li>hrly vbl for GAS,OIL; constant for DX, .   effRat: see HEATCOIL.</li> </ul> Name Type Variability Description/Comments tuhc.mtri TI Start of phase MTR to which to charge coil main energy use, if not through a plant. Name Type Variability Description/Comments tuhc.aux POWER_GEZ Start of hour additional input energy used by auxiliary controls and devices. tuhc.auxMtri TI Start of phase Meter for auxiliary energy   coil runtime members  Name Type Variability Description/Comments tuhc.q number End of subhour average (not fan-on) output power level for subhour tuhc.qPr number End of subhour output at which coil's plant last computed, for call-flagging plant. set: cnhp.cpp. used: cncoil.cpp tuhc.p number End of subhour <ul> <li>input power level this subhour, from plant or to charge to meter (*subhrDur!).</li> <li>p = input from plant tentative 9-92; implemented for HW coils.</li> </ul> tuhc.plr number End of subhour current fan-on (or furnace-on) relative load (part load ratio) tuhc.plrAv number End of subhour current average relative load (plr * frFanOn) tuhc.eir number End of subhour energy input ratio: current input/output, fan on===average. Rob's addition, for probes, 5-92. tuhc.capMax number End of subhour maximum capacity this subhour, used to calculate tPossH/C. tuhc.pAux number End of subhour aux power this subhour <ul> <li>has all members of base class COIL, and...</li> <li>heat coil additional input members</li> <li>CAUTION: HEATCOIL::setup code used to assume .effRat was 1st derived class member, 7-92.</li> <li>for GAS or OIL furnace \"coil\" in ah</li> </ul> Name Type Variability Description/Comments tuhc.effRat FRAC_GZ Start of phase efficiency @ rated load: alternate eir input, converted into eirRat in setup. tuhc.pyEi <ul> <li>cubic polynomial coefficients to correct full-load energy input for part load ratio</li> <li>for GAS or OIL heat coil.  Default (per DOE2): .01861, 1.094209, -.112819, 0.</li> </ul> PYCUBIC Name Type Variability Description/Comments tuhc.pyEi.k[index] number Array [5] Start of phase <ul> <li>FLOAT k[5].  One extra member needed as terminator by cul.cpp array input logic, 5-92.</li> <li>possible future setup optimizations: 1) select ptr to fcn that does not compute terms whose k is 0;</li> <li>2) precalculate constants to compute in form  ((x*k[3] + k[2])*x + k[1])*x + k[0]</li> </ul> tuhc.stackEffect number Start of hour <ul> <li>fraction of unused capacity that must be used (increasing plr) to make up for increased</li> <li>infiltration due to hot stack when (indoor) furnace runs but not continuously.  Default 0.</li> <li>Expect function of Top.tDbO.</li> <li>for HW coil</li> </ul> tuhc.hpi TI Start of phase <ul> <li>subscript of [HEATPLANT][heatplant] serving HW coil</li> <li>heat coil setup time members</li> <li>for HW coil</li> </ul> tuhc.nxTu4hp TI Start of run TuB subscr of next TU with HW coil on same HEATPLANT. 1st is HEATPLANT.tu1. tuhc.nxAh4hp TI Start of run <ul> <li>AhB subscr of next AH with HW coil on same [HEATPLANT][heatplant]. 1st is [HEATPLANT][heatplant].ah1.</li> <li>heat coil runtime members</li> <li>for GAS or OIL furnace \"coil\" in ah</li> </ul> tuhc.flueLoss number End of subhour <ul> <li>part-load flue loss this subhour, GAS and OIL only</li> <li>for HW or AHP coil</li> </ul> tuhc.qWant number End of subhour <ul> <li>HW:  desired output===input, doHWCoil to hpCompute, used in determining capF.</li> <li>AHP: desired output, doAhpHeatCoil to doAhpHeat</li> <li>*s *e POWER q           // current output power: is a COIL member.</li> <li>*s *e POWER qPr     // output at which coil's plant last computed, for change-flagged plant: COIL member</li> </ul> <ul> <li>next 3 determine capability: heat setpoint given--&gt;tstat ctrl'd heat cap;  cool setpoint given--&gt;tstat ctrl'd cool cap;</li> <li>neither sp given but min flow given--&gt;continuous output at that flow regardless of zone temp.</li> </ul> Name Type Variability Description/Comments tuTH TEMP_GZ Start of hour air heating set point (F). hourly. default: no tstat-controlled air heating. tuTC TEMP_GZ Start of hour air cooling set point (F). hourly. default: no tstat-controlled air cooling. tuVfMn AFLOW_GEZ End of subhour min flow (cfm actual air); if no setpoints given, this is \"specified output\".  hourly, dlf 0. tuVfMn_As AFLOW_GEZ Start of phase .. as autoSized (for constant volume), less variable, for probing. tuVfMn_AsNov AFLOW_GEZ Start of phase <ul> <li>.. raw autoSized value before oversize added, for possible probes.</li> <li>cnausz.cpp code ASSUMES x, x_As, x_AsNov together for access thru one ptr. cuprobe.cpp's name search also requires together.</li> <li>if none of [tuTH][tuth]/[tuTC][tutc]/[tuVfMn][tuvfmn] given, rest of air heat/cool variables are disallowed.</li> </ul> Name Type Variability Description/Comments ai TI input time 0 or AH ss (subscript) for air handler serving tu (input as air handler name). RQD if sp or Mn given. Name Type Variability Description/Comments tuVfMxH AFLOW_GEZ End of subhour <ul> <li>*s *e cuz autoSize changes it... inputtable hourly. 7-20-95.</li> <li>heating max flow (cfm actual air) b4 ah limits, hourly, RQD if TuTH given else disallowed</li> </ul> tuVfMxH_As AFLOW_GEZ Start of phase .. as determined by autoSizing, less variable, for probing. tuVfMxH_AsNov AFLOW_GEZ Start of phase <ul> <li>.. raw autoSizing result before oversize added, for report/probes.</li> <li>cnausz.cpp code ASSUMES x, x_As, x_AsNov together for access thru one ptr. cuprobe.cpp's name search also requires together.</li> </ul> tuVfMxC AFLOW_GEZ End of subhour cooling max flow (cfm actual air) b4 ah limits, hourly, RQD if TuTC given else disallowed tuVfMxC_As AFLOW_GEZ Start of phase .. as determined by autoSizing, less variable, for probing. tuVfMxC_AsNov AFLOW_GEZ Start of phase <ul> <li>.. raw autoSizing result before oversize added, for report/probes.</li> <li>cnausz.cpp code ASSUMES x, x_As, x_AsNov together for access thru one ptr. cuprobe.cpp's name search also requires together.</li> </ul> Name Type Variability Description/Comments tuVfDs AFLOW_GZ Start of run <ul> <li>design flow (cfm actual air), constant, to apportion flow when ah fan overloads.</li> <li>default larger of [tuVfMxH][tuvfmxh], [tuVfMxC][tuvfmxc], [tuVfMn][tuvfmn],</li> <li>or RQD if vbl expr given for any of those and [tuTH][tuth], [tuTC][tutc], or [tuVfMn][tuvfmn] given.</li> </ul> Name Type Variability Description/Comments tuPriH SI_GZ Start of phase heat setpoint priority: lowest # used first when equal setpoints in zone.  const. default: 1. tuPriC SI_GZ Start of phase cool likewise.      ... RQD if corress sp given, else disallowed. Name Type Variability Description/Comments tuSRLeak number Start of phase <ul> <li>leakage 0-.5 of supply air to return, increasing supply vol and return temp.  constant; dfl .05.</li> <li>note this is fraction of current cfm, whereas ah leak (before VAV dampers) is fraction max cfm.</li> <li>add [tfanOffLeak][tfanoffleak] to this if terminal has fan that is not running.</li> </ul> Name Type Variability Description/Comments tuSRLoss number Start of run <ul> <li>supply air to return plenum heat loss as a fraction 0 - .5 of supply air to return air</li> <li>temperature difference, constant, default .1.  Not allowed if return is ducted.</li> </ul> Name Type Variability Description/Comments tfanSch TFANSCHVC Start of run <ul> <li>terminal fan schedule, choice of OFF, ON, HEATING, or VAV, hourly, RQD if [tfanType][tfantype] not NONE.</li> <li>HEATING:  fan ON if local heat output is non-0</li> <li>VAV: fan ON if central fan ON or doing setback/setup heat and ssCtrl is ZONE_HEAT or BOTH.</li> <li>series fan runs whenever ON.</li> <li>parallel fan runs enough to keep terminal cfm at terminal minimum + fan cfm -- makes up</li> <li>any shortage in air thru damper.  Code as though variable speed (tho usually cycles).</li> <li>example (rob's) of need for variability: central system cools in daytime but does setback</li> <li>heat at night: tfanSch might be HEATING in daytime and VAV at night.</li> </ul> Name Type Variability Description/Comments tfanOffLeak number Start of run backdraft leakage when fan off, 0 to .25 of tfanVfDs, constant, dfl .1, or 0 if no fan. Name Type Variability Description/Comments tfan <ul> <li>terminal fan FAN subrecord.  If tfan.fanType is NONE, other tfan inputs disallowed.</li> <li>the following terminal inputs are in tfan:</li> <li>FANTYCH [tfanType][tfantype]        // NONE (default), SERIES, or PARALLEL.  constant.  Fan source is return air.</li> <li>// parallel: fan runs when VAV flow low; tfan cfm is added to VAV cfm to get zone cfm.</li> <li>// series always runs; if VAV cfm &lt; tfan cfm, rest comes from RA.</li> <li>AFLOW_GZ [tfanVfDs][tfanvfds]       // terminal fan design flow (cfm actual air), RQD if fan present.</li> <li>// or default to terminal heat design flow? ??</li> <li>PRESAIR_GZ [tfanPress][tfanpress]   // tu fan external static pressure, .05 to 1.0 \"H2O, constant, default .3.</li> <li>FRAC [tfanEff][tfaneff]     // tu fan/motor/drive combinded efficiency, constant, default .08. .08!?</li> <li>MTR tfanMtri        // MTR to which energy use is charged 4-11-92</li> <li>PYCUBIC2 [tfanCurvePy][tfancurvepy] // part-load energy consumption curve coefficients 6-92, default linear</li> <li>// other fan subrecord members for terminal fan are internally set as follows:</li> <li>//  vfMxF: 1.0;  motPos: INFLO;  shaftPwr: default from eff;</li> <li>//  motEff: 1.0: needn't differentiate fan eff from motEff under INFLO.</li> </ul> FAN Name Type Variability Description/Comments tfan.fanTy choice:FANTY Start of phase <ul> <li>fan position choice, according to application as follows; constant.</li> <li>air handler supply:  DRAWTHRU (default) or BLOWTHRU</li> <li>ah return/relief:  NONE (default), RETURN, or RELIEF</li> <li>terminal:  NONE (default), SERIES, or PARALLEL</li> <li>zone exhaust fan:  NONE or EXHAUST (no types, just whether exists)</li> <li>AirNet ([IZXFER][izxfer]):    ditto</li> </ul> tfan.vfDs AFLOW_GZ End of subhour design volumetric flow (cfm actual air).  constant, RQD except as noted. *s cuz varies when autoSizing. tfan.vfDs_As AFLOW Start of phase autoSized ditto for ah sfan and rfan for naming consistency. 6-95. tfan.vfDs_AsNov AFLOW Start of phase <ul> <li>raw autoSized ditto b4 overSize added, for report/probes. 7-95.</li> <li>cnausz.cpp code ASSUMES x, x_As, x_AsNov together for access thru one ptr. cuprobe.cpp's name search also requires together.</li> </ul> tfan.vfMxF number Start of phase <ul> <li>factor by which fan flow will exceed vfDs (at reduced pressure). default 1.3. constant.</li> <li>Error if &lt; 1.0; typically &lt;= 1.5.</li> </ul> Name Type Variability Description/Comments tfan.press PRESAIR_GEZ Start of run <ul> <li>system design pressure, \"H2O (inches of water), constant, used in defaulting power / efficiency.</li> <li>default: supply 3, r/r .75, tu .3, zx ???.</li> <li>0 allowed 5-1-92 to eliminate fan heat for test/calibration purposes.</li> </ul>   only one of eff and shaftPwr may be given:  Name Type Variability Description/Comments tfan.eff FRAC_GZ Start of run <ul> <li>fan (hydraulic) efficiency at vfDs and press (any temp), constant,</li> <li>default from power if given, else .65.  (1-eff) of fan shaft power is converted to heat in airstream.</li> </ul> tfan.shaftPwr BHP_GZ Start of run <ul> <li>fan shaft power at vfDs and press (any temp). constant. default: from eff</li> <li>Btuh internally, entered in BHP (user name 'shaftBhp') (cvpak converts).</li> <li>^^^^make user name 'shaftBhp'.  field type name??</li> </ul> tfan.elecPwr FLOAT_GZ Start of run <ul> <li>motor input power, W/cfm (based on vfDs); shaftPwr and elecPwr cannot both be</li> <li>input</li> </ul> Name Type Variability Description/Comments tfan.motTy choice:MOTTY Start of run <ul> <li>motor type (C_MOTTYCH_PSC or C_MOTTYCH_BPM)</li> <li>[RSYS][rsys] only minimal use 4-12, could effect defaults</li> </ul> Name Type Variability Description/Comments tfan.motEff FRAC_GZ Start of phase motor/drive efficiency, constant, default .9. Name Type Variability Description/Comments tfan.motPos choice:MOTPOS Start of phase <ul> <li>motor/drive position: choice of INFLO (default), INRETURN, EXTERNAL.  constant.</li> <li>INRETURN is for supply fans only and will be deferred/omitted if difficult</li> <li>chip per taylor 3-4-92).</li> </ul> Name Type Variability Description/Comments tfan.curvePy fan part-load energy consumption curve cubic polynomial coefficients with x0 PYCUBIC2 Name Type Variability Description/Comments tfan.curvePy.k[index] number Array [6] Start of phase FLOAT k[6]. [0..3] are coeff, [4] is minimum x, [5] is terminator needed by cul.cpp. Name Type Variability Description/Comments tfan.mtri TI input time subscript of meter (MTR) to which energy consumption is charged tfan.endUse choice:ENDUSE Start of phase <ul> <li>end use to which energy consumption is charged</li> <li>not used for all fans (many implicitly default to \"fan\")</li> </ul> Name Type Variability Description/Comments tfan.ausz BOO Start of run <ul> <li>non-0 if fan being autoSized (AH sfan, rfan): input contained [AUTOSIZE][autosize] _fanVfDs. 7-1-95.</li> <li>see also AH::fanAs, asRfan, asFlow. 7-1-95. */</li> </ul> <ul> <li>FAN setup time members, set by cnfan.cpp:FAN::setup. May be resetup during autoSize run.</li> <li>also cMx may be init by setup, to be non-0.</li> </ul> Name Type Variability Description/Comments tfan.outPower number Start of subhour <ul> <li>motor output power (work done by fan), member 7-95 for one setup check in cncult5.cpp</li> <li>inPower = shaftPwr/motEff  is computed as needed.</li> </ul> tfan.airPower number Start of subhour <ul> <li>fan heat to air (Btuh) at vfDs (&amp; pressure): work done by fan, plus motor/drive inefficiency if in flow.</li> <li>Note work done by fan is modelled as HEAT ADDED TO AIR AT FAN per Chip/Niles (3-92, undocumented)</li> <li>heat to air around motor (in return air etc) at design flow is: (inPower - airPower). this is 0 if motor in air flow.</li> </ul>   FAN runtime members, set by cnah.cpp:FAN::pute( cFlow, temp)  Name Type Variability Description/Comments tfan.cMx CFLOW End of subhour max heat cap flow (Btuh/F) at curr air temp &amp; run press &amp; ref w: .vfMx * air vsh * 60 (min/hr) tfan.c CFLOW End of subhour current average flow in heat cap units (Btuh/F): input saved for probing by last call to FAN::pute() tfan.t TEMP End of subhour current air temp, input saved ditto, used in converting BtuF/F to cfm tfan.frOn number End of subhour <ul> <li>fraction of time fan is on, saved input</li> <li>made local to pute()to save members 10-92:</li> <li>*s *e FRAC relFlow  // fraction of design flow</li> <li>*s *e FRAC relLoad  // fraction of full load per part load curve for fan type (1.0 if over design flow: assume pressure drops)</li> </ul> tfan.p number End of subhour (motor) power consumption for subhour -- inPower * relLoad.  *subhrDur for meter. tfan.q number End of subhour heat (power) to air this subhour: airPower * relLoad.  Member needed in addition to c and dT?? tfan.dT TEMPDIFF End of subhour temp difference due to fan: q/c tfan.qAround number End of subhour heat to air around motor, if not in air flow, for use re supply fan motor in return air <p>TERMINAL SETUP TIME variables</p> Name Type Variability Description/Comments nxTu4z TI Start of run chain: 0 or ss (subscript) of next TU in zone chain. head is ZNR.tu1. nxTu4a TI Start of run chain: 0 or ss (subscript) of next TU in air handler chain. head is AH.tu1. Name Type Variability Description/Comments xiLh TI Start of run subscript of ZHX for terminal's local heat capability xiArH TI Start of run ss of ZHX for cmSo air heat/cool or cmStH air heat capability xiArC TI Start of run ss of ZHX for tu's cmStC air cool, if any <p>terminal capability existence / ctrl method flags, inferred from inputs:</p> Name Type Variability Description/Comments cmLh TCCM Start of run local heat: cmNONE=0; cmStxx: tstat-controlled (setpoint given); or cmSo (only output/flow given). cmAr TCCM Start of run air heat and cool: cmNONE=0,cmSo=1,cmStH=2,cmStC=4,cmStBOTH=6. <p>TERMINAL RUNTIME variables for ZN/ZN2 control method interaction with air handler</p> Name Type Variability Description/Comments ctrlsAi TI Start of run <ul> <li>ss of ah ctrl'd by this tu under ZN/ZN2 control method, this hour (setup time).</li> <li>CAUTION: verify ah-&gt;[ahTsSp][ahtssp]==ZN or ZN2 -- may vary.</li> </ul> wantMd AHMODE End of subhour terminal request to ctrl'd ah: HEATING, COOLING, OFF.  set in TU::estimate, ztuCompute, AH::wzczxxxx. <p>terminal runtime variables -- mostly inputs to terminal code</p> Name Type Variability Description/Comments lhMn DBL End of subhour <ul> <li>POWER</li> <li>min local Q this subhour: [tuQMnLh][tuqmnlh], adjusted for plant capacity (reduced if overloaded) (Btuh)</li> </ul> lhMx DBL End of subhour <ul> <li>POWER</li> <li>local heat maximum Q this subhour: [tuQMxLh][tuqmxlh] adjusted for plant capacity (Btuh)</li> </ul> lhMxMx DBL End of subhour <ul> <li>POWER</li> <li>max lhMx re autoSizing user input problem diagnosis in cnztu.cpp</li> <li>cMn,cMxH,cMxC are [tuVfMn][tuvfmn],-MxH,-C conv'd to heat cap flow rate @ curr temp/press &amp; adjusted for current ah capacity (fanF).</li> </ul> cMn DBL End of subhour <ul> <li>CFLOW</li> <li>specified or min or autoSized air flow this subhour (Btuh/F)</li> </ul> cMxH DBL End of subhour <ul> <li>CFLOW</li> <li>air heat (cmStH) max flow this subhour (Btuh/F)</li> </ul> cMxC DBL End of subhour <ul> <li>CFLOW</li> <li>air cool (cmStC) max flow this subhour (Btuh/F)</li> </ul> <p>terminal runtime variables set within terminal code</p> Name Type Variability Description/Comments useLh TCUSE End of subhour local heat use this subhour: uNONE(0)/uSo/uMn/uStH/uMxH. useAr TCUSE End of subhour air cool/heat use this subhour, same plus uStC/uMxC. qLhWant DBL End of subhour <ul> <li>POWER</li> <li>desired local heat: value &gt; tuhc.q invokes plant off check in tuEndSubhr, 9-25-92.</li> </ul> <ul> <li>terminal runtime variables -- OUTPUTS of terminal module, and some AH working storage</li> <li>actual local heat output (Btuh) (former .qLh, 9-92) is in tuhc.q, 0 if required plant off or flow not present.</li> </ul> Name Type Variability Description/Comments cv DBL End of subhour <ul> <li>CFLOW</li> <li>actual heat cap flow rate at vav damper, current subHr (Btuh/F), official ztuCompute copy.</li> </ul> cz DBL End of subhour <ul> <li>CFLOW</li> <li>zone heat cap flow rate, current subHr (Btuh/F): cv less leaks.  for probing.</li> </ul> aCv DBL End of subhour <ul> <li>CFLOW</li> <li>working copy of cv for air handlers to use/modify then possibly abandon</li> <li>ah working cz: is computed by function aCz() (above) as required</li> </ul> <p>terminal fan runtime variables</p> Name Type Variability Description/Comments tfanRunning BOO End of subhour <ul> <li>TRUE if terminal fan running this subhour (no backflow).</li> <li>ztuCompute(?) must set when tfan implemented. NO CODE YET SETS THIS TRUE as of 5-92.</li> </ul> tfanBkC DBL End of subhour <ul> <li>CFLOW</li> <li>terminal fan backflow (supply air to return or plenum) when fan not running:</li> <li>tfan.vfDs*[tfanOffLeak][tfanoffleak], converted to heat cap units @ current supply temp.</li> <li>0 if no terminal fan; user must use 0 if tfanRunning.</li> <li>set by AIR HANDLER in AH:ahVshNLims, 5-92.</li> </ul>"},{"location":"probe-definitions/top/","title":"Top","text":"<p>title: top --- TOP: user inputs (&amp; some derived): overall control</p> Name Type Variability Description/Comments bAutoSizeCmd BOO input time <ul> <li>non-0 if any [AUTOSIZE][autosize] commands seen in input, set via arg to cul() from cse.cpp. 6-95.</li> <li>both FALSE for input check only:</li> </ul> chAutoSize choice:NOYES Start of run whether to do autosizing, default per bAutoSizeCmd chSimulate choice:NOYES input time <ul> <li>whether to do main simulation, default TRUE, can input FALSE for autosizing only. 6-95.</li> <li>runtime phase: see .autoSizing below.</li> </ul> begDay DOY input time 1st 1-based Julian day of year of run endDay DOY input time last ditto, inclusive nDays number Start of run derived: # days in run jan1DoW choice:DOW input time January 1 day of week, sun=1  SUBTRACT 1 FOR MOST INTERNAL USES year number Start of run derived: tdpak generic non-leap year, -1 = jan 1 is Monday ... -7 = jan 1 is Sunday. wuDays SI_GEZ input time number of warmUp days nSubSteps SI_GZ input time <ul> <li># subhours per hour, determines subhour duration.</li> <li>typically 4 for (old) ZNMODELCH_CNE (combined coefficent) models</li> <li>5 - 30 for convective/radiant models</li> <li>some models require substep duration to be integral minutes (e.g. HPWH)</li> <li>see tp_SetCheckTimesteps()</li> </ul> <p>TOP: inputs: location/air properties/ground properties</p> Name Type Variability Description/Comments wfName CULSTR Start of phase weather file path string TDVfName CULSTR Start of phase TDV (time dependent value) file path string elevation LEN Start of run site elevation (for determining air density) (ft). defaults from weather file 1-95. refTemp TEMP Start of phase temp for computing the hum ratio (w) used in air-density calculations, default 70 F refRH FRAC_GZ Start of phase relative humidity (as fraction) ditto, default .6 (60%). <p>ground properties</p> Name Type Variability Description/Comments grndRefl number Start of monthly-hourly <ul> <li>ground surface reflectivity, re solar gain.</li> <li>dflt .2. Used: cgsolar.cpp and Kiva. [wnGrndRefl][wngrndrefl] Overrides.</li> </ul> grndEmit number input time ground surface emittance, re long wave exchange in Kiva. dflt .8. grndRf number input time ground surface roughnes, ft, re exterior convection in Kiva. dflt 0.1. soilDiff FLOAT_GZ input time <ul> <li>local soil diffusivity, ft2/hr, re annual deep ground temp cycle estimation</li> <li>see CalcGroundTemp().  dflt=0.025.</li> </ul> soilCond FLOAT_GZ input time local soil conductivity, Btuh-ft/ft2-F, re Kiva calcs.  dflt=1.0. soilSpHt FLOAT_GZ input time local soil specific heat, Btu/lb-F, re Kiva calcs.  dflt=0.1. soilDens FLOAT_GZ input time local soil density, lb/ft3, re Kiva calcs.  dflt=115. farFieldWidth FLOAT_GZ input time far-field boundary distance, ft, re Kiva calcs.  dflt=130. deepGrndCnd choice:DG input time <ul> <li>deep ground boundary type</li> <li>C_DGCH_WATERTABLE: Water Table</li> <li>C_DGCH_ZEROFLUX: Zero-Flux (default)</li> </ul> deepGrndDepth FLOAT_GZ input time deep-ground boundary distance, ft, re Kiva calcs.  dflt=130. deepGrndT number input time deep-ground boundary temperature, F, re Kiva calcs.  dflt=annual average db. <p>TOP: inputs: check tolerances and precisions</p> Name Type Variability Description/Comments tol FLOAT_GZ input time (relative) tolerance used in many hvac calculations, default .001f or as changed humTolF FRAC_GZ input time w change to consider as important as 1F temp re convergedness ebTolMon FLOAT_GZ input time monthly tolerance ebTolDay FLOAT_GZ input time daily .. ebTolHour FLOAT_GZ input time hourly .. ebTolSubhr FLOAT_GZ input time subhourly .. unMetTzTol FLOAT_GEZ input time unmet zone air temp tolerance, F (default = 1 F) unMetTzTolWarnHrs FLOAT_GEZ input time <ul> <li>unmet warning threshold, hr (default 150)</li> <li>Warning(s) issued when zone heating or cooling unmet tzTol hrs exceed threshold</li> </ul> <p>TOP: inputs: Kiva calculation settings</p> Name Type Variability Description/Comments grndMinDim FLOAT_GZ input time minimum cell dimension in Kiva, ft, default .066f grndMaxGrthCoeff FLOAT_GZ input time maximum cell growth in Kiva, default 1.5f grndTimeStep choice:TS input time <ul> <li>Kiva time step</li> <li>C_TSCH_H: Hourly (default)</li> <li>C_TSCH_SH: Sub-hourly</li> </ul> <ul> <li>[TOP][top-members]: inputs: ASHWAT calculation trigger thresholds</li> <li>full ASHWAT calcs are performed when *any* of the following changes</li> <li>by the the trigger amount</li> <li>else prior results used</li> </ul> Name Type Variability Description/Comments AWTrigT FLOAT_GZ input time inside or outside environmental temperature, F (default = 1) AWTrigSlr FLOAT_GZ input time incident solar, fraction (default = .05) AWTrigH FLOAT_GZ input time total surface coefficient (conv+rad), fraction (default=.1) <ul> <li>[TOP][top-members]: inputs: AirNet convergence and error criteria</li> <li>a zone is deem converged iff</li> <li>AMFnet &lt;= max( tolAbs, tolRel*AMFTot)</li> </ul> Name Type Variability Description/Comments ANTolAbs FLOAT_GZ input time absolute tolerance, lbm/sec, dflt=.00125 (about 1 cfm) ANTolRel FLOAT_GZ input time relative tolerance, dflt = .0001 ANPressWarn FLOAT_GZ input time AirNet pressure that triggers a warning, lb/ft2 ANPressErr FLOAT_GZ input time AirNet pressure that triggers a run-ending error, lb/ft2 <p>TOP: inputs: other</p> Name Type Variability Description/Comments bldgAzm ANGLE input time angle to add to all zone/surface azms skyModel choice:SKYMOD input time sky model: C_.._ISO or _ANISO skyModelLW choice:SKYMODLW input time long-wave sky model exShadeModel choice:EXSHMODEL input time <ul> <li>exterior shading model (other than overhang/fins)</li> <li>C_EXSHMODELCH_NONE: none ([SHADEX][shadex] etc ignored)</li> <li>C_EXSHMODELCH_PENUMBRA: use Penumbra GPU calcs</li> </ul> slrInterpMeth SLRINTERPMETH input time solar interpolation method Name Type Variability Description/Comments humMeth choice:HUMTH input time humidity calculation method: Rob (w = wa/wb) or Phil (central difference), 6-92 dflExH UH_GZ input time default ext (air film) cond for os &amp; gz. 2-91 workDayMask USI input time <ul> <li>mask with bits set for \"work\" days, clear for \"non-work\" days, default Mon..Fri, 5-95.</li> <li>For $isWorkDay, and passed thru binres file to OPK eg for ET.</li> <li>bits: Sun=1,Mon=2,Tu=4,W=8,Th=16,F=32,Sat=64,holidays=128,</li> <li>heatDsnDay=256, coolDsnDays=512 (but no autosizing data in bin res file yet 6-95).</li> <li>CAUTION: hard-coded encoding MATCHES cncult.cpp default, ResfH.[workDayMask][workdaymask],</li> <li>brfr.h:getWorkDayMask() default, opk\\progr.h/cpp:ProGrSub::[workDayMask][workdaymask].</li> </ul> DT choice:NOYES input time YES (default) to enable daylight saving time DTBegDay DOY Start of run Daylight saving start day, 1-365, default 1st Sun (Sun after 1st Sat?) in April DTEndDay DOY Start of run Daylight saving end day, 1-365, defaulted by cncult2.cpp code to last Sun in October <ul> <li>wind speed adjustment, see cgwthr.cpp</li> <li>appl sees Top.[windF][windf] * max( wthrfile.wndSpd, Top.[windSpeedMin][windspeedmin]);</li> </ul> Name Type Variability Description/Comments windSpeedMin FLOAT_GEZ input time minimum, mph (default=.5) windF FLOAT_GEZ input time factor (default=1) terrainClass number input time terrain class (1-5) re wind speed adjustment radBeamF FLOAT_GEZ input time Beam radiation fctr. appl sees ANISO( ) * radBeamF. cgwthr.cpp. radDiffF FLOAT_GEZ input time Diffuse radiation fctr. appl sees ANISO( ) * radDiffF. ventAvail VENTAVAILVC Start of hour <ul> <li>all-zone ventilation availability (default=C_VENTAVAILCH_WHOLEBLDG)</li> <li>C_VENTAVAILCH_NONE: none</li> <li>C_VENTAVAILCH_WHOLEBLDG: airnet windows / fans</li> <li>C_VENTAVAILCH_ZONAL: airnet windows / fans (controlled by zone)</li> <li>C_VENTAVAILCH_RSYSOAV: [RSYS][rsys] outside air vent (central mechanical)</li> </ul> Name Type Variability Description/Comments fVent number End of subhour <ul> <li>consensus whole building vent fraction (if not RSYSOAV)</li> <li>= fraction of full vent flow to use</li> <li>determined by zone that wants the least vent</li> <li>or -1 for zonal vent control</li> </ul> Name Type Variability Description/Comments verbose number Start of phase <ul> <li>screen messages: autosizing: 0 none, 1 some (dflt?), 2-5 more</li> <li>-1: suppress progress messages (\"Input\", \"Warmup\", etc.) via setScreenQuiet()</li> </ul> dbgPrintMask number Start of hour debug print mask, controls DbPrintf() etc., schedulable via std capabilities dbgPrintMaskC number input time debug print mask constant portion (value known during setup) dbgFlag number Start of subhour debug flag value for passing testing info to code; normally no effect doCoverage choice:NOYES input time <ul> <li>track expression processing code coverage / report to log</li> <li>(testing/development aid)</li> </ul> <p>TOP: inputs: autoSizing</p> Name Type Variability Description/Comments auszTol FRAC_GZ input time autosizing result tolerance, dfl .005 heatDsTDbO TEMP Start of hour <ul> <li>heat design outdoor temp, dfl per ET1 wthr file hdr.</li> <li>Impl may be incomplete for non-constant.</li> </ul> heatDsTWbO TEMP Start of hour heating design outdoor wetbulb temp, dfl for 70% RH @ heatDsTDbO. coolDsMo[index] number Array [13] input time SI[13] cooling design month(s) 1-12 + 0 terminator. Default per ET1 wthr file hdr. coolDsDay[index] DOY Array [13] input time DOY[13] design day(s) read from weather file + 0 terminator coolDsCond[index] TI Array [13] input time TI[ 13] DESCOND idx(s) + 0 terminator <p>TOP: inputs: reporting and exporting</p> Name Type Variability Description/Comments exePath CULSTR Start of run full path to current .exe exeInfo CULSTR Start of run <ul> <li>info about current .exe (from header)</li> <li>build timestame, linker version, code size</li> </ul> exeCodeSize number Start of run code size, bytes (from exe header) progVersion CULSTR Start of run program version identifier as string (for probing); set from ::ProgVersion HPWHVersion CULSTR Start of run Ecotope HPWH (heat pump water heater) model version cmdLineArgs CULSTR Start of run <ul> <li>command line args for current input file</li> <li>updated during session if multiple input files specified on command line</li> </ul> runSerial number input time run #, 000-999, per (future 11-91) status file (meanwhile, see cnguts:cnRunSerial 7-92). runTitle CULSTR input time user text for report titles, footers, export title 11-22-91. runDateTime CULSTR Start of run <ul> <li>run date &amp; time string, set by cncult2.cpp:topStarPrf2(), used in reports &amp; bin res file, 9-94.</li> <li>inputs for binary results files, for NREL, rob 11-93.  *r cuz settable from cmd line switches.</li> </ul> brs choice:NOYES Start of run YES to generate basic binary results file, default NO. From input file or cmd line switch. brHrly choice:NOYES Start of run <ul> <li>YES to generate hourly binary results file, default NO. From input file or cmd line.</li> <li>brf and brfHrly are intended to be independent, except monthly-hourly averages</li> <li>in basic file may only be computed if brfHrly is also on, 11-20-93.</li> </ul> brFileName CULSTR input time <ul> <li>file name for binary results, extension .brs and/or .bhr added. default: input file name.</li> <li>settable in DLL version only, only by command line switches. Default is file output (if brs/brHrly) only.</li> </ul> brMem BOO Start of run Put binary results in Windows global memory and return handles; do not write file. brDiscardable BOO Start of run Put binary results in discardable memory as well as file, return handles. overrides brfMem. <p>TOP: inputs: report page formatting</p> Name Type Variability Description/Comments repHdrL CULSTR input time user-spec'd text for left end of report header line repHdrR CULSTR input time .. right repCpl number input time report characters per line repLpp number input time total number of lines per page (paper size) repTopM number input time top margin in lines; # newlines written above header repBotM number input time bottom margin in lines; not actually output repTestPfx CULSTR input time <ul> <li>prefix pre-pended to e.g. footer lines re hiding lines re automated testing</li> <li>\"\" for normal runs, \"!\" re 3-2010 test framework.  new 3-28-10</li> </ul> <p>TOP: setup: exterior (non-overhang/fin) shading</p> Name Type Variability Description/Comments exshNShade number Start of run # of shading surfaces in model exshNRec number Start of run # of receiving surfaces in model (may also be shading) <p>TOP: setup: location info from weather file. Uses include solar calculations. 1-95.</p> Name Type Variability Description/Comments latitude number Start of run degrees north longitude number Start of run degress west timeZone number Start of run <ul> <li>hours west (fraction ok)</li> <li>also [elevation][elevation] is above (user-inputtable).</li> </ul> <ul> <li>[TOP][top-members]: setup: air properties approximated @[elevation][elevation], [refTemp][reftemp], [refRH][refrh], set in cucult2:topPsychro().</li> <li>UNITS/FIELDS needed for floats for proper probe behavior ***</li> </ul> Name Type Variability Description/Comments presAtm number Start of run <ul> <li>nominal atmospheric pressure at Top.[elevation][elevation] (in Hg)</li> <li>(constant for simulation)</li> </ul> refW HUMRAT_GZ Start of run <ul> <li>humidity ratio for [refTemp][reftemp], [refRH][refrh] (ratio)</li> <li>psyHumRat2( Top.[refTemp][reftemp], Top.[refRH][refrh]) dfl ~.0066</li> </ul> refWX DBL Start of run 1/(1.+rp_refW) airSH SPECHEAT Start of run <ul> <li>air specific heat (Btu/lbDryAir-F) @ tp_refW</li> <li>.240 + .444*tp_refW   dfl ~.24293</li> </ul> airVK number Start of run <ul> <li>specific volume per temp(ft3/lb-F): multiply by abs temp.</li> <li>PsyRAir*(1.f+tp_refW/PsyMwRatio)/PsyPBar;  dfl ~.02547</li> </ul> airRhoK number Start of run <ul> <li>density*temp (lb-F/ft3): divide by abs temp to get density.</li> <li>1/airVK.  dfl ~39.25</li> </ul> airVshK number Start of run <ul> <li>volumetric specific heat/temp (Btu/ft3-F): div by abs temp for heat capacity per ft3</li> <li>airRhoK*tp_airSH  dfl ~9.535  NEEDS UNITS</li> </ul> airXK number Start of run <ul> <li>divide by abs temp for specific heat of flow (Btuh/cfm-F)</li> <li>airVshK, times 60 to match time units. dfl ~572.1</li> </ul> hConvMod choice:NOYES Start of run <ul> <li>enable/disable convection convective coefficient pressure modification factor (tp_hConvF below)</li> <li>mostly for debugging.</li> </ul> hConvF number Start of run <ul> <li>convective coefficient pressure modification factor</li> <li>=(.24 + .76*PresAtm/PresAtmSeaLevel)</li> <li>reduces convective coefficients as function of [elevation][elevation]</li> <li>in some convection modelsPresAtmSeaLevel</li> <li>source = ASHRAE 1199-RP Barnaby et al. 2004</li> <li>and: enthalpy/lb is airSh * absTemp + 1061 * w.  (Btu/lb)</li> </ul> inHcCombMeth HCCOMBMETH Start of run <ul> <li>method used to combine inside surface hcNat and hcFrc</li> <li>see SBC::sb_CombineInHcNatFrc()</li> </ul> <p>TOP: setup time: autosizing</p> Name Type Variability Description/Comments nDesDays number Start of run number of design days: 1 for heating + number of non-0 coolDsMo's. auszSmTol FLOAT_GZ Start of run autosizing small tolerance, eg auszTol/10 (.001) auszTol2 FLOAT_GZ Start of run half of given tolerance -- added to values; used in convergence tests. auszHiTol2 FLOAT_GZ Start of run 1 + half of tolerance, eg 1 + auszTol/2. <p>TOP: setup time: reports info for this run</p> Name Type Variability Description/Comments vrSum number Start of run <ul> <li>vrh for Summary report (not written to as of 11/22/91)</li> <li>int VrErr       vrh for ERR report... is not in Top... must be open for messages during Top init.</li> <li>int VrLog       vrh for LOG report... ditto. open in case want to write to it during input.</li> <li>int VrInp       vrh for INPut listing report ... ditto, is being written during input and thus Top init.</li> </ul> <ul> <li>[TOP][top-members]: runtime: reports info for this run</li> <li>Date-dependent report/exports, including all zone-specific reports, etc:  ZEB, ZST, MTR, etc:</li> <li>cncult4.cpp makes DVRI record for each requested such report and generates unspool requests for it;</li> <li>cgresult.cpp generates text to active reports each interval using the following lists it generates daily:</li> <li>Reports/exports active today, ordered for subscripting by IVLCH-1, heads of .nextNow lists in DvrIB (next 6 items):</li> </ul> Name Type Variability Description/Comments dvriY TI Start of day 0 or DvriB subscript of 1st rpFreq=YEAR report or export dvriM TI Start of day .. MONTH report/export currently active dvriD TI Start of day .. DAY report/export to write to today dvriH TI Start of day .. Hourly .. dvriS TI Start of day .. Subhourly .. dvriHS TI Start of day <ul> <li>.. Hourly and Subhourly.  A vr can only be in one list, so this list is</li> <li>checked at hourly and subhourly intervals in addition to -H or -S. */</li> </ul> hrxFlg number Start of day nz if any hour reporting or exporting today:    dvriH | -HS shrxFlg number Start of day nz if any subhour reporting or exporting today: dvriS | -HS <p>TOP: runtime: probe-able timing info</p> Name Type Variability Description/Comments tmrInput DBL End of day input processing time, sec tmrAusz DBL End of day autosizing time, sec tmrRun DBL End of day main simulation time, sec tmrTotal DBL End of day total execution time (not including reports), sec tmrAirNet DBL End of day add'l timers active iff DETAILED_TIMING tmrAirNetSolve DBL End of day tmrAWTot DBL End of day tmrAWCalc DBL End of day tmrCond DBL End of day tmrKiva DBL End of day tmrBC DBL End of day tmrZone DBL End of day <p>TOP: runtime: re subHour and sub-subhour (aka ticks)</p> Name Type Variability Description/Comments subhrDur number Start of run duration of subhour, hr (= 1/tp_nSubSteps) nSubhrTicks SI_GZ Start of run <ul> <li># of subhour ticks for e.g. HPWH simulation</li> <li>1 per minute or as generalized</li> </ul> tickDurMin DBL Start of run <ul> <li>duration of subhr tick, min</li> <li>= 1 min or as generalized</li> <li>used for e.g. HPWH simulation</li> </ul> tickDurHr DBL Start of run duration of subhr tick, hr <p>TOP: runtime: simulation date/time variables</p> Name Type Variability Description/Comments monStr CULSTR Unknown <ul> <li>Month being simulated</li> <li>autoSizing: \"heating design day\", or month for cooling.</li> </ul> dateStr CULSTR Start of day <ul> <li>Date being simulated as string</li> <li>autoSizing: eg \"heating design day\" or \"Jul cooling design day\".</li> </ul> date IDATE Start of day <ul> <li>Date: .month is 1-12, .mday 1-31, .wday 0-6. set/used: cnguts. used:cuparse;cgsolar;cgresult;cgenbal.</li> <li>autoSizing: cool: near-mid-month day as used for solar calcs; heat: Dec 21. jDay ditto.</li> </ul> jDay DOY Start of day Day of year now simulating, 1..365. set: tp_MainSimI; used:cnguts;cuparse;cgwthr;cgsolar;cgresult. xJDay DOY Start of day extended jDay: same for main sim, 512 heat autosizing, 529-540 cooling autosizing. Name Type Variability Description/Comments iHr number Start of hour Hour of day, 0-23.  set/used: tp_MainSim() iSubhr number Start of subhour subhour of hour being simulated, 0.. .  set cnguts.cpp shoy SHOY Start of subhour extended subhour of year, for reporting peaks: subhr + 4 * (hr + 24*xJDay). set/used: cnguts. isDT BOO Start of hour <ul> <li>1 if daylight saving time in effect, 0 if not.  Unspecified time/date variables are daylight.</li> <li>Standard Time variables, for weather file interface and solar calcs.  Note std time date changes an hour later than daylight.</li> </ul> iHrST number Start of hour Standard time Hour of day now simulating, 0-23.  set/used cnguts, used cgsolar.cpp. jDayST DOY Start of hour Standard time day of year, 1..365.  changes @ 1am --&gt;*h.  set/used cnguts, used cgsolar.cpp. <p>TOP: autosizing phase/date variables</p> Name Type Variability Description/Comments autoSizing BOO Start of phase TRUE if setting up for or doing autosizing, 0 for main simulation setup/run pass1 BOO Start of day TRUE autoSizing pass 1 (A or B) thru dsn days: find big-enuf sizes with open-ended models pass1A BOO Start of day TRUE for pass 1A of each dsn day: use idealized const-supply-temp models pass1B BOO Start of day TRUE for pass 1B of each dsn day: use real models pass2 BOO Start of day TRUE autoSizing for pass 2 thru dsn days: determine loads, reduce oversize sizes. sizing BOO Start of day TRUE when can increase sizes. eg FALSE during pass 2: warming up. dsDayI number Start of day index of design day being simulated: 0 heat, 1-12 coolDsMo[..-1]. set in cnausz.cpp. 6-95. dsDay number Start of day 0 main sim, 1 heating autoSize design day, 2 cooling ausz auszMon number Start of day cool design day month 1-12 or generic month 0 for heat. 6-95. <p>TOP: runtime time/day classification</p> Name Type Variability Description/Comments ivl choice:IVL Start of subhour <ul> <li>interval now starting or ending (C_IVLCH_Y, _M, etc),</li> <li>doEndIvl/doBegIvl to doIvlExprs, doIvlAccum, mtr_Accum1, cgaccum, doIvlPrior, etc</li> </ul> isBegOf choice:IVL Start of subhour 0 or interval now starting (for exprssion eval) (C_IVLCH_Y, _M, etc; 0 except during expr eval) ... isEndOf choice:IVL Start of subhour <ul> <li>ditto ending. ... set in cnguts.cpp, tested in cueval.cpp.</li> <li>autoSizing gets no end-month nor end-year unless caller sets isLastDay &amp; does extra final rep 6-95.</li> </ul> isBegRun BOO Start of subhour <ul> <li>1st subhr of warmup, not set for run unless no warmup.</li> <li>autoSizing: true if 1st subr of 1st repetition of dsn day.</li> </ul> isBegMainSim BOO Start of subhour 1st subhr of main sim (not warmup, not autosize) isFirstMon BOO Unknown <ul> <li>TRUE if 1st month of main sim. set: doBeg/EndIvl. used: doIvlAccum.</li> <li>** autoSizing: moot; probably always on, depending how ivl comes out.</li> </ul> isLastDay BOO Start of day <ul> <li>Last day of main sim</li> <li>** autoSizing: only set if (poss future 7-95) caller sets &amp; does extra last rep of dsn day,</li> <li>else end-month and end-year exprs, reports, etc skipped (all moot?).</li> <li>See comment in doEndIvl(). ******* Clarify this comment when get clear re final reps 6-95.</li> </ul> isLastWarmupDay BOO Start of day <ul> <li>TRUE iff last day of main sim warmup. set: cgMainsimI. used: cgwthr.cpp. 1-95.</li> <li>autoSizing: not set; coding so moot.</li> </ul> isBegHour BOO Start of subhour TRUE if subhour 0 of hour.  set cnztu.cpp/cnguts.cpp, used cnguts.cpp, . isEndHour BOO Start of subhour TRUE if last subhour of hour. set cnguts.cpp, used cnguts, cgresult.cpp. isBegDay BOO Start of hour TRUE if hour 0. set: doBegIvl.  used: doBegIvl,doIvlAccum; cgresult.cpp isEndDay BOO Start of hour TRUE if hour 23. set: doBegIvl. used: doEndIvl,doIvlAccum; cgresult.cpp isBegMonth BOO Start of day 1st day of month/run/warmup or 1st rep of dsn day. isEndMonth BOO Start of day <ul> <li>Mon/run, not warmup, last day.</li> <li>** autoSizing: moot; only set if caller sets isLastDay &amp; does final extra rep of dsn day.</li> </ul> isSolarCalcDay BOO Start of day TRUE if 1st day of month/run or 1st rep of dsn day: do 24 hours of solar calcs today. cnguts. isWarmup BOO Start of day <ul> <li>TRUE if main sim warmup. set/used: cgMainsimI. used: doBegIvl,doEndIvl,doIvlAccum,doIvlReports; exman,impf.</li> <li>autoSizing: keep moot for now; may be on except for (future 6-95) extra last day eg for reports.</li> </ul> dowh number Start of day <ul> <li>autoSizing: 8 heat 9 cool, else 7 if observed holiday, else day of week 0-6, for $dowh.</li> <li>weekend/holiday flags for probes / $variables (ul/cuparse.cpp).  Set in cnguts.cpp.</li> </ul> isHoliday BOO Start of day TRUE on observed holiday: Monday after certain true holidays on weekend. Same as old isHoliObs, 7-92. isHoliTrue BOO Start of day TRUE (non-0) on true date of holiday isWeHol BOO Start of day weekend or holiday isWeekend BOO Start of day Saturday or Sunday isBegWeek BOO Start of day Non-WeHol after WeHol isWeekday BOO Start of day Mon-Fri isWorkDay BOO Start of day workday per Top.workDayMask (default Mon-Fri), 5-95 isNonWorkDay BOO Start of day non-workDay ditto 5-95 isBegWorkWeek BOO Start of day workday after non-workday ditto 5-95 <ul> <li>[TOP][top-members]: runtime: autosizing</li> <li>above: autoSizing, tp_dsDayI, tp_dsDay, auszMon.</li> </ul> Name Type Variability Description/Comments auszNotDone BOO Start of day combined results of autoSize pass endtests auszDsDayItr number Start of day <ul> <li>current design day iteration (1 based)</li> <li>(0 when not autosizing)</li> </ul> auszDsDayItrMax number Start of day design day iteration limit for current pass <ul> <li>irradiance. Weather file values are energy integrated over hour.</li> <li>program needs [both] interval average [and end-interval (subhour only)] values. SOLAVNEND.</li> <li>power (Btuh/ft2)===energy (Btu/ft2) for 1 hour.</li> </ul> Name Type Variability Description/Comments radBeamHrAv number Start of hour beam irradiance on tracking surface, hour energy = average power, from weather file radDiffHrAv number Start of hour diffuse irradiance on horizontal surface, hour energy = average power, from weather file radBeamShAv number Start of subhour .. current beam subhour average power, interpolated, Btuh/ft2 radDiffShAv number Start of subhour .. current diffuse subhour power, interpolated by cgwthr.cpp, Btuh/ft2 <p>other weather: weather file contains instantaneous values for END OF HOUR; program needs only end-interval values.</p> Name Type Variability Description/Comments tDbOHr TEMP Start of hour outdoor dry bulb temp at end of hour, from wthr file, deg F. tDbOPvHr TEMP Start of hour .. previous hour (used to compute -HrAv and -Sh) tDbOHrAv TEMP Start of hour .. average over hour (used re hourly masses, bin res files, $variable) tDbOSh TEMP Start of subhour .. end subhour, interpolated (used re zone temp heat balance) tDbOPvSh TEMP Start of subhour .. end previous subhr (used to compute -ShAv) tDbOShAv TEMP Start of subhour .. average over subhour (used re subhourly masses) tWbOHr TEMP Start of hour outdoor wet bulb temp at END OF hour, from wthr file wb depression, deg F. tWbOPvHr TEMP Start of hour .. previous hour (used to compute -HrAv, -Sh) tWbOHrAv TEMP Start of hour .. hour average (for $ variable) tWbOSh TEMP Start of subhour .. end subhour, interpolated (used re zone temp heat balance) tDpOHr TEMP Start of hour outdoor dew point temp at END OF hour, from wthr file tDpOPvHr TEMP Start of hour .. previous hour (used to compute -HrAv) tDpOHrAv TEMP Start of hour .. hour average tDpOSh TEMP Start of subhour .. end subhour (derived from tDbOSh and wOSh) tSkyHr TEMP Start of hour sky temperature, F tSkyPvHr TEMP Start of hour .. previous hour (used to compute -Sh) tSkySh TEMP Start of subhour .. end subhr, interpolated) windSpeedHr number Start of hour <ul> <li>wind speed, mph, at end hour</li> <li>= Top.[windF][windf] * max( wthrfile.wndspd, Top.[windSpeedMin][windspeedmin]);</li> </ul> windSpeedPvHr number Start of hour .. previous hour (used to compute -HrAv, -Sh) windSpeedHrAv number Start of hour .. hour average (for $ variable) windSpeedSh number Start of subhour .. end subhour, mph, interpolated: for $variable and .. windSpeedSquaredSh number Start of subhour .. end subhour squared (re zone infiltration), mph^2 windSpeedSqrtSh number Start of subhour .. end subhour sqrt (re outside surface convection), mph^.5 windSpeedPt8Sh number Start of subhour .. end subhour ^.8 (re outside surface convection), mph^.8 windDirDegHr number Start of hour wind direction at END HOUR from wthr file, degrees, 0=N, 90=E. (used for $variable) <p>additional derived weather info</p> Name Type Variability Description/Comments wOHr HUMRAT_GZ Start of hour outdoor humidity ratio at end current hour, computed from tDbO and tWbO (used for $ variable) wOPvHr HUMRAT_GZ Start of hour .. previous hour (used to compute -HrAv) wOHrAv HUMRAT_GZ Start of hour .. hour average (for $ variable) wOSh HUMRAT_GZ Start of subhour .. at end current subhour: used throughout zones and systems models in program wOShChangeBase HUMRAT_GZ Start of subhour outdoor humidity ratio saved for tp_wOShChange detection hOSh number Start of subhour outdoor enthalpy at end subhour. used at in AH::doEco, TOWERPLANT::towModel. 9-92. airxOSh number Start of subhour air flow heat transfer @tDbOSh (vhc*60) (Btuh/cfm-F). rhoMoistOSh number Start of subhour outdoor moist air density at end of subhour, lbm/ft3 rhoDryOSh number Start of subhour outdoor dry air density at end of subhour, lbm/ft3 <ul> <li>[TOP][top-members]: runtime: iteration control flags</li> <li>each of the following is TRUE if the indicated class should be checKed for call-flagged or compute-flagged objects.</li> <li>used in cnztu.cpp:hvacIterSubhr; set anywhere individual object call- and compute- flags are set.</li> </ul> Name Type Variability Description/Comments wOShChange BOO Start of subhour TRUE iff non-negligible change in outdoor humidity ratio iter number Start of subhour hvac terminal / air handler / plant iteration counter for cnztu.cpp:hvacIterSubhr. <p>TOP: runtime: whole-building heating and cooling peaks</p> Name Type Variability Description/Comments qcPeak number Start of hour maximum cooling load for an hour for entire building. Negative (if not 0). qcPeakH number Start of hour hour 1-24 of peak cooling load qcPeakD number Start of hour day of month 1-31 of peak load qcPeakM number Start of hour month 1-12 of peak load qhPeak number Start of hour maximum heating load for entire building during an hour qhPeakH number Start of hour hour 1-24 of peak heating load qhPeakD number Start of hour day of month 1-31 of peak load qhPeakM number Start of hour month 1-12 of peak load <p>TOP: runtime: AIRNET solution</p> Name Type Variability Description/Comments airNetActive BOO Start of phase TRUE iff AirNet is active (calcs s/b done) Name Type Variability Description/Comments ck5aa5 number Start of run stuffed with 0x5aa5 from topCult for verifying initialization &amp; matching versions"},{"location":"probe-definitions/towerPlant/","title":"towerPlant","text":"<p>title: towerPlant --- towerplant user inputs</p> Name Type Variability Description/Comments ctN SI_GZ Start of phase Number of towers. Niles' ctNo.  default 1. tpStg choice:TPSTG Start of phase <ul> <li>staging choice, default TOGETHER. Niles' stgOp.</li> <li>TOGETHER  Towers are identical and all towers will operate at once</li> <li>at the same load (fan speed or cycling fan duty cycle).</li> <li>LEAD      A \"lead tower\" will modulate, and as many additional one-speed</li> <li>tower fans as necessary to meet the load will run at full power.</li> <li>The water will continue to flow through the towers whose fans are off.</li> </ul> tpTsSp TEMP_GZ Start of hour Towers delivered water setpoint temperature (Niles' twoSp).  degrees F, hourly, default 85F. tpMtr TI input time <ul> <li>subscript of [METER][meter] object to which tower fan energy input will be posted,</li> <li>category \"Aux\" (Per Bruce, 8-92).  Cooling towers as modelled have no pumps</li> <li>and use no energy except to drive their fans. default none.</li> <li>If towStg is LEAD, the following two apply only to the lead tower; any additional towers are assumed to have ONESPEED fans.</li> </ul> ctTy choice:CTTY Start of phase Cooling tower fan control type choice: ONESPEED (default), TWOSPEED, or VARIABLE. ctLoSpd FRAC_GZ Start of phase <ul> <li>Low speed for a TWOSPEED fan, as a fraction of full cfm. default 0.5.</li> <li>The rest of the [TOWERPLANT][towerplant] input variables apply to each tower in the group;</li> <li>the towers are assumed identical except for the single-speed fan on non-lead towers.</li> <li>The following two inputs permit computation of the tower fan electrical energy</li> <li>consumption (we only need bhp/eff, but Bruce/Steve say use two inputs):</li> </ul> ctShaftPwr BHP_GZ Start of phase <ul> <li>Shaft power of one tower fan motor. RQD.  User name 'shaftBhp'.</li> <li>Btuh internally, brake horsepower entered, units stuff converts.</li> </ul> ctMotEff FRAC_GZ Start of phase <ul> <li>Motor (and drive, if any) efficiency, default 0.88</li> <li>[TOWERPLANT][towerplant] fan curve coefficients. Constant-speed (cycling) fan consumption is linear fcn of</li> <li>avg speed (===frac of time on for one-speed); constant represents start-stop overhead.</li> </ul> ctFcOne ONESPEED tower fan curve coefficients, also for nonLead towers if ctStg = LEAD.  default 0, 1 PYLINEAR Name Type Variability Description/Comments ctFcOne.k[index] number Array [3] Start of run FLOAT k[3].  One extra member needed as terminator by cul.cpp array input logic. ctFcLo TWOSPEED low speed fan curve coeffs, default 0, ctLoSpd^2 PYLINEAR Name Type Variability Description/Comments ctFcLo.k[index] number Array [3] Start of run FLOAT k[3].  One extra member needed as terminator by cul.cpp array input logic. ctFcHi TWOSPEED high speed fan curve coeffs, default -ctLoSpd*(ctLoSpd+1), ctLoSpd^2+ctLoSpd+1 PYLINEAR Name Type Variability Description/Comments ctFcHi.k[index] number Array [3] Start of run FLOAT k[3].  One extra member needed as terminator by cul.cpp array input logic. ctFcVar <ul> <li>VARIABLE speed fan cubic curve coefficients, default 0,0,0,1</li> <li>The next 6 [TOWERPLANT][towerplant] members specify one-tower performance under a one set of conditions (the \"design conditions\").</li> <li>The conditions should be chosen to be representative of full load operating conditions.</li> <li>verify next 3 per tower?? &lt;--- issues2.txt memo sent to Bruce 10-92. *****</li> </ul> PYCUBIC Name Type Variability Description/Comments ctFcVar.k[index] number Array [5] Start of run <ul> <li>FLOAT k[5].  One extra member needed as terminator by cul.cpp array input logic, 5-92.</li> <li>possible future setup optimizations: 1) select ptr to fcn that does not compute terms whose k is 0;</li> <li>2) precalculate constants to compute in form  ((x*k[3] + k[2])*x + k[1])*x + k[0]</li> </ul> ctCapDs POWER_NZ Start of run <ul> <li>Design capacity, Btuh. (replaces Niles' design water inlet temperature.)</li> <li>Default is sum of connected loads / [ctN][ctn], using largest stage in each coolPlant,</li> <li>design Btu capacity of each HPLOOP heat exchanger. Made negative if entered positive.</li> </ul> ctVfDs AFLOW_GZ Start of phase Design air flow volume rate through tower / full speed fan flow??, cfm, RQD. ctGpmDs H2OFLOW_GZ Start of run Design water flow rate, gpm. default: sum of connected heat rejection pump capacities / ctN. ctTDbODs TEMP_GZ Start of phase Design outdoor drybulb temperature, F, RQD. (only needed to convert ctVfDs from cfm to lb/hr). ctTWbODs TEMP_GZ Start of phase Design outdoor wetbulb temperature, F, RQD. ctTwoDs TEMP_GZ Start of phase <ul> <li>Design leaving water temperature, F, default 85.</li> <li>The following 6 [TOWERPLANT][towerplant] members give another one-tower performance point, the \"Off-design\" point.</li> <li>Either give either all that don't have defaults, (and not [ctK][ctk]), or none ([ctK][ctk] may then be given).</li> <li>verify next 3 per tower?? &lt;--- issues2.txt memo sent to Bruce 10-92. ******</li> </ul> ctCapOd POWER_NZ Start of run <ul> <li>Off-design capacity, Btuh. (replaces Niles' design water inlet temperature.)</li> <li>Default is sum of connected loads / [ctN][ctn], using largest stage in each coolPlant,</li> <li>design Btu capacity of each HPLOOP heat exchanger. Made negative if entered positive.</li> </ul> ctVfOd AFLOW_GZ Start of phase Off-design air flow volume rate through one tower, cfm, must != ctVfDs. ctGpmOd H2OFLOW_GZ Start of run <ul> <li>Off-design water flow rate, gpm. default: sum of connected heat rejection pump capacities/ [ctN][ctn].</li> <li>must differ from [ctGpmDs][ctgpmds] (can't default both).</li> </ul> ctTDbOOd TEMP_GZ Start of phase Off-design outdoor drybulb temperature, F. (only needed to convert ctVfOd from cfm to lb/hr). ctTWbOOd TEMP_GZ Start of phase Off-design outdoor wetbulb temperature, F. ctTwoOd TEMP_GZ Start of phase <ul> <li>Off-design leaving water temperature, F, default 85.</li> <li>[TOWERPLANT][towerplant] inputs...</li> </ul> ctK FRAC_GZ Start of run <ul> <li>exponent in formula  ntuA = const * (mw/ma)^[ctK][ctk], as alternative to \"off design\" inputs.</li> <li>default: derived from \"Od\" inputs if given, else .4.</li> </ul> ctStkFlFr number Start of phase <ul> <li>stack effect flow: air flow that occurs thru tower when fan is off, as a fraction of [ctVfDs][ctvfds].</li> <li>Additional flow, when fan runs, is proportional to fan speed. default .18.</li> <li>[TOWERPLANT][towerplant] inputs re makeup water</li> </ul> ctBldn number Start of phase Blowdown rate: frac inflowing water bled down drain, to reduce impurities buildup. default .01. ctDrft number Start of phase Drift rate: frac inflowing water blown out of tower as droplets, w/o evaporating. default 0. ctTWm TEMP_GZ Start of phase <ul> <li>Temperature of water in mains, for makeup water. default 60.</li> <li>Auxiliaries desired? assume not 10-92.</li> </ul> <p>TOWERPLANT setup time members</p> Name Type Variability Description/Comments cp1 TI Start of run subscript of 1st COOLPLANT served by this TOWERPLANT. Next is COOLPLANT.nxCp4tp. hl1 TI Start of run subscript of 1st HPLOOP with hx served by this TOWERPLANT. Next is HPLOOP.nxHl4tp. oneFanP DBL Start of run <ul> <li>POWER</li> <li>full-speed motor input power for one fan (Btuh): ctShaftPwr / [ctMotEff][ctmoteff].</li> </ul> maDs DBL Start of run <ul> <li>MFLOW</li> <li>design air flow into 1 tower, [ctVfDs][ctvfds] converted from cfm to lb/hr</li> </ul> maOd DBL Start of run <ul> <li>MFLOW</li> <li>off-design air flow into 1 tower, [ctVfOd][ctvfod] converted from cfm to lb/hr</li> </ul> mwDs DBL Start of run <ul> <li>H2OFLOW</li> <li>design water flow into 1 tower, [ctGpmDs][ctgpmds] converted from gpm to lb/hr</li> </ul> mwOd DBL Start of run <ul> <li>H2OFLOW</li> <li>off-design water flow into 1 tower, [ctGpmOd][ctgpmod] converted from gpm to lb/hr</li> </ul> maOverMwDs DBL Start of run maDs/mwDs, precomputed in setup. ntuADs DBL Start of run number of transfer units for air side at design conditions (Niles ntuAd) ntuAOd DBL Start of run .. at off-design conditions, if given. member only as debug aid. <p>TOWERPLANT runtime output member</p> Name Type Variability Description/Comments tpTs DBL End of subhour <ul> <li>TEMP</li> <li>temperature of leaving water, F. For use by chillers and hploop hx's. Niles twoDel.</li> <li>set by tpEstimate and tpCompute. tp- to protect against confusion with AH::ts.</li> </ul> <p>TOWERPLANT runtime mostly-internal members</p> Name Type Variability Description/Comments tpClf BOO End of subhour call-flag: set nz if must call tpCompute so it can test tr, etc to see if computation needed. tpPtf BOO End of subhour <ul> <li>compute-flag: set if must call tpCompute and it should unconditionally recompute.</li> <li>tpCompute next inputs, calculated at entry to tpCompute before commitment to new calculation</li> </ul> trNx DBL End of subhour <ul> <li>TEMP</li> <li>return water temp, F</li> </ul> mwAllNx DBL End of subhour <ul> <li>MFLOW</li> <li>return water flow===total water flow entering towers, sum of loads, lb/hr.</li> </ul> qLoadNx DBL End of subhour <ul> <li>POWER</li> <li>heat added to water by loads. Positive. Believe need in record only for debugging/reporting.</li> <li>tpCompute current inputs, as used for current tpTs. -Nx's copied to next 3 after decision to calculate anew.</li> </ul> tr DBL End of subhour <ul> <li>TEMP</li> <li>return water temp</li> </ul> mwAll DBL End of subhour <ul> <li>MFLOW</li> <li>return water flow (sum of loads)===total water flow into all towers, lb/hr.</li> </ul> qLoad DBL End of subhour <ul> <li>POWER</li> <li>heat added to water by loads. Positive. Believe need in record only for debugging/reporting.</li> <li>tpCompute internal</li> </ul> mwi1 DBL End of subhour <ul> <li>MFLOW</li> <li>flow into 1 tower (less flows out due to evaporation &amp; drift): mwAll / [ctN][ctn].</li> </ul> qNeed DBL End of subhour <ul> <li>POWER</li> <li>power needed from tower plant to deliver water at setpoint: ([tpTsSp][tptssp] - tr) * mwAll. negative.</li> </ul> qMax1 DBL End of subhour <ul> <li>POWER</li> <li>max power of 1 tower under current conditions</li> </ul> qMin1 DBL End of subhour <ul> <li>POWER</li> <li>power of 1 tower, fan off (stack effect only) under current conditions</li> </ul> towldCase TOWLOADCASE End of subhour <ul> <li>tower load case, tpCompute to endSubhr: facilitates deferring fan power calc</li> <li>tldMIN: fans off; tpTs &lt;= setpoint</li> <li>tldSP:  tpTs is at setpoint, must determine power</li> <li>tldMAX: full power, tpTs &gt;= setpoint</li> </ul> qMaxGuess number End of subhour for internal values for towModel initial guess at next call for various towModel calls. qMinGuess number End of subhour .. qLoGuess number End of subhour .. qVarGuess number End of subhour .., used via varSpeedF qVarTem DBL End of subhour <ul> <li>POWER</li> <li>varSpeedF temporary that should be saved between calls (last q, used re initial f)</li> </ul> puteTs DBL End of subhour <ul> <li>TEMP</li> <li>tpTs from tpCompute, not set by tpEstimate. debug aid.</li> </ul> <p>TOWERPLANT runtime internal, set at end subhr. Variables believed local, here for probes/results/debugging</p> Name Type Variability Description/Comments nCtOp number End of subhour number of tower fans operating f DBL End of subhour fraction of full speed (fraction on for one speed fan), for lead tower only if LEAD. fanP number End of subhour plant's fan input pwr this subhour (Btuh!) q number End of subhour power imparted to water, for change detection/probes/reports 10-19-92 <p>TOWERPLANT runtime prior values for change detection</p> Name Type Variability Description/Comments tpTsSpPr TEMP End of subhour for tpEstimate tpTsEstPr TEMP End of subhour for tpEstimate tpTsPr TEMP End of subhour leaving water temp at last tpCompute, F (unused?) tDbOShPr TEMP End of subhour outdoor drybulb temp at last tpCompute, F wOShPr HUMRAT End of subhour outdoor humidity ratio at last tpCompute, F"},{"location":"probe-definitions/weather/","title":"Weather","text":"<p>title: weather ---</p> <ul> <li>wd_sunupf, wd_slAzm, wd_slAlt MUST BE BEFORE wd_db</li> <li>wd_db assumed 1st non-solar geometry mbr</li> <li>re preservation of solar geometry info, see Copy()</li> </ul> Name Type Variability Description/Comments sunupf number Start of hour <ul> <li>fraction of hour if sun is up</li> <li>solar position at midpoint of hour (or portion of hour sun is up)</li> </ul> slAzm number Start of hour azimuth, radians (0=N, +clockwise) slAlt number Start of hour altitude, radians (0=horizon, +upwards) Name Type Variability Description/Comments db number Start of hour air dry bulb temp, deg F wb number Start of hour air wet bulb temp, deg F Name Type Variability Description/Comments DNI number Start of hour direct normal irradiance from weather file (integrated value for hour, Btu/ft2) DHI number Start of hour diffuse horizontal irradiance from weather file (integrated value for hour, Btu/ft2) bmrad number Start of hour DNI as adjusted per anisotropic sky, Top.radBeamF, etc (integrated value for hour, Btu/ft2) dfrad number Start of hour DHI as adjusted per anisotropic sky, Top.radDiffF, etc (integrated value for hour, Btu/ft2) Name Type Variability Description/Comments wndDir number Start of hour wind direction, deg, 0=N, 90=E wndSpd number Start of hour wind speed, mph Name Type Variability Description/Comments glrad number Start of hour global irradiance on horizontal surface, for daylighting calculations cldCvr number Start of hour total cloud cover in tenths, 0-11, or 15 for missing data Name Type Variability Description/Comments irHoriz number Start of hour <ul> <li>horizontal infrared sky radiation (integrated value for hour, Btu/ft2)</li> <li>available for epw files only</li> <li>used to calc Top.tSkyHr iff Top.[skyModelLW][skymodellw] == C_SKYMODLWCH_IRHORIZ</li> </ul> tSky number Start of hour <ul> <li>default sky temperature, F from weather file or CalcSkyTemp() (Berdahl-Martin)</li> <li>Note: Top.tSkyHr alternative value per Top.[skyModelLW][skymodellw]</li> </ul> tGrnd number Start of hour ground temperature, F taDp number Start of hour air dew point temp, F tMains number Start of hour <ul> <li>cold water mains temp, F</li> <li>computed using CEC ACM method</li> </ul> <ul> <li>time-of-day fuel values, units = TDV/Btu</li> <li>values are read from optional TDV file</li> </ul> Name Type Variability Description/Comments tdvElec number Start of hour electricity tdvFuel number Start of hour fuel <ul> <li>derived (computed) drybulb temp values</li> <li>values updated at standard time day beg / same all day</li> <li>*except* wd_taDbMin and wd_taDbMax are updated at hr=23 iff DST</li> </ul> Name Type Variability Description/Comments taDbMin number Start of hour <ul> <li>current day minimum DB (includes future hours), F</li> <li>updated at hr=23 iff DST</li> </ul> taDbAvg number Start of hour current day average DB (includes future hours), F taDbMax number Start of hour <ul> <li>current day peak DB (includes future hours), F</li> <li>updated at hr=23 iff DST</li> </ul> taDbPvMax number Start of hour previous-day max DB, F taDbAvg01 number Start of hour previous-day avg DB (not including current day), F taDbAvg07 number Start of hour trailing 7-day avg DB (not including current day), F taDbAvg14 number Start of hour trailing 14-day avg DB (not including current day), F taDbAvg31 number Start of hour trailing 31-day avg DB (not including current day), F <ul> <li>derived (computed) electricity TDV values</li> <li>values updated at standard time day beg / same all day</li> <li>*except* at hr=23 iff DST</li> </ul> Name Type Variability Description/Comments tdvElecPk number Start of hour <ul> <li>current day peak TDVelec (includes future hours)</li> <li>updated at hr=23 iff DST</li> </ul> tdvElecPkRank number Start of hour <ul> <li>current day wd_tdvElecPk rank within year (1-365/366)</li> <li>(largest wd_tdvElecPk=1, next=2, etc.)</li> </ul> tdvElecAvg number Start of hour current day avg TDVelec (includes future hours) tdvElecPvPk number Start of hour previous-day peak TDVelec tdvElecAvg01 number Start of hour <ul> <li>previous-day avg TDVelec (not including current day)</li> <li>NOTE: code assumes wd_tdvElecAvg01 is last float</li> </ul> tdvElecHrRank[index] number Array [25] Start of hour <ul> <li>hour ranking of TDV values for current day</li> <li>hour values reflect DST status for current day</li> <li>[ 0]=unused</li> <li>[ 1]=hour of highest tdvElec, 1-24</li> <li>[ 2]=hour of 2nd highest</li> <li>etc</li> </ul>"},{"location":"probe-definitions/weatherFile/","title":"weatherFile","text":"<p>title: weatherFile --- in base class: .name, .ownTi, more.</p> Name Type Variability Description/Comments wFileFormat WFILEFORMAT Start of run file format enum: UNK, BSGS, ET1, etc. <p>Header info: from file hdr decode or computed from hourly</p> Name Type Variability Description/Comments loc WFLOC Start of run char loc[]  Location (for ET, is loc 1 only: city etc). lid WFLID Start of run char lid[]  Location ID yr number Start of run Year of weather data (00 - 99, -1 if N/A) jd1 number Start of run Julian day of first weather record (-1 if not known) jdl number Start of run Julian day of last weather record (ditto) lat number Start of run latitude, degrees N (-90.0 to 90.0) lon number Start of run longitude, degrees W (-180. to 180.0).  US locations are &gt;0, note non-standard tz number Start of run time zone, hours W of Greenwich (EST = +5, note non-standard elev number Start of run elevation of locn in ft (-9999. to 99999.) taDbAvgYr number Start of run annual average dry-bulb temp, F tMainsAvgYr number Start of phase <ul> <li>annual average cold water temp, F</li> <li>computed per CEC ACM method</li> </ul> tMainsMinYr number Start of phase annual minimum cold water temp, F solartime number Start of run <ul> <li>TRUE if file is in solar time</li> <li>additional header items for ET1 file</li> </ul> loc2 WFLOC2 Start of run char[] location 2 (state or country, etc) isLeap number Start of run non-0 if weather file is for a leap year (Feb 29 counted in dates) -- possible future use firstDdm number Start of run month 1-12 of first design day in file lastDdm number Start of run month 1-12 of last design day in file winMOE number Start of run winter median of extremes (deg F) win99TDb number Start of run winter 99% design temp (deg F) win97TDb number Start of run winter 97.5% design temp (deg F) sum1TDb number Start of run summer 1% design temp (deg F) sum1TWb number Start of run summer 1% design coincident WB (deg F) sum2TDb number Start of run summer 2.5% design temp (deg F) sum2TWb number Start of run summer 2.5% design coincident WB (deg F) sum5TDb number Start of run summer 5% design temp (deg F) sum5TWb number Start of run summer 5% design coincident WB (deg F) range number Start of run mean daily range (deg F) sumMonHi number Start of run <ul> <li>month of hottest design day, 1-12</li> <li>following are in ET1 file and can be returned via optional wfOpen arguments</li> <li>*array 12 *r float clearness    // monthly clearness numbers, multipliers, eg 1.05, for design day solar</li> <li>*array 12 *r float turbidity    // monthly average atmospheric turbidity, for daylight calcs</li> <li>*array 12 *r float atmois   // monthly aveage atmospheric moisture, for daylight calcs</li> </ul> <p>TDV file header info</p> Name Type Variability Description/Comments TDVFileTimeStamp WFLOC Start of phase timestamp string TDVFileTitle ANAME Start of phase title string (identifies file CZ, fuel, vintage, ) <p>internal</p> Name Type Variability Description/Comments TDVFileJHr number Start of run last hour (row) in file that has read (1 based)"},{"location":"probe-definitions/weatherNextHour/","title":"weatherNextHour","text":"<p>title: weatherNextHour ---</p> <ul> <li>wd_sunupf, wd_slAzm, wd_slAlt MUST BE BEFORE wd_db</li> <li>wd_db assumed 1st non-solar geometry mbr</li> <li>re preservation of solar geometry info, see Copy()</li> </ul> Name Type Variability Description/Comments sunupf number Start of hour <ul> <li>fraction of hour if sun is up</li> <li>solar position at midpoint of hour (or portion of hour sun is up)</li> </ul> slAzm number Start of hour azimuth, radians (0=N, +clockwise) slAlt number Start of hour altitude, radians (0=horizon, +upwards) Name Type Variability Description/Comments db number Start of hour air dry bulb temp, deg F wb number Start of hour air wet bulb temp, deg F Name Type Variability Description/Comments DNI number Start of hour direct normal irradiance from weather file (integrated value for hour, Btu/ft2) DHI number Start of hour diffuse horizontal irradiance from weather file (integrated value for hour, Btu/ft2) bmrad number Start of hour DNI as adjusted per anisotropic sky, Top.radBeamF, etc (integrated value for hour, Btu/ft2) dfrad number Start of hour DHI as adjusted per anisotropic sky, Top.radDiffF, etc (integrated value for hour, Btu/ft2) Name Type Variability Description/Comments wndDir number Start of hour wind direction, deg, 0=N, 90=E wndSpd number Start of hour wind speed, mph Name Type Variability Description/Comments glrad number Start of hour global irradiance on horizontal surface, for daylighting calculations cldCvr number Start of hour total cloud cover in tenths, 0-11, or 15 for missing data Name Type Variability Description/Comments irHoriz number Start of hour <ul> <li>horizontal infrared sky radiation (integrated value for hour, Btu/ft2)</li> <li>available for epw files only</li> <li>used to calc Top.tSkyHr iff Top.[skyModelLW][skymodellw] == C_SKYMODLWCH_IRHORIZ</li> </ul> tSky number Start of hour <ul> <li>default sky temperature, F from weather file or CalcSkyTemp() (Berdahl-Martin)</li> <li>Note: Top.tSkyHr alternative value per Top.[skyModelLW][skymodellw]</li> </ul> tGrnd number Start of hour ground temperature, F taDp number Start of hour air dew point temp, F tMains number Start of hour <ul> <li>cold water mains temp, F</li> <li>computed using CEC ACM method</li> </ul> <ul> <li>time-of-day fuel values, units = TDV/Btu</li> <li>values are read from optional TDV file</li> </ul> Name Type Variability Description/Comments tdvElec number Start of hour electricity tdvFuel number Start of hour fuel <ul> <li>derived (computed) drybulb temp values</li> <li>values updated at standard time day beg / same all day</li> <li>*except* wd_taDbMin and wd_taDbMax are updated at hr=23 iff DST</li> </ul> Name Type Variability Description/Comments taDbMin number Start of hour <ul> <li>current day minimum DB (includes future hours), F</li> <li>updated at hr=23 iff DST</li> </ul> taDbAvg number Start of hour current day average DB (includes future hours), F taDbMax number Start of hour <ul> <li>current day peak DB (includes future hours), F</li> <li>updated at hr=23 iff DST</li> </ul> taDbPvMax number Start of hour previous-day max DB, F taDbAvg01 number Start of hour previous-day avg DB (not including current day), F taDbAvg07 number Start of hour trailing 7-day avg DB (not including current day), F taDbAvg14 number Start of hour trailing 14-day avg DB (not including current day), F taDbAvg31 number Start of hour trailing 31-day avg DB (not including current day), F <ul> <li>derived (computed) electricity TDV values</li> <li>values updated at standard time day beg / same all day</li> <li>*except* at hr=23 iff DST</li> </ul> Name Type Variability Description/Comments tdvElecPk number Start of hour <ul> <li>current day peak TDVelec (includes future hours)</li> <li>updated at hr=23 iff DST</li> </ul> tdvElecPkRank number Start of hour <ul> <li>current day wd_tdvElecPk rank within year (1-365/366)</li> <li>(largest wd_tdvElecPk=1, next=2, etc.)</li> </ul> tdvElecAvg number Start of hour current day avg TDVelec (includes future hours) tdvElecPvPk number Start of hour previous-day peak TDVelec tdvElecAvg01 number Start of hour <ul> <li>previous-day avg TDVelec (not including current day)</li> <li>NOTE: code assumes wd_tdvElecAvg01 is last float</li> </ul> tdvElecHrRank[index] number Array [25] Start of hour <ul> <li>hour ranking of TDV values for current day</li> <li>hour values reflect DST status for current day</li> <li>[ 0]=unused</li> <li>[ 1]=hour of highest tdvElec, 1-24</li> <li>[ 2]=hour of 2nd highest</li> <li>etc</li> </ul>"},{"location":"probe-definitions/window/","title":"Window","text":"<p>title: window ---</p> Name Type Variability Description/Comments ty number input time type CTEXTWALL, CTINTWALL, CTWINDOW, CTMXWALL, CTPERIM, CTKIVA set by cult or code. <p>inputs.  *r's where set by topCkf in at least some cases.</p> Name Type Variability Description/Comments area AREA_GZ Start of run (net) area, sf.  Reflects window multiplier. azm ANGLE Start of run azimuth (radians, 0 = North, Pi/2 = East) tilt ANGLE Start of run tilt (radians, 0 = horiz up, Pi/2 = vert. dircos[index] number Array [3] Start of run outward normal direction cosines for given azm/tilt depthBG FLOAT_GEZ Start of run depth below grade of bottom of wall, ft height FLOAT_GEZ Start of run height of surface, ft (currently only used for Kiva) model choice:SFMODEL input time <ul> <li>surface model: user input</li> <li>quick/auto/delayed(massive)/delayed_hour/delayed_subhour/forward_difference/kiva</li> </ul> modelr choice:SFMODEL Start of run <ul> <li>resolved to quick (runtime XSURF generated),</li> <li>or to delayed_hour or _subhour (runtime MASS generated)</li> <li>or to kiva (runtime KIVA generated)</li> </ul> lThkF number Start of run <ul> <li>thickness factor, adjusts max thickness allowed for mass sublayers</li> <li>default = 0.5</li> </ul> Name Type Variability Description/Comments gti TI Start of run window glazeType subscript. Used at runtime re incidence angle. sco number Start of monthly-hourly window: SMSO: Solar Heat Gain Coef multiplier, shades Open scc number Start of monthly-hourly window: SMSC: Solar Heat Gain Coef, shades Closed sbcI inside (zone side) surface boundary conditions SBC Name Type Variability Description/Comments sbcI.absSlr number Start of monthly-hourly solar (SW) absorptance, dimless sbcI.awAbsSlr DBL Start of monthly-hourly <ul> <li>area-weighted solar absorptance</li> <li>= sb_absSlr * area / zn_surfASlr</li> <li>exterior surf outside: always 0</li> <li>windows inside: TBD 12-8-10</li> <li>ducts: always 0</li> </ul> sbcI.epsLW number Start of run thermal (LW) emittance sbcI.zi TI Start of run adjacent zone idx, 0 if exposed to ambient sbcI.F DBL Start of run solar (short wave) fraction ?  TODO: NOT USED? as of 4-2012 sbcI.Fp DBL Start of run <ul> <li>\"view factor\" to zone radiant temp, dimless.  Includes Oppenheim surface conductance.</li> <li>aka \"F-prime\" in CZM documentation.</li> </ul> Name Type Variability Description/Comments sbcI.frRad DBL Start of run re radiant to radiant temp (room radiant node or sky) sbcI.fSky DBL Start of run \"view factor\" to radiant surround at sky temp sbcI.fAir DBL Start of run \"view factor\" to radiant surround at air temp (ground, horizon) Name Type Variability Description/Comments sbcI.hcNat FLOAT_GEZ End of subhour surface natural convection coefficient, Btuh/ft2-F sbcI.hcFrc FLOAT_GEZ End of subhour surface forced (wind) convection coefficient, Btuh/ft2-F sbcI.hcMult FLOAT_GEZ End of subhour surface convection coefficient multiplier, dimless sbcI.hxa FLOAT_GEZ End of subhour overall coeff to sb_txa = sb_hcMult*(sb_hcNat + sb_hcFrc), Btuh/ft2-F sbcI.hxr FLOAT_GEZ End of subhour <ul> <li>surface (linearized) radiative coefficient, Btuh/ft2-F</li> <li>= coupling to sb_txr</li> </ul> sbcI.hxtot number End of subhour sb_hxa + sb_hxr sbcI.uRat DBL End of subhour <ul> <li>ratio uC/(sb_hxa + sb_hxr + uC)</li> <li>= 1/(1 + rC*(sb_hxa + sb_hxr))</li> <li>where uC = surface-to-surface conductance</li> <li>rC = 1/uC</li> <li>but: duct model outside surf to duct air</li> </ul> Name Type Variability Description/Comments sbcI.fRat DBL End of subhour <ul> <li>sb_hxtot * sb_uRat, Btuh/ft2-F</li> <li>= overall conductance not including other side</li> <li>surface resistances</li> <li>(ducts: overall conductance from duct air to sb_txe)</li> </ul> sbcI.cx DBL End of subhour air/radiant coupling due to this surface, Btuh/ft2-F Name Type Variability Description/Comments sbcI.sgTarg solar gain target: bm, df gain from insolation SGTARG Name Type Variability Description/Comments sbcI.sgTarg.bm DBL End of subhour beam sbcI.sgTarg.df DBL End of subhour diffuse sbcI.sgTarg.tot DBL End of subhour total sbcI.sg DBL End of subhour absorbed solar total, Btuh (NOT Btuh/ft2), summed from sb_sgTarg Name Type Variability Description/Comments sbcI.tSrf number End of subhour most recently calculated surface temp, F sbcI.tSrfls number Start of subhour <ul> <li>last step surface temp, F</li> <li>copied from sb_tSrf at step end</li> <li>not *e (available for probing)</li> </ul> sbcI.qrAbs DBL End of subhour <ul> <li>total absorbed radiant heat gain at surface, Btuh/ft2 (+ = into surface)</li> <li>= (sb_sg + sb_rIg)/area</li> </ul> sbcI.txa number End of subhour <ul> <li>adjacent air temp, F (from prior step)</li> <li>inside: prior step zone tz</li> <li>outside: current step ambient dry bulb temp</li> </ul> sbcI.txr number End of subhour <ul> <li>adjacent radiant temp, F</li> <li>inside: prior step zone tr</li> <li>outside: current step sky temp</li> </ul> sbcI.txe number End of subhour <ul> <li>adjacent environmental temp, F</li> <li>combined sb_txa and sb_txr; simplifies calcs in some cases</li> <li>set but unused? for inside</li> <li>set/used for ASHWAT outside</li> </ul> sbcI.w DBL End of subhour <ul> <li>adjacent air humidity ratio if known (else 0)</li> <li>used re duct leakage</li> </ul> sbcI.qSrf DBL End of subhour <ul> <li>conduction into surface, Btuh/ft2</li> <li>updated at end of timestep</li> </ul> Name Type Variability Description/Comments sbcI.pXS XSURFP Start of run parent pointer sbcI.si number Start of run <ul> <li>side of *sb_pXS represented by this SBC</li> <li>0=inside, 1=outside</li> </ul> sbcI.fcWind DBL Start of run <ul> <li>wind constant re sb_hcFrc (includes roughness, unit conversion, height adj, ...)</li> <li>value is model specific</li> <li>Walton: sb_hcFrc = sb_fcWind * Top.windSpeedSqrtSh</li> <li>Unified: sb_hcFrc = sb_fcWind * Top.windSpeedPt8</li> </ul> sbcI.fcWind2 DBL Start of run unified: add'l constant re sb_eta sbcI.eta DBL End of subhour <ul> <li>unified: wind speed adjustment included in sb_hcNat</li> <li>windV=0: sb_eta=1, sb_hcNat=still-air value</li> <li>windv&gt;0: sb_eta&lt;1, sb_hcNat is reduced</li> </ul> <ul> <li>characteristic dimensions re convection models</li> <li>not always set or used</li> <li>Note: may be derived from parent surface TODO</li> </ul> Name Type Variability Description/Comments sbcI.widNom DBL Start of run nominal width, ft (smaller dimension assuming rectangle) sbcI.lenNom DBL Start of run nominal length, ft (larger dimension assuming rectangle) sbcI.lenCharNat DBL Start of run characteristic length for some natural convection models, ft sbcI.lenEffWink DBL Start of run effective length for Winkelmann forced convection model, ft Name Type Variability Description/Comments sbcI.cosTilt DBL Start of run <ul> <li>cos( Tilt ) for the boundary -- note parent surface tilt is defined</li> <li>relative to outside normal (sbcO), so inside sb_cosTilt is oposite (+180 deg)</li> </ul> sbcI.atvDeg DBL Start of run angle-to-vertical, deg (inside: 90-tilt; outside: tilt-90) sbcI.cosAtv DBL Start of run cos( angle to vertical) 0 - 1 (never &lt; 0) sbcI.hcModel choice:CONVMODEL Start of run <ul> <li>surface convective coefficient model</li> <li>specifies calc method sb_hcNat and sb_hcFrc</li> </ul> sbcI.hcFrcOptions number Start of run <ul> <li>options re inside forced convection model</li> <li>1: use sb_hcFrcCoeffs (see code), else zn_hcFrc</li> </ul> sbcI.hcFrcCoeffs[index] number Array [DIM_HCFRCCOEFFS] Start of run <ul> <li>coefficients for forced convection model (inside only)</li> <li>1 extra array member required by cul</li> </ul> sbcI.hcLChar number Start of run <ul> <li>characteristic length, ft</li> <li>used in derivation of exterior forced convective coeff</li> <li>default = 10 ft</li> <li>unused re natural convective coeff (interior or exterior)</li> </ul> sbcI.hcConst[index] DBL Array [3] Start of run <ul> <li>convection coefficient model constants</li> <li>Unified: exposure to zone or ambient</li> <li>hcNat = sb_hcConst[]*abs( TD)^.33)</li> <li>[ 0]: tAir&lt;=tSrf, [ 1]: tAir&gt;tSrf</li> <li>[ 2]: unused</li> <li>ASHRAE: exposure to zone, hcNat = sb_hcConst[]</li> <li>[ 0]: sys off, tAir&lt;=tSrf, [ 1]: sys off, tAir&gt;tSrf</li> <li>[ 2]: sys on</li> </ul> <ul> <li>re [sfExCnd][sfexcnd] = GROUND: conductances to weather vars, Btuh/ft2-F</li> <li>correlation values derived by Bazjanac/Huang for various</li> <li>insulation configurations</li> </ul> Name Type Variability Description/Comments sbcI.groundModel choice:GROUNDMODEL Start of run <ul> <li>ground model in use (not input 1/1/2015)</li> <li>C_GROUNDMODELCH_D2INP: DOE-2 model w/ user coeffs</li> <li>C_GROUNDMODELCH_D2COR: DOE-2 model w/ correlation coeffs</li> </ul> sbcI.cTaDbAvgYr FLOAT_GEZ Start of run to annual avg taDb sbcI.cTaDbAvg31 FLOAT_GEZ Start of run to last 31 day avg taDb sbcI.cTaDbAvg14 FLOAT_GEZ Start of run to last 14 day avg taDb sbcI.cTaDbAvg07 FLOAT_GEZ Start of run to last 7 day avg taDb sbcI.cTGrnd FLOAT_GEZ Start of run to computed ground temp sbcI.rGrnd FLOAT_GEZ Start of run resistance = 1/(sum of above) (0 if sum=0) sbcI.rConGrnd FLOAT_GEZ Start of run <ul> <li>ground model implicit construction resistance, ft2-F/Btuh</li> <li>= approx resistance of construction film/carpet/slab/soil</li> <li>Caution: construction should be consistent with configuration</li> <li>implicit in coefficient values.</li> </ul> sbcO outside (ambient or adjacent zone) surface boundary conditions SBC Name Type Variability Description/Comments sbcO.absSlr number Start of monthly-hourly solar (SW) absorptance, dimless sbcO.awAbsSlr DBL Start of monthly-hourly <ul> <li>area-weighted solar absorptance</li> <li>= sb_absSlr * area / zn_surfASlr</li> <li>exterior surf outside: always 0</li> <li>windows inside: TBD 12-8-10</li> <li>ducts: always 0</li> </ul> sbcO.epsLW number Start of run thermal (LW) emittance sbcO.zi TI Start of run adjacent zone idx, 0 if exposed to ambient sbcO.F DBL Start of run solar (short wave) fraction ?  TODO: NOT USED? as of 4-2012 sbcO.Fp DBL Start of run <ul> <li>\"view factor\" to zone radiant temp, dimless.  Includes Oppenheim surface conductance.</li> <li>aka \"F-prime\" in CZM documentation.</li> </ul> Name Type Variability Description/Comments sbcO.frRad DBL Start of run re radiant to radiant temp (room radiant node or sky) sbcO.fSky DBL Start of run \"view factor\" to radiant surround at sky temp sbcO.fAir DBL Start of run \"view factor\" to radiant surround at air temp (ground, horizon) Name Type Variability Description/Comments sbcO.hcNat FLOAT_GEZ End of subhour surface natural convection coefficient, Btuh/ft2-F sbcO.hcFrc FLOAT_GEZ End of subhour surface forced (wind) convection coefficient, Btuh/ft2-F sbcO.hcMult FLOAT_GEZ End of subhour surface convection coefficient multiplier, dimless sbcO.hxa FLOAT_GEZ End of subhour overall coeff to sb_txa = sb_hcMult*(sb_hcNat + sb_hcFrc), Btuh/ft2-F sbcO.hxr FLOAT_GEZ End of subhour <ul> <li>surface (linearized) radiative coefficient, Btuh/ft2-F</li> <li>= coupling to sb_txr</li> </ul> sbcO.hxtot number End of subhour sb_hxa + sb_hxr sbcO.uRat DBL End of subhour <ul> <li>ratio uC/(sb_hxa + sb_hxr + uC)</li> <li>= 1/(1 + rC*(sb_hxa + sb_hxr))</li> <li>where uC = surface-to-surface conductance</li> <li>rC = 1/uC</li> <li>but: duct model outside surf to duct air</li> </ul> Name Type Variability Description/Comments sbcO.fRat DBL End of subhour <ul> <li>sb_hxtot * sb_uRat, Btuh/ft2-F</li> <li>= overall conductance not including other side</li> <li>surface resistances</li> <li>(ducts: overall conductance from duct air to sb_txe)</li> </ul> sbcO.cx DBL End of subhour air/radiant coupling due to this surface, Btuh/ft2-F Name Type Variability Description/Comments sbcO.sgTarg solar gain target: bm, df gain from insolation SGTARG Name Type Variability Description/Comments sbcO.sgTarg.bm DBL End of subhour beam sbcO.sgTarg.df DBL End of subhour diffuse sbcO.sgTarg.tot DBL End of subhour total sbcO.sg DBL End of subhour absorbed solar total, Btuh (NOT Btuh/ft2), summed from sb_sgTarg Name Type Variability Description/Comments sbcO.tSrf number End of subhour most recently calculated surface temp, F sbcO.tSrfls number Start of subhour <ul> <li>last step surface temp, F</li> <li>copied from sb_tSrf at step end</li> <li>not *e (available for probing)</li> </ul> sbcO.qrAbs DBL End of subhour <ul> <li>total absorbed radiant heat gain at surface, Btuh/ft2 (+ = into surface)</li> <li>= (sb_sg + sb_rIg)/area</li> </ul> sbcO.txa number End of subhour <ul> <li>adjacent air temp, F (from prior step)</li> <li>inside: prior step zone tz</li> <li>outside: current step ambient dry bulb temp</li> </ul> sbcO.txr number End of subhour <ul> <li>adjacent radiant temp, F</li> <li>inside: prior step zone tr</li> <li>outside: current step sky temp</li> </ul> sbcO.txe number End of subhour <ul> <li>adjacent environmental temp, F</li> <li>combined sb_txa and sb_txr; simplifies calcs in some cases</li> <li>set but unused? for inside</li> <li>set/used for ASHWAT outside</li> </ul> sbcO.w DBL End of subhour <ul> <li>adjacent air humidity ratio if known (else 0)</li> <li>used re duct leakage</li> </ul> sbcO.qSrf DBL End of subhour <ul> <li>conduction into surface, Btuh/ft2</li> <li>updated at end of timestep</li> </ul> Name Type Variability Description/Comments sbcO.pXS XSURFP Start of run parent pointer sbcO.si number Start of run <ul> <li>side of *sb_pXS represented by this SBC</li> <li>0=inside, 1=outside</li> </ul> sbcO.fcWind DBL Start of run <ul> <li>wind constant re sb_hcFrc (includes roughness, unit conversion, height adj, ...)</li> <li>value is model specific</li> <li>Walton: sb_hcFrc = sb_fcWind * Top.windSpeedSqrtSh</li> <li>Unified: sb_hcFrc = sb_fcWind * Top.windSpeedPt8</li> </ul> sbcO.fcWind2 DBL Start of run unified: add'l constant re sb_eta sbcO.eta DBL End of subhour <ul> <li>unified: wind speed adjustment included in sb_hcNat</li> <li>windV=0: sb_eta=1, sb_hcNat=still-air value</li> <li>windv&gt;0: sb_eta&lt;1, sb_hcNat is reduced</li> </ul> <ul> <li>characteristic dimensions re convection models</li> <li>not always set or used</li> <li>Note: may be derived from parent surface TODO</li> </ul> Name Type Variability Description/Comments sbcO.widNom DBL Start of run nominal width, ft (smaller dimension assuming rectangle) sbcO.lenNom DBL Start of run nominal length, ft (larger dimension assuming rectangle) sbcO.lenCharNat DBL Start of run characteristic length for some natural convection models, ft sbcO.lenEffWink DBL Start of run effective length for Winkelmann forced convection model, ft Name Type Variability Description/Comments sbcO.cosTilt DBL Start of run <ul> <li>cos( Tilt ) for the boundary -- note parent surface tilt is defined</li> <li>relative to outside normal (sbcO), so inside sb_cosTilt is oposite (+180 deg)</li> </ul> sbcO.atvDeg DBL Start of run angle-to-vertical, deg (inside: 90-tilt; outside: tilt-90) sbcO.cosAtv DBL Start of run cos( angle to vertical) 0 - 1 (never &lt; 0) sbcO.hcModel choice:CONVMODEL Start of run <ul> <li>surface convective coefficient model</li> <li>specifies calc method sb_hcNat and sb_hcFrc</li> </ul> sbcO.hcFrcOptions number Start of run <ul> <li>options re inside forced convection model</li> <li>1: use sb_hcFrcCoeffs (see code), else zn_hcFrc</li> </ul> sbcO.hcFrcCoeffs[index] number Array [DIM_HCFRCCOEFFS] Start of run <ul> <li>coefficients for forced convection model (inside only)</li> <li>1 extra array member required by cul</li> </ul> sbcO.hcLChar number Start of run <ul> <li>characteristic length, ft</li> <li>used in derivation of exterior forced convective coeff</li> <li>default = 10 ft</li> <li>unused re natural convective coeff (interior or exterior)</li> </ul> sbcO.hcConst[index] DBL Array [3] Start of run <ul> <li>convection coefficient model constants</li> <li>Unified: exposure to zone or ambient</li> <li>hcNat = sb_hcConst[]*abs( TD)^.33)</li> <li>[ 0]: tAir&lt;=tSrf, [ 1]: tAir&gt;tSrf</li> <li>[ 2]: unused</li> <li>ASHRAE: exposure to zone, hcNat = sb_hcConst[]</li> <li>[ 0]: sys off, tAir&lt;=tSrf, [ 1]: sys off, tAir&gt;tSrf</li> <li>[ 2]: sys on</li> </ul> <ul> <li>re [sfExCnd][sfexcnd] = GROUND: conductances to weather vars, Btuh/ft2-F</li> <li>correlation values derived by Bazjanac/Huang for various</li> <li>insulation configurations</li> </ul> Name Type Variability Description/Comments sbcO.groundModel choice:GROUNDMODEL Start of run <ul> <li>ground model in use (not input 1/1/2015)</li> <li>C_GROUNDMODELCH_D2INP: DOE-2 model w/ user coeffs</li> <li>C_GROUNDMODELCH_D2COR: DOE-2 model w/ correlation coeffs</li> </ul> sbcO.cTaDbAvgYr FLOAT_GEZ Start of run to annual avg taDb sbcO.cTaDbAvg31 FLOAT_GEZ Start of run to last 31 day avg taDb sbcO.cTaDbAvg14 FLOAT_GEZ Start of run to last 14 day avg taDb sbcO.cTaDbAvg07 FLOAT_GEZ Start of run to last 7 day avg taDb sbcO.cTGrnd FLOAT_GEZ Start of run to computed ground temp sbcO.rGrnd FLOAT_GEZ Start of run resistance = 1/(sum of above) (0 if sum=0) sbcO.rConGrnd FLOAT_GEZ Start of run <ul> <li>ground model implicit construction resistance, ft2-F/Btuh</li> <li>= approx resistance of construction film/carpet/slab/soil</li> <li>Caution: construction should be consistent with configuration</li> <li>implicit in coefficient values.</li> </ul> Name Type Variability Description/Comments fenModel choice:FENMODEL input time fenestration model: user input SHGC number input time rated SHGC of assembly fMult FLOAT_GEZ Start of run window frame/mullion multiplier (input or from GT) UNFRC UH_GZ input time overall U-factor evaluated under per NFRC heating conditions NGlz number input time # of glazings bare-glass assembly exShd choice:EXSHD input time exterior shade (ASHWAT only) inShd choice:INSHD input time interior shade (ditto) dirtLoss FLOAT_GEZ Start of run window dirt loss factor (input or from GT) <p>next 3 are input for surface, copied from surface of door or window</p> Name Type Variability Description/Comments sfExCnd choice:EXCND Start of run adjacent cond: adiabatic/ambient/specT/adjZn. sfExT TEMP Start of subhour outside temp if .sfExCnd==C_EXCNDCH_SPECT sfAdjZi TI input time zone for sfExCnd==ADJZN, or 0 for exterior surface/door/window. uI UH_GZ Start of run interior surf (air film) conductance. input. uC UH_GZ Start of run uval of construction, excl surfaces (air films). From CON, GT, or SFI.sfU user input. uX UH_GZ Start of run exterior surface (air film) conductance. input. Rf number Start of run <ul> <li>exterior roughness factor, re convection (new 10-10)</li> <li>default: windows=1, all others=2.17</li> </ul> grndRefl number Start of monthly-hourly ground reflectivity, default: wall: Top.grndRefl; door/win: owning wall. <p>view factors for diffuse (only) radiation so user can precompute shading effects of window overhang/fins</p> Name Type Variability Description/Comments vfSkyDf number Start of monthly-hourly sky view factor for diffuse solar, default .5 + .5*cos(tilt) vfGrndDf number Start of monthly-hourly ground view factor for diffuse solar, default .5 - .5*cos(tilt) <p>view factors re outside surface LW (thermal) radiant exchange</p> Name Type Variability Description/Comments vfSkyLW number Start of run sky view factor for long-wave radiation, hard-coded .5 + .5*cos( tilt) vfGrndLW number Start of run ground view factor for long-wave radiation, hard-coded .5 - .5*cos( tilt) Name Type Variability Description/Comments uval UH_GZ Start of run <ul> <li>Overall air-to-air conductance, Btuh/sf-F</li> <li>includes uX and uC surf cond</li> </ul> <ul> <li>*Nominal* U-factor etc including ASHRAE heating surface resistance</li> <li>documentation only!</li> </ul> Name Type Variability Description/Comments UNom UH_GZ Start of run nominal air-to-air U-factor, Btuh/sf-F UANom UA Start of run <ul> <li>area * xs_UNom, Btuh/F</li> <li>surface values, [0]=inside, [1]=outside</li> </ul> rSrfNom[index] number Array [2] Start of run surface resistance sf-F/Btuh hSrfNom[index] number Array [2] Start of run surface conductance (1/xs_rSrfNom), Btuh/sf-F Name Type Variability Description/Comments cFctr UH_GZ Start of run surface-to-surface conductance (not populated!) Name Type Variability Description/Comments iwshad TI Start of run 0 if none or subscr in WSHADRAT of overhang/fin info for a shaded window msi TI Start of run 0, or mass (MsR) subscript for CTMXWALL. tLrB[index] number Array [XSMXTLRB] End of hour <ul> <li>layer boundary temps re probes</li> <li>populated at end of hour</li> </ul> <p>solar gain distributions: [partly] based on SGDIST inputs</p> Name Type Variability Description/Comments nsgdist number Start of run <ul> <li>Number of SG distributions</li> <li>[SGDIST][sgdist] sgdist[ HSMXSGDIST]:</li> </ul> sgdist[index] Array [HSMXSGDIST] <ul> <li>=8 (2-95), cndefns.h. explicit solar gain distribs</li> <li>*r -&gt; min variation here: no members set at input time</li> <li>*nest [SGDIST][sgdist] sgdist -&gt; solar gain distribution (struct just above).  set: cncult3.cpp:cnuSgDist().</li> </ul> SGDIST Name Type Variability Description/Comments sgdist[index].targTy number Start of run <ul> <li>target type: define (cnguts.h)   basAnc &amp; member</li> <li>zone air                    SGDTTZNAIR    ZNR.qSgAir</li> <li>(zone check/results total   SGDTTZNTOT    ZNR.qSgTot/qSgTotSh (not here; gen'd in cgsolar 2-95)</li> <li>surface in/outside          SGDTSURFI/O</li> </ul> sgdist[index].targTi TI Start of run subscript of targeted entry in RAT above: *i in SGI; *nest merges variation flags. sgdist[index].FSO number Start of monthly-hourly frac of gain to target, shades open sgdist[index].FSC number Start of monthly-hourly frac of gain to target, shades closed (defaults to sgd_FSO) <ul> <li>surface/door/window</li> <li>.ownTi (base class) is zone for surface, or surface for window or door.</li> <li>CAUTION: ambiguous base</li> </ul> Name Type Variability Description/Comments sfClass number input time sfcNUL, sfcSURF, sfcDOOR, sfcWINDOW sfArea AREA_GZ input time surface: gross area, net in x.xs_area. sfU UH_GZ input time <ul> <li>uval input if no [sfCon][sfcon] given (excl surf films)</li> <li>[sfInH][sfinh], [sfExH][sfexh]: input/default to x.uI, x.uX.</li> </ul> sfCon TI input time <ul> <li>surface construction (optional)</li> <li>[sfInAbs][sfinabs], [sfExAbs][sfexabs]: input/default to x.xs_AbsSlr(0, 1)</li> <li>surface only</li> </ul> sfTy choice:OSTY constant wall/floor/ceil/[intmass1/2]: for input cking. sfFnd TI input time surface foundation object (floors only, optional) sfFndFloor TI input time surface foundation floor object (walls only, optional) sfExpPerim LEN input time <ul> <li>foundation floor exposed perimeter (floors only)</li> <li>window only</li> </ul> width LEN_GZ input time width and height: used to compute shading, height LEN_GZ input time ... and to compute area b4 mutliplier. mult FLOAT_GZ input time <ul> <li>area multiplier (for multiple identical windows)</li> <li>derived/internal</li> </ul> xi TI Start of run subscript in runtime XSRAT, to facilitate access by probers 1-92 msi TI Start of run <ul> <li>0 or MSRAT MsR subscr which will be used if delayed model</li> <li>(must be known eg for sgdists b4 MsR record can be made eg because net area must be known)</li> </ul>"},{"location":"probe-definitions/xsurf/","title":"Xsurf","text":"<p>title: xsurf ---</p> <ul> <li>.name: is that of of surface, door, window, perimeter, or mass (see x.ty) 1-92</li> <li>.ownTi: ZNR subscript</li> </ul> Name Type Variability Description/Comments nxXsurf TI Start of run 0 or XSRAT subscr of next record for zone.  Chain head is ZNR.xsurf1. nxXsSpecT TI Start of run addl chain of records w/ x.sfExCnd==C_EXCNDCH_SPECT: used hourly.  Head is ZNR.xsSpecT1. Name Type Variability Description/Comments ty number Start of run type CTEXTWALL, CTINTWALL, CTWINDOW, CTMXWALL, CTPERIM, CTKIVA set by cult or code. <p>inputs.  *r's where set by topCkf in at least some cases.</p> Name Type Variability Description/Comments area AREA_GZ Start of run (net) area, sf.  Reflects window multiplier. azm ANGLE Start of run azimuth (radians, 0 = North, Pi/2 = East) tilt ANGLE Start of run tilt (radians, 0 = horiz up, Pi/2 = vert. dircos[index] number Array [3] Start of run outward normal direction cosines for given azm/tilt depthBG FLOAT_GEZ Start of run depth below grade of bottom of wall, ft height FLOAT_GEZ Start of run height of surface, ft (currently only used for Kiva) model choice:SFMODEL Start of run <ul> <li>surface model: user input</li> <li>quick/auto/delayed(massive)/delayed_hour/delayed_subhour/forward_difference/kiva</li> </ul> modelr choice:SFMODEL Start of run <ul> <li>resolved to quick (runtime XSURF generated),</li> <li>or to delayed_hour or _subhour (runtime MASS generated)</li> <li>or to kiva (runtime KIVA generated)</li> </ul> lThkF number Start of run <ul> <li>thickness factor, adjusts max thickness allowed for mass sublayers</li> <li>default = 0.5</li> </ul> Name Type Variability Description/Comments gti TI Start of run window glazeType subscript. Used at runtime re incidence angle. sco number Start of monthly-hourly window: SMSO: Solar Heat Gain Coef multiplier, shades Open scc number Start of monthly-hourly window: SMSC: Solar Heat Gain Coef, shades Closed sbcI inside (zone side) surface boundary conditions SBC Name Type Variability Description/Comments sbcI.absSlr number Start of monthly-hourly solar (SW) absorptance, dimless sbcI.awAbsSlr DBL Start of monthly-hourly <ul> <li>area-weighted solar absorptance</li> <li>= sb_absSlr * area / zn_surfASlr</li> <li>exterior surf outside: always 0</li> <li>windows inside: TBD 12-8-10</li> <li>ducts: always 0</li> </ul> sbcI.epsLW number Start of run thermal (LW) emittance sbcI.zi TI Start of run adjacent zone idx, 0 if exposed to ambient sbcI.F DBL Start of run solar (short wave) fraction ?  TODO: NOT USED? as of 4-2012 sbcI.Fp DBL Start of run <ul> <li>\"view factor\" to zone radiant temp, dimless.  Includes Oppenheim surface conductance.</li> <li>aka \"F-prime\" in CZM documentation.</li> </ul> Name Type Variability Description/Comments sbcI.frRad DBL Start of run re radiant to radiant temp (room radiant node or sky) sbcI.fSky DBL Start of run \"view factor\" to radiant surround at sky temp sbcI.fAir DBL Start of run \"view factor\" to radiant surround at air temp (ground, horizon) Name Type Variability Description/Comments sbcI.hcNat FLOAT_GEZ End of subhour surface natural convection coefficient, Btuh/ft2-F sbcI.hcFrc FLOAT_GEZ End of subhour surface forced (wind) convection coefficient, Btuh/ft2-F sbcI.hcMult FLOAT_GEZ End of subhour surface convection coefficient multiplier, dimless sbcI.hxa FLOAT_GEZ End of subhour overall coeff to sb_txa = sb_hcMult*(sb_hcNat + sb_hcFrc), Btuh/ft2-F sbcI.hxr FLOAT_GEZ End of subhour <ul> <li>surface (linearized) radiative coefficient, Btuh/ft2-F</li> <li>= coupling to sb_txr</li> </ul> sbcI.hxtot number End of subhour sb_hxa + sb_hxr sbcI.uRat DBL End of subhour <ul> <li>ratio uC/(sb_hxa + sb_hxr + uC)</li> <li>= 1/(1 + rC*(sb_hxa + sb_hxr))</li> <li>where uC = surface-to-surface conductance</li> <li>rC = 1/uC</li> <li>but: duct model outside surf to duct air</li> </ul> Name Type Variability Description/Comments sbcI.fRat DBL End of subhour <ul> <li>sb_hxtot * sb_uRat, Btuh/ft2-F</li> <li>= overall conductance not including other side</li> <li>surface resistances</li> <li>(ducts: overall conductance from duct air to sb_txe)</li> </ul> sbcI.cx DBL End of subhour air/radiant coupling due to this surface, Btuh/ft2-F Name Type Variability Description/Comments sbcI.sgTarg solar gain target: bm, df gain from insolation SGTARG Name Type Variability Description/Comments sbcI.sgTarg.bm DBL End of subhour beam sbcI.sgTarg.df DBL End of subhour diffuse sbcI.sgTarg.tot DBL End of subhour total sbcI.sg DBL End of subhour absorbed solar total, Btuh (NOT Btuh/ft2), summed from sb_sgTarg Name Type Variability Description/Comments sbcI.tSrf number End of subhour most recently calculated surface temp, F sbcI.tSrfls number Start of subhour <ul> <li>last step surface temp, F</li> <li>copied from sb_tSrf at step end</li> <li>not *e (available for probing)</li> </ul> sbcI.qrAbs DBL End of subhour <ul> <li>total absorbed radiant heat gain at surface, Btuh/ft2 (+ = into surface)</li> <li>= (sb_sg + sb_rIg)/area</li> </ul> sbcI.txa number End of subhour <ul> <li>adjacent air temp, F (from prior step)</li> <li>inside: prior step zone tz</li> <li>outside: current step ambient dry bulb temp</li> </ul> sbcI.txr number End of subhour <ul> <li>adjacent radiant temp, F</li> <li>inside: prior step zone tr</li> <li>outside: current step sky temp</li> </ul> sbcI.txe number End of subhour <ul> <li>adjacent environmental temp, F</li> <li>combined sb_txa and sb_txr; simplifies calcs in some cases</li> <li>set but unused? for inside</li> <li>set/used for ASHWAT outside</li> </ul> sbcI.w DBL End of subhour <ul> <li>adjacent air humidity ratio if known (else 0)</li> <li>used re duct leakage</li> </ul> sbcI.qSrf DBL End of subhour <ul> <li>conduction into surface, Btuh/ft2</li> <li>updated at end of timestep</li> </ul> Name Type Variability Description/Comments sbcI.pXS XSURFP Start of run parent pointer sbcI.si number Start of run <ul> <li>side of *sb_pXS represented by this SBC</li> <li>0=inside, 1=outside</li> </ul> sbcI.fcWind DBL Start of run <ul> <li>wind constant re sb_hcFrc (includes roughness, unit conversion, height adj, ...)</li> <li>value is model specific</li> <li>Walton: sb_hcFrc = sb_fcWind * Top.windSpeedSqrtSh</li> <li>Unified: sb_hcFrc = sb_fcWind * Top.windSpeedPt8</li> </ul> sbcI.fcWind2 DBL Start of run unified: add'l constant re sb_eta sbcI.eta DBL End of subhour <ul> <li>unified: wind speed adjustment included in sb_hcNat</li> <li>windV=0: sb_eta=1, sb_hcNat=still-air value</li> <li>windv&gt;0: sb_eta&lt;1, sb_hcNat is reduced</li> </ul> <ul> <li>characteristic dimensions re convection models</li> <li>not always set or used</li> <li>Note: may be derived from parent surface TODO</li> </ul> Name Type Variability Description/Comments sbcI.widNom DBL Start of run nominal width, ft (smaller dimension assuming rectangle) sbcI.lenNom DBL Start of run nominal length, ft (larger dimension assuming rectangle) sbcI.lenCharNat DBL Start of run characteristic length for some natural convection models, ft sbcI.lenEffWink DBL Start of run effective length for Winkelmann forced convection model, ft Name Type Variability Description/Comments sbcI.cosTilt DBL Start of run <ul> <li>cos( Tilt ) for the boundary -- note parent surface tilt is defined</li> <li>relative to outside normal (sbcO), so inside sb_cosTilt is oposite (+180 deg)</li> </ul> sbcI.atvDeg DBL Start of run angle-to-vertical, deg (inside: 90-tilt; outside: tilt-90) sbcI.cosAtv DBL Start of run cos( angle to vertical) 0 - 1 (never &lt; 0) sbcI.hcModel choice:CONVMODEL Start of run <ul> <li>surface convective coefficient model</li> <li>specifies calc method sb_hcNat and sb_hcFrc</li> </ul> sbcI.hcFrcOptions number Start of run <ul> <li>options re inside forced convection model</li> <li>1: use sb_hcFrcCoeffs (see code), else zn_hcFrc</li> </ul> sbcI.hcFrcCoeffs[index] number Array [DIM_HCFRCCOEFFS] Start of run <ul> <li>coefficients for forced convection model (inside only)</li> <li>1 extra array member required by cul</li> </ul> sbcI.hcLChar number Start of run <ul> <li>characteristic length, ft</li> <li>used in derivation of exterior forced convective coeff</li> <li>default = 10 ft</li> <li>unused re natural convective coeff (interior or exterior)</li> </ul> sbcI.hcConst[index] DBL Array [3] Start of run <ul> <li>convection coefficient model constants</li> <li>Unified: exposure to zone or ambient</li> <li>hcNat = sb_hcConst[]*abs( TD)^.33)</li> <li>[ 0]: tAir&lt;=tSrf, [ 1]: tAir&gt;tSrf</li> <li>[ 2]: unused</li> <li>ASHRAE: exposure to zone, hcNat = sb_hcConst[]</li> <li>[ 0]: sys off, tAir&lt;=tSrf, [ 1]: sys off, tAir&gt;tSrf</li> <li>[ 2]: sys on</li> </ul> <ul> <li>re [sfExCnd][sfexcnd] = GROUND: conductances to weather vars, Btuh/ft2-F</li> <li>correlation values derived by Bazjanac/Huang for various</li> <li>insulation configurations</li> </ul> Name Type Variability Description/Comments sbcI.groundModel choice:GROUNDMODEL Start of run <ul> <li>ground model in use (not input 1/1/2015)</li> <li>C_GROUNDMODELCH_D2INP: DOE-2 model w/ user coeffs</li> <li>C_GROUNDMODELCH_D2COR: DOE-2 model w/ correlation coeffs</li> </ul> sbcI.cTaDbAvgYr FLOAT_GEZ Start of run to annual avg taDb sbcI.cTaDbAvg31 FLOAT_GEZ Start of run to last 31 day avg taDb sbcI.cTaDbAvg14 FLOAT_GEZ Start of run to last 14 day avg taDb sbcI.cTaDbAvg07 FLOAT_GEZ Start of run to last 7 day avg taDb sbcI.cTGrnd FLOAT_GEZ Start of run to computed ground temp sbcI.rGrnd FLOAT_GEZ Start of run resistance = 1/(sum of above) (0 if sum=0) sbcI.rConGrnd FLOAT_GEZ Start of run <ul> <li>ground model implicit construction resistance, ft2-F/Btuh</li> <li>= approx resistance of construction film/carpet/slab/soil</li> <li>Caution: construction should be consistent with configuration</li> <li>implicit in coefficient values.</li> </ul> sbcO outside (ambient or adjacent zone) surface boundary conditions SBC Name Type Variability Description/Comments sbcO.absSlr number Start of monthly-hourly solar (SW) absorptance, dimless sbcO.awAbsSlr DBL Start of monthly-hourly <ul> <li>area-weighted solar absorptance</li> <li>= sb_absSlr * area / zn_surfASlr</li> <li>exterior surf outside: always 0</li> <li>windows inside: TBD 12-8-10</li> <li>ducts: always 0</li> </ul> sbcO.epsLW number Start of run thermal (LW) emittance sbcO.zi TI Start of run adjacent zone idx, 0 if exposed to ambient sbcO.F DBL Start of run solar (short wave) fraction ?  TODO: NOT USED? as of 4-2012 sbcO.Fp DBL Start of run <ul> <li>\"view factor\" to zone radiant temp, dimless.  Includes Oppenheim surface conductance.</li> <li>aka \"F-prime\" in CZM documentation.</li> </ul> Name Type Variability Description/Comments sbcO.frRad DBL Start of run re radiant to radiant temp (room radiant node or sky) sbcO.fSky DBL Start of run \"view factor\" to radiant surround at sky temp sbcO.fAir DBL Start of run \"view factor\" to radiant surround at air temp (ground, horizon) Name Type Variability Description/Comments sbcO.hcNat FLOAT_GEZ End of subhour surface natural convection coefficient, Btuh/ft2-F sbcO.hcFrc FLOAT_GEZ End of subhour surface forced (wind) convection coefficient, Btuh/ft2-F sbcO.hcMult FLOAT_GEZ End of subhour surface convection coefficient multiplier, dimless sbcO.hxa FLOAT_GEZ End of subhour overall coeff to sb_txa = sb_hcMult*(sb_hcNat + sb_hcFrc), Btuh/ft2-F sbcO.hxr FLOAT_GEZ End of subhour <ul> <li>surface (linearized) radiative coefficient, Btuh/ft2-F</li> <li>= coupling to sb_txr</li> </ul> sbcO.hxtot number End of subhour sb_hxa + sb_hxr sbcO.uRat DBL End of subhour <ul> <li>ratio uC/(sb_hxa + sb_hxr + uC)</li> <li>= 1/(1 + rC*(sb_hxa + sb_hxr))</li> <li>where uC = surface-to-surface conductance</li> <li>rC = 1/uC</li> <li>but: duct model outside surf to duct air</li> </ul> Name Type Variability Description/Comments sbcO.fRat DBL End of subhour <ul> <li>sb_hxtot * sb_uRat, Btuh/ft2-F</li> <li>= overall conductance not including other side</li> <li>surface resistances</li> <li>(ducts: overall conductance from duct air to sb_txe)</li> </ul> sbcO.cx DBL End of subhour air/radiant coupling due to this surface, Btuh/ft2-F Name Type Variability Description/Comments sbcO.sgTarg solar gain target: bm, df gain from insolation SGTARG Name Type Variability Description/Comments sbcO.sgTarg.bm DBL End of subhour beam sbcO.sgTarg.df DBL End of subhour diffuse sbcO.sgTarg.tot DBL End of subhour total sbcO.sg DBL End of subhour absorbed solar total, Btuh (NOT Btuh/ft2), summed from sb_sgTarg Name Type Variability Description/Comments sbcO.tSrf number End of subhour most recently calculated surface temp, F sbcO.tSrfls number Start of subhour <ul> <li>last step surface temp, F</li> <li>copied from sb_tSrf at step end</li> <li>not *e (available for probing)</li> </ul> sbcO.qrAbs DBL End of subhour <ul> <li>total absorbed radiant heat gain at surface, Btuh/ft2 (+ = into surface)</li> <li>= (sb_sg + sb_rIg)/area</li> </ul> sbcO.txa number End of subhour <ul> <li>adjacent air temp, F (from prior step)</li> <li>inside: prior step zone tz</li> <li>outside: current step ambient dry bulb temp</li> </ul> sbcO.txr number End of subhour <ul> <li>adjacent radiant temp, F</li> <li>inside: prior step zone tr</li> <li>outside: current step sky temp</li> </ul> sbcO.txe number End of subhour <ul> <li>adjacent environmental temp, F</li> <li>combined sb_txa and sb_txr; simplifies calcs in some cases</li> <li>set but unused? for inside</li> <li>set/used for ASHWAT outside</li> </ul> sbcO.w DBL End of subhour <ul> <li>adjacent air humidity ratio if known (else 0)</li> <li>used re duct leakage</li> </ul> sbcO.qSrf DBL End of subhour <ul> <li>conduction into surface, Btuh/ft2</li> <li>updated at end of timestep</li> </ul> Name Type Variability Description/Comments sbcO.pXS XSURFP Start of run parent pointer sbcO.si number Start of run <ul> <li>side of *sb_pXS represented by this SBC</li> <li>0=inside, 1=outside</li> </ul> sbcO.fcWind DBL Start of run <ul> <li>wind constant re sb_hcFrc (includes roughness, unit conversion, height adj, ...)</li> <li>value is model specific</li> <li>Walton: sb_hcFrc = sb_fcWind * Top.windSpeedSqrtSh</li> <li>Unified: sb_hcFrc = sb_fcWind * Top.windSpeedPt8</li> </ul> sbcO.fcWind2 DBL Start of run unified: add'l constant re sb_eta sbcO.eta DBL End of subhour <ul> <li>unified: wind speed adjustment included in sb_hcNat</li> <li>windV=0: sb_eta=1, sb_hcNat=still-air value</li> <li>windv&gt;0: sb_eta&lt;1, sb_hcNat is reduced</li> </ul> <ul> <li>characteristic dimensions re convection models</li> <li>not always set or used</li> <li>Note: may be derived from parent surface TODO</li> </ul> Name Type Variability Description/Comments sbcO.widNom DBL Start of run nominal width, ft (smaller dimension assuming rectangle) sbcO.lenNom DBL Start of run nominal length, ft (larger dimension assuming rectangle) sbcO.lenCharNat DBL Start of run characteristic length for some natural convection models, ft sbcO.lenEffWink DBL Start of run effective length for Winkelmann forced convection model, ft Name Type Variability Description/Comments sbcO.cosTilt DBL Start of run <ul> <li>cos( Tilt ) for the boundary -- note parent surface tilt is defined</li> <li>relative to outside normal (sbcO), so inside sb_cosTilt is oposite (+180 deg)</li> </ul> sbcO.atvDeg DBL Start of run angle-to-vertical, deg (inside: 90-tilt; outside: tilt-90) sbcO.cosAtv DBL Start of run cos( angle to vertical) 0 - 1 (never &lt; 0) sbcO.hcModel choice:CONVMODEL Start of run <ul> <li>surface convective coefficient model</li> <li>specifies calc method sb_hcNat and sb_hcFrc</li> </ul> sbcO.hcFrcOptions number Start of run <ul> <li>options re inside forced convection model</li> <li>1: use sb_hcFrcCoeffs (see code), else zn_hcFrc</li> </ul> sbcO.hcFrcCoeffs[index] number Array [DIM_HCFRCCOEFFS] Start of run <ul> <li>coefficients for forced convection model (inside only)</li> <li>1 extra array member required by cul</li> </ul> sbcO.hcLChar number Start of run <ul> <li>characteristic length, ft</li> <li>used in derivation of exterior forced convective coeff</li> <li>default = 10 ft</li> <li>unused re natural convective coeff (interior or exterior)</li> </ul> sbcO.hcConst[index] DBL Array [3] Start of run <ul> <li>convection coefficient model constants</li> <li>Unified: exposure to zone or ambient</li> <li>hcNat = sb_hcConst[]*abs( TD)^.33)</li> <li>[ 0]: tAir&lt;=tSrf, [ 1]: tAir&gt;tSrf</li> <li>[ 2]: unused</li> <li>ASHRAE: exposure to zone, hcNat = sb_hcConst[]</li> <li>[ 0]: sys off, tAir&lt;=tSrf, [ 1]: sys off, tAir&gt;tSrf</li> <li>[ 2]: sys on</li> </ul> <ul> <li>re [sfExCnd][sfexcnd] = GROUND: conductances to weather vars, Btuh/ft2-F</li> <li>correlation values derived by Bazjanac/Huang for various</li> <li>insulation configurations</li> </ul> Name Type Variability Description/Comments sbcO.groundModel choice:GROUNDMODEL Start of run <ul> <li>ground model in use (not input 1/1/2015)</li> <li>C_GROUNDMODELCH_D2INP: DOE-2 model w/ user coeffs</li> <li>C_GROUNDMODELCH_D2COR: DOE-2 model w/ correlation coeffs</li> </ul> sbcO.cTaDbAvgYr FLOAT_GEZ Start of run to annual avg taDb sbcO.cTaDbAvg31 FLOAT_GEZ Start of run to last 31 day avg taDb sbcO.cTaDbAvg14 FLOAT_GEZ Start of run to last 14 day avg taDb sbcO.cTaDbAvg07 FLOAT_GEZ Start of run to last 7 day avg taDb sbcO.cTGrnd FLOAT_GEZ Start of run to computed ground temp sbcO.rGrnd FLOAT_GEZ Start of run resistance = 1/(sum of above) (0 if sum=0) sbcO.rConGrnd FLOAT_GEZ Start of run <ul> <li>ground model implicit construction resistance, ft2-F/Btuh</li> <li>= approx resistance of construction film/carpet/slab/soil</li> <li>Caution: construction should be consistent with configuration</li> <li>implicit in coefficient values.</li> </ul> Name Type Variability Description/Comments fenModel choice:FENMODEL Start of run fenestration model: user input SHGC number Start of run rated SHGC of assembly fMult FLOAT_GEZ Start of run window frame/mullion multiplier (input or from GT) UNFRC UH_GZ Start of run overall U-factor evaluated under per NFRC heating conditions NGlz number Start of run # of glazings bare-glass assembly exShd choice:EXSHD Start of run exterior shade (ASHWAT only) inShd choice:INSHD Start of run interior shade (ditto) dirtLoss FLOAT_GEZ Start of run window dirt loss factor (input or from GT) <p>next 3 are input for surface, copied from surface of door or window</p> Name Type Variability Description/Comments sfExCnd choice:EXCND Start of run adjacent cond: adiabatic/ambient/specT/adjZn. sfExT TEMP Start of subhour outside temp if .sfExCnd==C_EXCNDCH_SPECT sfAdjZi TI Start of run zone for sfExCnd==ADJZN, or 0 for exterior surface/door/window. uI UH_GZ Start of run interior surf (air film) conductance. input. uC UH_GZ Start of run uval of construction, excl surfaces (air films). From CON, GT, or SFI.sfU user input. uX UH_GZ Start of run exterior surface (air film) conductance. input. Rf number Start of run <ul> <li>exterior roughness factor, re convection (new 10-10)</li> <li>default: windows=1, all others=2.17</li> </ul> grndRefl number Start of monthly-hourly ground reflectivity, default: wall: Top.grndRefl; door/win: owning wall. <p>view factors for diffuse (only) radiation so user can precompute shading effects of window overhang/fins</p> Name Type Variability Description/Comments vfSkyDf number Start of monthly-hourly sky view factor for diffuse solar, default .5 + .5*cos(tilt) vfGrndDf number Start of monthly-hourly ground view factor for diffuse solar, default .5 - .5*cos(tilt) <p>view factors re outside surface LW (thermal) radiant exchange</p> Name Type Variability Description/Comments vfSkyLW number Start of run sky view factor for long-wave radiation, hard-coded .5 + .5*cos( tilt) vfGrndLW number Start of run ground view factor for long-wave radiation, hard-coded .5 - .5*cos( tilt) Name Type Variability Description/Comments uval UH_GZ Start of run <ul> <li>Overall air-to-air conductance, Btuh/sf-F</li> <li>includes uX and uC surf cond</li> </ul> <ul> <li>*Nominal* U-factor etc including ASHRAE heating surface resistance</li> <li>documentation only!</li> </ul> Name Type Variability Description/Comments UNom UH_GZ Start of run nominal air-to-air U-factor, Btuh/sf-F UANom UA Start of run <ul> <li>area * xs_UNom, Btuh/F</li> <li>surface values, [0]=inside, [1]=outside</li> </ul> rSrfNom[index] number Array [2] Start of run surface resistance sf-F/Btuh hSrfNom[index] number Array [2] Start of run surface conductance (1/xs_rSrfNom), Btuh/sf-F Name Type Variability Description/Comments cFctr UH_GZ Start of run surface-to-surface conductance (not populated!) Name Type Variability Description/Comments iwshad TI Start of run 0 if none or subscr in WSHADRAT of overhang/fin info for a shaded window msi TI Start of run 0, or mass (MsR) subscript for CTMXWALL. tLrB[index] number Array [XSMXTLRB] End of hour <ul> <li>layer boundary temps re probes</li> <li>populated at end of hour</li> </ul> <p>solar gain distributions: [partly] based on SGDIST inputs</p> Name Type Variability Description/Comments nsgdist number Start of run <ul> <li>Number of SG distributions</li> <li>[SGDIST][sgdist] sgdist[ HSMXSGDIST]:</li> </ul> sgdist[index] Array [HSMXSGDIST] <ul> <li>=8 (2-95), cndefns.h. explicit solar gain distribs</li> <li>*r -&gt; min variation here: no members set at input time</li> <li>*nest [SGDIST][sgdist] sgdist -&gt; solar gain distribution (struct just above).  set: cncult3.cpp:cnuSgDist().</li> </ul> SGDIST Name Type Variability Description/Comments sgdist[index].targTy number Start of run <ul> <li>target type: define (cnguts.h)   basAnc &amp; member</li> <li>zone air                    SGDTTZNAIR    ZNR.qSgAir</li> <li>(zone check/results total   SGDTTZNTOT    ZNR.qSgTot/qSgTotSh (not here; gen'd in cgsolar 2-95)</li> <li>surface in/outside          SGDTSURFI/O</li> </ul> sgdist[index].targTi TI Start of run subscript of targeted entry in RAT above: *i in SGI; *nest merges variation flags. sgdist[index].FSO number Start of monthly-hourly frac of gain to target, shades open sgdist[index].FSC number Start of monthly-hourly frac of gain to target, shades closed (defaults to sgd_FSO)"},{"location":"probe-definitions/zhx/","title":"Zhx","text":"<p>title: zhx --- setup time members</p> Name Type Variability Description/Comments zhxTy ZHXTY Start of run <ul> <li>zhx type (cndtypes.def): LhSo, LhStH, ArSo, ArStH, ArStC, or (future) nv.</li> <li>testable bits: So = set output, StH, StC, St = set temp (both),</li> <li>Lh = local heat (coil in terminal, or baseboard),</li> <li>Ar = heat/cool with air from air handler.</li> </ul> Name Type Variability Description/Comments sp TEMP Start of hour setpoint if heat xfer is tstat controlled (SETTMP), else unused (hourly variability) spPri number Start of run setpoint priority: low #'s used first if setpoints equal, so can eg peg air heat b4 using local heat. Name Type Variability Description/Comments ui TI Start of run terminal TU subscript if a term cap type zi TI Start of run zone ZNR subscript always -- for term cap or vent zhx.  When stable, just use ownTi? ai TI Start of run 0 or AH ss (subscript) of air handler supplying Ar zhx (copied from tu). Name Type Variability Description/Comments xiLh TI Start of run subscr of local heat ZHX for same terminal if any, else 0; not set for self. xiArH TI Start of run was xiHeat.  subscr of air heat or air set output ZHX for same terminal, if any, else 0 xiArC TI Start of run xiCool.      subscr of air cool ZHX for same terminal, if any, else 0 Name Type Variability Description/Comments nxZhx4z TI Start of run chain: 0 or subscript of next terminal zhx for this zone; 0?? if vent; head ZNR.zhx1. nxZhxSt4z TI Start of hour chain: 0 or ss of next SETTMP zhx for this zone; head ZNR.zhx1St; kept sorted on sp/pri at runtime. Name Type Variability Description/Comments nxZhx4a TI Start of run chain: 0 or subscript of next terminal zhx for this air handler; head AH.zhx1. <p>runtime members</p> Name Type Variability Description/Comments mda number Start of hour <ul> <li>for SETTMP, mode (mdSeq[] subscr) in which this is active (ctrl'd by its sp) ZHX.</li> <li>in lower modes, heat is max, cool min; vica versa in hier modes.</li> </ul>"},{"location":"probe-definitions/znRes/","title":"znRes","text":"<p>title: znRes ---</p> Name Type Variability Description/Comments Y run results, aka year or annual ZNRES_IVL_SUB Name Type Variability Description/Comments Y.n number End of run <ul> <li>accumulate call count (to convert sums to averages)</li> <li>code assumes this is 1st member</li> <li>SIs. code in cnguts.h and cnguts.cpp:cgaccum assumes SI members are together, start with nHrHeat, end with nHrCeilFan.</li> <li>6-92 there is now no code to set these hourly+ SI members... eventually use or delete; work out sh--&gt;hr accumulation.</li> </ul> Y.nHrHeat number End of run # of hours in which any heating occurred; 1st \"# of hours\" Y.nHrCool number End of run ditto cooling Y.nHrFanv number End of run ditto fan vent Y.nHrNatv number End of run ditto natural vent Y.nHrCeilFan number End of run <ul> <li>ditto ceiling fan operation; last \"# of hours\"</li> <li>INTs (32-bit) code in cnguts.h and .cpp assumes INT members together, first is nIter, last is nSubhrLX.</li> </ul> Y.nIter number End of run # of iterations Y.nShVentH number End of run <ul> <li># of substeps int this interval when ventilation caused heating</li> <li>(initial implementation for OAV only, 10-13)</li> </ul> Y.nSubhr number End of run subhour counter (convenience) Y.nSubhrLX number End of run <ul> <li># subhours with condensation (excess latent gain)</li> <li>floats. code in cnguts.h and cnguts.cpp:cgaccum assumes float members together, including subgroups to average and to sum.</li> <li>floats to average</li> </ul> Y.tAir number End of run zone air temp; must be 1st float, is first float to average (see cnguts.h) Y.tRad number End of run <ul> <li>zone radiant temp; meaningful iff convective/radiant model active for this zone</li> <li>comfort statisitics (not computed for all zones)</li> </ul> Y.PMV7730 number End of run <ul> <li>ISO7730 predicted mean vote = predicted comfort per ASHRAE thermal sensation scale</li> <li>+3=hot, +2=warm, +1=slightly warm, 0=neutral, -1=slightly cool, -2=cool, -3=cold</li> </ul> Y.PPD7730 number End of run ISO7730 predicted percent dissatisfied = % of people not satisfied with conditions Y.ivAirX number End of run zone air exchange rate not including HVAC or ducts, ACH Y.pz0 number End of run zone air pressure relative to patm at nominal z=0, lbf/sf (from zn_pz0) Y.wAir number End of run <ul> <li>zone air humidity ratio; last float to average</li> <li>floats to sum: qCond thru qlBal/litEu, incuding subSubGroups of sensible and latent heats</li> <li>1. sensible heats for heat balance: qCond thru qsMech (cgenbal.cpp)</li> </ul> Y.qCond number End of run zone wall conduction gain, Btu; 1st heat flow and first float to sum Y.qsInfil number End of run zone infiltration sensible gain, Btu Y.qSlr number End of run zone solar gain, Btu Y.qsIg number End of run zone internal sensible gain, Btu Y.qMass number End of run zone net sensible transfer from mass, Btu.  See qlAir for moisture. Y.qsIz number End of run interzone gain to zone, Btu Y.qsMech number End of run <ul> <li>zone total sensible mechanical heat gain, Btu</li> <li>includes HPWH heat removal</li> </ul> Y.eqfVentHr number End of run <ul> <li>equivalent full vent hours = sum( zn_fVent)</li> <li>2. latent heats for latent heat balance: qlInfil thru qlMech</li> </ul> Y.qlInfil number End of run zone infiltration latent gain, Btu Y.qlIg number End of run zone internal latent gain, Btu Y.qlIz number End of run zone IZXFER latent gain (infil, vent, duct leakage) Y.qlAir number End of run latent heat of moisture removed from zone air: moisture analog of znCAir. Y.qlMech number End of run <ul> <li>zone latent mechanical heat gain, Btu; last heat flow and last float to sum</li> <li>3. floats to sum, not included in either balance</li> </ul> Y.qsBal number End of run sensible balance: sum of sensible heats, should be near 0. Set in cnguts.cpp. Y.qlBal number End of run latent balance similarly.  Consider removing Bals after development. Y.qlX number End of run <ul> <li>latent gain rejected to prevent zone supersaturation === heat of condensation.</li> <li>- added to next subr sens gain. Btu.</li> </ul> Name Type Variability Description/Comments Y.unMetHrDH[index] number Array [2] End of run <ul> <li>end-of-hour tz excursion below/above setpoint, deg-hr</li> <li>[ 0]=heating (&lt;0)  [ 1]=cooling (&gt;0)</li> </ul> Y.unMetShDH[index] number Array [2] End of run <ul> <li>subhour tz excursion below/above setpoint, deg-hr</li> <li>[ 0]=heating (&lt;0)  [ 1]=cooling (&gt;0)</li> </ul> Y.unMetHrs[index] number Array [2] End of run <ul> <li>unmet hours (accumulated subhourly, tz excursion &gt; 0)</li> <li>[ 0]=heating  [ 1]=cooling</li> </ul> Y.unMetHrsTol[index] number Array [2] End of run <ul> <li>unmet hours (accumulated subhourly, tz excursion &gt; tp_unMetTzTol)</li> <li>[ 0]=heating  [ 1]=cooling</li> </ul> Name Type Variability Description/Comments Y.qscHvac number End of run zone accumulated HVAC sensible cooling, Btu (&lt;=0) (OAV not included) Y.qshHvac number End of run zone accumulated HVAC sensible heating, Btu (&gt;=0) Y.qcMech number End of run zone accumulated total mechanical (sensible + latent) cooling (including HPWH heat extraction), Btu (&lt; 0) Y.qhMech number End of run zone accumulated total mechanical (sensible + latent) heating (including HPWH heat extraction), Btu (&gt;0) Y.qvMech number End of run zone accumulated mechanical (OAV) total (sensible + latent) heat gains, Btu (&lt; 0) Y.litDmd number End of run zone lighting demand and Energy Use, ... Y.litEu number End of run <ul> <li>... from [GAINs][gain], in addition to posting Eu to meter, re daylighting for NREL. 9-94.</li> <li>floats that track min/max value</li> </ul> Y.unMetMaxTD[index] number Array [2] End of run <ul> <li>maximum tz excursion below/above setpoint, F</li> <li>[ 0]=heating (&lt;0)  [ 1]=cooling (&gt;0)</li> </ul> M month ZNRES_IVL_SUB Name Type Variability Description/Comments M.n number Unknown <ul> <li>accumulate call count (to convert sums to averages)</li> <li>code assumes this is 1st member</li> <li>SIs. code in cnguts.h and cnguts.cpp:cgaccum assumes SI members are together, start with nHrHeat, end with nHrCeilFan.</li> <li>6-92 there is now no code to set these hourly+ SI members... eventually use or delete; work out sh--&gt;hr accumulation.</li> </ul> M.nHrHeat number Unknown # of hours in which any heating occurred; 1st \"# of hours\" M.nHrCool number Unknown ditto cooling M.nHrFanv number Unknown ditto fan vent M.nHrNatv number Unknown ditto natural vent M.nHrCeilFan number Unknown <ul> <li>ditto ceiling fan operation; last \"# of hours\"</li> <li>INTs (32-bit) code in cnguts.h and .cpp assumes INT members together, first is nIter, last is nSubhrLX.</li> </ul> M.nIter number Unknown # of iterations M.nShVentH number Unknown <ul> <li># of substeps int this interval when ventilation caused heating</li> <li>(initial implementation for OAV only, 10-13)</li> </ul> M.nSubhr number Unknown subhour counter (convenience) M.nSubhrLX number Unknown <ul> <li># subhours with condensation (excess latent gain)</li> <li>floats. code in cnguts.h and cnguts.cpp:cgaccum assumes float members together, including subgroups to average and to sum.</li> <li>floats to average</li> </ul> M.tAir number Unknown zone air temp; must be 1st float, is first float to average (see cnguts.h) M.tRad number Unknown <ul> <li>zone radiant temp; meaningful iff convective/radiant model active for this zone</li> <li>comfort statisitics (not computed for all zones)</li> </ul> M.PMV7730 number Unknown <ul> <li>ISO7730 predicted mean vote = predicted comfort per ASHRAE thermal sensation scale</li> <li>+3=hot, +2=warm, +1=slightly warm, 0=neutral, -1=slightly cool, -2=cool, -3=cold</li> </ul> M.PPD7730 number Unknown ISO7730 predicted percent dissatisfied = % of people not satisfied with conditions M.ivAirX number Unknown zone air exchange rate not including HVAC or ducts, ACH M.pz0 number Unknown zone air pressure relative to patm at nominal z=0, lbf/sf (from zn_pz0) M.wAir number Unknown <ul> <li>zone air humidity ratio; last float to average</li> <li>floats to sum: qCond thru qlBal/litEu, incuding subSubGroups of sensible and latent heats</li> <li>1. sensible heats for heat balance: qCond thru qsMech (cgenbal.cpp)</li> </ul> M.qCond number Unknown zone wall conduction gain, Btu; 1st heat flow and first float to sum M.qsInfil number Unknown zone infiltration sensible gain, Btu M.qSlr number Unknown zone solar gain, Btu M.qsIg number Unknown zone internal sensible gain, Btu M.qMass number Unknown zone net sensible transfer from mass, Btu.  See qlAir for moisture. M.qsIz number Unknown interzone gain to zone, Btu M.qsMech number Unknown <ul> <li>zone total sensible mechanical heat gain, Btu</li> <li>includes HPWH heat removal</li> </ul> M.eqfVentHr number Unknown <ul> <li>equivalent full vent hours = sum( zn_fVent)</li> <li>2. latent heats for latent heat balance: qlInfil thru qlMech</li> </ul> M.qlInfil number Unknown zone infiltration latent gain, Btu M.qlIg number Unknown zone internal latent gain, Btu M.qlIz number Unknown zone IZXFER latent gain (infil, vent, duct leakage) M.qlAir number Unknown latent heat of moisture removed from zone air: moisture analog of znCAir. M.qlMech number Unknown <ul> <li>zone latent mechanical heat gain, Btu; last heat flow and last float to sum</li> <li>3. floats to sum, not included in either balance</li> </ul> M.qsBal number Unknown sensible balance: sum of sensible heats, should be near 0. Set in cnguts.cpp. M.qlBal number Unknown latent balance similarly.  Consider removing Bals after development. M.qlX number Unknown <ul> <li>latent gain rejected to prevent zone supersaturation === heat of condensation.</li> <li>- added to next subr sens gain. Btu.</li> </ul> Name Type Variability Description/Comments M.unMetHrDH[index] number Array [2] Unknown <ul> <li>end-of-hour tz excursion below/above setpoint, deg-hr</li> <li>[ 0]=heating (&lt;0)  [ 1]=cooling (&gt;0)</li> </ul> M.unMetShDH[index] number Array [2] Unknown <ul> <li>subhour tz excursion below/above setpoint, deg-hr</li> <li>[ 0]=heating (&lt;0)  [ 1]=cooling (&gt;0)</li> </ul> M.unMetHrs[index] number Array [2] Unknown <ul> <li>unmet hours (accumulated subhourly, tz excursion &gt; 0)</li> <li>[ 0]=heating  [ 1]=cooling</li> </ul> M.unMetHrsTol[index] number Array [2] Unknown <ul> <li>unmet hours (accumulated subhourly, tz excursion &gt; tp_unMetTzTol)</li> <li>[ 0]=heating  [ 1]=cooling</li> </ul> Name Type Variability Description/Comments M.qscHvac number Unknown zone accumulated HVAC sensible cooling, Btu (&lt;=0) (OAV not included) M.qshHvac number Unknown zone accumulated HVAC sensible heating, Btu (&gt;=0) M.qcMech number Unknown zone accumulated total mechanical (sensible + latent) cooling (including HPWH heat extraction), Btu (&lt; 0) M.qhMech number Unknown zone accumulated total mechanical (sensible + latent) heating (including HPWH heat extraction), Btu (&gt;0) M.qvMech number Unknown zone accumulated mechanical (OAV) total (sensible + latent) heat gains, Btu (&lt; 0) M.litDmd number Unknown zone lighting demand and Energy Use, ... M.litEu number Unknown <ul> <li>... from [GAINs][gain], in addition to posting Eu to meter, re daylighting for NREL. 9-94.</li> <li>floats that track min/max value</li> </ul> M.unMetMaxTD[index] number Array [2] Unknown <ul> <li>maximum tz excursion below/above setpoint, F</li> <li>[ 0]=heating (&lt;0)  [ 1]=cooling (&gt;0)</li> </ul> D day ZNRES_IVL_SUB Name Type Variability Description/Comments D.n number End of day <ul> <li>accumulate call count (to convert sums to averages)</li> <li>code assumes this is 1st member</li> <li>SIs. code in cnguts.h and cnguts.cpp:cgaccum assumes SI members are together, start with nHrHeat, end with nHrCeilFan.</li> <li>6-92 there is now no code to set these hourly+ SI members... eventually use or delete; work out sh--&gt;hr accumulation.</li> </ul> D.nHrHeat number End of day # of hours in which any heating occurred; 1st \"# of hours\" D.nHrCool number End of day ditto cooling D.nHrFanv number End of day ditto fan vent D.nHrNatv number End of day ditto natural vent D.nHrCeilFan number End of day <ul> <li>ditto ceiling fan operation; last \"# of hours\"</li> <li>INTs (32-bit) code in cnguts.h and .cpp assumes INT members together, first is nIter, last is nSubhrLX.</li> </ul> D.nIter number End of day # of iterations D.nShVentH number End of day <ul> <li># of substeps int this interval when ventilation caused heating</li> <li>(initial implementation for OAV only, 10-13)</li> </ul> D.nSubhr number End of day subhour counter (convenience) D.nSubhrLX number End of day <ul> <li># subhours with condensation (excess latent gain)</li> <li>floats. code in cnguts.h and cnguts.cpp:cgaccum assumes float members together, including subgroups to average and to sum.</li> <li>floats to average</li> </ul> D.tAir number End of day zone air temp; must be 1st float, is first float to average (see cnguts.h) D.tRad number End of day <ul> <li>zone radiant temp; meaningful iff convective/radiant model active for this zone</li> <li>comfort statisitics (not computed for all zones)</li> </ul> D.PMV7730 number End of day <ul> <li>ISO7730 predicted mean vote = predicted comfort per ASHRAE thermal sensation scale</li> <li>+3=hot, +2=warm, +1=slightly warm, 0=neutral, -1=slightly cool, -2=cool, -3=cold</li> </ul> D.PPD7730 number End of day ISO7730 predicted percent dissatisfied = % of people not satisfied with conditions D.ivAirX number End of day zone air exchange rate not including HVAC or ducts, ACH D.pz0 number End of day zone air pressure relative to patm at nominal z=0, lbf/sf (from zn_pz0) D.wAir number End of day <ul> <li>zone air humidity ratio; last float to average</li> <li>floats to sum: qCond thru qlBal/litEu, incuding subSubGroups of sensible and latent heats</li> <li>1. sensible heats for heat balance: qCond thru qsMech (cgenbal.cpp)</li> </ul> D.qCond number End of day zone wall conduction gain, Btu; 1st heat flow and first float to sum D.qsInfil number End of day zone infiltration sensible gain, Btu D.qSlr number End of day zone solar gain, Btu D.qsIg number End of day zone internal sensible gain, Btu D.qMass number End of day zone net sensible transfer from mass, Btu.  See qlAir for moisture. D.qsIz number End of day interzone gain to zone, Btu D.qsMech number End of day <ul> <li>zone total sensible mechanical heat gain, Btu</li> <li>includes HPWH heat removal</li> </ul> D.eqfVentHr number End of day <ul> <li>equivalent full vent hours = sum( zn_fVent)</li> <li>2. latent heats for latent heat balance: qlInfil thru qlMech</li> </ul> D.qlInfil number End of day zone infiltration latent gain, Btu D.qlIg number End of day zone internal latent gain, Btu D.qlIz number End of day zone IZXFER latent gain (infil, vent, duct leakage) D.qlAir number End of day latent heat of moisture removed from zone air: moisture analog of znCAir. D.qlMech number End of day <ul> <li>zone latent mechanical heat gain, Btu; last heat flow and last float to sum</li> <li>3. floats to sum, not included in either balance</li> </ul> D.qsBal number End of day sensible balance: sum of sensible heats, should be near 0. Set in cnguts.cpp. D.qlBal number End of day latent balance similarly.  Consider removing Bals after development. D.qlX number End of day <ul> <li>latent gain rejected to prevent zone supersaturation === heat of condensation.</li> <li>- added to next subr sens gain. Btu.</li> </ul> Name Type Variability Description/Comments D.unMetHrDH[index] number Array [2] End of day <ul> <li>end-of-hour tz excursion below/above setpoint, deg-hr</li> <li>[ 0]=heating (&lt;0)  [ 1]=cooling (&gt;0)</li> </ul> D.unMetShDH[index] number Array [2] End of day <ul> <li>subhour tz excursion below/above setpoint, deg-hr</li> <li>[ 0]=heating (&lt;0)  [ 1]=cooling (&gt;0)</li> </ul> D.unMetHrs[index] number Array [2] End of day <ul> <li>unmet hours (accumulated subhourly, tz excursion &gt; 0)</li> <li>[ 0]=heating  [ 1]=cooling</li> </ul> D.unMetHrsTol[index] number Array [2] End of day <ul> <li>unmet hours (accumulated subhourly, tz excursion &gt; tp_unMetTzTol)</li> <li>[ 0]=heating  [ 1]=cooling</li> </ul> Name Type Variability Description/Comments D.qscHvac number End of day zone accumulated HVAC sensible cooling, Btu (&lt;=0) (OAV not included) D.qshHvac number End of day zone accumulated HVAC sensible heating, Btu (&gt;=0) D.qcMech number End of day zone accumulated total mechanical (sensible + latent) cooling (including HPWH heat extraction), Btu (&lt; 0) D.qhMech number End of day zone accumulated total mechanical (sensible + latent) heating (including HPWH heat extraction), Btu (&gt;0) D.qvMech number End of day zone accumulated mechanical (OAV) total (sensible + latent) heat gains, Btu (&lt; 0) D.litDmd number End of day zone lighting demand and Energy Use, ... D.litEu number End of day <ul> <li>... from [GAINs][gain], in addition to posting Eu to meter, re daylighting for NREL. 9-94.</li> <li>floats that track min/max value</li> </ul> D.unMetMaxTD[index] number Array [2] End of day <ul> <li>maximum tz excursion below/above setpoint, F</li> <li>[ 0]=heating (&lt;0)  [ 1]=cooling (&gt;0)</li> </ul> H hour. ZNRES_IVL_SUB Name Type Variability Description/Comments H.n number End of hour <ul> <li>accumulate call count (to convert sums to averages)</li> <li>code assumes this is 1st member</li> <li>SIs. code in cnguts.h and cnguts.cpp:cgaccum assumes SI members are together, start with nHrHeat, end with nHrCeilFan.</li> <li>6-92 there is now no code to set these hourly+ SI members... eventually use or delete; work out sh--&gt;hr accumulation.</li> </ul> H.nHrHeat number End of hour # of hours in which any heating occurred; 1st \"# of hours\" H.nHrCool number End of hour ditto cooling H.nHrFanv number End of hour ditto fan vent H.nHrNatv number End of hour ditto natural vent H.nHrCeilFan number End of hour <ul> <li>ditto ceiling fan operation; last \"# of hours\"</li> <li>INTs (32-bit) code in cnguts.h and .cpp assumes INT members together, first is nIter, last is nSubhrLX.</li> </ul> H.nIter number End of hour # of iterations H.nShVentH number End of hour <ul> <li># of substeps int this interval when ventilation caused heating</li> <li>(initial implementation for OAV only, 10-13)</li> </ul> H.nSubhr number End of hour subhour counter (convenience) H.nSubhrLX number End of hour <ul> <li># subhours with condensation (excess latent gain)</li> <li>floats. code in cnguts.h and cnguts.cpp:cgaccum assumes float members together, including subgroups to average and to sum.</li> <li>floats to average</li> </ul> H.tAir number End of hour zone air temp; must be 1st float, is first float to average (see cnguts.h) H.tRad number End of hour <ul> <li>zone radiant temp; meaningful iff convective/radiant model active for this zone</li> <li>comfort statisitics (not computed for all zones)</li> </ul> H.PMV7730 number End of hour <ul> <li>ISO7730 predicted mean vote = predicted comfort per ASHRAE thermal sensation scale</li> <li>+3=hot, +2=warm, +1=slightly warm, 0=neutral, -1=slightly cool, -2=cool, -3=cold</li> </ul> H.PPD7730 number End of hour ISO7730 predicted percent dissatisfied = % of people not satisfied with conditions H.ivAirX number End of hour zone air exchange rate not including HVAC or ducts, ACH H.pz0 number End of hour zone air pressure relative to patm at nominal z=0, lbf/sf (from zn_pz0) H.wAir number End of hour <ul> <li>zone air humidity ratio; last float to average</li> <li>floats to sum: qCond thru qlBal/litEu, incuding subSubGroups of sensible and latent heats</li> <li>1. sensible heats for heat balance: qCond thru qsMech (cgenbal.cpp)</li> </ul> H.qCond number End of hour zone wall conduction gain, Btu; 1st heat flow and first float to sum H.qsInfil number End of hour zone infiltration sensible gain, Btu H.qSlr number End of hour zone solar gain, Btu H.qsIg number End of hour zone internal sensible gain, Btu H.qMass number End of hour zone net sensible transfer from mass, Btu.  See qlAir for moisture. H.qsIz number End of hour interzone gain to zone, Btu H.qsMech number End of hour <ul> <li>zone total sensible mechanical heat gain, Btu</li> <li>includes HPWH heat removal</li> </ul> H.eqfVentHr number End of hour <ul> <li>equivalent full vent hours = sum( zn_fVent)</li> <li>2. latent heats for latent heat balance: qlInfil thru qlMech</li> </ul> H.qlInfil number End of hour zone infiltration latent gain, Btu H.qlIg number End of hour zone internal latent gain, Btu H.qlIz number End of hour zone IZXFER latent gain (infil, vent, duct leakage) H.qlAir number End of hour latent heat of moisture removed from zone air: moisture analog of znCAir. H.qlMech number End of hour <ul> <li>zone latent mechanical heat gain, Btu; last heat flow and last float to sum</li> <li>3. floats to sum, not included in either balance</li> </ul> H.qsBal number End of hour sensible balance: sum of sensible heats, should be near 0. Set in cnguts.cpp. H.qlBal number End of hour latent balance similarly.  Consider removing Bals after development. H.qlX number End of hour <ul> <li>latent gain rejected to prevent zone supersaturation === heat of condensation.</li> <li>- added to next subr sens gain. Btu.</li> </ul> Name Type Variability Description/Comments H.unMetHrDH[index] number Array [2] End of hour <ul> <li>end-of-hour tz excursion below/above setpoint, deg-hr</li> <li>[ 0]=heating (&lt;0)  [ 1]=cooling (&gt;0)</li> </ul> H.unMetShDH[index] number Array [2] End of hour <ul> <li>subhour tz excursion below/above setpoint, deg-hr</li> <li>[ 0]=heating (&lt;0)  [ 1]=cooling (&gt;0)</li> </ul> H.unMetHrs[index] number Array [2] End of hour <ul> <li>unmet hours (accumulated subhourly, tz excursion &gt; 0)</li> <li>[ 0]=heating  [ 1]=cooling</li> </ul> H.unMetHrsTol[index] number Array [2] End of hour <ul> <li>unmet hours (accumulated subhourly, tz excursion &gt; tp_unMetTzTol)</li> <li>[ 0]=heating  [ 1]=cooling</li> </ul> Name Type Variability Description/Comments H.qscHvac number End of hour zone accumulated HVAC sensible cooling, Btu (&lt;=0) (OAV not included) H.qshHvac number End of hour zone accumulated HVAC sensible heating, Btu (&gt;=0) H.qcMech number End of hour zone accumulated total mechanical (sensible + latent) cooling (including HPWH heat extraction), Btu (&lt; 0) H.qhMech number End of hour zone accumulated total mechanical (sensible + latent) heating (including HPWH heat extraction), Btu (&gt;0) H.qvMech number End of hour zone accumulated mechanical (OAV) total (sensible + latent) heat gains, Btu (&lt; 0) H.litDmd number End of hour zone lighting demand and Energy Use, ... H.litEu number End of hour <ul> <li>... from [GAINs][gain], in addition to posting Eu to meter, re daylighting for NREL. 9-94.</li> <li>floats that track min/max value</li> </ul> H.unMetMaxTD[index] number Array [2] End of hour <ul> <li>maximum tz excursion below/above setpoint, F</li> <li>[ 0]=heating (&lt;0)  [ 1]=cooling (&gt;0)</li> </ul> S subhour, aka subStep or sub-time-step ZNRES_IVL_SUB Name Type Variability Description/Comments S.n number End of subhour <ul> <li>accumulate call count (to convert sums to averages)</li> <li>code assumes this is 1st member</li> <li>SIs. code in cnguts.h and cnguts.cpp:cgaccum assumes SI members are together, start with nHrHeat, end with nHrCeilFan.</li> <li>6-92 there is now no code to set these hourly+ SI members... eventually use or delete; work out sh--&gt;hr accumulation.</li> </ul> S.nHrHeat number End of subhour # of hours in which any heating occurred; 1st \"# of hours\" S.nHrCool number End of subhour ditto cooling S.nHrFanv number End of subhour ditto fan vent S.nHrNatv number End of subhour ditto natural vent S.nHrCeilFan number End of subhour <ul> <li>ditto ceiling fan operation; last \"# of hours\"</li> <li>INTs (32-bit) code in cnguts.h and .cpp assumes INT members together, first is nIter, last is nSubhrLX.</li> </ul> S.nIter number End of subhour # of iterations S.nShVentH number End of subhour <ul> <li># of substeps int this interval when ventilation caused heating</li> <li>(initial implementation for OAV only, 10-13)</li> </ul> S.nSubhr number End of subhour subhour counter (convenience) S.nSubhrLX number End of subhour <ul> <li># subhours with condensation (excess latent gain)</li> <li>floats. code in cnguts.h and cnguts.cpp:cgaccum assumes float members together, including subgroups to average and to sum.</li> <li>floats to average</li> </ul> S.tAir number End of subhour zone air temp; must be 1st float, is first float to average (see cnguts.h) S.tRad number End of subhour <ul> <li>zone radiant temp; meaningful iff convective/radiant model active for this zone</li> <li>comfort statisitics (not computed for all zones)</li> </ul> S.PMV7730 number End of subhour <ul> <li>ISO7730 predicted mean vote = predicted comfort per ASHRAE thermal sensation scale</li> <li>+3=hot, +2=warm, +1=slightly warm, 0=neutral, -1=slightly cool, -2=cool, -3=cold</li> </ul> S.PPD7730 number End of subhour ISO7730 predicted percent dissatisfied = % of people not satisfied with conditions S.ivAirX number End of subhour zone air exchange rate not including HVAC or ducts, ACH S.pz0 number End of subhour zone air pressure relative to patm at nominal z=0, lbf/sf (from zn_pz0) S.wAir number End of subhour <ul> <li>zone air humidity ratio; last float to average</li> <li>floats to sum: qCond thru qlBal/litEu, incuding subSubGroups of sensible and latent heats</li> <li>1. sensible heats for heat balance: qCond thru qsMech (cgenbal.cpp)</li> </ul> S.qCond number End of subhour zone wall conduction gain, Btu; 1st heat flow and first float to sum S.qsInfil number End of subhour zone infiltration sensible gain, Btu S.qSlr number End of subhour zone solar gain, Btu S.qsIg number End of subhour zone internal sensible gain, Btu S.qMass number End of subhour zone net sensible transfer from mass, Btu.  See qlAir for moisture. S.qsIz number End of subhour interzone gain to zone, Btu S.qsMech number End of subhour <ul> <li>zone total sensible mechanical heat gain, Btu</li> <li>includes HPWH heat removal</li> </ul> S.eqfVentHr number End of subhour <ul> <li>equivalent full vent hours = sum( zn_fVent)</li> <li>2. latent heats for latent heat balance: qlInfil thru qlMech</li> </ul> S.qlInfil number End of subhour zone infiltration latent gain, Btu S.qlIg number End of subhour zone internal latent gain, Btu S.qlIz number End of subhour zone IZXFER latent gain (infil, vent, duct leakage) S.qlAir number End of subhour latent heat of moisture removed from zone air: moisture analog of znCAir. S.qlMech number End of subhour <ul> <li>zone latent mechanical heat gain, Btu; last heat flow and last float to sum</li> <li>3. floats to sum, not included in either balance</li> </ul> S.qsBal number End of subhour sensible balance: sum of sensible heats, should be near 0. Set in cnguts.cpp. S.qlBal number End of subhour latent balance similarly.  Consider removing Bals after development. S.qlX number End of subhour <ul> <li>latent gain rejected to prevent zone supersaturation === heat of condensation.</li> <li>- added to next subr sens gain. Btu.</li> </ul> Name Type Variability Description/Comments S.unMetHrDH[index] number Array [2] End of subhour <ul> <li>end-of-hour tz excursion below/above setpoint, deg-hr</li> <li>[ 0]=heating (&lt;0)  [ 1]=cooling (&gt;0)</li> </ul> S.unMetShDH[index] number Array [2] End of subhour <ul> <li>subhour tz excursion below/above setpoint, deg-hr</li> <li>[ 0]=heating (&lt;0)  [ 1]=cooling (&gt;0)</li> </ul> S.unMetHrs[index] number Array [2] End of subhour <ul> <li>unmet hours (accumulated subhourly, tz excursion &gt; 0)</li> <li>[ 0]=heating  [ 1]=cooling</li> </ul> S.unMetHrsTol[index] number Array [2] End of subhour <ul> <li>unmet hours (accumulated subhourly, tz excursion &gt; tp_unMetTzTol)</li> <li>[ 0]=heating  [ 1]=cooling</li> </ul> Name Type Variability Description/Comments S.qscHvac number End of subhour zone accumulated HVAC sensible cooling, Btu (&lt;=0) (OAV not included) S.qshHvac number End of subhour zone accumulated HVAC sensible heating, Btu (&gt;=0) S.qcMech number End of subhour zone accumulated total mechanical (sensible + latent) cooling (including HPWH heat extraction), Btu (&lt; 0) S.qhMech number End of subhour zone accumulated total mechanical (sensible + latent) heating (including HPWH heat extraction), Btu (&gt;0) S.qvMech number End of subhour zone accumulated mechanical (OAV) total (sensible + latent) heat gains, Btu (&lt; 0) S.litDmd number End of subhour zone lighting demand and Energy Use, ... S.litEu number End of subhour <ul> <li>... from [GAINs][gain], in addition to posting Eu to meter, re daylighting for NREL. 9-94.</li> <li>floats that track min/max value</li> </ul> S.unMetMaxTD[index] number Array [2] End of subhour <ul> <li>maximum tz excursion below/above setpoint, F</li> <li>[ 0]=heating (&lt;0)  [ 1]=cooling (&gt;0)</li> </ul> Name Type Variability Description/Comments prior <ul> <li>prior year,month,day,hour,subhr results, available throughout interval</li> <li>CAUTION: code assumes prior and curr arranged so can offset from curr to prior. eg in cnguts.cpp.</li> </ul> ZNRES_SUB Name Type Variability Description/Comments prior.Y run results, aka year or annual ZNRES_IVL_SUB Name Type Variability Description/Comments prior.Y.n number Start of run <ul> <li>accumulate call count (to convert sums to averages)</li> <li>code assumes this is 1st member</li> <li>SIs. code in cnguts.h and cnguts.cpp:cgaccum assumes SI members are together, start with nHrHeat, end with nHrCeilFan.</li> <li>6-92 there is now no code to set these hourly+ SI members... eventually use or delete; work out sh--&gt;hr accumulation.</li> </ul> prior.Y.nHrHeat number Start of run # of hours in which any heating occurred; 1st \"# of hours\" prior.Y.nHrCool number Start of run ditto cooling prior.Y.nHrFanv number Start of run ditto fan vent prior.Y.nHrNatv number Start of run ditto natural vent prior.Y.nHrCeilFan number Start of run <ul> <li>ditto ceiling fan operation; last \"# of hours\"</li> <li>INTs (32-bit) code in cnguts.h and .cpp assumes INT members together, first is nIter, last is nSubhrLX.</li> </ul> prior.Y.nIter number Start of run # of iterations prior.Y.nShVentH number Start of run <ul> <li># of substeps int this interval when ventilation caused heating</li> <li>(initial implementation for OAV only, 10-13)</li> </ul> prior.Y.nSubhr number Start of run subhour counter (convenience) prior.Y.nSubhrLX number Start of run <ul> <li># subhours with condensation (excess latent gain)</li> <li>floats. code in cnguts.h and cnguts.cpp:cgaccum assumes float members together, including subgroups to average and to sum.</li> <li>floats to average</li> </ul> prior.Y.tAir number Start of run zone air temp; must be 1st float, is first float to average (see cnguts.h) prior.Y.tRad number Start of run <ul> <li>zone radiant temp; meaningful iff convective/radiant model active for this zone</li> <li>comfort statisitics (not computed for all zones)</li> </ul> prior.Y.PMV7730 number Start of run <ul> <li>ISO7730 predicted mean vote = predicted comfort per ASHRAE thermal sensation scale</li> <li>+3=hot, +2=warm, +1=slightly warm, 0=neutral, -1=slightly cool, -2=cool, -3=cold</li> </ul> prior.Y.PPD7730 number Start of run ISO7730 predicted percent dissatisfied = % of people not satisfied with conditions prior.Y.ivAirX number Start of run zone air exchange rate not including HVAC or ducts, ACH prior.Y.pz0 number Start of run zone air pressure relative to patm at nominal z=0, lbf/sf (from zn_pz0) prior.Y.wAir number Start of run <ul> <li>zone air humidity ratio; last float to average</li> <li>floats to sum: qCond thru qlBal/litEu, incuding subSubGroups of sensible and latent heats</li> <li>1. sensible heats for heat balance: qCond thru qsMech (cgenbal.cpp)</li> </ul> prior.Y.qCond number Start of run zone wall conduction gain, Btu; 1st heat flow and first float to sum prior.Y.qsInfil number Start of run zone infiltration sensible gain, Btu prior.Y.qSlr number Start of run zone solar gain, Btu prior.Y.qsIg number Start of run zone internal sensible gain, Btu prior.Y.qMass number Start of run zone net sensible transfer from mass, Btu.  See qlAir for moisture. prior.Y.qsIz number Start of run interzone gain to zone, Btu prior.Y.qsMech number Start of run <ul> <li>zone total sensible mechanical heat gain, Btu</li> <li>includes HPWH heat removal</li> </ul> prior.Y.eqfVentHr number Start of run <ul> <li>equivalent full vent hours = sum( zn_fVent)</li> <li>2. latent heats for latent heat balance: qlInfil thru qlMech</li> </ul> prior.Y.qlInfil number Start of run zone infiltration latent gain, Btu prior.Y.qlIg number Start of run zone internal latent gain, Btu prior.Y.qlIz number Start of run zone IZXFER latent gain (infil, vent, duct leakage) prior.Y.qlAir number Start of run latent heat of moisture removed from zone air: moisture analog of znCAir. prior.Y.qlMech number Start of run <ul> <li>zone latent mechanical heat gain, Btu; last heat flow and last float to sum</li> <li>3. floats to sum, not included in either balance</li> </ul> prior.Y.qsBal number Start of run sensible balance: sum of sensible heats, should be near 0. Set in cnguts.cpp. prior.Y.qlBal number Start of run latent balance similarly.  Consider removing Bals after development. prior.Y.qlX number Start of run <ul> <li>latent gain rejected to prevent zone supersaturation === heat of condensation.</li> <li>- added to next subr sens gain. Btu.</li> </ul> Name Type Variability Description/Comments prior.Y.unMetHrDH[index] number Array [2] Start of run <ul> <li>end-of-hour tz excursion below/above setpoint, deg-hr</li> <li>[ 0]=heating (&lt;0)  [ 1]=cooling (&gt;0)</li> </ul> prior.Y.unMetShDH[index] number Array [2] Start of run <ul> <li>subhour tz excursion below/above setpoint, deg-hr</li> <li>[ 0]=heating (&lt;0)  [ 1]=cooling (&gt;0)</li> </ul> prior.Y.unMetHrs[index] number Array [2] Start of run <ul> <li>unmet hours (accumulated subhourly, tz excursion &gt; 0)</li> <li>[ 0]=heating  [ 1]=cooling</li> </ul> prior.Y.unMetHrsTol[index] number Array [2] Start of run <ul> <li>unmet hours (accumulated subhourly, tz excursion &gt; tp_unMetTzTol)</li> <li>[ 0]=heating  [ 1]=cooling</li> </ul> Name Type Variability Description/Comments prior.Y.qscHvac number Start of run zone accumulated HVAC sensible cooling, Btu (&lt;=0) (OAV not included) prior.Y.qshHvac number Start of run zone accumulated HVAC sensible heating, Btu (&gt;=0) prior.Y.qcMech number Start of run zone accumulated total mechanical (sensible + latent) cooling (including HPWH heat extraction), Btu (&lt; 0) prior.Y.qhMech number Start of run zone accumulated total mechanical (sensible + latent) heating (including HPWH heat extraction), Btu (&gt;0) prior.Y.qvMech number Start of run zone accumulated mechanical (OAV) total (sensible + latent) heat gains, Btu (&lt; 0) prior.Y.litDmd number Start of run zone lighting demand and Energy Use, ... prior.Y.litEu number Start of run <ul> <li>... from [GAINs][gain], in addition to posting Eu to meter, re daylighting for NREL. 9-94.</li> <li>floats that track min/max value</li> </ul> prior.Y.unMetMaxTD[index] number Array [2] Start of run <ul> <li>maximum tz excursion below/above setpoint, F</li> <li>[ 0]=heating (&lt;0)  [ 1]=cooling (&gt;0)</li> </ul> prior.M month ZNRES_IVL_SUB Name Type Variability Description/Comments prior.M.n number Unknown <ul> <li>accumulate call count (to convert sums to averages)</li> <li>code assumes this is 1st member</li> <li>SIs. code in cnguts.h and cnguts.cpp:cgaccum assumes SI members are together, start with nHrHeat, end with nHrCeilFan.</li> <li>6-92 there is now no code to set these hourly+ SI members... eventually use or delete; work out sh--&gt;hr accumulation.</li> </ul> prior.M.nHrHeat number Unknown # of hours in which any heating occurred; 1st \"# of hours\" prior.M.nHrCool number Unknown ditto cooling prior.M.nHrFanv number Unknown ditto fan vent prior.M.nHrNatv number Unknown ditto natural vent prior.M.nHrCeilFan number Unknown <ul> <li>ditto ceiling fan operation; last \"# of hours\"</li> <li>INTs (32-bit) code in cnguts.h and .cpp assumes INT members together, first is nIter, last is nSubhrLX.</li> </ul> prior.M.nIter number Unknown # of iterations prior.M.nShVentH number Unknown <ul> <li># of substeps int this interval when ventilation caused heating</li> <li>(initial implementation for OAV only, 10-13)</li> </ul> prior.M.nSubhr number Unknown subhour counter (convenience) prior.M.nSubhrLX number Unknown <ul> <li># subhours with condensation (excess latent gain)</li> <li>floats. code in cnguts.h and cnguts.cpp:cgaccum assumes float members together, including subgroups to average and to sum.</li> <li>floats to average</li> </ul> prior.M.tAir number Unknown zone air temp; must be 1st float, is first float to average (see cnguts.h) prior.M.tRad number Unknown <ul> <li>zone radiant temp; meaningful iff convective/radiant model active for this zone</li> <li>comfort statisitics (not computed for all zones)</li> </ul> prior.M.PMV7730 number Unknown <ul> <li>ISO7730 predicted mean vote = predicted comfort per ASHRAE thermal sensation scale</li> <li>+3=hot, +2=warm, +1=slightly warm, 0=neutral, -1=slightly cool, -2=cool, -3=cold</li> </ul> prior.M.PPD7730 number Unknown ISO7730 predicted percent dissatisfied = % of people not satisfied with conditions prior.M.ivAirX number Unknown zone air exchange rate not including HVAC or ducts, ACH prior.M.pz0 number Unknown zone air pressure relative to patm at nominal z=0, lbf/sf (from zn_pz0) prior.M.wAir number Unknown <ul> <li>zone air humidity ratio; last float to average</li> <li>floats to sum: qCond thru qlBal/litEu, incuding subSubGroups of sensible and latent heats</li> <li>1. sensible heats for heat balance: qCond thru qsMech (cgenbal.cpp)</li> </ul> prior.M.qCond number Unknown zone wall conduction gain, Btu; 1st heat flow and first float to sum prior.M.qsInfil number Unknown zone infiltration sensible gain, Btu prior.M.qSlr number Unknown zone solar gain, Btu prior.M.qsIg number Unknown zone internal sensible gain, Btu prior.M.qMass number Unknown zone net sensible transfer from mass, Btu.  See qlAir for moisture. prior.M.qsIz number Unknown interzone gain to zone, Btu prior.M.qsMech number Unknown <ul> <li>zone total sensible mechanical heat gain, Btu</li> <li>includes HPWH heat removal</li> </ul> prior.M.eqfVentHr number Unknown <ul> <li>equivalent full vent hours = sum( zn_fVent)</li> <li>2. latent heats for latent heat balance: qlInfil thru qlMech</li> </ul> prior.M.qlInfil number Unknown zone infiltration latent gain, Btu prior.M.qlIg number Unknown zone internal latent gain, Btu prior.M.qlIz number Unknown zone IZXFER latent gain (infil, vent, duct leakage) prior.M.qlAir number Unknown latent heat of moisture removed from zone air: moisture analog of znCAir. prior.M.qlMech number Unknown <ul> <li>zone latent mechanical heat gain, Btu; last heat flow and last float to sum</li> <li>3. floats to sum, not included in either balance</li> </ul> prior.M.qsBal number Unknown sensible balance: sum of sensible heats, should be near 0. Set in cnguts.cpp. prior.M.qlBal number Unknown latent balance similarly.  Consider removing Bals after development. prior.M.qlX number Unknown <ul> <li>latent gain rejected to prevent zone supersaturation === heat of condensation.</li> <li>- added to next subr sens gain. Btu.</li> </ul> Name Type Variability Description/Comments prior.M.unMetHrDH[index] number Array [2] Unknown <ul> <li>end-of-hour tz excursion below/above setpoint, deg-hr</li> <li>[ 0]=heating (&lt;0)  [ 1]=cooling (&gt;0)</li> </ul> prior.M.unMetShDH[index] number Array [2] Unknown <ul> <li>subhour tz excursion below/above setpoint, deg-hr</li> <li>[ 0]=heating (&lt;0)  [ 1]=cooling (&gt;0)</li> </ul> prior.M.unMetHrs[index] number Array [2] Unknown <ul> <li>unmet hours (accumulated subhourly, tz excursion &gt; 0)</li> <li>[ 0]=heating  [ 1]=cooling</li> </ul> prior.M.unMetHrsTol[index] number Array [2] Unknown <ul> <li>unmet hours (accumulated subhourly, tz excursion &gt; tp_unMetTzTol)</li> <li>[ 0]=heating  [ 1]=cooling</li> </ul> Name Type Variability Description/Comments prior.M.qscHvac number Unknown zone accumulated HVAC sensible cooling, Btu (&lt;=0) (OAV not included) prior.M.qshHvac number Unknown zone accumulated HVAC sensible heating, Btu (&gt;=0) prior.M.qcMech number Unknown zone accumulated total mechanical (sensible + latent) cooling (including HPWH heat extraction), Btu (&lt; 0) prior.M.qhMech number Unknown zone accumulated total mechanical (sensible + latent) heating (including HPWH heat extraction), Btu (&gt;0) prior.M.qvMech number Unknown zone accumulated mechanical (OAV) total (sensible + latent) heat gains, Btu (&lt; 0) prior.M.litDmd number Unknown zone lighting demand and Energy Use, ... prior.M.litEu number Unknown <ul> <li>... from [GAINs][gain], in addition to posting Eu to meter, re daylighting for NREL. 9-94.</li> <li>floats that track min/max value</li> </ul> prior.M.unMetMaxTD[index] number Array [2] Unknown <ul> <li>maximum tz excursion below/above setpoint, F</li> <li>[ 0]=heating (&lt;0)  [ 1]=cooling (&gt;0)</li> </ul> prior.D day ZNRES_IVL_SUB Name Type Variability Description/Comments prior.D.n number Start of day <ul> <li>accumulate call count (to convert sums to averages)</li> <li>code assumes this is 1st member</li> <li>SIs. code in cnguts.h and cnguts.cpp:cgaccum assumes SI members are together, start with nHrHeat, end with nHrCeilFan.</li> <li>6-92 there is now no code to set these hourly+ SI members... eventually use or delete; work out sh--&gt;hr accumulation.</li> </ul> prior.D.nHrHeat number Start of day # of hours in which any heating occurred; 1st \"# of hours\" prior.D.nHrCool number Start of day ditto cooling prior.D.nHrFanv number Start of day ditto fan vent prior.D.nHrNatv number Start of day ditto natural vent prior.D.nHrCeilFan number Start of day <ul> <li>ditto ceiling fan operation; last \"# of hours\"</li> <li>INTs (32-bit) code in cnguts.h and .cpp assumes INT members together, first is nIter, last is nSubhrLX.</li> </ul> prior.D.nIter number Start of day # of iterations prior.D.nShVentH number Start of day <ul> <li># of substeps int this interval when ventilation caused heating</li> <li>(initial implementation for OAV only, 10-13)</li> </ul> prior.D.nSubhr number Start of day subhour counter (convenience) prior.D.nSubhrLX number Start of day <ul> <li># subhours with condensation (excess latent gain)</li> <li>floats. code in cnguts.h and cnguts.cpp:cgaccum assumes float members together, including subgroups to average and to sum.</li> <li>floats to average</li> </ul> prior.D.tAir number Start of day zone air temp; must be 1st float, is first float to average (see cnguts.h) prior.D.tRad number Start of day <ul> <li>zone radiant temp; meaningful iff convective/radiant model active for this zone</li> <li>comfort statisitics (not computed for all zones)</li> </ul> prior.D.PMV7730 number Start of day <ul> <li>ISO7730 predicted mean vote = predicted comfort per ASHRAE thermal sensation scale</li> <li>+3=hot, +2=warm, +1=slightly warm, 0=neutral, -1=slightly cool, -2=cool, -3=cold</li> </ul> prior.D.PPD7730 number Start of day ISO7730 predicted percent dissatisfied = % of people not satisfied with conditions prior.D.ivAirX number Start of day zone air exchange rate not including HVAC or ducts, ACH prior.D.pz0 number Start of day zone air pressure relative to patm at nominal z=0, lbf/sf (from zn_pz0) prior.D.wAir number Start of day <ul> <li>zone air humidity ratio; last float to average</li> <li>floats to sum: qCond thru qlBal/litEu, incuding subSubGroups of sensible and latent heats</li> <li>1. sensible heats for heat balance: qCond thru qsMech (cgenbal.cpp)</li> </ul> prior.D.qCond number Start of day zone wall conduction gain, Btu; 1st heat flow and first float to sum prior.D.qsInfil number Start of day zone infiltration sensible gain, Btu prior.D.qSlr number Start of day zone solar gain, Btu prior.D.qsIg number Start of day zone internal sensible gain, Btu prior.D.qMass number Start of day zone net sensible transfer from mass, Btu.  See qlAir for moisture. prior.D.qsIz number Start of day interzone gain to zone, Btu prior.D.qsMech number Start of day <ul> <li>zone total sensible mechanical heat gain, Btu</li> <li>includes HPWH heat removal</li> </ul> prior.D.eqfVentHr number Start of day <ul> <li>equivalent full vent hours = sum( zn_fVent)</li> <li>2. latent heats for latent heat balance: qlInfil thru qlMech</li> </ul> prior.D.qlInfil number Start of day zone infiltration latent gain, Btu prior.D.qlIg number Start of day zone internal latent gain, Btu prior.D.qlIz number Start of day zone IZXFER latent gain (infil, vent, duct leakage) prior.D.qlAir number Start of day latent heat of moisture removed from zone air: moisture analog of znCAir. prior.D.qlMech number Start of day <ul> <li>zone latent mechanical heat gain, Btu; last heat flow and last float to sum</li> <li>3. floats to sum, not included in either balance</li> </ul> prior.D.qsBal number Start of day sensible balance: sum of sensible heats, should be near 0. Set in cnguts.cpp. prior.D.qlBal number Start of day latent balance similarly.  Consider removing Bals after development. prior.D.qlX number Start of day <ul> <li>latent gain rejected to prevent zone supersaturation === heat of condensation.</li> <li>- added to next subr sens gain. Btu.</li> </ul> Name Type Variability Description/Comments prior.D.unMetHrDH[index] number Array [2] Start of day <ul> <li>end-of-hour tz excursion below/above setpoint, deg-hr</li> <li>[ 0]=heating (&lt;0)  [ 1]=cooling (&gt;0)</li> </ul> prior.D.unMetShDH[index] number Array [2] Start of day <ul> <li>subhour tz excursion below/above setpoint, deg-hr</li> <li>[ 0]=heating (&lt;0)  [ 1]=cooling (&gt;0)</li> </ul> prior.D.unMetHrs[index] number Array [2] Start of day <ul> <li>unmet hours (accumulated subhourly, tz excursion &gt; 0)</li> <li>[ 0]=heating  [ 1]=cooling</li> </ul> prior.D.unMetHrsTol[index] number Array [2] Start of day <ul> <li>unmet hours (accumulated subhourly, tz excursion &gt; tp_unMetTzTol)</li> <li>[ 0]=heating  [ 1]=cooling</li> </ul> Name Type Variability Description/Comments prior.D.qscHvac number Start of day zone accumulated HVAC sensible cooling, Btu (&lt;=0) (OAV not included) prior.D.qshHvac number Start of day zone accumulated HVAC sensible heating, Btu (&gt;=0) prior.D.qcMech number Start of day zone accumulated total mechanical (sensible + latent) cooling (including HPWH heat extraction), Btu (&lt; 0) prior.D.qhMech number Start of day zone accumulated total mechanical (sensible + latent) heating (including HPWH heat extraction), Btu (&gt;0) prior.D.qvMech number Start of day zone accumulated mechanical (OAV) total (sensible + latent) heat gains, Btu (&lt; 0) prior.D.litDmd number Start of day zone lighting demand and Energy Use, ... prior.D.litEu number Start of day <ul> <li>... from [GAINs][gain], in addition to posting Eu to meter, re daylighting for NREL. 9-94.</li> <li>floats that track min/max value</li> </ul> prior.D.unMetMaxTD[index] number Array [2] Start of day <ul> <li>maximum tz excursion below/above setpoint, F</li> <li>[ 0]=heating (&lt;0)  [ 1]=cooling (&gt;0)</li> </ul> prior.H hour. ZNRES_IVL_SUB Name Type Variability Description/Comments prior.H.n number Start of hour <ul> <li>accumulate call count (to convert sums to averages)</li> <li>code assumes this is 1st member</li> <li>SIs. code in cnguts.h and cnguts.cpp:cgaccum assumes SI members are together, start with nHrHeat, end with nHrCeilFan.</li> <li>6-92 there is now no code to set these hourly+ SI members... eventually use or delete; work out sh--&gt;hr accumulation.</li> </ul> prior.H.nHrHeat number Start of hour # of hours in which any heating occurred; 1st \"# of hours\" prior.H.nHrCool number Start of hour ditto cooling prior.H.nHrFanv number Start of hour ditto fan vent prior.H.nHrNatv number Start of hour ditto natural vent prior.H.nHrCeilFan number Start of hour <ul> <li>ditto ceiling fan operation; last \"# of hours\"</li> <li>INTs (32-bit) code in cnguts.h and .cpp assumes INT members together, first is nIter, last is nSubhrLX.</li> </ul> prior.H.nIter number Start of hour # of iterations prior.H.nShVentH number Start of hour <ul> <li># of substeps int this interval when ventilation caused heating</li> <li>(initial implementation for OAV only, 10-13)</li> </ul> prior.H.nSubhr number Start of hour subhour counter (convenience) prior.H.nSubhrLX number Start of hour <ul> <li># subhours with condensation (excess latent gain)</li> <li>floats. code in cnguts.h and cnguts.cpp:cgaccum assumes float members together, including subgroups to average and to sum.</li> <li>floats to average</li> </ul> prior.H.tAir number Start of hour zone air temp; must be 1st float, is first float to average (see cnguts.h) prior.H.tRad number Start of hour <ul> <li>zone radiant temp; meaningful iff convective/radiant model active for this zone</li> <li>comfort statisitics (not computed for all zones)</li> </ul> prior.H.PMV7730 number Start of hour <ul> <li>ISO7730 predicted mean vote = predicted comfort per ASHRAE thermal sensation scale</li> <li>+3=hot, +2=warm, +1=slightly warm, 0=neutral, -1=slightly cool, -2=cool, -3=cold</li> </ul> prior.H.PPD7730 number Start of hour ISO7730 predicted percent dissatisfied = % of people not satisfied with conditions prior.H.ivAirX number Start of hour zone air exchange rate not including HVAC or ducts, ACH prior.H.pz0 number Start of hour zone air pressure relative to patm at nominal z=0, lbf/sf (from zn_pz0) prior.H.wAir number Start of hour <ul> <li>zone air humidity ratio; last float to average</li> <li>floats to sum: qCond thru qlBal/litEu, incuding subSubGroups of sensible and latent heats</li> <li>1. sensible heats for heat balance: qCond thru qsMech (cgenbal.cpp)</li> </ul> prior.H.qCond number Start of hour zone wall conduction gain, Btu; 1st heat flow and first float to sum prior.H.qsInfil number Start of hour zone infiltration sensible gain, Btu prior.H.qSlr number Start of hour zone solar gain, Btu prior.H.qsIg number Start of hour zone internal sensible gain, Btu prior.H.qMass number Start of hour zone net sensible transfer from mass, Btu.  See qlAir for moisture. prior.H.qsIz number Start of hour interzone gain to zone, Btu prior.H.qsMech number Start of hour <ul> <li>zone total sensible mechanical heat gain, Btu</li> <li>includes HPWH heat removal</li> </ul> prior.H.eqfVentHr number Start of hour <ul> <li>equivalent full vent hours = sum( zn_fVent)</li> <li>2. latent heats for latent heat balance: qlInfil thru qlMech</li> </ul> prior.H.qlInfil number Start of hour zone infiltration latent gain, Btu prior.H.qlIg number Start of hour zone internal latent gain, Btu prior.H.qlIz number Start of hour zone IZXFER latent gain (infil, vent, duct leakage) prior.H.qlAir number Start of hour latent heat of moisture removed from zone air: moisture analog of znCAir. prior.H.qlMech number Start of hour <ul> <li>zone latent mechanical heat gain, Btu; last heat flow and last float to sum</li> <li>3. floats to sum, not included in either balance</li> </ul> prior.H.qsBal number Start of hour sensible balance: sum of sensible heats, should be near 0. Set in cnguts.cpp. prior.H.qlBal number Start of hour latent balance similarly.  Consider removing Bals after development. prior.H.qlX number Start of hour <ul> <li>latent gain rejected to prevent zone supersaturation === heat of condensation.</li> <li>- added to next subr sens gain. Btu.</li> </ul> Name Type Variability Description/Comments prior.H.unMetHrDH[index] number Array [2] Start of hour <ul> <li>end-of-hour tz excursion below/above setpoint, deg-hr</li> <li>[ 0]=heating (&lt;0)  [ 1]=cooling (&gt;0)</li> </ul> prior.H.unMetShDH[index] number Array [2] Start of hour <ul> <li>subhour tz excursion below/above setpoint, deg-hr</li> <li>[ 0]=heating (&lt;0)  [ 1]=cooling (&gt;0)</li> </ul> prior.H.unMetHrs[index] number Array [2] Start of hour <ul> <li>unmet hours (accumulated subhourly, tz excursion &gt; 0)</li> <li>[ 0]=heating  [ 1]=cooling</li> </ul> prior.H.unMetHrsTol[index] number Array [2] Start of hour <ul> <li>unmet hours (accumulated subhourly, tz excursion &gt; tp_unMetTzTol)</li> <li>[ 0]=heating  [ 1]=cooling</li> </ul> Name Type Variability Description/Comments prior.H.qscHvac number Start of hour zone accumulated HVAC sensible cooling, Btu (&lt;=0) (OAV not included) prior.H.qshHvac number Start of hour zone accumulated HVAC sensible heating, Btu (&gt;=0) prior.H.qcMech number Start of hour zone accumulated total mechanical (sensible + latent) cooling (including HPWH heat extraction), Btu (&lt; 0) prior.H.qhMech number Start of hour zone accumulated total mechanical (sensible + latent) heating (including HPWH heat extraction), Btu (&gt;0) prior.H.qvMech number Start of hour zone accumulated mechanical (OAV) total (sensible + latent) heat gains, Btu (&lt; 0) prior.H.litDmd number Start of hour zone lighting demand and Energy Use, ... prior.H.litEu number Start of hour <ul> <li>... from [GAINs][gain], in addition to posting Eu to meter, re daylighting for NREL. 9-94.</li> <li>floats that track min/max value</li> </ul> prior.H.unMetMaxTD[index] number Array [2] Start of hour <ul> <li>maximum tz excursion below/above setpoint, F</li> <li>[ 0]=heating (&lt;0)  [ 1]=cooling (&gt;0)</li> </ul> prior.S subhour, aka subStep or sub-time-step ZNRES_IVL_SUB Name Type Variability Description/Comments prior.S.n number Start of subhour <ul> <li>accumulate call count (to convert sums to averages)</li> <li>code assumes this is 1st member</li> <li>SIs. code in cnguts.h and cnguts.cpp:cgaccum assumes SI members are together, start with nHrHeat, end with nHrCeilFan.</li> <li>6-92 there is now no code to set these hourly+ SI members... eventually use or delete; work out sh--&gt;hr accumulation.</li> </ul> prior.S.nHrHeat number Start of subhour # of hours in which any heating occurred; 1st \"# of hours\" prior.S.nHrCool number Start of subhour ditto cooling prior.S.nHrFanv number Start of subhour ditto fan vent prior.S.nHrNatv number Start of subhour ditto natural vent prior.S.nHrCeilFan number Start of subhour <ul> <li>ditto ceiling fan operation; last \"# of hours\"</li> <li>INTs (32-bit) code in cnguts.h and .cpp assumes INT members together, first is nIter, last is nSubhrLX.</li> </ul> prior.S.nIter number Start of subhour # of iterations prior.S.nShVentH number Start of subhour <ul> <li># of substeps int this interval when ventilation caused heating</li> <li>(initial implementation for OAV only, 10-13)</li> </ul> prior.S.nSubhr number Start of subhour subhour counter (convenience) prior.S.nSubhrLX number Start of subhour <ul> <li># subhours with condensation (excess latent gain)</li> <li>floats. code in cnguts.h and cnguts.cpp:cgaccum assumes float members together, including subgroups to average and to sum.</li> <li>floats to average</li> </ul> prior.S.tAir number Start of subhour zone air temp; must be 1st float, is first float to average (see cnguts.h) prior.S.tRad number Start of subhour <ul> <li>zone radiant temp; meaningful iff convective/radiant model active for this zone</li> <li>comfort statisitics (not computed for all zones)</li> </ul> prior.S.PMV7730 number Start of subhour <ul> <li>ISO7730 predicted mean vote = predicted comfort per ASHRAE thermal sensation scale</li> <li>+3=hot, +2=warm, +1=slightly warm, 0=neutral, -1=slightly cool, -2=cool, -3=cold</li> </ul> prior.S.PPD7730 number Start of subhour ISO7730 predicted percent dissatisfied = % of people not satisfied with conditions prior.S.ivAirX number Start of subhour zone air exchange rate not including HVAC or ducts, ACH prior.S.pz0 number Start of subhour zone air pressure relative to patm at nominal z=0, lbf/sf (from zn_pz0) prior.S.wAir number Start of subhour <ul> <li>zone air humidity ratio; last float to average</li> <li>floats to sum: qCond thru qlBal/litEu, incuding subSubGroups of sensible and latent heats</li> <li>1. sensible heats for heat balance: qCond thru qsMech (cgenbal.cpp)</li> </ul> prior.S.qCond number Start of subhour zone wall conduction gain, Btu; 1st heat flow and first float to sum prior.S.qsInfil number Start of subhour zone infiltration sensible gain, Btu prior.S.qSlr number Start of subhour zone solar gain, Btu prior.S.qsIg number Start of subhour zone internal sensible gain, Btu prior.S.qMass number Start of subhour zone net sensible transfer from mass, Btu.  See qlAir for moisture. prior.S.qsIz number Start of subhour interzone gain to zone, Btu prior.S.qsMech number Start of subhour <ul> <li>zone total sensible mechanical heat gain, Btu</li> <li>includes HPWH heat removal</li> </ul> prior.S.eqfVentHr number Start of subhour <ul> <li>equivalent full vent hours = sum( zn_fVent)</li> <li>2. latent heats for latent heat balance: qlInfil thru qlMech</li> </ul> prior.S.qlInfil number Start of subhour zone infiltration latent gain, Btu prior.S.qlIg number Start of subhour zone internal latent gain, Btu prior.S.qlIz number Start of subhour zone IZXFER latent gain (infil, vent, duct leakage) prior.S.qlAir number Start of subhour latent heat of moisture removed from zone air: moisture analog of znCAir. prior.S.qlMech number Start of subhour <ul> <li>zone latent mechanical heat gain, Btu; last heat flow and last float to sum</li> <li>3. floats to sum, not included in either balance</li> </ul> prior.S.qsBal number Start of subhour sensible balance: sum of sensible heats, should be near 0. Set in cnguts.cpp. prior.S.qlBal number Start of subhour latent balance similarly.  Consider removing Bals after development. prior.S.qlX number Start of subhour <ul> <li>latent gain rejected to prevent zone supersaturation === heat of condensation.</li> <li>- added to next subr sens gain. Btu.</li> </ul> Name Type Variability Description/Comments prior.S.unMetHrDH[index] number Array [2] Start of subhour <ul> <li>end-of-hour tz excursion below/above setpoint, deg-hr</li> <li>[ 0]=heating (&lt;0)  [ 1]=cooling (&gt;0)</li> </ul> prior.S.unMetShDH[index] number Array [2] Start of subhour <ul> <li>subhour tz excursion below/above setpoint, deg-hr</li> <li>[ 0]=heating (&lt;0)  [ 1]=cooling (&gt;0)</li> </ul> prior.S.unMetHrs[index] number Array [2] Start of subhour <ul> <li>unmet hours (accumulated subhourly, tz excursion &gt; 0)</li> <li>[ 0]=heating  [ 1]=cooling</li> </ul> prior.S.unMetHrsTol[index] number Array [2] Start of subhour <ul> <li>unmet hours (accumulated subhourly, tz excursion &gt; tp_unMetTzTol)</li> <li>[ 0]=heating  [ 1]=cooling</li> </ul> Name Type Variability Description/Comments prior.S.qscHvac number Start of subhour zone accumulated HVAC sensible cooling, Btu (&lt;=0) (OAV not included) prior.S.qshHvac number Start of subhour zone accumulated HVAC sensible heating, Btu (&gt;=0) prior.S.qcMech number Start of subhour zone accumulated total mechanical (sensible + latent) cooling (including HPWH heat extraction), Btu (&lt; 0) prior.S.qhMech number Start of subhour zone accumulated total mechanical (sensible + latent) heating (including HPWH heat extraction), Btu (&gt;0) prior.S.qvMech number Start of subhour zone accumulated mechanical (OAV) total (sensible + latent) heat gains, Btu (&lt; 0) prior.S.litDmd number Start of subhour zone lighting demand and Energy Use, ... prior.S.litEu number Start of subhour <ul> <li>... from [GAINs][gain], in addition to posting Eu to meter, re daylighting for NREL. 9-94.</li> <li>floats that track min/max value</li> </ul> prior.S.unMetMaxTD[index] number Array [2] Start of subhour <ul> <li>maximum tz excursion below/above setpoint, F</li> <li>[ 0]=heating (&lt;0)  [ 1]=cooling (&gt;0)</li> </ul>"},{"location":"probe-definitions/zone/","title":"Zone","text":"<p>title: zone --- ZNISUB general user inputs</p> Name Type Variability Description/Comments znModel choice:ZNMODEL input time zone model (CNE, CSE, CZM, UZM, UZX) znArea AREA_GZ input time flrarea Conditioned floor area of zone (ft2) znVol VOL_GZ input time zone nominal volume (ft3) floorZ number input time <ul> <li>zone floor Z above ground, ft.  Used re airNet vent Z etc.</li> <li>(can be &lt;0 re below grade spaces)</li> </ul> ceilingHt LEN_GZ Start of run zone nominal ceiling height, ft. default = znVol / znArea znCAir HC_GZ input time <ul> <li>effective \"air\" heat cap (Btu/F): models all non-mass heat cap in zone.</li> <li>defaults to 3.5*area. heat cap of surfaces not modelled as \"massive\" may be added.</li> </ul> HIRatio FLOAT_GZ Start of run <ul> <li>hygric inertia ratio for zone, default 1</li> <li>for moisture balance calcs in non-CNE zones,</li> <li>effective dry-air mass = zn_HIRatio * zn_dryAirMass</li> </ul> znAzm ANGLE input time zone azimuth wrt bldgAzm, deg.  + = clockwise plenumRet BOO input time <ul> <li>TRUE for plenum return, FALSE for ducted return, for all air from this zone.  default FALSE. 3-92.</li> <li>not yet inputtable 10-92. If changed eg to yes-no fix cncult5 errmsg \"...when zone plenumRet is 0\".</li> <li>** where is the plenum, and whether it is active or passive, specified?</li> </ul> znSC number Start of hour <ul> <li>zone Shade Closure optional hourly expression, 0. open, 1. closed.</li> <li>default: closed if cooling in prior hour (cnloads::loadsAfterHour) (see ZNR:znSCF)</li> <li>Determines choice between window sco/scc, [SGDIST][sgdist] sgd_FSC/sfFSC, via cgsolar.cpp.</li> <li>Pointed to by .cppontrol of SgR entries (whose factors are (neg) closed-shade gain reductions).</li> <li>Subhourly variablility desirable (rob's opinion); requires duplicating</li> <li>loadsHourBeg solar gain code in loadsSubhr with [znSC][znsc]-change trigger.</li> </ul> Name Type Variability Description/Comments znTH TEMP_GZ Start of subhour base heating set point, F (from input, may be modified for autosizing) znTD TEMP_GZ Start of subhour base desired temp (vent) set point, F (from input, may be modified for autosizing) znTC TEMP_GZ Start of subhour base cooling set point, F (from input, may be modified for autosizing) <p>available nominal system capacity, Btuh (added 9-10)</p> Name Type Variability Description/Comments znQMxH number Start of hour heating cap for current hour (&gt;= 0) znQMxHRated number Start of run heating cap rated (&gt;=0, constant for run)  TODO: s/b autosizable? znQMxC number Start of hour cooling cap for current hour (&lt;= 0) znQMxCRated number Start of run cooling cap rated (&lt;=0, constant for run)  TODO: s/b autosizable? loadMtri TI Start of run idx of LOADMETER for accumulation of zone heating and cooling loads Name Type Variability Description/Comments rsi TI Start of run idx of RSYS serving zone Name Type Variability Description/Comments hcFrcF number Start of hour <ul> <li>forced convection coefficient factor, default = 0.2</li> <li>interior hcFrc = zn_hcFrcF * zn_hcAirX^.8</li> </ul> hcAirX number End of subhour <ul> <li>zone air change rate (1/hr), input for testing</li> <li>else calculated subhourly in zn_AirXMoistureBal()</li> </ul> hcAirXIsSet number Start of run <ul> <li>1 iff zn_hcAirX is set from input (for testing)</li> <li>WHY: ZNI status bytes not passed to ZNR, need flag</li> </ul> <p>Zone exhaust fan members (from Taylor's terminal description 3-92)</p> Name Type Variability Description/Comments xfanFOn number Start of hour zone exhaust fan schedule, fraction on, hourly scheduleable, default 1 xfan <ul> <li>subrecord for other fan members.</li> <li>if xfan.vfDs is not given, no fan, other inputs disallowed.</li> </ul> FAN Name Type Variability Description/Comments xfan.fanTy choice:FANTY Start of phase <ul> <li>fan position choice, according to application as follows; constant.</li> <li>air handler supply:  DRAWTHRU (default) or BLOWTHRU</li> <li>ah return/relief:  NONE (default), RETURN, or RELIEF</li> <li>terminal:  NONE (default), SERIES, or PARALLEL</li> <li>zone exhaust fan:  NONE or EXHAUST (no types, just whether exists)</li> <li>AirNet ([IZXFER][izxfer]):    ditto</li> </ul> xfan.vfDs AFLOW_GZ End of subhour design volumetric flow (cfm actual air).  constant, RQD except as noted. *s cuz varies when autoSizing. xfan.vfDs_As AFLOW Start of phase autoSized ditto for ah sfan and rfan for naming consistency. 6-95. xfan.vfDs_AsNov AFLOW Start of phase <ul> <li>raw autoSized ditto b4 overSize added, for report/probes. 7-95.</li> <li>cnausz.cpp code ASSUMES x, x_As, x_AsNov together for access thru one ptr. cuprobe.cpp's name search also requires together.</li> </ul> xfan.vfMxF number Start of phase <ul> <li>factor by which fan flow will exceed vfDs (at reduced pressure). default 1.3. constant.</li> <li>Error if &lt; 1.0; typically &lt;= 1.5.</li> </ul> Name Type Variability Description/Comments xfan.press PRESAIR_GEZ Start of run <ul> <li>system design pressure, \"H2O (inches of water), constant, used in defaulting power / efficiency.</li> <li>default: supply 3, r/r .75, tu .3, zx ???.</li> <li>0 allowed 5-1-92 to eliminate fan heat for test/calibration purposes.</li> </ul>   only one of eff and shaftPwr may be given:  Name Type Variability Description/Comments xfan.eff FRAC_GZ Start of run <ul> <li>fan (hydraulic) efficiency at vfDs and press (any temp), constant,</li> <li>default from power if given, else .65.  (1-eff) of fan shaft power is converted to heat in airstream.</li> </ul> xfan.shaftPwr BHP_GZ Start of run <ul> <li>fan shaft power at vfDs and press (any temp). constant. default: from eff</li> <li>Btuh internally, entered in BHP (user name 'shaftBhp') (cvpak converts).</li> <li>^^^^make user name 'shaftBhp'.  field type name??</li> </ul> xfan.elecPwr FLOAT_GZ Start of run <ul> <li>motor input power, W/cfm (based on vfDs); shaftPwr and elecPwr cannot both be</li> <li>input</li> </ul> Name Type Variability Description/Comments xfan.motTy choice:MOTTY Start of run <ul> <li>motor type (C_MOTTYCH_PSC or C_MOTTYCH_BPM)</li> <li>[RSYS][rsys] only minimal use 4-12, could effect defaults</li> </ul> Name Type Variability Description/Comments xfan.motEff FRAC_GZ Start of phase motor/drive efficiency, constant, default .9. Name Type Variability Description/Comments xfan.motPos choice:MOTPOS Start of phase <ul> <li>motor/drive position: choice of INFLO (default), INRETURN, EXTERNAL.  constant.</li> <li>INRETURN is for supply fans only and will be deferred/omitted if difficult</li> <li>chip per taylor 3-4-92).</li> </ul> Name Type Variability Description/Comments xfan.curvePy fan part-load energy consumption curve cubic polynomial coefficients with x0 PYCUBIC2 Name Type Variability Description/Comments xfan.curvePy.k[index] number Array [6] Start of phase FLOAT k[6]. [0..3] are coeff, [4] is minimum x, [5] is terminator needed by cul.cpp. Name Type Variability Description/Comments xfan.mtri TI input time subscript of meter (MTR) to which energy consumption is charged xfan.endUse choice:ENDUSE Start of phase <ul> <li>end use to which energy consumption is charged</li> <li>not used for all fans (many implicitly default to \"fan\")</li> </ul> Name Type Variability Description/Comments xfan.ausz BOO Start of run <ul> <li>non-0 if fan being autoSized (AH sfan, rfan): input contained [AUTOSIZE][autosize] _fanVfDs. 7-1-95.</li> <li>see also AH::fanAs, asRfan, asFlow. 7-1-95. */</li> </ul> <ul> <li>FAN setup time members, set by cnfan.cpp:FAN::setup. May be resetup during autoSize run.</li> <li>also cMx may be init by setup, to be non-0.</li> </ul> Name Type Variability Description/Comments xfan.outPower number Start of subhour <ul> <li>motor output power (work done by fan), member 7-95 for one setup check in cncult5.cpp</li> <li>inPower = shaftPwr/motEff  is computed as needed.</li> </ul> xfan.airPower number Start of subhour <ul> <li>fan heat to air (Btuh) at vfDs (&amp; pressure): work done by fan, plus motor/drive inefficiency if in flow.</li> <li>Note work done by fan is modelled as HEAT ADDED TO AIR AT FAN per Chip/Niles (3-92, undocumented)</li> <li>heat to air around motor (in return air etc) at design flow is: (inPower - airPower). this is 0 if motor in air flow.</li> </ul>   FAN runtime members, set by cnah.cpp:FAN::pute( cFlow, temp)  Name Type Variability Description/Comments xfan.cMx CFLOW End of subhour max heat cap flow (Btuh/F) at curr air temp &amp; run press &amp; ref w: .vfMx * air vsh * 60 (min/hr) xfan.c CFLOW End of subhour current average flow in heat cap units (Btuh/F): input saved for probing by last call to FAN::pute() xfan.t TEMP End of subhour current air temp, input saved ditto, used in converting BtuF/F to cfm xfan.frOn number End of subhour <ul> <li>fraction of time fan is on, saved input</li> <li>made local to pute()to save members 10-92:</li> <li>*s *e FRAC relFlow  // fraction of design flow</li> <li>*s *e FRAC relLoad  // fraction of full load per part load curve for fan type (1.0 if over design flow: assume pressure drops)</li> </ul> xfan.p number End of subhour (motor) power consumption for subhour -- inPower * relLoad.  *subhrDur for meter. xfan.q number End of subhour heat (power) to air this subhour: airPower * relLoad.  Member needed in addition to c and dT?? xfan.dT TEMPDIFF End of subhour temp difference due to fan: q/c xfan.qAround number End of subhour heat to air around motor, if not in air flow, for use re supply fan motor in return air <p>ZNISUB infiltration inputs.</p> Name Type Variability Description/Comments infAC FLOAT_GEZ Start of hour ac      Base air changes/hr, for q proportional to tempDiff (\"constant\" portion). (1/hr) infELA AREA2 Start of hour <ul> <li>ela     Zone effective leakage area, for q prop to tempDiff ^ 3/2 (cuz flow prop to sqrt(tDiff))</li> <li>(in2 to user, ft2 internally)</li> </ul> infShld SI_GZ constant local shielding (obstructions) class (1 - 5) infStories SI_GZ constant # stories in zone (1-3); provides default for zn_eaveZ else unused eaveZ LEN_GZ Start of run <ul> <li>zone nominal eave Z above ground, ft re wind speed adjustment</li> <li>default = zn_floorZ + zn_infStories * 8.f;</li> </ul> windFLkg number Start of subhour <ul> <li>wind factor for infiltration and airnet, dimless</li> <li>default derived from zn_infShld and zn_eaveZ</li> <li>else input</li> <li>Note: Top.[windF][windf] also applied</li> </ul> afMtri TI Start of run <ul> <li>AFMTR (air flow meter) idx, 0 if none</li> <li>provides default for IZXRAT.iz_afMtri in this zone</li> <li>perhaps additional?</li> </ul> <p>ZNISUB setup time: reports.  (Most zone report info is in DvriB, accessed by interval via list heads in Top.)</p> Name Type Variability Description/Comments vrZdd number Start of run <ul> <li>0 (report not requested) or vrh (virtual report handle) for zone description (ZDD report).</li> <li>in ZNISUB to persist from autosize to main sim, when most runtime stuff is cleared &amp; resetup,</li> <li>incl zones but excluding most report stuff.</li> </ul> <p>ZNR setup time: zone's objects</p> Name Type Variability Description/Comments xsurf1 TI Start of run chain head (XSRAT subscr) of zone's XSURFs: surface/window/perim/massWall info. next: XSRAT.nxXsurf. xsSpecT1 TI Start of run 0 or chain head of zn's XSURFs with .sfExCnd==C_EXCNDCH_SPECT: used hourly.  next: XSRAT.nxXsSpecT. tu1 TI Start of run head of chain of zone's terminals: 0 or TuB subscript. next: TU.nxTu. zhx1 TI Start of run chain head of zone's ZHX's (Zone Hvac Xfers): 0 or ZhxB subscript. next: ZHX.nxZhx4z. zhx1St TI Start of run ... zone's cmStxx (tstat-ctrl'd) ZHX's.    next: ZHX.nxZhzSt4z. airTerminalCount number Start of run <ul> <li># of terminals serving this zone that can supply air</li> <li>known after all TU::tu_Setup()s complete</li> </ul> anPathLenToAmbient number Start of run <ul> <li>zone shortest path length to ambient pressure</li> <li>based on [IZXFER][izxfer] network</li> <li>-1: no path (AirNet troubles probable)</li> <li>0: this zone has exterior vents</li> <li>1: an [IZXFER][izxfer]-adjacent zone has exterior vents</li> <li>2: etc.</li> </ul> anVentCount[index] number Array [3] Start of run <ul> <li>count of airnet vents connected to this zone</li> <li>re validation of AIRNET configuration</li> <li>[0]=exterior pressure-dependent  [1] IZ pressure dependent  [2]=fixed flow</li> </ul> <p>ZNR setup time: other</p> Name Type Variability Description/Comments znSCF BOO Start of run non-0 if i.znSC given by user; 0 to default Shade Closure in cnloads.cpp <p>ZNR infiltration setup time info, set by ZNR.zn_InfilSetup() for cnloads:loadsHourBeg.  Double infiltration model is supported.</p> Name Type Variability Description/Comments stackc number Start of run stack coefficient for zone height (Sherman-Grimsrud model) windc number Start of run wind coefficient for zone height and shielding (Sherman-Grimsrud model) <ul> <li>ZNR radiant internal gain setup time info, 11-95</li> <li>Radiant internal gains distribution table entry use:      Much redundant info for debugging / poss future repoint needs.</li> <li>struct { RIGTARGTY targTy; TI targTi; float targFr; RIGTARG * targP; };  (cndtypes.def)</li> <li>.targTy  .targTi is for   target member    description</li> <li>znTot          ZNR          .qrIgTot       zone total rIg, for ebal check</li> <li>znTotO         --           .qrIgTotO      loss thru light surf to outdoors, for conduction in ebal check</li> <li>znTotIz        ZNR          .qrIgTotIz     to adjacent zone thru light surf (entries for both zones, + and -)</li> <li>[znCAir][zncair]         ZNR          .qrIgCAir      to zone CAir (light surface)</li> <li>massI          MSRAT        .inside.qIg    to mass inside in this zone</li> <li>massO          MSRAT        .outside.qIg   to mass outside in this zone</li> </ul> Name Type Variability Description/Comments rIgDistNAl USI Start of run 0 or number of allocated entries in... rIgDistN USI Start of run 0 or number of used entries in... rIgDist RIGDISTP Start of run NULL or ptr to heap array of distrubution info for rad int gain originating in zone. <ul> <li>ZNR solar gain targeting and radiation exchange variables set at setup time for use at runtime</li> <li>added re cavity absorptance, 1995</li> <li>reworked re CSE radiant exchange, 2010</li> </ul> Name Type Variability Description/Comments surfA DBL Start of run <ul> <li>total surface area in zone, ft2 (surfaces, doors, windows, ducts)</li> <li>(includes exterior of C_EXCNDCH_ADJZN surfaces)</li> </ul> surfASlr DBL Start of run <ul> <li>total \"short wave\" surface area in zone, ft2</li> <li>= opaque area that participates in solar gain distribution</li> <li>= surfaces and doors but not windows and ducts</li> <li>Note: ducts cannot receive solar gain as of 4-2012</li> </ul> ductA DBL Start of run <ul> <li>total duct surface area in zone, ft2 (included in zn_surfA)</li> <li>(info only)</li> </ul> surfEpsLWAvg DBL Start of run area-weighted surface LW emissivity = SUM( surfArea * surfEpsLW) / zn_surfA airRadXC1 DBL Start of run constants re zn_airRadXarea calc airRadXC2 DBL Start of run airRadXArea DBL Start of run <ul> <li>area of air \"surface\", ft2</li> <li>participates in LW exchange network</li> </ul> FAir DBL Start of run air F \"view factor\" (constant during simulation) airCxF DBL End of hour <ul> <li>air factor for zn_cxSh re LW exchange</li> <li>= zn_airRadXarea * zn_FAir * sigmaSB, Btuh/R^4</li> </ul> airCx DBL End of subhour air contribution to zn_cxSh, Btuh/F <ul> <li>ZNR solar gain targeting runtime variables 2-95</li> <li>#define OC 2    above   // shades Open/Closed array dimension. subscripts: 0 = open, 1 = closed.</li> <li>temporaries used during one hour's m-h solar calculations in cgsolar.cpp. m-h cuz inputs include [gtSMSO][gtsmso]/C, sfIn/ExAbs.</li> </ul> Name Type Variability Description/Comments rmTrans[index] DBL Array [OC] End of monthly-hourly <ul> <li>area-weighted summed diffuse transmissivity of windows in zone,</li> <li>shades open/closed, re adjRmAbs</li> </ul> rmAbs number End of monthly-hourly sum of area-weighted solar (SW) absorptivity for opaque room surfaces (dimensionless). adjRmAbs[index] DBL Array [OC] End of monthly-hourly <ul> <li>rmAbs adjusted for reflected energy that goes out windows (m-h):</li> <li>divisor in computing cavAbs's for [znCAir][zncair] and massive surfaces</li> </ul> rmAbsCAir DBL End of monthly-hourly sum of area-weighted absorptivity for non-massive room surfaces cavAbsCAir[index] DBL Array [OC] End of monthly-hourly zone CAIR cavity absorptance === portion insolation to no particular surface sgfCavBm[index] DBL Array [OC] End of monthly-hourly zone's solar gain factors from its windows not explicitly targeted for hour, sgfCavDf[index] DBL Array [OC] End of monthly-hourly .. to be distributed amoung surface and CAir SgR entries after accumulation. sgSaBm[index] DBL Array [OC] End of monthly-hourly CAIR adjustments to above for gains getting to other side of (quick) surface or sgSaDf[index] DBL Array [OC] End of monthly-hourly .. lost to outdoors due to surface film vs conductance thru (quick) surface sgfCAirBm[index] DBL Array [OC] End of monthly-hourly beam solar gain factor this hour to zone CAir sgfCAirDf[index] DBL Array [OC] End of monthly-hourly diffuse .. These are multipliers for wthr data, later, via SgR <p>ZNR loads setup time variables: ua's (uval*area), used for zn_aqLdHr for 'a' for \"Tz = (a + q)/b\".</p> Name Type Variability Description/Comments uaSpecT DBL Start of run light surface UA to specified temps (exCnd=specT surfaces), for zn_bcon, Btuh/F ua DBL Start of run <ul> <li>light surface UA to ambient (sum uval*area), constant for run, for zn_bcon and zn_aqLdHr. Btuh/F.</li> <li>Accumulation to double found nec for CEC custom budget *EXACT* match: float sometimes</li> <li>gave 1 part in 100000 differences (CEC certification test calls for 2-digit match).</li> </ul> UANom DBL Start of run All-surface UA to ambient (sum of surface UNom derived with default surf conductances), Btuh/F ductCondUANom DBL Start of run nominal total UA of ducts in zone, Btuh/F (due to conduction, not air leakage) Name Type Variability Description/Comments haMass DBL Start of run Total ha (surf conductance * area) to mass (Btuh/F) <ul> <li>re determination of below grade floor coefficients</li> <li>floor coupling depends on wall insulation</li> <li>walls processed first and accumulate here</li> </ul> Name Type Variability Description/Comments BGWallPerim DBL Start of run total below grade wall perimeter, ft BGWallPA4 DBL Start of run sum (perim*a4) BGWallPA5 DBL Start of run sum (perim*a5) <p>ZNR loads runtime: hourly q's for  Tz = (a + q)/b.</p> Name Type Variability Description/Comments qSgTot DBL End of hour hour total solar gain to some sgTotTarg <ul> <li>hourly part of s g total (Btuh) for zone: hourly mass insides.</li> <li>Added to in cnloads.cpp:loadsHour via pointers in SgR entries made monthly</li> <li>in cgsolar.cpp per info in XSURFs made in cncultn.cpp. Used: cnztu.cpp re results qSlr</li> <li>radiant internal gain from [GAIN][gain] inputs. All POWER (Btuh). Next 4 set via rIgDist. 11-95.</li> </ul> SGTARG Name Type Variability Description/Comments sgTotTarg.bm DBL End of subhour beam sgTotTarg.df DBL End of subhour diffuse sgTotTarg.tot DBL End of subhour total qrIgTot RIGTARG End of hour total originating in this zone: redundant total for energy balance check only. qrIgTotO RIGTARG End of hour subtotal lost to outdoors thru light surfaces, to show in ZEB rpt as -Cond. qrIgTotIz RIGTARG End of hour <ul> <li>net subtotal to other zones thru light surfaces, to show in ZEB rpt as -Izone.</li> <li>energy balance: qrIgTot - qIgTotIz - qIgTotO = qrIgAir + qrIgMs</li> </ul> qrIgAir RIGTARG End of hour rad int gain to this zone's CAir (for light surfaces/windows), for zn_aqLdHr. 11-95. qrIgMs number End of hour rad int gain to mass sides in this zone, for energy balance, set in cnLoads. 11-95. <p>e? next five contain prior hour's value at start hour expr time, new value by 2<sup>nd</sup> subhour. see note 1, 1-92. e's 11-95.</p> Name Type Variability Description/Comments znSGain DBL End of hour <ul> <li>POWER</li> <li>zn's hr's sens gain (Btuh), total from zn's [GAINs][gain], to qsIgHr.</li> <li>set cnguts, used cnloads.</li> <li>qsIgHr (just below) includes znSGain but excludes qrIgAir.</li> </ul> znLGain DBL End of hour <ul> <li>POWER</li> <li>latent gain (Btuh), from ditto, used by ZNR::znW.</li> <li>additional accumulators for lighting end use gains, re daylighting, for NREL. set cnguts, used cnztu.cpp. 9-94.</li> </ul> znLitDmd DBL End of hour <ul> <li>POWER</li> <li>lighting demand (before reduction by [gnDlFrPow][gndlfrpow])</li> </ul> znLitEu DBL End of hour <ul> <li>POWER</li> <li>lighting energy use (after reduction by [gnDlFrPow][gndlfrpow]; also posted to znS/LGain &amp; meter).</li> </ul> Name Type Variability Description/Comments znXLGain DBL End of subhour <ul> <li>POWER</li> <li>excess latent gain (Btuh) rejected in znW() to prevent over-saturated w. 10-96.</li> </ul> znXLGainLs DBL End of subhour <ul> <li>POWER</li> <li>previous subhour ditto: added to sensible gain to simulate condensation in zone, 5-97.</li> </ul> <p>b's (sigma(UAi))</p> Name Type Variability Description/Comments bcon DBL Start of run portion of b constant for run: ua + uaSpecT. setup time. <p>ZNR loads runtime: subhourly q's, a's, b's for  Tz = (a + q)/b.</p> Name Type Variability Description/Comments qMsSg DBL End of subhour <ul> <li>POWER</li> <li>subhour's solar gain rate (Btuh) to mass surfaces in zn, to subtract from subhour results qMass.</li> <li>note 2.</li> </ul> qSgAir DBL End of subhour subhour's solar gain rate (Btuh) to air sgAirTarg <ul> <li>Solar gain (Btuh) target (float) for zone air: all sun thru windows not [SGDIST][sgdist]'d to a mass.</li> <li>Added to in cnloads.cpp:loadsSubhr via pointers in SgR entries made monthly</li> <li>in cgsolar.cpp per info in XSURFs made in cncultn.cpp. Used: cnloads.cpp re aqLdSh. */</li> </ul> SGTARG Name Type Variability Description/Comments sgAirTarg.bm DBL End of subhour beam sgAirTarg.df DBL End of subhour diffuse sgAirTarg.tot DBL End of subhour total qSgTotSh DBL End of subhour sgTotShTarg <ul> <li>subhourly part of s g total (Btuh) for zone: air + mass insides.</li> <li>Added to in cnloads.cpp:loadsSubhr via pointers in SgR entries made monthly</li> <li>in cgsolar.cpp per info in XSURFs made in cncultn.cpp. Used: cnztu.cpp re results qSlr */</li> </ul> SGTARG Name Type Variability Description/Comments sgTotShTarg.bm DBL End of subhour beam sgTotShTarg.df DBL End of subhour diffuse sgTotShTarg.tot DBL End of subhour total qIzXAnSh DBL End of subhour subhourly gain due to non-airnet IZXFERs (Btuh, +=into zone) qIzSh DBL End of subhour <ul> <li>subhourly part of interzone gain rate (Btuh, +=into zone)</li> <li>due to non-airnet [IZXFERs][izxfer]</li> </ul> <ul> <li>subhourly values re airnet heat gains (see [IZXFER][izxfer])</li> <li>[ 0]=minimum (generally infil only)</li> <li>[ 1]=maximum (generally infil+vent)</li> </ul> Name Type Variability Description/Comments pz0W[index] DBL Array [2] End of subhour <ul> <li>working zone pressures relative to patm at nominal z=0, lbf/sf</li> <li>[ 0]=infil only; [ 1]=infil+ven</li> </ul> pz0WarnCount[index] number Array [2] End of run <ul> <li># of unreasonable pressure warnings issued for this zone</li> <li>[0]=infil only; [1]=infil+vent</li> </ul> Name Type Variability Description/Comments pz0 DBL End of subhour <ul> <li>final zone pressure relative to patm at nominal z=0, lbf/sf</li> <li>= zn_fVent-weighted avg of zn_pz0W[ 0] and zn_pz0W[ 1]</li> </ul> ventUt number End of subhour <ul> <li>vent utility for this substep</li> <li>&lt;0=bad (don't vent), 0=don't care, 1=maybe helpful</li> </ul> <ul> <li>subhour zone gains from duct conduction losses, Btuh</li> <li>(convective/radiant only)</li> <li>CAUTION: subhr initialization not at beginning of step</li> <li>re lagged values in zone balance</li> </ul> Name Type Variability Description/Comments qDuctCondAir DBL End of subhour to ta (convection) qDuctCondRad DBL End of subhour to tr (radiation) qDuctCond DBL End of subhour sum FROM LAST STEP (else energy balance trouble) <ul> <li>subhour DHW zone transfers, Btuh</li> <li>(convective/radiant only)</li> </ul> Name Type Variability Description/Comments qDHWLossAir DBL End of subhour to ta (convection) qDHWLossRad DBL End of subhour to tr (radiation) qDHWLoss DBL End of subhour sum qHPWH DBL End of subhour <ul> <li>heat extracted from zone by heat pump DHWHEATER(s)</li> <li>assumed from ta (convective) (always &lt;=0)</li> <li>Included in zone balance as heat, not air flow,</li> <li>else energy bal error possible</li> </ul> hpwhAirX number End of subhour <ul> <li>approximate zone air change rate due to</li> <li>heat pump water heater source air (changes/hr)</li> <li>air assumed returned to source zone</li> <li>affects zn_hcFrc but not pressure balance</li> </ul> Name Type Variability Description/Comments anVentEffect number End of hour <ul> <li># of IZXRATs that could impact airnet</li> <li>zone vent flow. Derived from ad_Ae/ad_mdotP,</li> <li>ok whether zn_airNetI[ 1] is calc'd or not</li> </ul> airNetI[index] Array [2] <ul> <li>total *possible* airnet flow into zone</li> <li>note actual flow depends of zn_fVent</li> <li>[ 0]=infil only</li> <li>[ 1]=infil+vent (calc'd only if needed)</li> </ul> AIRFLOW Name Type Variability Description/Comments airNetI[index].tdb DBL End of subhour air dry-bulb temp, F airNetI[index].w DBL End of subhour air humidity ratio, lb moisture/lb dry air Name Type Variability Description/Comments airNetI[index].amf DBL End of subhour <ul> <li>mass flow rate, lb/hr dry air</li> <li>*s *e DBL as_tdb        // from AIRSTATE</li> <li>*s *e DBL as_w</li> </ul> Name Type Variability Description/Comments fVentPrf number End of subhour <ul> <li>preferred vent fraction for this zone in isolation</li> <li>(not limited by e.g. C_VENTAVAILVC_WHOLEBLDG)</li> </ul> tzVent number End of subhour <ul> <li>zone air temp with full vent, F (debug aid)</li> <li>0 if vent not possible</li> </ul> fVent number End of subhour <ul> <li>vent fraction actual; venting used to hold zone at zn_tzspD</li> <li>= (actual mCp) / (possible mCp)</li> </ul> anAmfCpVent DBL End of subhour vent flow (in excess of zn_airNetI[ 0]), Btuh/F anAmfCpTVent DBL End of subhour vent flow*temp (in excess of zn_airNetI[ 0]), Btuh <ul> <li>total HVAC-related air flows for step</li> <li>includes run fract (i.e. =0 when system off)</li> </ul> Name Type Variability Description/Comments ductLkI duct leak into zone AIRFLOW Name Type Variability Description/Comments ductLkI.tdb DBL End of subhour air dry-bulb temp, F ductLkI.w DBL End of subhour air humidity ratio, lb moisture/lb dry air Name Type Variability Description/Comments ductLkI.amf DBL End of subhour <ul> <li>mass flow rate, lb/hr dry air</li> <li>*s *e DBL as_tdb        // from AIRSTATE</li> <li>*s *e DBL as_w</li> </ul> ductLkO duct leak out of zone AIRFLOW Name Type Variability Description/Comments ductLkO.tdb DBL End of subhour air dry-bulb temp, F ductLkO.w DBL End of subhour air humidity ratio, lb moisture/lb dry air Name Type Variability Description/Comments ductLkO.amf DBL End of subhour <ul> <li>mass flow rate, lb/hr dry air</li> <li>*s *e DBL as_tdb        // from AIRSTATE</li> <li>*s *e DBL as_w</li> </ul> sysAirI HVAC air into zone (supply) AIRFLOW Name Type Variability Description/Comments sysAirI.tdb DBL End of subhour air dry-bulb temp, F sysAirI.w DBL End of subhour air humidity ratio, lb moisture/lb dry air Name Type Variability Description/Comments sysAirI.amf DBL End of subhour <ul> <li>mass flow rate, lb/hr dry air</li> <li>*s *e DBL as_tdb        // from AIRSTATE</li> <li>*s *e DBL as_w</li> </ul> sysAirO HVAC air out of zone (return) AIRFLOW Name Type Variability Description/Comments sysAirO.tdb DBL End of subhour air dry-bulb temp, F sysAirO.w DBL End of subhour air humidity ratio, lb moisture/lb dry air Name Type Variability Description/Comments sysAirO.amf DBL End of subhour <ul> <li>mass flow rate, lb/hr dry air</li> <li>*s *e DBL as_tdb        // from AIRSTATE</li> <li>*s *e DBL as_w</li> </ul> OAVRlfO <ul> <li>HVAC OAV air out</li> <li>in OAV mode, zn_sysAirO = 0 and zn_OAVRlfO &gt; 0</li> </ul> AIRFLOW Name Type Variability Description/Comments OAVRlfO.tdb DBL End of subhour air dry-bulb temp, F OAVRlfO.w DBL End of subhour air humidity ratio, lb moisture/lb dry air Name Type Variability Description/Comments OAVRlfO.amf DBL End of subhour <ul> <li>mass flow rate, lb/hr dry air</li> <li>*s *e DBL as_tdb        // from AIRSTATE</li> <li>*s *e DBL as_w</li> </ul> Name Type Variability Description/Comments sysDepAirIls <ul> <li>total system dependant flow into zone from prior step</li> <li>= zn_ductLkI</li> <li>lagged value used in zone HB re duct leaks, etc.</li> <li>that depend on HVAC performance.</li> <li>* does NOT include zn_sysAirI</li> <li>* NOT used in mass balance</li> </ul> AIRFLOW Name Type Variability Description/Comments sysDepAirIls.tdb DBL End of subhour air dry-bulb temp, F sysDepAirIls.w DBL End of subhour air humidity ratio, lb moisture/lb dry air Name Type Variability Description/Comments sysDepAirIls.amf DBL End of subhour <ul> <li>mass flow rate, lb/hr dry air</li> <li>*s *e DBL as_tdb        // from AIRSTATE</li> <li>*s *e DBL as_w</li> </ul> Name Type Variability Description/Comments qCondQS DBL End of subhour total quick surface conduction, Btuh (+ = into zone) qCondMS DBL End of subhour <ul> <li>total mass exterior surface conduction, Btuh (+ = into zone)</li> <li>computed/unused 12-21-10</li> </ul> rsAmfSysReq[index] DBL Array [2] End of subhour <ul> <li>requested [RSYS][rsys] air mass flow (at system) to hold current step set point, lbm/hr</li> <li>[ 0]=with main source</li> <li>[ 1]=with main+aux (ASHP only)</li> </ul> rsFSize number End of subhour fraction of requested air that RSYS could provide rsAmfSup DBL End of subhour final RSYS supply air mass flow (at register, +=in), lbm/hr rsAmfRet DBL End of subhour final RSYS return air mass flow (out of zone at grille, +=out), lbm/hr rsAmfRetLs DBL Start of subhour last step zn_rsAmfRet (+ = out) Name Type Variability Description/Comments tzsp TEMP_GZ End of subhour <ul> <li>current step controlling set point, F</li> <li>may not be reliably set for all modes</li> <li>0 if no active setpoint</li> </ul> tzspH TEMP_GZ End of subhour current step heating set point, F tzspD TEMP_GZ End of subhour current step desired temp set point, F tzspC TEMP_GZ End of subhour current step cooling set point, F Name Type Variability Description/Comments tzspHlh TEMP_GZ Start of hour end-of-last-hour heating set point (re autosize setpoint ramping), F tzspDlh TEMP_GZ Start of hour end-of-last-hour desired temp set point (re autosize setpoint ramping), F tzspClh TEMP_GZ Start of hour end-of-last-hour cooling set point (re autosize setpoint ramping), F Name Type Variability Description/Comments hcMode number End of subhour <ul> <li>heating / cooling mode required per set point (rsmHEAT, rsmCOOL, )</li> <li>(may not match [RSYS][rsys].rs_mode due to e.g. [RSYS][rsys] availability or</li> <li>conflicting zone requests)</li> </ul> <p>HVAC convective delivery fraction (TODO: now all 1, 6-2012)</p> Name Type Variability Description/Comments fConvH number Start of subhour heating fConvC number Start of subhour cooling fConv number Start of subhour current step Name Type Variability Description/Comments qsHvac DBL End of subhour <ul> <li>subhour total (sensible) power of all hvac, Btuh</li> <li>NB: power (Btuh) q is *subhrDur'd to yield energy (Btu) q's for results.</li> </ul> qlHvac DBL End of subhour subhour total latent power (Btuh) (moisture * 1061) likewise qlIz DBL End of subhour <ul> <li>latent gain from [IZXFER][izxfer] sources (infil, vent, and duct leakage), Btuh</li> <li>does NOT include HVAC</li> </ul> rho DBL End of subhour zone moist air density at nominal w=tp_refW, lb/cf rho0ls DBL Start of subhour prior step zone moist air density at nominal z=0, lb/cf; computed from tzls and zn_pz0[ 0] dryAirMass DBL End of subhour total mass of *dry* air in zone, lbm dryAirMassEff DBL End of subhour <ul> <li>effective dry air mass in zone, lbm</li> <li>= zn_dryAirMass*i.zn_HIRatio except when zone moisture time constant</li> <li>requires increase for numerical stability</li> <li>See zn_AirXMoistureBal()</li> </ul> ivAirX number End of subhour <ul> <li>zone infiltration/ventilation air change rate (changes/hr)</li> <li>includes flow induced by system (HVAC, duct leakage, )</li> <li>but not system flows</li> </ul> airX number End of subhour <ul> <li>overall zone air change rate (changes/hr)</li> <li>includes *all* air flows; used re convective coeff determination</li> </ul> <ul> <li>*s *e FLOAT i.zn_hcAirX // zn_airX + add'l 4.8 ACH for non-air zones having HVAC loads, changes/hr</li> <li>inputable for testing; used re convection coeff model</li> </ul> Name Type Variability Description/Comments hcAirXls number Start of subhour prior subhour value of i.zn_hcAirX, change/hr hcAirXComb number End of subhour <ul> <li>combined zone air change rate for this subhour, changes/hr</li> <li>= zn_hcAirXls + zn_hpwhAirX</li> </ul> hcFrc number End of subhour inside surface forced convection coefficient, Btuh/ft2-F windPresV number Start of subhour <ul> <li>wind velocity pressure, lbf/ft2</li> <li>zone-specific per zn_EaveZ and zn_infShield</li> </ul> <p>ZNR runtime zone temps and w's</p> Name Type Variability Description/Comments tz DBL End of subhour <ul> <li>TEMP</li> <li>zone air temp: official copy for results: active setpoint or floating</li> </ul> aTz DBL End of subhour <ul> <li>TEMP</li> <li>air handler working copy of tz, possibly abandoned if change very small.</li> </ul> wz DBL End of subhour <ul> <li>HUMRAT</li> <li>zone humidity ratio (w)</li> </ul> relHum number End of subhour zone relative humidity, 0 - 1 relHumls number Start of subhour zone relative humidity, end last subhour, 0 - 1 relHumlh number Start of hour zone relative humidity, end last hour, 0 - 1 twb DBL End of subhour zone wet bulb temp, F aWz DBL End of subhour <ul> <li>HUMRAT</li> <li>air handler working copy of wz, possibly abandoned if change very small.</li> </ul> tzls DBL Start of subhour <ul> <li>TEMP</li> <li>zone temp, end last subhour, F</li> </ul> wzls DBL Start of subhour <ul> <li>HUMRAT</li> <li>zone hum rat, end last subhour (same as wz in 1st iteration of subhr)</li> </ul> tzlh DBL Start of hour <ul> <li>TEMP</li> <li>zone temp, end last hour</li> </ul> tzlsDelta DBL Unknown <ul> <li>TEMPDIFF</li> <li>zone temp change during last subhour: tzls - tz at end subhour</li> </ul> wzlsDelta DBL Unknown <ul> <li>HUMRAT</li> <li>zone hum rat change during last subhour: wzls - wz at end subhour</li> </ul> <p>re radiant/convective model</p> Name Type Variability Description/Comments tr DBL End of subhour <ul> <li>TEMP</li> <li>zone radiant temp, F</li> </ul> trls DBL End of subhour <ul> <li>TEMP</li> <li>zone radiant temp, end last subhour, F</li> </ul> trlh DBL Start of hour <ul> <li>TEMP</li> <li>zone radiant temp, end last hour, F</li> </ul> <p>ZNR runtime hvac internal, mostly sub or hourly</p> Name Type Variability Description/Comments md number End of subhour current hvac mode: subscript of mdSeq"},{"location":"shared/dhwheater-doc/","title":"Dhwheater doc","text":""},{"location":"shared/dhwheater-doc/#whname","title":"whName","text":"<p>Optional name of water heater; give after the word \u201cDHWHEATER\u201d if desired.</p> Units Legal Range Default Required Variability 63 characters none No constant"},{"location":"shared/dhwheater-doc/#whmult","title":"whMult","text":"<p>Type: integer</p> <p>Number of identical water heaters of this type. Any value \\(&gt;1\\) is equivalent to repeated entry of the same DHWHEATER.</p> Units Legal Range Default Required Variability x \\(&gt;\\) 0 1 No constant"},{"location":"shared/dhwheater-doc/#whtype","title":"whType","text":"<p>Type: choice</p> <p>Type of water heater.  This categorization is based on CEC and federal rating standards that change from time to time.</p> SMALLSTORAGE A storage water heater having an energy factor (EF) rating.  Generally, a gas-fired storage water heater with input of 75,000 Btuh or less, an oil-fired storage water heater with input of 105,000 Btuh or less, an electric storage water heater with input of 12 kW or less, or a heat pump water heater rated at 24 amps or less. LARGESTORAGE Any storage water heater that is not SMALLSTORAGE. SMALLINSTANTANEOUS A water heater that has an input rating of at least 4,000 Btuh per gallon of stored water. Small instantaneous water heaters include: gas instantaneous water heaters with an input of 200,000 Btu per hour or less, oil instantaneous water heaters with an input of 210,000 Btu per hour or less, and electric instantaneous water heaters with an input of 12 kW or less. LARGEINSTANTANEOUS An instantaneous water heater that does not conform to the definition of SMALLINSTANTANEOUS, an indirect fuel-fired water heater, or a hot water  supply boiler. INSTANTANEOUSUEF An instantaneous water heater having a UEF rating (as opposed to EF). Units Legal Range Default Required Variability Codes listed above SMALLSTORAGE No constant"},{"location":"shared/dhwheater-doc/#whheatsrc","title":"whHeatSrc","text":"<p>Type: choice</p> <p>Heat source for water heater.  CSE implements uses efficiency-based models for all whTypes (as documented in RACM, App. B).  In addition, the detailed Ecotope HPWH model is available for electric (air source heat pump and resistance) SMALLSTORAGE water heaters.</p> RESISTANCE Electric resistance heating element Deprecated for whType=SMALLSTORAGE (use RESISTANCEX) RESISTANCEX Electric resistance heating element, detailed HPWH model ASHP Air source heat pump, EF model Deprecated for whType=SMALLSTORAGE (use ASHPX) ASHPX Air source heat pump, detailed HPWH model FUEL Fuel-fired burner Units Legal Range Default Required Variability Codes listed above FUEL No constant"},{"location":"shared/dhwheater-doc/#whrestype","title":"whResType","text":"<p>Type: choice</p> <p>Resistance heater type, valid only if whHeatSrc is equal to RESISTANCEX, else ignored. These choices are supported by the detailed HPWH model.  Except for Generic, all heater characteristics are set by HPWH based on whResType.</p> Units Legal Range Default Required Variability Typical SwingTank Typical No constant"},{"location":"shared/dhwheater-doc/#whheatingcap","title":"whHeatingCap","text":"<p>Type: float</p> <p>Nominal heating capacity, available only for a limited HPWH types.</p> Units Legal Range Default Required Variability Btuh x \\(&gt;\\) 0 0 No constant"},{"location":"shared/dhwheater-doc/#whvol","title":"whVol","text":"<p>Type: float</p> <p>Storage tank volume. Must be omitted or 0 for instantaneous whTypes.  Used by HPWH model (whHeatSrc=RESISTANCEX or whHeatSrc=ASHPX). Required when whHeatSrc=RESISTANCEX or whHeatSrc=ASHPX with whASHPType=GENERIC.  For all other configurations, whVol is documentation-only.</p> Units Legal Range Default Required Variability gal \\(\\ge\\) 0.1 (caution: small values may cause runtime errors) per whASHPType if HPWH else 50 For some HPWH configurations, see above constant"},{"location":"shared/dhwheater-doc/#whvolrunning","title":"whVolRunning","text":"<p>Type: float</p> <p>Running storage volume is the volume above aquastat. Requires the total volume based on aquastat position. Ecotope's HPWH tank and heater.</p> Units Legal Range Default Required Variability gal x \\(&gt;\\) 0 0 No constant"},{"location":"shared/dhwheater-doc/#whef","title":"whEF","text":"<p>Type: float</p> <p>Rated energy factor that specifies DHWHEATER efficiency under test conditions.  Used by CSE to derive annual water heating efficiency and/or other characteristics as described below.  Calculation methods are documented in RACM, Appendix B.</p> Configuration whEF default Use whType=SMALLSTORAGE, whHeatSrc=RESISTANCE or FUEL 0.82 Derivation of whLDEF whType=SMALLSTORAGE, whHeatSrc=ASHP 0.82 Derivation of whLDEFnote inappropriate default (deprecated, use ASHPX) whType=SMALLSTORAGE, whHeatSrc=ASHPX, whASHPType=GENERIC (req'd) Tank losses Overall efficiency whType=SMALLSTORAGE, whHeatSrc=RESISTANCEX (req'd) Tank losses Note: maximum whEF=0.98. whType=SMALLINSTANTANEOUS, whHeatSrc=RESISTANCE or FUEL 0.82 Annual efficiency = whEF*0.92 Any other (unused) Units Legal Range Default Required Variability \\(&gt;\\) 0 Caution: maximum not checked. Unrealistic values will cause runtime errors and/or invalid results See above See above constant"},{"location":"shared/dhwheater-doc/#whldef","title":"whLDEF","text":"<p>Type: float</p> <p>Load-dependent energy factor for DHWHEATERs with whType=SMALLSTORAGE and whHeatSrc=FUEL or whHeatSrc=RESISTANCE.  If not given, whLDEF is derived using a preliminary simulation activated via DHWSYS wsCalcMode=PRERUN.  See RACM Appendix B.</p> Units Legal Range Default Required Variability x \\(&gt;\\) 0 Calculated via DHWSYS PreRun mechanism When whType = SMALLSTORAGE and PreRun not used constant"},{"location":"shared/dhwheater-doc/#whuef","title":"whUEF","text":"<p>Type: float</p> <p>Water heater Uniform Energy Factor efficiency rating. Required when whType=INSTANTANEOUSUEF. When specified with whType=SMALLSTORAGE and whHeatSrc=ASHPX, the compressor performance will be adjusted to match the value input here. </p> Units Legal Range Default Required Variability x \\(\\ge\\) 0 none when whType= INSTANTANEOUSUEF constant"},{"location":"shared/dhwheater-doc/#whannualelec","title":"whAnnualElec","text":"<p>Type: float</p> <p>Annual electricity use assumed in UEF rating derivation.  Used when whType=INSTANTANEOUSUEF.</p> Units Legal Range Default Required Variability kWh x \\(\\ge\\) 0 none when whType= INSTANTANEOUSUEF constant"},{"location":"shared/dhwheater-doc/#whannualfuel","title":"whAnnualFuel","text":"<p>Type: float</p> <p>Annual fuel use assumd in UEF rating derivation, used when whType=INSTANTANEOUSUEF.</p> Units Legal Range Default Required Variability therms x \\(\\ge\\) 0 none when whType= INSTANTANEOUSUEF constant"},{"location":"shared/dhwheater-doc/#whratedflow","title":"whRatedFlow","text":"<p>Type: float</p> <p>Maximum flow rate assumed in UEF rating derivation.  Used when whType=INSTANTANEOUSUEF.</p> Units Legal Range Default Required Variability gpm x \\(&gt;\\) 0 none when whType= INSTANTANEOUSUEF constant"},{"location":"shared/dhwheater-doc/#whstbyelec","title":"whStbyElec","text":"<p>Type: float</p> <p>Instantaneous water heater standby power (electricity consumed when heater is not operating).  Used when whType=INSTANTANEOUSUEF.</p> Units Legal Range Default Required Variability W x \\(\\ge\\) 0 4 No constant"},{"location":"shared/dhwheater-doc/#whloadcfwdf","title":"whLoadCFwdF","text":"<p>Type: float</p> <p>Instanteous water heater load carry forward factor -- approximate number of hours the heater is allowed to meet water heating demand that is unmet on a 1 minute basis, used when whType=INSTANTANEOUSUEF.</p> Units Legal Range Default Required Variability x \\(\\ge\\) 0 1 No constant"},{"location":"shared/dhwheater-doc/#whzone","title":"whZone","text":"<p>Type: znName</p> <p>Name of zone where water heater is located, used only in detailed HPWH models (whHeatSrc=ASHPX or whHeatSrc=RESISTANCEX), otherwise no effect. Zone conditions are used for tank heat loss calculations.  Heat losses from the DHWHEATER are included in the zone heat balance.  whZone also provides the default for whASHPSrcZn (see below).</p> <p>whZone and whTEx cannot both be specified.</p> Units Legal Range Default Required Variability name of a ZONE Not in a zone (heat losses discarded) No constant"},{"location":"shared/dhwheater-doc/#whtex","title":"whTEx","text":"<p>Type: float</p> <p>Water heater surround temperature, used only in detailed HPWH models (whHeatSrc=ASHPX or whHeatSrc=RESISTANCEX), otherwise no effect.  When whTEx is specified, tank heat losses are calculated using whTEx and modify tank water temperatures, but the lost heat has no external effect.</p> <p>whZone and whTEx cannot both be specified.</p> Units Legal Range Default Required Variability <sup>o</sup>F x \\(\\ge\\) 0 whZone air temperature if specified, else 70 <sup>o</sup>F No hourly"},{"location":"shared/dhwheater-doc/#whashptype","title":"whASHPType","text":"<p>Type: choice</p> <p>Air source heat pump type, valid only if whHeatSrc=ASHPX. These choices are supported by the detailed HPWH model.  Except for Generic, all heater characteristics are set by HPWH based on whASHPType.</p> Choice Specified type Generic General generic (parameterized by wh_EF and wh_vol) AOSmithPHPT60 60 gallon Voltex AOSmithPHPT80 80 gallon Voltex AOSmithHPTU50 50 gallon AOSmith HPTU AOSmithHPTU66 66 gallon AOSmith HPTU AOSmithHPTU80 80 gallon AOSmith HPTU AOSmithHPTU80DR 80 gallon AOSmith HPTU (demand reduction variant) AOSmithCAHP120 120 gallon AOSmith Sanden40 Sanden 40 gallon CO2 external heat pump Sanden80 Sanden 80 gallon CO2 external heat pump Sanden120 Sanden 120 gallon CO2 external heat pump SandenGS3 Sanden GS3 compressor CO2 external GE2012 2012 era GeoSpring GE2014 2014 80 gal GE model run in the efficiency mode GE2014_80DR 2014 80 gal GE model run in the efficiency mode (demand reduction variant) GE2014StdMode 2014 50 gal GE run in standard mode GE2014StdMode80 2014 80 gal GE run in standard mode RheemHB50 newish Rheem (2014 model?) RheemHBDR2250 50 gallon 2250 W resistance Rheem HB Duct Ready RheemHBDR4550 50 gallon 4500 W resistance Rheem HB Duct Ready RheemHBDR2265 65 gallon 2250 W resistance Rheem HB Duct Ready RheemHBDR4565 65 gallon 4500 W resistance Rheem HB Duct Ready RheemHBDR2280 80 gallon 2250 W resistance Rheem HB Duct Ready RheemHBDR4580 80 gallon 4500 W resistance Rheem HB Duct Ready Rheem2020Prem40 40 gallon Rheem 2020 Premium Rheem2020Prem50 50 gallon Rheem 2020 Premium Rheem2020Prem65 65 gallon Rheem 2020 Premium Rheem2020Prem80 80 gallon Rheem 2020 Premium Rheem2020Build40 40 gallon Rheem 2020 Builder Rheem2020Build50 50 gallon Rheem 2020 Builder Rheem2020Build65 65 gallon Rheem 2020 Builder Rheem2020Build80 80 gallon Rheem 2020 Builder RheemPlugInShared40 40 gal Rheem plug-in 120V shared circuit (no resistance elements) RheemPlugInShared50 50 gal Rheem plug-in 120V shared circuit (no resistance elements) RheemPlugInShared65 65 gal Rheem plug-in 120V shared circuit (no resistance elements) RheemPlugInShared80 80 gal Rheem plug-in 120V shared circuit (no resistance elements) RheemPlugInDedicated40 40 gal Rheem plug-in 120V dedicated circuit (no resistance elements) RheemPlugInDedicated50 50 gal Rheem  plug-in 120V dedicated circuit (no resistance elements) Stiebel220E Stiebel Eltron (2014 model?) AOSmithSHPT50 AOSmith add'l models (added 3-24-2017) AOSmithSHPT66 AOSmith add'l models (added 3-24-2017) AOSmithSHPT80 AOSmith add'l models (added 3-24-2017) GenericTier1 Generic Tier 1 GenericTier2 Generic Tier 2 GenericTier3 Generic Tier 3 Generic General generic (parameterized by EF and vol) UEF2Generic Experimental UEF=2 WorstCaseMedium UEF2Generic alias (supports pre-existing test cases) BasicIntegrated Typical integrated HPWH ResTank Resistance heater (no compressor).  Superceded by whHeatSrc=RESITANCEX ResTankNoUA Resistance heater (no compressor) with no tank losses.  Superseded by whHeatSrc=RESISTANCEX. AOSmithHPTU80DR 80 gallon AOSmith HPTU with fixed backup setpoint (experimental for demand response testing) AOSmithSHPT50 50 gal AOSmith SHPT AOSmithSHPT66 66 gal AOSmith SHPT AOSmithSHPT80 80 gal AOSmith SHPT AOSmithHPTS40 40 gal AOSmith HPTS AOSmithHPTS50 50 gal AOSmith HPTS AOSmithHPTS66 66 gal AOSmith HPTS AOSmithHPTS80 80 gal AOSmith HPTS ColmacCxV5_SP Colmac CxA-xx modular external HPWHs (single pass mode) ColmacCxA10_SP Colmac CxA-xx modular external HPWHs (single pass mode) ColmacCxA15_SP Colmac CxA-xx modular external HPWHs (single pass mode) ColmacCxA20_SP Colmac CxA-xx modular external HPWHs (single pass mode) ColmacCxA25_SP Colmac CxA-xx modular external HPWHs (single pass mode) ColmacCxA30_SP Colmac CxA-xx modular external HPWHs (single pass mode) ColmacCxV5_MP Colmac CxA-xx modular external HPWHs (multi-pass mode) ColmacCxA10_MP Colmac CxA-xx modular external HPWHs (multi-pass mode) ColmacCxA15_MP Colmac CxA-xx modular external HPWHs (multi-pass mode) ColmacCxA20_MP Colmac CxA-xx modular external HPWHs (multi-pass mode) ColmacCxA25_MP Colmac CxA-xx modular external HPWHs (multi-pass mode) ColmacCxA30_MP Colmac CxA-xx modular external HPWHs (multi-pass mode) NyleC25A_SP Nyle Cxx external HPWHs (SP = single pass mode) NyleC60A_SP Nyle Cxx external HPWHs (SP = single pass mode) NyleC90A_SP Nyle Cxx external HPWHs (SP = single pass mode) NyleC125A_SP Nyle Cxx external HPWHs (SP = single pass mode) NyleC185A_SP Nyle Cxx external HPWHs (SP = single pass mode) NyleC250A_SP Nyle Cxx external HPWHs (SP = single pass mode) NyleC60A_CWP_SP Nyle Cxx external SP HPWHs with cold weather package NyleC90A_CWP_SP Nyle Cxx external SP HPWHs with cold weather package NyleC125A_CWP_SP Nyle Cxx external SP HPWHs with cold weather package NyleC185A_CWP_SP Nyle Cxx external SP HPWHs with cold weather package NyleC250A_CWP_SP Nyle Cxx external SP HPWHs with cold weather package NyleC60A_MP Nyle Cxx external HPWHs (MP = multi-pass mode) NyleC90A_MP Nyle Cxx external HPWHs (MP = multi-pass mode) NyleC125A_MP Nyle Cxx external HPWHs (MP = multi-pass mode) NyleC185A_MP Nyle Cxx external HPWHs (MP = multi-pass mode) NyleC250A_MP Nyle Cxx external HPWHs (MP = multi-pass mode) NyleC60A_CWP_MP Nyle Cxx external MP HPWHs w/ cold weather package NyleC90A_CWP_MP Nyle Cxx external MP HPWHs w/ cold weather package NyleC125A_CWP_MP Nyle Cxx external MP HPWHs w/ cold weather package NyleC185A_CWP_MP Nyle Cxx external MP HPWHs w/ cold weather package NyleC250A_CWP_MP Nyle Cxx external MP HPWHs w/ cold weather package Rheem_HPHD60HNU_MP Rheem HPHD60 MP external MP HPWHs Rheem_HPHD60VNU_MP Rheem HPHD60 MP external MP HPWHs Rheem_HPHD135HNU_MP Rheem HPHD135 MP external MP HPWHs Rheem_HPHD135VNU_MP Rheem HPHD135 MP external MP HPWHs Scalable_SP single pass scalable type for autosized standard design Scalable_MP multipass scalable type for autosized standard design AquaThermAire Villara AquaThermAire HPWH GenericUEF217 65-gal tank meeting Federal standard minimum requirement AWHSTier3Generic40 A 40-gal tank meeting Advanced Water Heating Specification Tier-3 minimum requirements AWHSTier3Generic50 A 50-gal tank meeting Advanced Water Heating Specification Tier-3 minimum requirements AWHSTier3Generic65 A 65-gal tank meeting Advanced Water Heating Specification Tier-3 minimum requirements AWHSTier3Generic80 A 80-gal tank meeting Advanced Water Heating Specification Tier-3 minimum requirements AWHSTier4Generic40 A 40-gal tank meeting Advanced Water Heating Specification Tier-4 minimum requirements AWHSTier4Generic50 A 50-gal tank meeting Advanced Water Heating Specification Tier-4 minimum requirements AWHSTier4Generic65 A 65-gal tank meeting Advanced Water Heating Specification Tier-4 minimum requirements AWHSTier4Generic80 A 80-gal tank meeting Advanced Water Heating Specification Tier-4 minimum requirements BradfordWhiteAeroThermRE2H50 Bradford White 50-gal AeroTherm2023 BradfordWhiteAeroThermRE2H65 Bradford White 65-gal AeroTherm2023 BradfordWhiteAeroThermRE2H80 Bradford White 80-gal AeroTherm2023 LG_APHWC50 LG 50-gal integrated HPWH LG_APHWC80 LG 580-gal integrated HPWH Units Legal Range Default Required Variability Codes listed above none When whHeatSrc=ASHPX constant"},{"location":"shared/dhwheater-doc/#whashpsrczn","title":"whASHPSrcZn","text":"<p>Type: znName</p> <p>Name of zone that serves as heat pump heat source used when whHeatSrc=ASHPX. Heat removed from the zone is added to the heated water and is included in zone heat balance (that is, heat pump operation cools the zone).</p> <p>whASHPSrcZn and whASHPSrcT cannot both be specified.</p> Units Legal Range Default Required Variability name of a ZONE whZoneIf no zone is specified by input or default, heat extracted by ASHP has no effect. No constant"},{"location":"shared/dhwheater-doc/#whashpsrct","title":"whASHPSrcT","text":"<p>Type: float</p> <p>Heat pump source air temperature used when whHeatSrc=ASHPX.  Heat removed from this source is added to the heated water but has no other effect.</p> <p>whASHPSrcZn and whASHPSrcT cannot both be specified.</p> <p>The logic to determine the temperature of the heat pump source air is:</p> <pre><code>        if whASHPSrcT is specified\n          use whASHPSrcT\n        else if whASHPSRCZn is specified\n          use whASHPSrcZn air temp\n        else if whZone is specified\n          use whZone air temp\n        else\n          use 70 F\n</code></pre> <p>To model a heat pump that uses outdoor air as its heat source, omit whASHPSrcZn and specify whASHPSrcT = $tDbO.</p> Units Legal Range Default Required Variability <sup>o</sup>F x \\(\\ge\\) 0 70 <sup>o</sup>F (used only when whASHPSrcZn and whZone not specified) No hourly"},{"location":"shared/dhwheater-doc/#whashpresuse","title":"whASHPResUse","text":"<p>Type: float</p> <p>Specifies activation temperature difference for resistance heating, used only when whHeatSrc=ASHPX and whASHPType=GENERIC.  Refer to HPWH engineering documentation for model details.</p> Units Legal Range Default Required Variability <sup>o</sup>C x \\(\\ge\\) 0 7.22 No constant"},{"location":"shared/dhwheater-doc/#whreshtpwr","title":"whResHtPwr","text":"<p>Type: float</p> <p>Specifies resistance upper element power, used only with whHeatSrc=RESISTANCEX.</p> Units Legal Range Default Required Variability W x \\(\\ge\\) 0 4500 No constant"},{"location":"shared/dhwheater-doc/#whreshtpwr2","title":"whResHtPwr2","text":"<p>Type: float</p> <p>Specifies resistance lower element power, used only with whHeatSrc=RESISTANCEX.</p> Units Legal Range Default Required Variability W x \\(\\ge\\) 0 whResHtPwr No constant"},{"location":"shared/dhwheater-doc/#whua","title":"whUA","text":"<p>Type: float</p> <p>HPWH-type total UA (not per tank)</p> Units Legal Range Default Required Variability Btuh/F x \\(\\geq\\) 0 HPWH default No constant"},{"location":"shared/dhwheater-doc/#whinsulr","title":"whInsulR","text":"<p>Type: float</p> <p>Tank insulation resistance for heat pump water heater.</p> Units Legal Range Default Required Variability hr-F/Btuh x \\(&gt;\\) 0 -1 No constant"},{"location":"shared/dhwheater-doc/#whinhtsupply-whinhtloopret","title":"whInHtSupply, whInHtLoopRet","text":"<p>Type: float</p> <p>Fractional tank height of inlets for supply water and DHWLOOP return, used only with HPWH types (whHeatSrc=RESISTANCEX or whHeatSrc=ASHPX).  0 indicates the bottom of the water heater tank and 1 specifies the top.  Inlet height influences tank layer mixing and can impact heat pump COP and/or heating activation frequency.</p> Units Legal Range Default Required Variability 0 \\(\\le\\) x \\(\\le\\) 1 HPWH default (0?) No constant"},{"location":"shared/dhwheater-doc/#whtankcount","title":"whtankCount","text":"<p>Type: float</p> <p>Number of storage tanks per DHWHEATER, re built-up whType=Builtup, does not reflect wh_mult (wh_mult=2, wh_tankCount=3 -&gt; 6 tanks).</p> Units Legal Range Default Required Variability # x \\(\\geq\\) 1 1 No constant"},{"location":"shared/dhwheater-doc/#wheff","title":"whEff","text":"<p>Type: float</p> <p>Water heating efficiency, used in modeling whType=LARGESTORAGE and whType=LARGEINSTANTANEOUS.</p> Units Legal Range Default Required Variability 0 \\(&lt;\\) whEff \\(\\leq\\) 1 .82 No constant"},{"location":"shared/dhwheater-doc/#whsbl","title":"whSBL","text":"<p>Type: float</p> <p>Standby loss, used in modeling whType=LARGESTORAGE.</p> Units Legal Range Default Required Variability Btuh x \\(\\ge\\) 0 0 No constant"},{"location":"shared/dhwheater-doc/#whpilotpwr","title":"whPilotPwr","text":"<p>Type: float</p> <p>Pilot light consumption, included in fuel energy use of DHWHEATERs with whHeatSrc=FUEL.</p> Units Legal Range Default Required Variability Btuh x \\(\\ge\\) 0 0 No hourly"},{"location":"shared/dhwheater-doc/#whparelec","title":"whParElec","text":"<p>Type: float</p> <p>Parasitic electricity power, included in electrical energy use of all DHWHEATERs.</p> Units Legal Range Default Required Variability W x \\(\\ge\\) 0 0 No hourly"},{"location":"shared/dhwheater-doc/#whfadjelec-whfadjfuel","title":"whFAdjElec, whFAdjFuel","text":"<p>Type: float</p> <p>Water heater energy use modifiers.  Multiplies calculated use of electricity (whFAdjElec) and fuel (whFAdjFuel).  All components of energy use -- primary, backup, XBU (extra backup), and other auxiliary -- are modified before they are accumulated to whElecMtr and whFuelMtr.</p> Units Legal Range Default Required Variability \\(\\ge\\) 0 1 No subhourly"},{"location":"shared/dhwheater-doc/#whelecmtr","title":"whElecMtr","text":"<p>Type: mtrName</p> <p>Name of METER object, if any, by which DHWHEATER electrical energy use is recorded (under end use DHW).</p> Units Legal Range Default Required Variability name of a METER Parent DHWSYS wsElecMtr No constant"},{"location":"shared/dhwheater-doc/#whxbuenduse","title":"whxBUEndUse","text":"<p>Type: choice</p> <p>Specifies the whElecMtr end use, if any, to which extra backup energy is accumulated. In some water heater types, extra backup energy is modeled to maintain output temperature at wsTUse.  By default, extra backup energy is included in end use dhwBU.  whxBUEndUse allows specification of an alternative end use to which extra backup energy is accumulated.</p> Units Legal Range Default Required Variability end use code (extra backup accums to dhwBU) No constant"},{"location":"shared/dhwheater-doc/#whfuelmtr","title":"whFuelMtr","text":"<p>Type: mtrName</p> <p>Name of METER object, if any, by which DHWHEATER fuel energy use is recorded (under end use DHW).</p> Units Legal Range Default Required Variability name of a METER Parent DHWSYS wsFuelMtr No constant"},{"location":"shared/dhwheater-doc/#whtanktinit","title":"whTankTInit","text":"<p>Type: comma-separated list of 12 floats</p> <p>A list of 12 initial values for HPWH tank model layer temperatures, in bottom-to-top order.  If given, these values are used to initialize tank layer temperatures at the beginning of the warmup period.  Initialization is not repeated at the beginning of the main simulation.</p> <p>whTankTInit is allowed only for HPWH-based types (whHeatSrc=ASHPX or whHeatSrc=ResistanceX).</p> <p>whTankTInit is intended for use in empirical validation studies where the initial tank state needs to match measured data.  whTankTInit should not be generally used.  In the absence of whTankTInit, layer temperatures are initialized to the water heater setpoint inherited from the parent DHWSYS.</p> Units Legal Range Default Required Variability <sup>o</sup>F x \\(\\gt\\) 0 No constant"},{"location":"shared/dhwheater-doc/#enddhwheater","title":"endDHWHEATER","text":"<p>Optionally indicates the end of the DHWHEATER definition.</p> Units Legal Range Default Required Variability x \\(\\geq\\) 0 none No <p>Related Probes:</p> <ul> <li>@DHWHeater</li> </ul>"},{"location":"shared/enduses/","title":"Enduses","text":"Clg Cooling Htg Heating (includes heat pump compressor) HPBU Heat pump resistance heating (backup and defrost) DHW Domestic (service) hot water DHWBU Domestic (service) hot water heating backup (HPWH resistance) DHWMFL Domestic (service) hot water heating multi-family loop pumping and loss makeup FANC Fans, AC and cooling ventilation FANH Fans, heating FANV Fans, IAQ venting FAN Fans, other purposes AUX HVAC auxiliaries such as pumps PROC Process LIT Lighting RCP Receptacles EXT Exterior lighting REFR Refrigeration DISH Dishwashing DRY Clothes drying WASH Clothes washing COOK Cooking USER1 User-defined category 1 USER2 User-defined category 2 BT Battery charge power PV Photovoltaic power generation"}]}